{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","Tabs.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","Slideout.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","group","grouped","thisKey","hasOwnProperty","push","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","split","param","trim","arg","type","format","number","formatNumber","substr","select","c","Garnish","selector","plural","offset","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","value","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","httpProxy","proxy","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","stringToArray","findDeltaData","oldData","newData","deltaNames","initialDeltaValues","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","initialValues","encodeURIComponentExceptEqualChar","o","decodeURIComponent","paramLoop","paramName","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","uuid","crypto","randomUUID","getRandomValues","Uint8Array","toString","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","datetime","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","trapFocusWithin","container","on","ev","keyCode","$focusableElements","activeElement","shiftKey","preventDefault","stopPropagation","last","focus","first","setFocusWithin","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","charsLeftHtml","charsLeft","$doc","ready","Base","elementId","initialData","$header","$toolbar","$tabContainer","$editLink","$sidebarBtn","$loadSpinner","$body","$fieldsContainer","$sidebar","$footer","$siteSelectContainer","$siteSelect","$siteSpinner","$cancelBtn","$saveBtn","$saveSpinner","slideout","tabManager","showingSidebar","ignoreFailedRequest","init","defaults","target","data-icon","ltr","addListener","hideSidebar","showSidebar","$siteSelectOuterContainer","$contents","add","Slideout","containerElement","containerAttributes","novalidate","closeOnEsc","closeOnShadeClick","destroy","shortcutManager","registerShortcut","S_KEY","ctrl","saveElement","ESC_KEY","maybeCloseSlideout","$shade","$target","event","load","onShowHud","onCreateForm","setElementAttribute","attributes","getBaseData","prevalidate","showLoadSpinner","onBeginLoading","cancel","CancelToken","source","includeSites","isMultiSite","showSiteSwitcher","hideLoadSpinner","onEndLoading","updateForm","showHeader","hideHeader","switchSite","isDirty","newSiteId","refreshInitialData","fieldHtml","sites","siteInfo","$option","tabHtml","Tabs","$tab","$win","editUrl","sidebarHtml","ElementThumbLoader","requestAnimationFrame","headHtml","footHtml","serialize","isMobileBrowser","scrollTop","off","css","_closedSidebarStyles","offsetWidth","_openedSidebarStyles","one","addLayer","removeLayer","[object Object]","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeSlideout","onSaveElement","runQueue","shake","isOpen","onHideHud","base","loadHud","maybeCloseHud","closeHud","reloadForm","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","toolbarOffset","$searchContainer","$search","$filterBtn","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","filterHuds","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hide","initSources","menu","_handleStatusChange","bind","$options","filter","_setSite","criteria","_handleSiteChange","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","updateElementsIfSearchTextChanged","RETURN_KEY","_handleSortChange","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","_cancelRequests","getSourceContainer","$sources","$items","getSite","s","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_handleSourceSelectionChange","initSource","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","serialized","condition","preservePagination","updateElementsAction","$scrollContainer","_updateView","showActionTriggers","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","badgeCounts","_updateBadgeCounts","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","icon","selectViewMode","doesSourceHaveViewMode","updateFilterBtn","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","onHide","onSelectSite","onUpdateElements","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","selectedOption","firstSite","$firstVisibleSource","selectNewSource","get","$heading","$headings","nextUntil","setSiteId","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_collapseSource","aria-expanded","$childSources","not","_countResults","total","itemLabel","itemsLabel","min","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","$badge","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","$spinner","HUD","submitting","isNaN","showFilterHud","show","FilterHud","hasRules","loading","hudClass","$tip","baseInputName","$hud","hudHtml","bodyHtml","updateSizeAndPositionInternal","searchOffset","width","outerWidth","top","outerHeight","onShow","has","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","insertAfter","getElementContainer","setTotalVisible","setMorePending","isVerticalList","handle","_handleElementEditing","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","innerHeight","loadMoreElementsAction","getLoadMoreParams","$newElements","appendElements","onAppendElements","newElements","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","onRemoveElements","animateElementAway","animateCss","opacity","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","onModalSelect","modalSettings","allowSelfRelations","sourceElementId","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","single","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","updateTarget","onTargetTextChange","onFormSubmit","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","$menuBtn","$tabs","$selectedTab","$focusableTab","log","selectTab","makeTabFocusable","LOCATION_HASH","$initialTab","LEFT_KEY","RIGHT_KEY","contains","scrollToTab","updateMenuBtn","tab","_getTab","deselectTab","scrollLeft","elemScrollOffset","targetScrollLeft","tabWidth","ulWidth","HTMLElement","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","reorderItems","updateUI","addRow","row","maxItems","$row","$deleteBtn","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","$filenameInput","originalBasename","originalExtension","reloadIndex","refreshThumbnail","validateExtension","showImageEditor","AssetImageEditor","onSave","showImagePreview","startingWidth","startingHeight","PreviewFileModal","selectFilename","selectionStart","basename","extension","_parseFilename","selectionEnd","oldExt","newExt","originalFilename","ext","parts","pop","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","loadEditor","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","$viewsContainer","$views","innerWidth","_showSpinner","updateSizeAndPosition","fabric","StaticCanvas","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","_editorModeTransition","cropperData","_showCropper","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_positionProgressBar","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","_onDragStart","onDropTargetChange","_onDropTargetChange","onDragStop","_onFileDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFolderDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","fadeOutHelpers","showBatchPrompts","returnData","newParameterArray","choice","apply","_performBatchRequests","returnHelpersToDraggees","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","_onUploadStart","fileuploadprogressall","_onUploadProgress","fileuploaddone","_onUploadComplete","kind","allowedKinds","Uploader","defaultSourceParts","volumeSource","toArray","subfolderSource","setParams","_updateUrl","nestedSources","$thisSource","forEach","$s","$subContainer","checked","marginBottom","includeSubfolders","progress","loaded","setProgressPercentage","files","doReload","file","isLastUpload","_uploadFollowup","_updateAfterUpload","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","openInstance","selfDestruct","$focusedItem","_loadPreview","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","_expandFolder","dropTargetFolderId","$excludedSources","_collapseFolder","menuOptions","onClick","_createSubfolder","_renameFolder","_deleteFolder","ContextMenu","menuClass","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","$targetFolder","folder","_cleanUpTree","$label","oldName","newName","finally","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","finalCallback","doRequest","parameters","AssetSelectInput","hud","$uploadBtn","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","onSelectTransform","allowTransforms","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","showLoginModal","submitLogin","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","hideOnEsc","hideOnShadeClick","shadeClass","updateLogoutWarningMessage","decrementLogoutWarning","time","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","$allInstructions","$instructions","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initSpecialForms","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","_handleInputFocus","_handleInputBlur","announcements","hasUnreads","some","unread","contents","heading","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","saveShortcut","toggleNav","toggleClass","toggleSidebar","menuBtn","$tabsContainer","$tabsList","selectedTabIndex","updateResponsiveTables","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","endPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","updateButton","editableCategoryGroups","uid","defaultGroupHandle","selectedSourceHandle","selectedGroup","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","site","groupId","newCategoryBtnText","hudTrigger","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","cellIndex","parseTime","timeParse","Tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","range","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","aria-controls","updateColor","repeat","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$newSourceBtn","$footerBtnContainer","$loadingSpinner","sourceSort","updateSourcesOnSave","elementTypeName","availableTableAttributes","conditionBuilderHtml","conditionBuilderJs","setContainer","buildModal","addSource","$menuBtnContainer","data-type","sourceData","tableAttributes","scrollContainerToElement","$itemLabel","$itemInput","Heading","updateItemLabel","Source","CustomSource","$pendingHeading","$lastSourceItem","$indexSourceItem","getIndexSourceItem","isHeading","appendIndexSourceItem","isNew","$extraSources","nextAll","$sourceItem","BaseSource","$settingsContainer","isSelected","deselect","createSettings","createTableAttributesField","$columnCheckboxes","selectedAttributes","createTableColumnOption","createField","instructions","createCheckbox","$labelInput","$labelField","defaultId","swapPlaceholders","handleLabelInputChange","data-key","table","$rows","getHelper","caboose","Y_AXIS","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","onSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","queue","submittingForm","duplicatedElements","httpStatus","httpError","openingPreview","preview","previewToken","createdProvisionalDraft","autosaveDrafts","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","isProvisionalDraft","initForProvisionalDraft","draftId","isUnpublishedDraft","initForDraft","canUpdateSource","createDraft","listenForChanges","showStatusHud","BroadcastChannel","onmessage","canonicalId","sourceId","reload","saveDraftAction","statusIcons","stopListeningForChanges","deleteDraftAction","hashedCpEditUrl","provisional","createEditMetaBtn","publishDraftAction","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","_createSiteStatusField","$globalField","createLightswitchField","_showField","siteStatusValues","hasEnabled","hasDisabled","originalEnabledValue","originalSerializedStatus","enabledForSite","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","enabled","disabled","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","_saveSuccessMessage","_saveFailMessage","spinners","getPreviewToken","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","saveDraft","console","warn","isActive","modifiedFieldNames","preparedData","prepareData","deltaName","content-type","_afterSaveRequest","_showFailStatus","docTitle","draftName","revisionMenu","creator","timestamp","updatePreviewTargets","checkMetaValues","oldId","selectors","modifiedAttributes","$fields","afterUpdate","postMessage","deltaCallback","swapDuplicatedElementIds","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","handleFormSubmit","autosave","hashedAddAnotherRedirectUrl","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","copyDraggeeInputValuesToHelper","isVisible","initialize","initializeIfVisible","minRows","createRowObj","updateAddRowButton","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","onTextareaHeightChange","radioMode","toggle","applyToggleCheckbox","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","onTabOptionSelect","initElement","Element","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","_onUploadError","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","showHud","showing","closeOtherHUDs","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","_onDrag","_onDragStop","muteEvent","changed","_onSettle","_getOffMargin","_onMouseDown","_onMouseUp","dragging","_getMargin","mouseDistX","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","forceUpdateIframe","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","X-Craft-Token","xhrFields","withCredentials","crossDomain","handleSuccess","handleError","write","onResponse","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","autocapitalize","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$refreshBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","_updateRefreshBtn","_activeTarget","refresh","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","_handleResize","_handleTapStart","_handleTapMove","_handleTapEnd","graduationsCalculatedWidth","valueToPosition","touch","startLeft","curX","positionToValue","scaleMin","scaleMax","autoOpen","_cancelTransitionListeners","addPanel","removePanel","openPanels","panel","updateStyles","totalPanels","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_handleSelectedSortHeaderClick","_handleUnselectedSortHeaderClick","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","newSortDir","_handleSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","searchForTags","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","onFileAdd","paramObject","getInProgress","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    return (() => {\n                        let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                        if (format !== null && format !== 'integer') {\n                            throw `Message format 'number' is only supported for integer values.`;\n                        }\n                        let number = Craft.formatNumber(arg);\n                        let pos;\n                        if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                            number += `.${arg.substr(pos + 1)}`;\n                        }\n                        return number;\n                    })();\n                case 'none':\n                    return arg;\n                case 'select':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1SelectFormat.html\n                        selectStyle = (selector '{' message '}')+\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let select = this._tokenizePattern(token[2]);\n                        let c = select.length;\n                        let message = false;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (Garnish.isArray(select[i]) || !Garnish.isArray(select[i + 1])) {\n                                return false;\n                            }\n                            let selector = Craft.trim(select[i++]);\n                            if (message === false && selector === 'other' || selector == arg) {\n                                message = select[i].join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                case 'plural':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                        pluralStyle = [offsetValue] (selector '{' message '}')+\n                        offsetValue = \"offset:\" number\n                        selector = explicitValue | keyword\n                        explicitValue = '=' number  // adjacent, no white space in between\n                        keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                        message: see MessageFormat\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let plural = this._tokenizePattern(token[2]);\n                        const c = plural.length;\n                        let message = false;\n                        let offset = 0;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                                return false;\n                            }\n                            let selector = Craft.trim(plural[i++]);\n                            let selectorChars = [...selector];\n\n                            if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                                let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                                if (pos === -1) {\n                                    throw 'Message pattern is invalid.';\n                                }\n                                offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                                selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                            }\n                            if (\n                              message === false &&\n                              selector === 'other' ||\n                              selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                              selector === 'one' && arg - offset === 1\n                            ) {\n                                message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                    return p.replace('#', arg - offset);\n                                }).join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[^\\w]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Make sure oldData and newData are always strings. This is important because further below String.split is called.\n            oldData = typeof oldData === 'string' ? oldData : '';\n            newData = typeof newData === 'string' ? newData : '';\n\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            const grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            const encodeURIComponentExceptEqualChar = o => encodeURIComponent(o).replace('%3D', '=');\n\n            params = params.map(p => decodeURIComponent(p));\n\n            paramLoop: for (let p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (let n = deltaNames.length - 1; n >= 0; n--) {\n                    const paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponentExceptEqualChar(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponentExceptEqualChar(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        uuid: function() {\n            if (typeof crypto.randomUUID === 'function') {\n                return crypto.randomUUID();\n            }\n\n            // h/t https://stackoverflow.com/a/2117523/1688568\n            return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n              (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n            );\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $searchContainer: null,\n    $search: null,\n    $filterBtn: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    filterHuds: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n\n        this.$searchContainer = this.$toolbar.find('.search:first')\n        this.$search = this.$searchContainer.children('input:first');\n        this.$filterBtn = this.$searchContainer.children('.filter-btn:first');\n        this.$clearSearchBtn = this.$searchContainer.children('.clear:first');\n\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Filter HUDs\n        this.filterHuds = {};\n        this.addListener(this.$filterBtn, 'click', 'showFilterHud');\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    getSite: function() {\n        if (!this.siteId) {\n            return undefined;\n        }\n        return Craft.sites.find(s => s.id == this.siteId);\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: {\n                context: this.settings.context,\n                elementType: this.elementType,\n            }\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        if (this.filterHuds[this.sourceKey] && this.filterHuds[this.sourceKey].serialized) {\n            params.condition = this.filterHuds[this.sourceKey].serialized;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (typeof response.data.badgeCounts !== 'undefined') {\n                        this._updateBadgeCounts(response.data.badgeCounts);\n                    }\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        // Filter HUD\n        // ----------------------------------------------------------------------\n\n        this.updateFilterBtn();\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _updateBadgeCounts: function(badgeCounts) {\n        for (let sourceKey in badgeCounts) {\n            if (badgeCounts.hasOwnProperty(sourceKey)) {\n                const $source = this.getSourceByKey(sourceKey);\n                if ($source) {\n                    let $badge = $source.children('.badge');\n                    if (badgeCounts[sourceKey] !== null) {\n                        if (!$badge.length) {\n                            $badge = $('<span class=\"badge\"/>').appendTo($source);\n                        }\n                        $badge.text(badgeCounts[sourceKey]);\n                    } else if ($badge) {\n                        $badge.remove();\n                    }\n                }\n            }\n        }\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    },\n\n    showFilterHud: function() {\n        if (!this.filterHuds[this.sourceKey]) {\n            this.filterHuds[this.sourceKey] = new FilterHud(this, this.sourceKey);\n        } else {\n            this.filterHuds[this.sourceKey].show();\n        }\n    },\n\n    updateFilterBtn: function() {\n        if (this.filterHuds[this.sourceKey] && this.filterHuds[this.sourceKey].hasRules()) {\n            this.$filterBtn.addClass('active');\n        } else {\n            this.$filterBtn.removeClass('active');\n        }\n    },\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\nconst FilterHud = Garnish.HUD.extend({\n    elementIndex: null,\n    sourceKey: null,\n    loading: true,\n    serialized: null,\n\n    init: function(elementIndex, sourceKey) {\n        this.elementIndex = elementIndex;\n        this.sourceKey = sourceKey;\n\n        const $spinner = $('<div/>', {\n            class: 'spinner',\n        });\n\n        this.base(this.elementIndex.$filterBtn, $spinner, {\n            hudClass: 'hud element-filter-hud loading',\n        });\n\n        this.$tip.remove();\n        this.$tip = null;\n\n        const id = `element-filter-${Math.floor(Math.random() * 1000000000)}`;\n\n        Craft.sendActionRequest('POST', 'element-indexes/filter-hud', {\n            data: {\n                elementType: this.elementIndex.elementType,\n                source: this.sourceKey,\n                baseInputName: id,\n                id: id,\n            },\n        }).then(response => {\n            this.loading = false;\n            this.$hud.removeClass('loading');\n            $spinner.remove();\n\n            this.$main.append(response.data.hudHtml);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.bodyHtml);\n        }).catch(() => {\n            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n        });\n    },\n\n    updateSizeAndPositionInternal: function() {\n        const searchOffset = this.elementIndex.$searchContainer.offset();\n\n        this.$hud.css({\n            width: this.elementIndex.$searchContainer.outerWidth() - 2,\n            top: searchOffset.top + this.elementIndex.$searchContainer.outerHeight(),\n            left: searchOffset.left + 1,\n        });\n    },\n\n    onShow: function() {\n        this.elementIndex.$filterBtn.addClass('active');\n        this.base();\n    },\n\n    onHide: function() {\n        this.base();\n\n        this.elementIndex.updateFilterBtn();\n\n        // If something changed, update the elements\n        if (this.serialized !== (this.serialized = this.serialize())) {\n            this.elementIndex.updateElements();\n        }\n    },\n\n    hasRules: function() {\n        return this.$main.has('.condition-rule').length !== 0;\n    },\n\n    serialize: function() {\n        return this.hasRules() ? this.$body.serialize() : null;\n    }\n})\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    this.settings.input.refreshThumbnail(this.$element.data('id'));\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n        Garnish.$bod.addClass('no-scroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        Garnish.$bod.removeClass('no-scroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        if ($source.length && this.settings.context === 'index') {\n            this._updateUrl($source);\n        }\n\n        this.base();\n    },\n\n    _updateUrl: function($source) {\n        if (typeof history === 'undefined') {\n            return;\n        }\n\n        // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n        let nestedSources = [];\n        let $thisSource = $source;\n        let $parent;\n        while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n            nestedSources.unshift($thisSource);\n            $thisSource = $parent;\n        }\n\n        let uri = 'assets';\n        if ($thisSource.data('volume-handle')) {\n            uri += '/' + $thisSource.data('volume-handle');\n            nestedSources.forEach($s => {\n                uri += '/' + $s.children('.label').text();\n            });\n        }\n\n        history.replaceState({}, '', Craft.getUrl(uri));\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($source) {\n        const $label = $source.children('.label');\n        const oldName = Craft.trim($label.text())\n        const newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (!newName || newName === oldName) {\n            return;\n        }\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', 'assets/rename-folder', {\n            data: {\n                folderId: $source.data('folder-id'),\n                newName: newName,\n            },\n        }).then(response => {\n            if (response.data.success) {\n                $label.text(response.data.newName);\n\n                // Is this the selected source?\n                if ($source.data('key') === this.$source.data('key')) {\n                    this.updateElements();\n\n                    // Update the URL if we're on the Assets index\n                    if (this.settings.context === 'index') {\n                        this._updateUrl($source);\n                    }\n                }\n            } else if (response.data.error) {\n                alert(response.data.error);\n            }\n        }).finally(() => {\n            this.setIndexAvailable();\n        });\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.announcements.forEach(a => {\n                        contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                            '<div class=\"announcement-label-container\">' +\n                            `<div class=\"announcement-icon\">${a.icon}</div>` +\n                            `<div class=\"announcement-label\">${a.label}</div>` +\n                            '</div>' +\n                            `<h2>${a.heading}</h2>` +\n                            `<p>${a.body}</p>` +\n                            '</div>';\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            const uri = `categories/${group.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${group.id}\"`;\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $newSourceBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    elementTypeName: null,\n    availableTableAttributes: null,\n\n    conditionBuilderHtml: null,\n    conditionBuilderJs: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        const $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        Craft.sendActionRequest('POST', 'element-index-settings/get-customize-sources-modal-data', {\n            data: {\n                elementType: this.elementIndex.elementType,\n            },\n        }).then(response => {\n            this.$saveBtn.removeClass('disabled');\n            this.buildModal(response.data);\n        }).finally(() => {\n            this.$loadingSpinner.remove();\n        });\n\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        this.availableTableAttributes = response.availableTableAttributes;\n        this.elementTypeName = response.elementTypeName;\n        this.conditionBuilderHtml = response.conditionBuilderHtml;\n        this.conditionBuilderJs = response.conditionBuilderJs;\n\n        if (response.headHtml) {\n            Craft.appendHeadHtml(response.headHtml);\n        }\n        if (response.bodyHtml) {\n            Craft.appendFootHtml(response.bodyHtml);\n        }\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (let i = 0; i < response.sources.length; i++) {\n            this.sources.push(this.addSource(response.sources[i]));\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n\n        const $menuBtnContainer = $('<div class=\"buttons left\"/>').appendTo(this.$footer);\n        const $menuBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn add icon',\n            'aria-label': Craft.t('app', 'Add…'),\n            title: Craft.t('app', 'Add…'),\n        }).appendTo($menuBtnContainer);\n\n        const $menu = $('<div/>', {\n            class: 'menu',\n        }).appendTo($menuBtnContainer);\n        const $ul  = $('<ul/>').append(\n          $('<li/>').append(\n            $('<a/>', {\n                text: Craft.t('app', 'New heading'),\n                'data-type': 'heading',\n            })\n          )\n        ).appendTo($menu);\n\n        if (response.conditionBuilderHtml) {\n            $('<li/>').append(\n              $('<a/>', {\n                  text: Craft.t('app', 'New custom source'),\n                  'data-type': 'custom',\n              })\n            ).appendTo($ul);\n        }\n\n        new Garnish.MenuBtn($menuBtn, {\n            onOptionSelect: option => {\n                const sourceData = {\n                    type: $(option).data('type'),\n                };\n                if (sourceData.type === 'custom') {\n                    sourceData.key = `custom:${Craft.uuid()}`;\n                    sourceData.tableAttributes = [];\n                    sourceData.availableTableAttributes = [];\n                }\n                const source = this.addSource(sourceData);\n                Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n                source.select();\n                this.updateSourcesOnSave = true;\n            }\n        });\n    },\n\n    addSource: function(sourceData) {\n        const $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        const $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        const $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        let source;\n\n        if (sourceData.type === 'heading') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            if (sourceData.type === 'native') {\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            } else {\n                source = new Craft.CustomizeSourcesModal.CustomSource(this, $item, $itemLabel, $itemInput, sourceData);\n            }\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n        return source;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'element-index-settings/save-customize-sources-modal-settings', {\n            data: this.$container.serialize() + '&elementType=' + this.elementIndex.elementType,\n        }).then(() => {\n            // Have any changes been made to the source list?\n            if (this.updateSourcesOnSave) {\n                if (this.$elementIndexSourcesContainer.length) {\n                    let $lastSourceItem = null,\n                      $pendingHeading;\n\n                    for (let i = 0; i < this.sourceSort.$items.length; i++) {\n                        const $item = this.sourceSort.$items.eq(i),\n                          source = $item.data('source'),\n                          $indexSourceItem = source.getIndexSourceItem();\n\n                        if (!$indexSourceItem) {\n                            continue;\n                        }\n\n                        if (source.isHeading()) {\n                            $pendingHeading = $indexSourceItem;\n                            continue;\n                        }\n\n                        if ($pendingHeading) {\n                            this.appendIndexSourceItem($pendingHeading, $lastSourceItem);\n                            $lastSourceItem = $pendingHeading;\n                            $pendingHeading = null;\n                        }\n\n                        const isNew = !$indexSourceItem.parent().length;\n                        this.appendIndexSourceItem($indexSourceItem, $lastSourceItem);\n                        if (isNew) {\n                            this.elementIndex.initSource($indexSourceItem.children('a'));\n                        }\n                        $lastSourceItem = $indexSourceItem;\n                    }\n\n                    // Remove any additional sources (most likely just old headings)\n                    if ($lastSourceItem) {\n                        const $extraSources = $lastSourceItem.nextAll();\n                        this.elementIndex.sourceSelect.removeItems($extraSources);\n                        $extraSources.remove();\n                    }\n                }\n            }\n\n            // If a source is selected, have the element index select that one by default on the next request\n            if (this.selectedSource && this.selectedSource.sourceData.key) {\n                this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                this.elementIndex.updateElements();\n            }\n\n            Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n            this.hide();\n        }).catch(() => {\n            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n        }).finally(() => {\n            this.$saveSpinner.addClass('hidden');\n        });\n    },\n\n    appendIndexSourceItem: function($sourceItem, $lastSourceItem) {\n        if (!$lastSourceItem) {\n            $sourceItem.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $sourceItem.insertAfter($lastSourceItem);\n        }\n    },\n\n    destroy: function() {\n        for (let i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = $('<div/>').appendTo(this.modal.$sourceSettingsContainer);\n            this.createSettings(this.$settingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n    },\n\n    getIndexSourceItem: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        if (val) {\n            this.$itemLabel.text(val);\n        } else {\n            this.$itemLabel.html('&nbsp;');\n        }\n    },\n\n    destroy: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.data('source', null);\n        this.$item.remove();\n\n        if (this.$settingsContainer) {\n            this.$settingsContainer.remove();\n        }\n\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function($container) {\n        this.createTableAttributesField($container);\n    },\n\n    createTableAttributesField: function($container) {\n        if (!this.sourceData.tableAttributes.length && !this.modal.availableTableAttributes.length) {\n            return;\n        }\n\n        const $columnCheckboxes = $('<div/>');\n        const selectedAttributes = [];\n\n        $(`<input type=\"hidden\" name=\"sources[${this.sourceData.key}][tableAttributes][]\" value=\"\"/>`).appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 0; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        const availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            const [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        Craft.ui.createField($columnCheckboxes, {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        }).appendTo($container);\n    },\n\n    createTableColumnOption: function(key, label, checked) {\n        return $('<div class=\"customize-sources-table-column\"/>')\n          .append('<div class=\"icon move\"/>')\n          .append(\n            Craft.ui.createCheckbox({\n                label: Craft.escapeHtml(label),\n                name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                value: key,\n                checked: checked,\n            })\n          );\n    },\n\n    getIndexSourceItem: function() {\n        const $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.CustomSource = Craft.CustomizeSourcesModal.Source.extend({\n    $labelInput: null,\n\n    createSettings: function($container) {\n        const $labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Label'),\n            name: `sources[${this.sourceData.key}][label]`,\n            value: this.sourceData.label,\n        }).appendTo($container);\n        this.$labelInput = $labelField.find('.text');\n        const defaultId = `condition${Math.floor(Math.random() * 1000000)}`;\n\n        const swapPlaceholders = str => str\n          .replace(/__ID__/g, defaultId)\n          .replace(/__SOURCE_KEY__(?=-)/g, Craft.formatInputId(this.sourceData.key))\n          .replace(/__SOURCE_KEY__/g, this.sourceData.key);\n\n        const conditionBuilderHtml = this.sourceData.conditionBuilderHtml ||\n            swapPlaceholders(this.modal.conditionBuilderHtml);\n        const conditionBuilderJs = this.sourceData.conditionBuilderJs ||\n            swapPlaceholders(this.modal.conditionBuilderJs);\n\n        Craft.ui.createField($('<div/>').append(conditionBuilderHtml), {\n            id: 'criteria',\n            label: Craft.t('app', '{type} Criteria', {\n                type: this.modal.elementTypeName,\n            }),\n        }).appendTo($container);\n        Craft.appendFootHtml(conditionBuilderJs);\n\n        this.createTableAttributesField($container);\n\n        $container.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete custom source'))\n          .appendTo($container);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'destroy');\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.focus();\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    getIndexSourceItem: function() {\n        let $source = this.base();\n        if ($source || !this.$settingsContainer) {\n            if (this.$settingsContainer) {\n                $source.find('.label').text(this.$labelInput.val());\n            }\n            return $source;\n        }\n        return $('<li/>').append(\n          $('<a/>', {\n              'data-key': this.sourceData.key,\n          }).append(\n            $('<span/>', {\n                class: 'label',\n                text: this.$labelInput.val(),\n            })\n          )\n        );\n    },\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.focus();\n    },\n\n    createSettings: function($container) {\n        const $labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading || '',\n        }).appendTo($container);\n        this.$labelInput = $labelField.find('.text');\n\n        $container.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n          .appendTo($container);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'destroy');\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    getIndexSourceItem: function() {\n        const label = (this.$labelInput ? this.$labelInput.val() : null) || this.sourceData.heading || '';\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element draft editor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n    httpStatus: null,\n    httpError: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    scrollY: null,\n    createdProvisionalDraft: false,\n\n    bc: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (BroadcastChannel && !this.settings.revisionId) {\n            this.bc = new BroadcastChannel('DraftEditor');\n            this.bc.onmessage = ev => {\n                if (\n                  ev.data.event === 'saveDraft' &&\n                  ev.data.canonicalId === this.settings.sourceId &&\n                  (\n                    ev.data.draftId === this.settings.draftId ||\n                    (ev.data.isProvisionalDraft && !this.settings.draftId)\n                  )\n                ) {\n                    window.location.reload();\n                }\n            };\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const siteStatusValues = Object.values(this.settings.siteStatuses);\n        const hasEnabled = siteStatusValues.includes(true);\n        const hasDisabled = siteStatusValues.includes(false);\n        const originalEnabledValue = (hasEnabled && hasDisabled) ? '-' : (hasEnabled ? '1' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\"><strong>${this._saveFailMessage()}</strong></p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n\n            if (this.httpError) {\n                bodyHtml += `<p class=\"http-error code\">${Craft.escapeHtml(this.httpError)}</p>`;\n            }\n\n            if (this.httpStatus === 400) {\n                bodyHtml += `<button class=\"btn refresh-btn\">${Craft.t('app', 'Refresh')}</button>`;\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            hudClass: 'hud revision-status-hud',\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n\n        hud.$mainContainer.find('.refresh-btn').on('click', () => {\n            window.location.reload();\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            if (!this.enableAutosave) {\n                this.preview.on('open', () => {\n                    this.enableAutosave = true;\n                    this.listenForChanges();\n                });\n                this.preview.on('close', () => {\n                    this.enableAutosave = false;\n                    this.stopListeningForChanges();\n\n                    // Hide the status icon if the save was successful\n                    const $statusIcons = this.statusIcons();\n                    if ($statusIcons.hasClass('checkmark-icon')) {\n                        $statusIcons.addClass('hidden');\n                    }\n                });\n            }\n            this.preview.on('close', () => {\n                if (this.scrollY) {\n                    window.scrollTo(0, this.scrollY);\n                    this.scrollY = null;\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.scrollY = window.scrollY;\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional)\n              .catch(e => {\n                  console.warn('Couldn’t save draft:', e);\n              });\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject('Form already being submitted.');\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.httpStatus = null;\n            this.httpError = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject(response.data.errors);\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).parents().filter('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                this.afterUpdate(data);\n\n                if (this.bc) {\n                    this.bc.postMessage({\n                        event: 'saveDraft',\n                        canonicalId: this.settings.sourceId,\n                        draftId: this.settings.draftId,\n                        isProvisionalDraft: this.settings.isProvisionalDraft,\n                    });\n                }\n\n                resolve();\n            }).catch(e => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    if (e && e.response) {\n                        this.httpStatus = e.response.status;\n                        this.httpError = e.response.data ? e.response.data.error : null;\n                    }\n                    this._showFailStatus();\n                    reject(e);\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            const uri = `entries/${section.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${section.id}\"`;\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr({\n                type: 'text',\n                autocapitalize: 'off',\n            });\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n        Garnish.$doc.trigger('scroll');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe(true, true);\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe(true, true);\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    return (() => {\n                        let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                        if (format !== null && format !== 'integer') {\n                            throw `Message format 'number' is only supported for integer values.`;\n                        }\n                        let number = Craft.formatNumber(arg);\n                        let pos;\n                        if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                            number += `.${arg.substr(pos + 1)}`;\n                        }\n                        return number;\n                    })();\n                case 'none':\n                    return arg;\n                case 'select':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1SelectFormat.html\n                        selectStyle = (selector '{' message '}')+\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let select = this._tokenizePattern(token[2]);\n                        let c = select.length;\n                        let message = false;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (Garnish.isArray(select[i]) || !Garnish.isArray(select[i + 1])) {\n                                return false;\n                            }\n                            let selector = Craft.trim(select[i++]);\n                            if (message === false && selector === 'other' || selector == arg) {\n                                message = select[i].join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                case 'plural':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                        pluralStyle = [offsetValue] (selector '{' message '}')+\n                        offsetValue = \"offset:\" number\n                        selector = explicitValue | keyword\n                        explicitValue = '=' number  // adjacent, no white space in between\n                        keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                        message: see MessageFormat\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let plural = this._tokenizePattern(token[2]);\n                        const c = plural.length;\n                        let message = false;\n                        let offset = 0;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                                return false;\n                            }\n                            let selector = Craft.trim(plural[i++]);\n                            let selectorChars = [...selector];\n\n                            if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                                let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                                if (pos === -1) {\n                                    throw 'Message pattern is invalid.';\n                                }\n                                offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                                selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                            }\n                            if (\n                              message === false &&\n                              selector === 'other' ||\n                              selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                              selector === 'one' && arg - offset === 1\n                            ) {\n                                message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                    return p.replace('#', arg - offset);\n                                }).join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[^\\w]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Make sure oldData and newData are always strings. This is important because further below String.split is called.\n            oldData = typeof oldData === 'string' ? oldData : '';\n            newData = typeof newData === 'string' ? newData : '';\n\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            const grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            const encodeURIComponentExceptEqualChar = o => encodeURIComponent(o).replace('%3D', '=');\n\n            params = params.map(p => decodeURIComponent(p));\n\n            paramLoop: for (let p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (let n = deltaNames.length - 1; n >= 0; n--) {\n                    const paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponentExceptEqualChar(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponentExceptEqualChar(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        uuid: function() {\n            if (typeof crypto.randomUUID === 'function') {\n                return crypto.randomUUID();\n            }\n\n            // h/t https://stackoverflow.com/a/2117523/1688568\n            return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>\n              (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n            );\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $searchContainer: null,\n    $search: null,\n    $filterBtn: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    filterHuds: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n\n        this.$searchContainer = this.$toolbar.find('.search:first')\n        this.$search = this.$searchContainer.children('input:first');\n        this.$filterBtn = this.$searchContainer.children('.filter-btn:first');\n        this.$clearSearchBtn = this.$searchContainer.children('.clear:first');\n\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Filter HUDs\n        this.filterHuds = {};\n        this.addListener(this.$filterBtn, 'click', 'showFilterHud');\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    getSite: function() {\n        if (!this.siteId) {\n            return undefined;\n        }\n        return Craft.sites.find(s => s.id == this.siteId);\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: {\n                context: this.settings.context,\n                elementType: this.elementType,\n            }\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        if (this.filterHuds[this.sourceKey] && this.filterHuds[this.sourceKey].serialized) {\n            params.condition = this.filterHuds[this.sourceKey].serialized;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (typeof response.data.badgeCounts !== 'undefined') {\n                        this._updateBadgeCounts(response.data.badgeCounts);\n                    }\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        // Filter HUD\n        // ----------------------------------------------------------------------\n\n        this.updateFilterBtn();\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _updateBadgeCounts: function(badgeCounts) {\n        for (let sourceKey in badgeCounts) {\n            if (badgeCounts.hasOwnProperty(sourceKey)) {\n                const $source = this.getSourceByKey(sourceKey);\n                if ($source) {\n                    let $badge = $source.children('.badge');\n                    if (badgeCounts[sourceKey] !== null) {\n                        if (!$badge.length) {\n                            $badge = $('<span class=\"badge\"/>').appendTo($source);\n                        }\n                        $badge.text(badgeCounts[sourceKey]);\n                    } else if ($badge) {\n                        $badge.remove();\n                    }\n                }\n            }\n        }\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    },\n\n    showFilterHud: function() {\n        if (!this.filterHuds[this.sourceKey]) {\n            this.filterHuds[this.sourceKey] = new FilterHud(this, this.sourceKey);\n        } else {\n            this.filterHuds[this.sourceKey].show();\n        }\n    },\n\n    updateFilterBtn: function() {\n        if (this.filterHuds[this.sourceKey] && this.filterHuds[this.sourceKey].hasRules()) {\n            this.$filterBtn.addClass('active');\n        } else {\n            this.$filterBtn.removeClass('active');\n        }\n    },\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\nconst FilterHud = Garnish.HUD.extend({\n    elementIndex: null,\n    sourceKey: null,\n    loading: true,\n    serialized: null,\n\n    init: function(elementIndex, sourceKey) {\n        this.elementIndex = elementIndex;\n        this.sourceKey = sourceKey;\n\n        const $spinner = $('<div/>', {\n            class: 'spinner',\n        });\n\n        this.base(this.elementIndex.$filterBtn, $spinner, {\n            hudClass: 'hud element-filter-hud loading',\n        });\n\n        this.$tip.remove();\n        this.$tip = null;\n\n        const id = `element-filter-${Math.floor(Math.random() * 1000000000)}`;\n\n        Craft.sendActionRequest('POST', 'element-indexes/filter-hud', {\n            data: {\n                elementType: this.elementIndex.elementType,\n                source: this.sourceKey,\n                baseInputName: id,\n                id: id,\n            },\n        }).then(response => {\n            this.loading = false;\n            this.$hud.removeClass('loading');\n            $spinner.remove();\n\n            this.$main.append(response.data.hudHtml);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.bodyHtml);\n        }).catch(() => {\n            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n        });\n    },\n\n    updateSizeAndPositionInternal: function() {\n        const searchOffset = this.elementIndex.$searchContainer.offset();\n\n        this.$hud.css({\n            width: this.elementIndex.$searchContainer.outerWidth() - 2,\n            top: searchOffset.top + this.elementIndex.$searchContainer.outerHeight(),\n            left: searchOffset.left + 1,\n        });\n    },\n\n    onShow: function() {\n        this.elementIndex.$filterBtn.addClass('active');\n        this.base();\n    },\n\n    onHide: function() {\n        this.base();\n\n        this.elementIndex.updateFilterBtn();\n\n        // If something changed, update the elements\n        if (this.serialized !== (this.serialized = this.serialize())) {\n            this.elementIndex.updateElements();\n        }\n    },\n\n    hasRules: function() {\n        return this.$main.has('.condition-rule').length !== 0;\n    },\n\n    serialize: function() {\n        return this.hasRules() ? this.$body.serialize() : null;\n    }\n})\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    this.settings.input.refreshThumbnail(this.$element.data('id'));\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n        Garnish.$bod.addClass('no-scroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        Garnish.$bod.removeClass('no-scroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        if ($source.length && this.settings.context === 'index') {\n            this._updateUrl($source);\n        }\n\n        this.base();\n    },\n\n    _updateUrl: function($source) {\n        if (typeof history === 'undefined') {\n            return;\n        }\n\n        // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n        let nestedSources = [];\n        let $thisSource = $source;\n        let $parent;\n        while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n            nestedSources.unshift($thisSource);\n            $thisSource = $parent;\n        }\n\n        let uri = 'assets';\n        if ($thisSource.data('volume-handle')) {\n            uri += '/' + $thisSource.data('volume-handle');\n            nestedSources.forEach($s => {\n                uri += '/' + $s.children('.label').text();\n            });\n        }\n\n        history.replaceState({}, '', Craft.getUrl(uri));\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($source) {\n        const $label = $source.children('.label');\n        const oldName = Craft.trim($label.text())\n        const newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (!newName || newName === oldName) {\n            return;\n        }\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', 'assets/rename-folder', {\n            data: {\n                folderId: $source.data('folder-id'),\n                newName: newName,\n            },\n        }).then(response => {\n            if (response.data.success) {\n                $label.text(response.data.newName);\n\n                // Is this the selected source?\n                if ($source.data('key') === this.$source.data('key')) {\n                    this.updateElements();\n\n                    // Update the URL if we're on the Assets index\n                    if (this.settings.context === 'index') {\n                        this._updateUrl($source);\n                    }\n                }\n            } else if (response.data.error) {\n                alert(response.data.error);\n            }\n        }).finally(() => {\n            this.setIndexAvailable();\n        });\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.announcements.forEach(a => {\n                        contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                            '<div class=\"announcement-label-container\">' +\n                            `<div class=\"announcement-icon\">${a.icon}</div>` +\n                            `<div class=\"announcement-label\">${a.label}</div>` +\n                            '</div>' +\n                            `<h2>${a.heading}</h2>` +\n                            `<p>${a.body}</p>` +\n                            '</div>';\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            const uri = `categories/${group.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${group.id}\"`;\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $newSourceBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    elementTypeName: null,\n    availableTableAttributes: null,\n\n    conditionBuilderHtml: null,\n    conditionBuilderJs: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        const $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        Craft.sendActionRequest('POST', 'element-index-settings/get-customize-sources-modal-data', {\n            data: {\n                elementType: this.elementIndex.elementType,\n            },\n        }).then(response => {\n            this.$saveBtn.removeClass('disabled');\n            this.buildModal(response.data);\n        }).finally(() => {\n            this.$loadingSpinner.remove();\n        });\n\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        this.availableTableAttributes = response.availableTableAttributes;\n        this.elementTypeName = response.elementTypeName;\n        this.conditionBuilderHtml = response.conditionBuilderHtml;\n        this.conditionBuilderJs = response.conditionBuilderJs;\n\n        if (response.headHtml) {\n            Craft.appendHeadHtml(response.headHtml);\n        }\n        if (response.bodyHtml) {\n            Craft.appendFootHtml(response.bodyHtml);\n        }\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (let i = 0; i < response.sources.length; i++) {\n            this.sources.push(this.addSource(response.sources[i]));\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n\n        const $menuBtnContainer = $('<div class=\"buttons left\"/>').appendTo(this.$footer);\n        const $menuBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn add icon',\n            'aria-label': Craft.t('app', 'Add…'),\n            title: Craft.t('app', 'Add…'),\n        }).appendTo($menuBtnContainer);\n\n        const $menu = $('<div/>', {\n            class: 'menu',\n        }).appendTo($menuBtnContainer);\n        const $ul  = $('<ul/>').append(\n          $('<li/>').append(\n            $('<a/>', {\n                text: Craft.t('app', 'New heading'),\n                'data-type': 'heading',\n            })\n          )\n        ).appendTo($menu);\n\n        if (response.conditionBuilderHtml) {\n            $('<li/>').append(\n              $('<a/>', {\n                  text: Craft.t('app', 'New custom source'),\n                  'data-type': 'custom',\n              })\n            ).appendTo($ul);\n        }\n\n        new Garnish.MenuBtn($menuBtn, {\n            onOptionSelect: option => {\n                const sourceData = {\n                    type: $(option).data('type'),\n                };\n                if (sourceData.type === 'custom') {\n                    sourceData.key = `custom:${Craft.uuid()}`;\n                    sourceData.tableAttributes = [];\n                    sourceData.availableTableAttributes = [];\n                }\n                const source = this.addSource(sourceData);\n                Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n                source.select();\n                this.updateSourcesOnSave = true;\n            }\n        });\n    },\n\n    addSource: function(sourceData) {\n        const $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        const $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        const $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        let source;\n\n        if (sourceData.type === 'heading') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            if (sourceData.type === 'native') {\n                source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            } else {\n                source = new Craft.CustomizeSourcesModal.CustomSource(this, $item, $itemLabel, $itemInput, sourceData);\n            }\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n        return source;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'element-index-settings/save-customize-sources-modal-settings', {\n            data: this.$container.serialize() + '&elementType=' + this.elementIndex.elementType,\n        }).then(() => {\n            // Have any changes been made to the source list?\n            if (this.updateSourcesOnSave) {\n                if (this.$elementIndexSourcesContainer.length) {\n                    let $lastSourceItem = null,\n                      $pendingHeading;\n\n                    for (let i = 0; i < this.sourceSort.$items.length; i++) {\n                        const $item = this.sourceSort.$items.eq(i),\n                          source = $item.data('source'),\n                          $indexSourceItem = source.getIndexSourceItem();\n\n                        if (!$indexSourceItem) {\n                            continue;\n                        }\n\n                        if (source.isHeading()) {\n                            $pendingHeading = $indexSourceItem;\n                            continue;\n                        }\n\n                        if ($pendingHeading) {\n                            this.appendIndexSourceItem($pendingHeading, $lastSourceItem);\n                            $lastSourceItem = $pendingHeading;\n                            $pendingHeading = null;\n                        }\n\n                        const isNew = !$indexSourceItem.parent().length;\n                        this.appendIndexSourceItem($indexSourceItem, $lastSourceItem);\n                        if (isNew) {\n                            this.elementIndex.initSource($indexSourceItem.children('a'));\n                        }\n                        $lastSourceItem = $indexSourceItem;\n                    }\n\n                    // Remove any additional sources (most likely just old headings)\n                    if ($lastSourceItem) {\n                        const $extraSources = $lastSourceItem.nextAll();\n                        this.elementIndex.sourceSelect.removeItems($extraSources);\n                        $extraSources.remove();\n                    }\n                }\n            }\n\n            // If a source is selected, have the element index select that one by default on the next request\n            if (this.selectedSource && this.selectedSource.sourceData.key) {\n                this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                this.elementIndex.updateElements();\n            }\n\n            Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n            this.hide();\n        }).catch(() => {\n            Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n        }).finally(() => {\n            this.$saveSpinner.addClass('hidden');\n        });\n    },\n\n    appendIndexSourceItem: function($sourceItem, $lastSourceItem) {\n        if (!$lastSourceItem) {\n            $sourceItem.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $sourceItem.insertAfter($lastSourceItem);\n        }\n    },\n\n    destroy: function() {\n        for (let i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = $('<div/>').appendTo(this.modal.$sourceSettingsContainer);\n            this.createSettings(this.$settingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n    },\n\n    getIndexSourceItem: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        if (val) {\n            this.$itemLabel.text(val);\n        } else {\n            this.$itemLabel.html('&nbsp;');\n        }\n    },\n\n    destroy: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.data('source', null);\n        this.$item.remove();\n\n        if (this.$settingsContainer) {\n            this.$settingsContainer.remove();\n        }\n\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function($container) {\n        this.createTableAttributesField($container);\n    },\n\n    createTableAttributesField: function($container) {\n        if (!this.sourceData.tableAttributes.length && !this.modal.availableTableAttributes.length) {\n            return;\n        }\n\n        const $columnCheckboxes = $('<div/>');\n        const selectedAttributes = [];\n\n        $(`<input type=\"hidden\" name=\"sources[${this.sourceData.key}][tableAttributes][]\" value=\"\"/>`).appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 0; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        const availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            const [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        Craft.ui.createField($columnCheckboxes, {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        }).appendTo($container);\n    },\n\n    createTableColumnOption: function(key, label, checked) {\n        return $('<div class=\"customize-sources-table-column\"/>')\n          .append('<div class=\"icon move\"/>')\n          .append(\n            Craft.ui.createCheckbox({\n                label: Craft.escapeHtml(label),\n                name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                value: key,\n                checked: checked,\n            })\n          );\n    },\n\n    getIndexSourceItem: function() {\n        const $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.CustomSource = Craft.CustomizeSourcesModal.Source.extend({\n    $labelInput: null,\n\n    createSettings: function($container) {\n        const $labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Label'),\n            name: `sources[${this.sourceData.key}][label]`,\n            value: this.sourceData.label,\n        }).appendTo($container);\n        this.$labelInput = $labelField.find('.text');\n        const defaultId = `condition${Math.floor(Math.random() * 1000000)}`;\n\n        const swapPlaceholders = str => str\n          .replace(/__ID__/g, defaultId)\n          .replace(/__SOURCE_KEY__(?=-)/g, Craft.formatInputId(this.sourceData.key))\n          .replace(/__SOURCE_KEY__/g, this.sourceData.key);\n\n        const conditionBuilderHtml = this.sourceData.conditionBuilderHtml ||\n            swapPlaceholders(this.modal.conditionBuilderHtml);\n        const conditionBuilderJs = this.sourceData.conditionBuilderJs ||\n            swapPlaceholders(this.modal.conditionBuilderJs);\n\n        Craft.ui.createField($('<div/>').append(conditionBuilderHtml), {\n            id: 'criteria',\n            label: Craft.t('app', '{type} Criteria', {\n                type: this.modal.elementTypeName,\n            }),\n        }).appendTo($container);\n        Craft.appendFootHtml(conditionBuilderJs);\n\n        this.createTableAttributesField($container);\n\n        $container.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete custom source'))\n          .appendTo($container);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'destroy');\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.focus();\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    getIndexSourceItem: function() {\n        let $source = this.base();\n        if ($source || !this.$settingsContainer) {\n            if (this.$settingsContainer) {\n                $source.find('.label').text(this.$labelInput.val());\n            }\n            return $source;\n        }\n        return $('<li/>').append(\n          $('<a/>', {\n              'data-key': this.sourceData.key,\n          }).append(\n            $('<span/>', {\n                class: 'label',\n                text: this.$labelInput.val(),\n            })\n          )\n        );\n    },\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.focus();\n    },\n\n    createSettings: function($container) {\n        const $labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading || '',\n        }).appendTo($container);\n        this.$labelInput = $labelField.find('.text');\n\n        $container.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n          .appendTo($container);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'destroy');\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    getIndexSourceItem: function() {\n        const label = (this.$labelInput ? this.$labelInput.val() : null) || this.sourceData.heading || '';\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element draft editor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n    httpStatus: null,\n    httpError: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    scrollY: null,\n    createdProvisionalDraft: false,\n\n    bc: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (BroadcastChannel && !this.settings.revisionId) {\n            this.bc = new BroadcastChannel('DraftEditor');\n            this.bc.onmessage = ev => {\n                if (\n                  ev.data.event === 'saveDraft' &&\n                  ev.data.canonicalId === this.settings.sourceId &&\n                  (\n                    ev.data.draftId === this.settings.draftId ||\n                    (ev.data.isProvisionalDraft && !this.settings.draftId)\n                  )\n                ) {\n                    window.location.reload();\n                }\n            };\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const siteStatusValues = Object.values(this.settings.siteStatuses);\n        const hasEnabled = siteStatusValues.includes(true);\n        const hasDisabled = siteStatusValues.includes(false);\n        const originalEnabledValue = (hasEnabled && hasDisabled) ? '-' : (hasEnabled ? '1' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\"><strong>${this._saveFailMessage()}</strong></p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n\n            if (this.httpError) {\n                bodyHtml += `<p class=\"http-error code\">${Craft.escapeHtml(this.httpError)}</p>`;\n            }\n\n            if (this.httpStatus === 400) {\n                bodyHtml += `<button class=\"btn refresh-btn\">${Craft.t('app', 'Refresh')}</button>`;\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            hudClass: 'hud revision-status-hud',\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n\n        hud.$mainContainer.find('.refresh-btn').on('click', () => {\n            window.location.reload();\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            if (!this.enableAutosave) {\n                this.preview.on('open', () => {\n                    this.enableAutosave = true;\n                    this.listenForChanges();\n                });\n                this.preview.on('close', () => {\n                    this.enableAutosave = false;\n                    this.stopListeningForChanges();\n\n                    // Hide the status icon if the save was successful\n                    const $statusIcons = this.statusIcons();\n                    if ($statusIcons.hasClass('checkmark-icon')) {\n                        $statusIcons.addClass('hidden');\n                    }\n                });\n            }\n            this.preview.on('close', () => {\n                if (this.scrollY) {\n                    window.scrollTo(0, this.scrollY);\n                    this.scrollY = null;\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.scrollY = window.scrollY;\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional)\n              .catch(e => {\n                  console.warn('Couldn’t save draft:', e);\n              });\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject('Form already being submitted.');\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.httpStatus = null;\n            this.httpError = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject(response.data.errors);\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).parents().filter('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                this.afterUpdate(data);\n\n                if (this.bc) {\n                    this.bc.postMessage({\n                        event: 'saveDraft',\n                        canonicalId: this.settings.sourceId,\n                        draftId: this.settings.draftId,\n                        isProvisionalDraft: this.settings.isProvisionalDraft,\n                    });\n                }\n\n                resolve();\n            }).catch(e => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    if (e && e.response) {\n                        this.httpStatus = e.response.status;\n                        this.httpError = e.response.data ? e.response.data.error : null;\n                    }\n                    this._showFailStatus();\n                    reject(e);\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            const uri = `entries/${section.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${section.id}\"`;\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr({\n                type: 'text',\n                autocapitalize: 'off',\n            });\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n        Garnish.$doc.trigger('scroll');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe(true, true);\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe(true, true);\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}