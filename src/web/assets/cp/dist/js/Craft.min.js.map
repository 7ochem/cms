{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","Tabs.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","Slideout.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","group","grouped","thisKey","hasOwnProperty","push","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","value","Garnish","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","httpProxy","proxy","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","stringToArray","findDeltaData","oldData","newData","deltaNames","initialDeltaValues","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","initialValues","paramName","o","decodeURIComponent","paramLoop","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","datetime","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","trapFocusWithin","container","on","ev","keyCode","$focusableElements","activeElement","shiftKey","preventDefault","stopPropagation","last","focus","first","setFocusWithin","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","charsLeftHtml","charsLeft","$doc","ready","Base","elementId","initialData","$header","$toolbar","$tabContainer","$editLink","$sidebarBtn","$loadSpinner","$body","$fieldsContainer","$sidebar","$footer","$siteSelectContainer","$siteSelect","$siteSpinner","$cancelBtn","$saveBtn","$saveSpinner","slideout","tabManager","showingSidebar","ignoreFailedRequest","init","defaults","target","data-icon","ltr","addListener","hideSidebar","showSidebar","$siteSelectOuterContainer","$contents","add","Slideout","containerElement","containerAttributes","novalidate","closeOnEsc","closeOnShadeClick","destroy","shortcutManager","registerShortcut","S_KEY","ctrl","saveElement","ESC_KEY","maybeCloseSlideout","$shade","$target","event","load","onShowHud","onCreateForm","setElementAttribute","attributes","getBaseData","prevalidate","showLoadSpinner","onBeginLoading","cancel","CancelToken","source","includeSites","isMultiSite","showSiteSwitcher","hideLoadSpinner","onEndLoading","updateForm","showHeader","hideHeader","switchSite","isDirty","newSiteId","refreshInitialData","fieldHtml","sites","siteInfo","$option","tabHtml","Tabs","$tab","$win","editUrl","sidebarHtml","ElementThumbLoader","requestAnimationFrame","headHtml","footHtml","serialize","isMobileBrowser","scrollTop","off","css","_closedSidebarStyles","offsetWidth","_openedSidebarStyles","one","addLayer","removeLayer","[object Object]","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeSlideout","onSaveElement","runQueue","shake","isOpen","onHideHud","base","loadHud","maybeCloseHud","closeHud","reloadForm","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hide","initSources","menu","_handleStatusChange","bind","$options","filter","_setSite","criteria","_handleSiteChange","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","updateElementsIfSearchTextChanged","RETURN_KEY","_handleSortChange","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","_cancelRequests","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_handleSourceSelectionChange","initSource","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","updateElementsAction","$scrollContainer","_updateView","showActionTriggers","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","onHide","onSelectSite","onUpdateElements","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","selectedOption","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_collapseSource","aria-expanded","$childSources","not","_countResults","total","itemLabel","itemsLabel","min","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","$spinner","HUD","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","insertAfter","getElementContainer","setTotalVisible","setMorePending","isVerticalList","handle","_handleElementEditing","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","innerHeight","top","outerHeight","loadMoreElementsAction","getLoadMoreParams","$newElements","appendElements","onAppendElements","newElements","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","onModalSelect","modalSettings","allowSelfRelations","sourceElementId","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","single","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","updateTarget","onTargetTextChange","onFormSubmit","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","$menuBtn","$tabs","$selectedTab","$focusableTab","log","selectTab","makeTabFocusable","LOCATION_HASH","$initialTab","LEFT_KEY","RIGHT_KEY","contains","scrollToTab","updateMenuBtn","tab","_getTab","deselectTab","scrollLeft","elemScrollOffset","targetScrollLeft","tabWidth","ulWidth","HTMLElement","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","reorderItems","updateUI","addRow","row","maxItems","$row","$deleteBtn","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","$filenameInput","originalBasename","originalExtension","reloadIndex","refreshThumbnail","validateExtension","showImageEditor","AssetImageEditor","onSave","showImagePreview","startingWidth","startingHeight","PreviewFileModal","selectFilename","selectionStart","basename","extension","_parseFilename","selectionEnd","oldExt","newExt","originalFilename","ext","parts","pop","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","loadEditor","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","$viewsContainer","$views","innerWidth","_showSpinner","updateSizeAndPosition","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","_editorModeTransition","cropperData","_showCropper","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_positionProgressBar","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","_onDragStart","onDropTargetChange","_onDropTargetChange","onDragStop","_onFileDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFolderDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","fadeOutHelpers","showBatchPrompts","returnData","newParameterArray","choice","apply","_performBatchRequests","returnHelpersToDraggees","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","_onUploadStart","fileuploadprogressall","_onUploadProgress","fileuploaddone","_onUploadComplete","kind","allowedKinds","Uploader","defaultSourceParts","volumeSource","toArray","s","subfolderSource","setParams","nestedSources","$thisSource","forEach","$s","$subContainer","checked","marginBottom","includeSubfolders","progress","loaded","setProgressPercentage","files","doReload","file","isLastUpload","_uploadFollowup","_updateAfterUpload","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","openInstance","selfDestruct","$focusedItem","_loadPreview","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","_expandFolder","dropTargetFolderId","$excludedSources","_collapseFolder","menuOptions","onClick","_createSubfolder","_renameFolder","_deleteFolder","ContextMenu","menuClass","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","$targetFolder","folder","_cleanUpTree","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","finalCallback","doRequest","parameters","AssetSelectInput","hud","$uploadBtn","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","onSelectTransform","allowTransforms","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","showLoginModal","submitLogin","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","hideOnEsc","hideOnShadeClick","shadeClass","updateLogoutWarningMessage","decrementLogoutWarning","time","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","$allInstructions","$instructions","$label","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initSpecialForms","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","_handleInputFocus","_handleInputBlur","announcements","hasUnreads","some","unread","contents","timestamp","heading","onShow","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","saveShortcut","toggleNav","toggleClass","toggleSidebar","menuBtn","$tabsContainer","$tabsList","selectedTabIndex","updateResponsiveTables","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","endPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","updateButton","editableCategoryGroups","uid","defaultGroupHandle","selectedSourceHandle","selectedGroup","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","primarySiteId","groupId","newCategoryBtnText","hudTrigger","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","select","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","range","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","aria-controls","updateColor","repeat","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","getHelper","caboose","Y_AXIS","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","onSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","lastSerializedValue","listeningForChanges","pauseLevel","saving","queue","submittingForm","duplicatedElements","openingPreview","preview","previewToken","createdProvisionalDraft","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","isProvisionalDraft","initForProvisionalDraft","draftId","isUnpublishedDraft","initForDraft","canUpdateSource","createDraft","listenForChanges","showStatusHud","autosaveDrafts","saveDraftAction","statusIcons","stopListeningForChanges","deleteDraftAction","hashedCpEditUrl","provisional","createEditMetaBtn","publishDraftAction","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","site","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","bodyHtml","_saveSuccessMessage","_saveFailMessage","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","saveDraft","isActive","modifiedFieldNames","preparedData","prepareData","deltaName","content-type","_afterSaveRequest","_showFailStatus","docTitle","draftName","revisionMenu","creator","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","selectors","modifiedAttributes","$fields","deltaCallback","swapDuplicatedElementIds","idsRE","pre","post","newTarget","$statusIcons","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","$hud","handleFormSubmit","autosave","hashedAddAnotherRedirectUrl","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","copyDraggeeInputValuesToHelper","isVisible","initialize","initializeIfVisible","minRows","createRowObj","updateAddRowButton","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","onTextareaHeightChange","radioMode","toggle","applyToggleCheckbox","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","onTabOptionSelect","initElement","Element","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","_onUploadError","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","showHud","showing","hudClass","closeOtherHUDs","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","_onDrag","_onDragStop","muteEvent","changed","_onSettle","_getOffMargin","_onMouseDown","_onMouseUp","dragging","_getMargin","mouseDistX","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","forceUpdateIframe","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","X-Craft-Token","xhrFields","withCredentials","crossDomain","handleSuccess","handleError","write","onResponse","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$refreshBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","_updateRefreshBtn","_activeTarget","refresh","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","_handleResize","_handleTapStart","_handleTapMove","_handleTapEnd","graduationsCalculatedWidth","valueToPosition","touch","startLeft","curX","positionToValue","scaleMin","scaleMax","autoOpen","_cancelTransitionListeners","addPanel","removePanel","openPanels","panel","updateStyles","totalPanels","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_handleSelectedSortHeaderClick","_handleUnselectedSortHeaderClick","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","newSortDir","_handleSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","searchForTags","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","onFileAdd","paramObject","getInProgress","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n            params = params.map(o => decodeURIComponent(o))\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponent(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponent(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            context: this.settings.context,\n            elementType: this.elementType,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    this.settings.input.refreshThumbnail(this.$element.data('id'));\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if ($source.length && this.settings.context === 'index' && typeof history !== 'undefined') {\n            // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n            let nestedSources = [];\n            let $thisSource = $source;\n            let $parent;\n            while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n                nestedSources.unshift($thisSource);\n                $thisSource = $parent;\n            }\n\n            let uri = 'assets';\n            if ($thisSource.data('volume-handle')) {\n                uri += '/' + $thisSource.data('volume-handle');\n                nestedSources.forEach($s => {\n                    uri += '/' + $s.children('.label').text();\n                });\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.group(Craft.announcements, 'timestamp').forEach(([announcements, timestamp]) => {\n                        announcements.forEach((a, i) => {\n                            contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                                (i === 0 ? `<div class=\"timestamp\">${a.timestamp}</div>` : '') +\n                                `<h2>${a.heading}</h2>` +\n                                `<p>${a.body}</p>` +\n                                '</div>';\n                        });\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdProvisionalDraft: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            this.checkForm();\n            this.listenForChanges();\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\">${this._saveFailMessage()}</p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject();\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                class: 'extralight',\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).closest('.field').filter(':not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                resolve();\n            }).catch(() => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    this._showFailStatus();\n                    reject();\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n            params = params.map(o => decodeURIComponent(o))\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponent(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponent(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            context: this.settings.context,\n            elementType: this.elementType,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    this.settings.input.refreshThumbnail(this.$element.data('id'));\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if ($source.length && this.settings.context === 'index' && typeof history !== 'undefined') {\n            // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n            let nestedSources = [];\n            let $thisSource = $source;\n            let $parent;\n            while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n                nestedSources.unshift($thisSource);\n                $thisSource = $parent;\n            }\n\n            let uri = 'assets';\n            if ($thisSource.data('volume-handle')) {\n                uri += '/' + $thisSource.data('volume-handle');\n                nestedSources.forEach($s => {\n                    uri += '/' + $s.children('.label').text();\n                });\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.group(Craft.announcements, 'timestamp').forEach(([announcements, timestamp]) => {\n                        announcements.forEach((a, i) => {\n                            contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                                (i === 0 ? `<div class=\"timestamp\">${a.timestamp}</div>` : '') +\n                                `<h2>${a.heading}</h2>` +\n                                `<p>${a.body}</p>` +\n                                '</div>';\n                        });\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdProvisionalDraft: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            this.checkForm();\n            this.listenForChanges();\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\">${this._saveFailMessage()}</p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject();\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                class: 'extralight',\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).closest('.field').filter(':not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                resolve();\n            }).catch(() => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    this._showFailStatus();\n                    reject();\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}