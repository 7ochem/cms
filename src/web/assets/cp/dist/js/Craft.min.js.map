{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","Tabs.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","Slideout.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","group","grouped","thisKey","hasOwnProperty","push","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","split","param","trim","arg","type","format","number","formatNumber","substr","select","c","Garnish","selector","plural","offset","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","value","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","httpProxy","proxy","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","stringToArray","findDeltaData","oldData","newData","deltaNames","initialDeltaValues","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","initialValues","encodeURIComponentExceptEqualChar","o","decodeURIComponent","paramLoop","paramName","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","datetime","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","trapFocusWithin","container","on","ev","keyCode","$focusableElements","activeElement","shiftKey","preventDefault","stopPropagation","last","focus","first","setFocusWithin","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","charsLeftHtml","charsLeft","$doc","ready","Base","elementId","initialData","$header","$toolbar","$tabContainer","$editLink","$sidebarBtn","$loadSpinner","$body","$fieldsContainer","$sidebar","$footer","$siteSelectContainer","$siteSelect","$siteSpinner","$cancelBtn","$saveBtn","$saveSpinner","slideout","tabManager","showingSidebar","ignoreFailedRequest","init","defaults","target","data-icon","ltr","addListener","hideSidebar","showSidebar","$siteSelectOuterContainer","$contents","add","Slideout","containerElement","containerAttributes","novalidate","closeOnEsc","closeOnShadeClick","destroy","shortcutManager","registerShortcut","S_KEY","ctrl","saveElement","ESC_KEY","maybeCloseSlideout","$shade","$target","event","load","onShowHud","onCreateForm","setElementAttribute","attributes","getBaseData","prevalidate","showLoadSpinner","onBeginLoading","cancel","CancelToken","source","includeSites","isMultiSite","showSiteSwitcher","hideLoadSpinner","onEndLoading","updateForm","showHeader","hideHeader","switchSite","isDirty","newSiteId","refreshInitialData","fieldHtml","sites","siteInfo","$option","tabHtml","Tabs","$tab","$win","editUrl","sidebarHtml","ElementThumbLoader","requestAnimationFrame","headHtml","footHtml","serialize","isMobileBrowser","scrollTop","off","css","_closedSidebarStyles","offsetWidth","_openedSidebarStyles","one","addLayer","removeLayer","[object Object]","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeSlideout","onSaveElement","runQueue","shake","isOpen","onHideHud","base","loadHud","maybeCloseHud","closeHud","reloadForm","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hide","initSources","menu","_handleStatusChange","bind","$options","filter","_setSite","criteria","_handleSiteChange","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","updateElementsIfSearchTextChanged","RETURN_KEY","_handleSortChange","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","_cancelRequests","getSourceContainer","$sources","$items","getSite","s","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_handleSourceSelectionChange","initSource","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","updateElementsAction","$scrollContainer","_updateView","showActionTriggers","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","badgeCounts","_updateBadgeCounts","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","onHide","onSelectSite","onUpdateElements","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","selectedOption","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_collapseSource","aria-expanded","$childSources","not","_countResults","total","itemLabel","itemsLabel","min","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","$badge","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","$spinner","HUD","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","insertAfter","getElementContainer","setTotalVisible","setMorePending","isVerticalList","handle","_handleElementEditing","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","innerHeight","top","outerHeight","loadMoreElementsAction","getLoadMoreParams","$newElements","appendElements","onAppendElements","newElements","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","onModalSelect","modalSettings","allowSelfRelations","sourceElementId","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","single","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","updateTarget","onTargetTextChange","onFormSubmit","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","$menuBtn","$tabs","$selectedTab","$focusableTab","log","selectTab","makeTabFocusable","LOCATION_HASH","$initialTab","LEFT_KEY","RIGHT_KEY","contains","scrollToTab","updateMenuBtn","tab","_getTab","deselectTab","scrollLeft","elemScrollOffset","targetScrollLeft","tabWidth","ulWidth","HTMLElement","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","reorderItems","updateUI","addRow","row","maxItems","$row","$deleteBtn","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","$filenameInput","originalBasename","originalExtension","reloadIndex","replaceAsset","replaceElement","refreshThumbnail","validateExtension","showImageEditor","AssetImageEditor","onSave","showImagePreview","startingWidth","startingHeight","PreviewFileModal","selectFilename","selectionStart","basename","extension","_parseFilename","selectionEnd","oldExt","newExt","originalFilename","ext","parts","pop","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","loadEditor","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","$viewsContainer","$views","innerWidth","_showSpinner","updateSizeAndPosition","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","_editorModeTransition","cropperData","_showCropper","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_positionProgressBar","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","_onDragStart","onDropTargetChange","_onDropTargetChange","onDragStop","_onFileDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFolderDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","fadeOutHelpers","showBatchPrompts","returnData","newParameterArray","choice","apply","_performBatchRequests","returnHelpersToDraggees","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","_onUploadStart","fileuploadprogressall","_onUploadProgress","fileuploaddone","_onUploadComplete","kind","allowedKinds","Uploader","defaultSourceParts","volumeSource","toArray","subfolderSource","setParams","_updateUrl","nestedSources","$thisSource","forEach","$s","$subContainer","checked","marginBottom","includeSubfolders","progress","loaded","setProgressPercentage","files","doReload","file","isLastUpload","_uploadFollowup","_updateAfterUpload","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","openInstance","selfDestruct","$focusedItem","_loadPreview","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","_expandFolder","dropTargetFolderId","$excludedSources","_collapseFolder","menuOptions","onClick","_createSubfolder","_renameFolder","_deleteFolder","ContextMenu","menuClass","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","$targetFolder","folder","_cleanUpTree","$label","oldName","newName","finally","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","finalCallback","doRequest","parameters","AssetSelectInput","hud","$uploadBtn","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","replaceWithId","$existing","selectUploadedFile","$newElement","margin","slotsTaken","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","onSelectTransform","allowTransforms","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","showLoginModal","submitLogin","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","hideOnEsc","hideOnShadeClick","shadeClass","updateLogoutWarningMessage","decrementLogoutWarning","time","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","$allInstructions","$instructions","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initSpecialForms","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","_handleInputFocus","_handleInputBlur","announcements","hasUnreads","some","unread","contents","heading","onShow","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","saveShortcut","toggleNav","toggleClass","toggleSidebar","menuBtn","$tabsContainer","$tabsList","selectedTabIndex","updateResponsiveTables","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","endPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","updateButton","editableCategoryGroups","uid","defaultGroupHandle","selectedSourceHandle","selectedGroup","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","site","groupId","newCategoryBtnText","hudTrigger","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","range","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","aria-controls","updateColor","repeat","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","tableAttributes","createTableColumnsField","$columnCheckboxes","selectedAttributes","createTableColumnOption","createField","instructions","createCheckbox","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","getHelper","caboose","Y_AXIS","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","onSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","queue","submittingForm","duplicatedElements","httpStatus","httpError","openingPreview","preview","previewToken","createdProvisionalDraft","autosaveDrafts","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","isProvisionalDraft","initForProvisionalDraft","draftId","isUnpublishedDraft","initForDraft","canUpdateSource","createDraft","listenForChanges","showStatusHud","BroadcastChannel","onmessage","canonicalId","sourceId","reload","saveDraftAction","statusIcons","stopListeningForChanges","deleteDraftAction","hashedCpEditUrl","provisional","createEditMetaBtn","publishDraftAction","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","_createSiteStatusField","$globalField","createLightswitchField","_showField","siteStatusValues","hasEnabled","hasDisabled","originalEnabledValue","originalSerializedStatus","enabledForSite","_updateGlobalStatus","serializedStatuses","addlSites","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","enabled","disabled","$lightswitch","$addlSiteSelectContainer","createSelect","$addlSiteSelect","addlSiteInfo","enabledByDefault","bodyHtml","_saveSuccessMessage","_saveFailMessage","hudClass","spinners","getPreviewToken","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","saveDraft","console","warn","isActive","modifiedFieldNames","preparedData","prepareData","deltaName","content-type","_afterSaveRequest","_showFailStatus","docTitle","draftName","revisionMenu","creator","timestamp","updatePreviewTargets","checkMetaValues","oldId","selectors","modifiedAttributes","$fields","afterUpdate","postMessage","deltaCallback","swapDuplicatedElementIds","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","$hud","handleFormSubmit","autosave","hashedAddAnotherRedirectUrl","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","copyDraggeeInputValuesToHelper","isVisible","initialize","initializeIfVisible","minRows","createRowObj","updateAddRowButton","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","onTextareaHeightChange","radioMode","toggle","applyToggleCheckbox","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","onTabOptionSelect","initElement","Element","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","_onUploadError","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","showHud","showing","closeOtherHUDs","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","_onDrag","_onDragStop","muteEvent","changed","_onSettle","_getOffMargin","_onMouseDown","_onMouseUp","dragging","_getMargin","mouseDistX","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","forceUpdateIframe","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","X-Craft-Token","xhrFields","withCredentials","crossDomain","handleSuccess","handleError","write","onResponse","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","autocapitalize","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$refreshBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","_updateRefreshBtn","_activeTarget","refresh","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","_handleResize","_handleTapStart","_handleTapMove","_handleTapEnd","graduationsCalculatedWidth","valueToPosition","touch","startLeft","curX","positionToValue","scaleMin","scaleMax","autoOpen","_cancelTransitionListeners","addPanel","removePanel","openPanels","panel","updateStyles","totalPanels","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_handleSelectedSortHeaderClick","_handleUnselectedSortHeaderClick","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","newSortDir","_handleSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","searchForTags","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","onFileAdd","paramObject","getInProgress","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"CAAA,SAAUA,GCKV,IAAAC,EAAA,8FACAC,OAAAC,cAAA,SAAAC,GACA,OAAAA,EAAAC,QAAAJ,EAAA,cAIAD,EAAAM,OAAAC,MACA,CACAC,UAAA,GAcAC,MAAA,SAAAC,EAAAC,GACA,IAAAX,EAAAY,QAAAF,GACA,KAAA,+DAGA,OAAAA,EAAAG,OAAA,CAAAJ,EAAAK,EAAAC,KACAN,EAAA,iBAAAE,EAAAG,EAAAH,GAAAA,EAAAG,EAAAC,IAAAD,EACAL,GACA,KAeAO,MAAA,SAAAN,EAAAC,GACA,IAAAX,EAAAY,QAAAF,GACA,KAAA,+DAGA,IAAAD,EAAA,GAEA,OAAAC,EAAAG,OAAA,CAAAI,EAAAH,EAAAC,KACA,MAAAG,EAAA,iBAAAP,EAAAG,EAAAH,GAAAA,EAAAG,EAAAC,GAMA,OALAN,EAAAU,eAAAD,KACAT,EAAAS,GAAA,CAAA,GAAAA,GACAD,EAAAG,KAAAX,EAAAS,KAEAT,EAAAS,GAAA,GAAAE,KAAAN,GACAG,GACA,KAWAI,EAAA,SAAAC,EAAAC,EAAAC,GAQA,YANA,IAAAjB,MAAAkB,aAAAH,SACA,IAAAf,MAAAkB,aAAAH,GAAAC,KAEAA,EAAAhB,MAAAkB,aAAAH,GAAAC,IAGAC,EACAE,KAAAC,cAAAJ,EAAAC,GAGAD,GAGAI,cAAA,SAAAC,EAAAC,GACA,IAAAC,EACA,IAAA,KAAAA,EAAAJ,KAAAK,iBAAAH,IACA,KAAA,8BAEA,IAAA,IAAAb,EAAA,EAAAA,EAAAe,EAAAE,OAAAjB,IAAA,CACA,IAAAkB,EAAAH,EAAAf,GACA,GAAA,iBAAAkB,IACA,KAAAH,EAAAf,GAAAW,KAAAQ,YAAAD,EAAAJ,IACA,KAAA,8BAIA,OAAAC,EAAAK,KAAA,KAGAJ,iBAAA,SAAAH,GACA,IAAAQ,EAAAC,EAAAC,EAAA,EAEA,MAAAC,EAAA,IAAAX,GACA,IAAA,KAAAQ,EAAAC,EAAAE,EAAAC,QAAA,MACA,MAAA,CAAAZ,GAEA,IAAAE,EAAA,CAAAS,EAAAE,MAAA,EAAAJ,GAAAF,KAAA,KACA,OAAA,CACA,IAAAO,EAAAH,EAAAC,QAAA,IAAAH,EAAA,GACAM,EAAAJ,EAAAC,QAAA,IAAAH,EAAA,GAOA,IANA,IAAAK,IACAA,GAAA,IAEA,IAAAC,IACAA,GAAA,IAEA,IAAAD,IAAA,IAAAC,EACA,MAmBA,IAjBA,IAAAD,IACAA,EAAAH,EAAAP,QAEAW,EAAAD,GACAJ,IACAD,EAAAK,IAEAJ,IACAD,EAAAM,GAEA,IAAAL,IACAR,EAAAV,KAAAmB,EAAAE,MAAAL,EAAA,EAAAC,GAAAF,KAAA,IAAAS,MAAA,IAAA,IACAR,EAAAC,EAAA,EACAP,EAAAV,KAAAmB,EAAAE,MAAAL,EAAAM,GAAAP,KAAA,KACAC,EAAAM,GAGA,IAAAJ,KAAA,IAAAI,IAAA,IAAAC,GACA,MAGA,OAAA,IAAAL,GAIAR,GAGAI,YAAA,SAAAD,EAAAJ,GAGA,MAAAgB,EAAAtC,MAAAuC,KAAAb,EAAA,IACA,QAAA,IAAAJ,EAAAgB,GACA,MAAA,IAAAZ,EAAAE,KAAA,QAEA,MAAAY,EAAAlB,EAAAgB,GACAG,OAAA,IAAAf,EAAA,GAAA1B,MAAAuC,KAAAb,EAAA,IAAA,OACA,OAAAe,GACA,IAAA,SACA,MAAA,MACA,IAAAC,OAAA,IAAAhB,EAAA,GAAA1B,MAAAuC,KAAAb,EAAA,IAAA,KACA,GAAA,OAAAgB,GAAA,YAAAA,EACA,KAAA,gEAEA,IACAZ,EADAa,EAAA3C,MAAA4C,aAAAJ,GAKA,OAHA,OAAAE,IAAA,KAAAZ,GAAA,GAAAU,GAAAP,QAAA,QACAU,GAAA,IAAAH,EAAAK,OAAAf,EAAA,IAEAa,GAVA,GAYA,IAAA,OACA,OAAAH,EACA,IAAA,SACA,MAAA,MAIA,QAAA,IAAAd,EAAA,GACA,OAAA,EAEA,IAAAoB,EAAA3B,KAAAK,iBAAAE,EAAA,IACAqB,EAAAD,EAAArB,OACAT,GAAA,EACA,IAAA,IAAAR,EAAA,EAAAA,EAAA,EAAAuC,EAAAvC,IAAA,CACA,GAAAwC,QAAA3C,QAAAyC,EAAAtC,MAAAwC,QAAA3C,QAAAyC,EAAAtC,EAAA,IACA,OAAA,EAEA,IAAAyC,EAAAjD,MAAAuC,KAAAO,EAAAtC,QACA,IAAAQ,GAAA,UAAAiC,GAAAA,GAAAT,KACAxB,EAAA8B,EAAAtC,GAAAoB,KAAA,MAGA,OAAA,IAAAZ,GAGAG,KAAAC,cAAAJ,EAAAM,IAtBA,GAwBA,IAAA,SACA,MAAA,MASA,QAAA,IAAAI,EAAA,GACA,OAAA,EAEA,IAAAwB,EAAA/B,KAAAK,iBAAAE,EAAA,IACA,MAAAqB,EAAAG,EAAAzB,OACA,IAAAT,GAAA,EACAmC,EAAA,EACA,IAAA,IAAA3C,EAAA,EAAAA,EAAA,EAAAuC,EAAAvC,IAAA,CACA,GAAA,iBAAA0C,EAAA1C,IAAA,iBAAA0C,EAAA1C,EAAA,GACA,OAAA,EAEA,IAAAyC,EAAAjD,MAAAuC,KAAAW,EAAA1C,MACA4C,EAAA,IAAAH,GAEA,GAAA,IAAAzC,GAAA,YAAAyC,EAAAI,UAAA,EAAA,GAAA,CACA,IAAAvB,EAAA,IAAAmB,EAAAnD,QAAA,YAAA,MAAAmC,QAAA,IAAA,GACA,IAAA,IAAAH,EACA,KAAA,8BAEAqB,EAAAG,SAAAtD,MAAAuC,KAAAa,EAAAlB,MAAA,EAAAJ,GAAAF,KAAA,MACAqB,EAAAjD,MAAAuC,KAAAa,EAAAlB,MAAAJ,EAAA,EAAAA,EAAA,EAAAsB,EAAA3B,QAAAG,KAAA,OAGA,IAAAZ,GACA,UAAAiC,GACA,MAAAA,EAAA,IAAAK,SAAAF,EAAAlB,MAAA,EAAA,EAAAkB,EAAA3B,QAAAG,KAAA,OAAAY,GACA,QAAAS,GAAAT,EAAAW,GAAA,KAEAnC,GAAA,iBAAAkC,EAAA1C,GAAA,CAAA0C,EAAA1C,IAAA0C,EAAA1C,IAAA+C,IAAAC,GACAA,EAAA1D,QAAA,IAAA0C,EAAAW,IACAvB,KAAA,MAGA,OAAA,IAAAZ,GAGAG,KAAAC,cAAAJ,EAAAM,IA7CA,GA+CA,QACA,KAAA,mBAAAmB,yBAIAgB,WAAA,SAAAC,GAKA,MAJA,iBAAAA,IACAA,EAAA,IAAAC,KAAAD,IAGAjE,EAAAmE,WAAAH,WAAAzD,MAAA6D,kBAAAC,WAAAJ,IASAd,aAAA,SAAAD,EAAAD,GAOA,YANA,IAAAA,IACAA,EAAA,QAGAqB,GAAAC,aAAAC,0BAAAvB,OAAAA,EAEAwB,CAAAvB,IAQAwB,aAAA,SAAA/D,EAAAgE,EAAAC,GACA,MAAA,QAAArE,MAAAsE,UACAD,EAAA,IAAA,KAAAD,EAAA,IAAA,IAAA,IAAAhE,EAEA,SAAAiE,EAAA,OAAA,KAAAD,EAAA,SAAA,IAAAhE,GASAmE,WAAA,SAAAC,GACA,OAAA/E,EAAA,UAAAgF,KAAAD,GAAA3E,QASA6E,YAAA,SAAAF,GAEA,OAAAA,EAAA1E,QAAA,2BAAA,SASA6E,QAAA,SAAAH,GACA,OAAA/E,EAAA,UAAAI,KAAA2E,GAAAC,QAUAG,mBAAA,SAAAJ,GACAA,EAAAK,mBAAAL,GAEA,IAAAM,EAAA,CACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,MACAC,IAAA,OAGA,IAAA,IAAAC,KAAAN,EAAA,CACA,IAAAO,EAAA,IAAAC,OAAA,KAAAF,EAAA,KACAZ,EAAAA,EAAA1E,QAAAuF,EAAAP,EAAAM,IAGA,OAAAZ,GAQAe,gBAAA,SAAAC,GACA,IAAAC,EAAAhG,EAAA+F,GACAE,EAAAD,EAAAC,MAGA,QAAA,IAAAD,EAAA,GAAAE,kBAAA,CAEA,IAAAlE,EAAA,EAAAiE,EAAAjE,OACAgE,EAAA,GAAAE,kBAAA,EAAAlE,QAGAgE,EAAAC,IAAAA,IAUAE,cAAA,SAAAC,GACA,OAAA1E,KAAA2E,MAAAD,EAAA/F,QAAA,UAAA,KAAA,MASAiG,OAAA,SAAAC,EAAA/E,EAAAgF,GACA,iBAAAD,IACAA,EAAA,IAIA,IAAAE,EAAA,GAEA,GAAAzG,EAAA0G,cAAAlF,GAAA,CACA,IAAAmF,EAAA,GAEA,IAAA,IAAAC,KAAApF,EACA,GAAAA,EAAAL,eAAAyF,GAAA,CAIA,IAAAC,EAAArF,EAAAoF,GAEA,MAAAA,EACAH,EAAAI,EACA,OAAAA,GAAA,KAAAA,GACAF,EAAAvF,KAAAwF,EAAA,IAAAC,GAIArF,EAAAmF,EAIAnF,EADA+B,QAAA3C,QAAAY,GACAA,EAAAW,KAAA,KAEA5B,MAAAuC,KAAAtB,EAAA,MAIA,IAAAsF,EAAAP,EAAA/D,QAAA,MACA,IAAAsE,IAEAL,IACAA,EAAAF,EAAAnD,OAAA0D,EAAA,IAEAP,EAAAA,EAAAnD,OAAA,EAAA0D,IAIA,IAcAC,EAdAC,EAAAT,EAAA/D,QAAA,KAOA,IANA,IAAAwE,IACAxF,EAAA+E,EAAAnD,OAAA4D,EAAA,IAAAxF,EAAA,IAAAA,EAAA,IACA+E,EAAAA,EAAAnD,OAAA,EAAA4D,KAIA,IAAAT,EAAAU,OAAA,QAAA,MAAAV,EAAA,GACA,OAAAA,GAAA/E,EAAA,IAAAA,EAAA,KAAAiF,EAAA,IAAAA,EAAA,IAQA,GALAF,EAAAhG,MAAAuC,KAAAyD,EAAA,KAKAC,GAGA,GAFAO,EAAAP,EAEAD,GAAAhG,MAAA2G,UAAA,CAEA,IAAAC,EAAAJ,EAAAK,MAAA,IAAAvB,OAAA,OAAAtF,MAAA0E,YAAA1E,MAAA2G,WAAA,WACAC,IACAJ,EAAAA,EAAA1G,QAAA8G,EAAA,GAAA5G,MAAA8F,MAAAc,EAAA,GAAA,KAAA,IAAAZ,GACAA,EAAA,UAIAQ,EAAAxG,MAAAiG,QAUA,IALA,KADAQ,EAAAD,EAAAvE,QAAA,QAEAhB,EAAAuF,EAAA3D,OAAA4D,EAAA,IAAAxF,EAAA,IAAAA,EAAA,IACAuF,EAAAA,EAAA3D,OAAA,EAAA4D,KAGAzG,MAAA8G,sBAAAd,EACA,GAAAhG,MAAA+G,cAAA/G,MAAA2G,WAEA,IAAAH,EAAAE,OAAA1G,MAAAgH,cACAR,EAAAxG,MAAA8F,MAAAU,EAAA,KAAA,IAAAxG,MAAAgH,gBAEA,CAIA,GAAA/F,GAAAA,EAAA4B,OAAA,EAAA7C,MAAA2G,UAAAlF,OAAA,KAAAzB,MAAA2G,UAAA,IAAA,CACA,IAAAM,EACAC,EAAAjG,EAAAgB,QAAA,MAEA,IAAAiF,GACAD,EAAAhG,EAAAoC,UAAA,EAAA6D,GACAjG,EAAAA,EAAA4B,OAAAqE,EAAA,KAEAD,EAAAhG,EAAA4B,OAAA,GACA5B,EAAA,MAMA+E,GAFAiB,EAAAjH,MAAA8F,MAAAmB,KAEAjB,EAAA,IAAAA,EAAA,IAIA/E,EAAAjB,MAAA2G,UAAA,IAAAX,GAAA/E,EAAA,IAAAA,EAAA,IACA+E,EAAA,KAgBA,OAZAA,IACAQ,EAAAxG,MAAA8F,MAAAU,EAAA,KAAA,IAAAR,GAGA/E,IACAuF,GAAA,IAAAvF,GAGAiF,IACAM,GAAA,IAAAN,GAGAM,GAQAW,SAAA,SAAAnB,EAAA/E,GACA,OAAAE,KAAA4E,OAAAC,EAAA/E,EAAAjB,MAAAoH,YAQAC,WAAA,SAAArB,EAAA/E,GACA,OAAAE,KAAA4E,OAAAC,EAAA/E,EAAAjB,MAAAsH,cAUAC,aAAA,SAAAvB,EAAA/E,GACA,OAAAjB,MAAA+F,OAAAC,EAAA/E,EAAAjB,MAAAwH,YAQAC,WAAA,SAAAjB,GACAkB,SAAAC,SAAAC,KAAAzG,KAAA4E,OAAAS,IAQAqB,aAAA,WACA,OAAA7H,MAAA8H,cACA,8BAAA9H,MAAA8H,cAAA,YAAA9H,MAAA+H,eAAA,MAEA,IAcAC,kBAAA,SAAAC,EAAAC,EAAAC,EAAAC,GAEA,mBAAAF,IACAE,EAAAD,EACAA,EAAAD,EACAA,EAAA,KAGAE,EAAAA,GAAA,IAEAC,aAAAD,EAAAC,YAAAxB,MAAA,cACA,iBAAAqB,IACAA,EAAAI,KAAAC,UAAAL,IAEAE,EAAAC,YAAA,mCAGA,IAAAG,EAAA/I,EAAAgJ,KAAAhJ,EAAAM,OAAA,CACAyG,IAAAxG,MAAAuH,aAAAU,GACAxF,KAAA,OACAiG,SAAA,OACAC,QAAAxH,KAAAyH,iBACAV,KAAAA,EACAW,QAAAV,EACAW,MAAA,SAAAN,EAAAO,EAAAC,GAGA,IAAAR,EAAAS,kBAIA,IAAAjJ,MAAAkJ,GACAlJ,MAAAkJ,GAAAC,eAEAC,MAAApJ,MAAAc,EAAA,MAAA,6BAGAqH,GACAA,EAAA,KAAAY,EAAAP,MAGAJ,IAOA,MAJA,mBAAAA,EAAAiB,MACAjB,EAAAiB,KAAAb,GAGAA,GAGAc,gBAAA,EACAC,WAAA,GAKAC,mBAAA,SAAAvB,EAAAC,EAAAC,EAAAC,GAEA,mBAAAF,IACAE,EAAAD,EACAA,EAAAD,EACAA,OAAAuB,GAGAzJ,MAAAuJ,WAAA1I,KAAA,CAAAoH,EAAAC,EAAAC,EAAAC,IAEApI,MAAAsJ,gBACAtJ,MAAA0J,iCAIAA,8BAAA,WACA1J,MAAAsJ,gBAAA,EAEA,IAAAhI,EAAAtB,MAAAuJ,WAAAnF,QAEApE,MAAAgI,kBAAA1G,EAAA,GAAAA,EAAA,IAAA,SAAA4G,EAAAa,EAAAP,GACAlH,EAAA,IAAA,mBAAAA,EAAA,IACAA,EAAA,GAAA4G,EAAAa,EAAAP,GAGAxI,MAAAuJ,WAAA9H,OACAzB,MAAA0J,gCAEA1J,MAAAsJ,gBAAA,IAEAhI,EAAA,KAGAsH,eAAA,WACA,IAAAD,EAAA,CACAgB,6BAAAC,OAAAC,KAAA7J,MAAA8J,wBAAAlI,KAAA,KACAmI,wBAAAH,OAAAC,KAAA7J,MAAAgK,mBAAApI,KAAA,MAOA,OAJA5B,MAAA+H,iBACAY,EAAA,gBAAA3I,MAAA+H,gBAGAY,GAWAsB,kBAAA,SAAAC,EAAAjC,EAAAG,GACA,OAAA,IAAA+B,QAAA,CAAAC,EAAAC,MACAjC,EAAAA,EAAA3I,EAAAM,OAAA,GAAAqI,GAAA,IACA8B,OAAAA,EACA9B,EAAA5B,IAAAxG,MAAAuH,aAAAU,GACAG,EAAAO,QAAAlJ,EAAAM,OAAA,CACAuK,mBAAA,kBACAlC,EAAAO,SAAA,GAAAxH,KAAAyH,kBACAR,EAAAnH,OAAAxB,EAAAM,OAAA,GAAAqI,EAAAnH,QAAA,GAAA,CAEAsJ,GAAA,IAAA5G,MAAA6G,YAEAC,MAAAC,QAAAtC,GAAAuC,KAAAP,GAAAQ,MAAAP,MAYAQ,eAAA,SAAAX,EAAAY,EAAA1C,GACA,OAAA,IAAA+B,QAAA,CAAAC,EAAAC,KAEA,IAAAU,GADA3C,EAAAA,EAAA3I,EAAAM,OAAA,GAAAqI,GAAA,IACA2C,aAAA,KAGA5J,KAAA6J,eAAAD,GAAAJ,KAAAM,IAEA7C,EAAA8B,OAAAA,EACA9B,EAAA8C,QAAAlL,MAAAmL,WACA/C,EAAA5B,IAAAsE,EACA1C,EAAAO,QAAAlJ,EAAAM,OAAAkL,EAAA7C,EAAAO,SAAA,IACAP,EAAAnH,OAAAxB,EAAAM,OAAAC,MAAAoL,WAAA,GAAAhD,EAAAnH,QAAA,GAAA,CAEAsJ,GAAA,IAAA5G,MAAA6G,YAIArJ,KAAAkK,cACAjD,EAAAnH,OAAAqK,oBAAA,GAGAtL,MAAAuL,YACAnD,EAAAoD,MAAAxL,MAAAuL,WAGAd,MAAAC,QAAAtC,GAAAuC,KAAAc,IAEAtK,KAAAuK,mBAAAD,EAAA9C,QAAAoC,GAAAJ,KAAA,KAEAP,EAAAqB,EAAAvD,QACA0C,MAAAP,KACAO,MAAAP,KACAO,MAAAP,MAIAsB,oBAAA,EACAN,YAAA,KACAO,mBAAA,GAQAZ,eAAA,SAAAD,GACA,OAAA,IAAAZ,QAAA,CAAAC,EAAAC,KAEAlJ,KAAAwK,mBACAxK,KAAAyK,mBAAA/K,KAAA,CAAAuJ,EAAAC,IAKAlJ,KAAAkK,YACAjB,EAAAjJ,KAAAkK,cAIAlK,KAAAwK,oBAAA,EACAxK,KAAA8I,kBAAA,OAAA,kBAAA,CACAc,YAAAA,IACAJ,KAAAkB,IAEA1K,KAAAwK,mBAKAvB,EAAAyB,EAAA3D,MAJAmC,EAAAyB,KAKAlB,MAAAkB,IACA3K,KAAA4K,mBAAA1B,EAAAyB,SAKAJ,mBAAA,SAAA/C,EAAAoC,GACA,OAAA,IAAAZ,QAAA,CAAAC,EAAAC,KAEAlJ,KAAAkK,YACAjB,IAIAjJ,KAAA8I,kBAAA,OAAA,mCAAA,CACA/B,KAAA,CACAS,QAAAA,GAEAoC,YAAAA,IACAJ,KAAAkB,IAEA,GAAA1K,KAAAwK,mBAWA,IANAxK,KAAAkK,YAAAQ,EAAA3D,KACA/G,KAAAwK,oBAAA,EAEAvB,IAGAjJ,KAAAyK,mBAAAnK,QACAN,KAAAyK,mBAAAxH,QAAA,GAAAjD,KAAAkK,kBAXAhB,EAAAyB,KAaAlB,MAAAkB,IACA3K,KAAA4K,mBAAA1B,EAAAyB,QAKAC,mBAAA,SAAA1B,EAAAyB,GAGA,IAFA3K,KAAAwK,oBAAA,EACAtB,EAAAyB,GACA3K,KAAAyK,mBAAAnK,QACAN,KAAAyK,mBAAAxH,QAAA,GAAA0H,IAOAE,sBAAA,WAKA,IAJA7K,KAAAkK,YAAA,KACAlK,KAAAwK,oBAAA,EAGAxK,KAAAyK,mBAAAnK,QACAN,KAAAyK,mBAAAxH,QAAA,MAYA6H,gBAAA,SAAA/B,EAAA1D,EAAA0F,GACA,OAAA,IAAA/B,QAAA,CAAAC,EAAAC,KAEA,IAAAK,EAAA,IAAAyB,eACAzB,EAAAvI,KAAA+H,EAAA1D,GAAA,GACA,iBAAA0F,GACAxB,EAAA0B,iBAAA,eAAA,mCACAF,EAAA5D,KAAAC,UAAA2D,IAEAxB,EAAA0B,iBAAA,eAAA,oDAEA1B,EAAA2B,aAAA,OAEA3B,EAAA4B,OAAA,KAEA,GAAA,MAAA5B,EAAA6B,OAAA,CAEA,IAAAC,EAAA9B,EAAA+B,kBAAA,uBACAC,EAAA,YAAAC,KAAAH,GACAI,EAAA,MAAAF,GAAAA,EAAA,GAAAA,EAAA,GAAA,WAGArE,EAAAqC,EAAA+B,kBAAA,gBACAI,EAAA,IAAAC,KAAA,CAAApC,EAAAmB,UAAA,CAAApJ,KAAA4F,IACA0E,EAAArF,SAAAsF,cAAA,KACAD,EAAAnF,KAAAqF,OAAAC,IAAAC,gBAAAN,GACAE,EAAAK,SAAAR,EACAlF,SAAAwE,KAAAmB,YAAAN,GACAA,EAAAO,QACA5F,SAAAwE,KAAAqB,YAAAR,GAEA3C,SAEAC,KAIAK,EAAArB,KAAA6C,MAUAsB,cAAA,SAAAhJ,GACA,GAAA,iBAAAA,EACA,OAAAA,EAIA,IADA,IAAArE,EAAAqE,EAAAnC,MAAA,KACA7B,EAAA,EAAAA,EAAAL,EAAAsB,OAAAjB,IACAL,EAAAK,GAAAf,EAAA8C,KAAApC,EAAAK,IAEA,OAAAL,GAcAsN,cAAA,SAAAC,EAAAC,EAAAC,EAAAzF,EAAA0F,GAEAH,EAAA,iBAAAA,EAAAA,EAAA,GACAC,EAAA,iBAAAA,EAAAA,EAAA,GAGAC,EAAAE,MAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAtM,SAAAuM,EAAAvM,OACA,EAEAsM,EAAAtM,OAAAuM,EAAAvM,OAAA,GAAA,UAIA,IAAAoM,IACAA,EAAA7N,MAAA6N,oBAQA,IANA,IAAAI,EAAA9M,KAAA+M,yBAAAR,EAAArL,MAAA,KAAAuL,GAAA,EAAAC,GACAM,EAAAhN,KAAA+M,yBAAAP,EAAAtL,MAAA,KAAAuL,GAAA,GAAA,GAGA3M,EAAAkN,EAAAC,SAEAC,EAAA,EAAAA,EAAAT,EAAAnM,OAAA4M,KACArO,MAAAsO,QAAAV,EAAAS,GAAArO,MAAAuO,qBACA,iBAAAJ,EAAAP,EAAAS,MAEA,iBAAAJ,EAAAL,EAAAS,KACA/F,KAAAC,UAAA0F,EAAAL,EAAAS,OAAA/F,KAAAC,UAAA4F,EAAAP,EAAAS,UAGApN,EAAAA,EAAAuN,OAAAL,EAAAP,EAAAS,MACAxN,KAAA,wBAAA+M,EAAAS,IACAlG,GACAA,EAAAyF,EAAAS,GAAAF,EAAAP,EAAAS,MAKA,OAAApN,EAAAW,KAAA,MAWAsM,yBAAA,SAAAjN,EAAA2M,EAAAa,EAAAC,GACA,MAAAhO,EAAA,GAEA+N,IACA/N,EAAA0N,SAAA,IAGA,MAAAO,EAAAC,GAAA/J,mBAAA+J,GAAA9O,QAAA,MAAA,KAEAmB,EAAAA,EAAAsC,IAAAC,GAAAqL,mBAAArL,IAEAsL,EAAA,IAAA,IAAAtL,EAAA,EAAAA,EAAAvC,EAAAQ,OAAA+B,IAAA,CAEA,IAAA,IAAA6K,EAAAT,EAAAnM,OAAA,EAAA4M,GAAA,EAAAA,IAAA,CACA,MAAAU,EAAA9N,EAAAuC,GAAAX,OAAA,EAAA+K,EAAAS,GAAA5M,OAAA,GACA,GACAsN,IAAAnB,EAAAS,GAAA,KACAU,IAAAnB,EAAAS,GAAA,IACA,MACA,IAAA3N,EAAAkN,EAAAS,MACA3N,EAAAkN,EAAAS,IAAA,IAEA3N,EAAAkN,EAAAS,IAAAxN,KAAA8N,EAAA1N,EAAAuC,KACA,SAAAsL,GAIAL,GACA/N,EAAA0N,SAAAvN,KAAA8N,EAAA1N,EAAAuC,KAIA,GAAAkL,EACA,IAAA,IAAArI,KAAAqI,EACAA,EAAA9N,eAAAyF,KACA3F,EAAA2F,GAAA,CAAAxB,mBAAAwB,GAAA,IAAA5G,EAAA6C,MAAAoM,EAAArI,MAKA,OAAA3F,GASAsO,gBAAA,SAAA7O,GACA,IACAK,EADAyO,EAAA,GAGA,IAAA,IAAA7O,KAAAD,EACA,GAAAA,EAAAS,eAAAR,GAAA,CAIA,IAEAyJ,EAFAvD,EAAAnG,EAAAC,GACA8O,EAAA9O,EAAAyG,MAAA,iBAGA,GAAAqI,EAAA,GAKA,IAHArF,EAAAqF,EAAA,GAAArI,MAAA,iBAGArG,EAAA,EAAAA,EAAAqJ,EAAApI,OAAAjB,IACAqJ,EAAArJ,GAAAqJ,EAAArJ,GAAA6C,UAAA,EAAAwG,EAAArJ,GAAAiB,OAAA,QAGAoI,EAAA,GAGAA,EAAAsF,QAAAD,EAAA,IAEA,IAAAE,EAAAH,EAEA,IAAAzO,EAAA,EAAAA,EAAAqJ,EAAApI,OAAAjB,IACAA,EAAAqJ,EAAApI,OAAA,GACA,iBAAA2N,EAAAvF,EAAArJ,MAEAqJ,EAAArJ,EAAA,IAAA8C,SAAAuG,EAAArJ,EAAA,KAAAqJ,EAAArJ,EAAA,GAGA4O,EAAAvF,EAAArJ,IAAA,GAFA4O,EAAAvF,EAAArJ,IAAA,IAMA4O,EAAAA,EAAAvF,EAAArJ,MAGAqJ,EAAArJ,KACAqJ,EAAArJ,GAAA4O,EAAA3N,QAGA2N,EAAAvF,EAAArJ,IAAA8F,GAKA,OAAA2I,GASAI,WAAA,SAAAnH,GACA,IAAAoH,EAAA7P,EAAA,UAAA,CACA8P,KAAA,CACArF,OAAA,OACAjC,OAAA,GACAuH,iBAAA,WAIA,GAAA,iBAAAtH,EAGA,IAFA,IACAuH,EADAC,EAAAxH,EAAA7F,MAAA,KAEA7B,EAAA,EAAAA,EAAAkP,EAAAjO,OAAAjB,IACAiP,EAAAC,EAAAlP,GAAA6B,MAAA,IAAA,GACA5C,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAwI,mBAAAY,EAAA,IACAnJ,MAAAuI,mBAAAY,EAAA,IAAA,MACAE,SAAAL,GAIA,OAAAA,GAYAM,QAAA,SAAAC,EAAAC,EAAAC,GAEA,UAAAF,UAAAC,EACA,OAAA,EAGA,GAAA,iBAAAD,EAAA,CAEA,GAAAA,EAAApO,SAAAqO,EAAArO,OACA,OAAA,EAIA,GAAAoO,aAAAG,OAAAF,aAAAE,MACA,OAAA,EAIA,KAAAH,aAAAG,OACA,QAAA,IAAAD,IAAA,IAAAA,GACA,IAAA/P,MAAA4P,QAAA5P,MAAAiQ,cAAAJ,GAAA/B,OAAA9N,MAAAiQ,cAAAH,GAAAhC,QACA,OAAA,OAGA,IAAA9N,MAAA4P,QAAA5P,MAAAiQ,cAAAJ,GAAA7P,MAAAiQ,cAAAH,IACA,OAAA,EAMA,IAAA,IAAAtP,KAAAqP,EACA,GAAAA,EAAAjP,eAAAJ,KAIAR,MAAA4P,QAAAC,EAAArP,GAAAsP,EAAAtP,IACA,OAAA,EAKA,OAAA,EAEA,OAAAqP,IAAAC,GAUAG,cAAA,SAAA1P,GACA,IAAAsJ,EAAA,GAEA,IAAA,IAAAzJ,KAAAG,EACAA,EAAAK,eAAAR,IAIAyJ,EAAAhJ,KAAAT,GAGA,OAAAyJ,GAWAqG,YAAA,SAAAlO,GACAgB,QAAA3C,QAAA2B,KACAA,EAAAA,EAAAK,SAKA,IAFA,IAAA8N,EAAA,GAEA3P,EAAA,EAAAA,EAAAwB,EAAAP,OAAAjB,IACA2P,GAAA,KAAAnO,EAAAxB,GAGA,OAAA2P,GAUAC,MAAA,SAAA5L,EAAAxC,GACA,IAAAwC,EACA,OAAAA,OAEA,IAAAxC,IACAA,EAAA,eAEA,IAAAqD,EAAA,IAAAC,OAAA,KAAAtF,MAAAkQ,YAAAlO,GAAA,MACA,OAAAwC,EAAA1E,QAAAuF,EAAA,KAUAS,MAAA,SAAAtB,EAAAxC,GACA,IAAAwC,EACA,OAAAA,OAEA,IAAAxC,IACAA,EAAA,eAEA,IAAAqD,EAAA,IAAAC,OAAA,IAAAtF,MAAAkQ,YAAAlO,GAAA,OACA,OAAAwC,EAAA1E,QAAAuF,EAAA,KAUA9C,KAAA,SAAAiC,EAAAxC,GAGA,OAFAwC,EAAAxE,MAAAoQ,MAAA5L,EAAAxC,GACAwC,EAAAxE,MAAA8F,MAAAtB,EAAAxC,IAWAqO,WAAA,SAAA7L,EAAA3B,GACA,OAAA2B,EAAA3B,OAAA,EAAAA,EAAApB,UAAAoB,GAUAyN,YAAA,SAAAnQ,EAAAgI,GAGA,IAFA,IAAAoI,EAAA,GAEA/P,EAAA,EAAAA,EAAAL,EAAAsB,OAAAjB,IAAA,EAGA,mBAAA2H,EACAA,EAAAhI,EAAAK,GAAAA,GAEAL,EAAAK,KAIA+P,EAAA1P,KAAAV,EAAAK,IAIA,OAAA+P,GAUAjC,QAAA,SAAAkC,EAAArQ,GAIA,OAHAV,EAAA0G,cAAAhG,KACAA,EAAAyJ,OAAA8F,OAAAvP,IAEAA,EAAAsQ,SAAAD,IAUAE,gBAAA,SAAAF,EAAArQ,GACA,IAAAD,EAAAT,EAAA6O,QAAAkC,EAAArQ,GACA,OAAA,IAAAD,IACAC,EAAAwQ,OAAAzQ,EAAA,IACA,IAYA0Q,QAAA,SAAAzQ,GACA,OAAAA,EAAAsB,OAGAtB,EAAAA,EAAAsB,OAAA,GAFA,MAYAoP,eAAA,SAAArM,GACA,OAAAA,EAAAsM,OAAA,GAAAC,cAAAvM,EAAAtC,MAAA,IASA8O,eAAA,SAAAxM,GACA,OAAAA,EAAAsM,OAAA,GAAAG,cAAAzM,EAAAtC,MAAA,IAGAgP,SAAA,SAAA1K,GACA,IAAA0I,EAAA1I,EAAAK,MAAA,gFACA,OAAAqI,EAGA,CACAiC,OAAAjC,EAAA,GACAkC,KAAAlC,EAAA,IAAAA,EAAA,GAAA,IAAAA,EAAA,GAAA,IACAmC,SAAAnC,EAAA,GACAoC,KAAApC,EAAA,IAAA,KACAlJ,KAAAkJ,EAAA,IAAA,IACAqC,MAAArC,EAAA,IAAA,KACAsC,KAAAtC,EAAA,IAAA,MATA,IAaAuC,WAAA,SAAAjL,GACA,IAAAkL,EAAAvQ,KAAA+P,SAAAxJ,SAAAC,SAAAC,MACA,IAAA8J,EACA,OAAA,EAEA,IAAAC,EAAAxQ,KAAA+P,SAAA1K,GACA,QAAAmL,GAGAD,EAAAN,OAAAO,EAAAP,MAMAQ,2BAAA,SAAAC,EAAAC,QACA,IAAAA,IACAA,GAAA,GAGA,IAKAC,EAAAC,KAAAC,MAAAJ,EALA,QAMAA,GANA,OAQA,IAAAK,EAAAF,KAAAC,MAAAJ,EAPA,OAQAA,GARA,MAUA,IAGAM,EAHAC,EAAAJ,KAAAC,MAAAJ,EATA,MAUAA,GAVA,KAcAC,GACAK,EAAAH,KAAAC,MAAAJ,EAdA,IAeAA,GAfA,KAiBAM,EAAAH,KAAAK,MAAAR,EAjBA,IAkBAA,EAAA,GAGA,IAAAS,EAAA,GAsBA,OApBAP,GACAO,EAAAzR,KAAAkR,EAAA,KAAA,IAAAA,EAAA/R,MAAAc,EAAA,MAAA,QAAAd,MAAAc,EAAA,MAAA,WAGAoR,GACAI,EAAAzR,KAAAqR,EAAA,KAAA,IAAAA,EAAAlS,MAAAc,EAAA,MAAA,OAAAd,MAAAc,EAAA,MAAA,UAGAsR,GACAE,EAAAzR,KAAAuR,EAAA,KAAA,IAAAA,EAAApS,MAAAc,EAAA,MAAA,QAAAd,MAAAc,EAAA,MAAA,YAGAqR,IAAAL,GAAAC,GAAAG,GAAAE,IACAE,EAAAzR,KAAAsR,EAAA,KAAA,IAAAA,EAAAnS,MAAAc,EAAA,MAAA,UAAAd,MAAAc,EAAA,MAAA,cAGA+Q,KAAAC,GAAAC,GAAAG,GAAAE,GAAAD,IACAG,EAAAzR,KAAAgR,EAAA,KAAA,IAAAA,EAAA7R,MAAAc,EAAA,MAAA,UAAAd,MAAAc,EAAA,MAAA,aAGAwR,EAAA1Q,KAAA,OAUA2Q,YAAA,SAAA/N,EAAAgO,GAEAhO,EAAAA,EAAAiO,UAAA,OAKA,IAHA,IACAC,EADAC,EAAA,GAGAnS,EAAA,EAAAA,EAAAgE,EAAA/C,OAAAjB,IACAkS,EAAAlO,EAAAsM,OAAAtQ,GACAmS,GAAA,iBAAAH,GAAAxS,MAAA4S,cAAAF,IAAAF,GAAAxS,MAAA4S,cAAAF,GAAAA,EAGA,OAAAC,GAGAE,aAAA,SAAApR,GAIA,IAFA,IAAAqR,EAAA,GAEAtS,EAAA,EAAAA,EAAAiB,EAAAjB,IACAsS,GAFA,iEAEAhC,OAAAkB,KAAAC,MAAA,GAAAD,KAAAe,WAEA,OAAAD,GASAE,gBAAA,SAAAC,GAGA,IAFA,IAAAC,EAAAzT,EAAAiI,SAAAsF,cAAA,OAAAmG,SAAA,UAEA3S,EAAA,EAAAA,EAAAyS,EAAAxR,OAAAjB,IAAA,CACA,IAAA4S,EAAA3T,EAAAiI,SAAAsF,cAAA,OACAoG,EAAAzD,SAAAuD,GACAE,EAAAvT,KAAAoT,EAAAzS,IAGA,OAAA0S,GAGAG,eAAA,SAAAxT,GACA,GAAAA,EAAA,CAKA,IAAAyT,EAAA7T,EAAA,cAEA,GAAA6T,EAAA7R,OAAA,CAIA,IAHA,IACAmG,EADA2L,EAAA,GAGA/S,EAAA,EAAAA,EAAA8S,EAAA7R,OAAAjB,IACAoH,EAAA0L,EAAAE,GAAAhT,GAAA+O,KAAA,QAAAzP,QAAA,KAAA,SACAyT,EAAA1S,KAAAb,MAAA0E,YAAAkD,IAGA,IAAA6L,EAAA,IAAAnO,OAAA,yBAAAiO,EAAA3R,KAAA,KAAA,mBAAA,KAEA/B,EAAAA,EAAAC,QAAA2T,EAAA,IAGAhU,EAAA,QAAAiU,OAAA7T,KAGA8T,eAAA,SAAA9T,GACA,GAAAA,EAAA,CAKA,IAAA+T,EAAAnU,EAAA,eAEA,GAAAmU,EAAAnS,OAAA,CAIA,IAHA,IACAoS,EADAC,EAAA,GAGAtT,EAAA,EAAAA,EAAAoT,EAAAnS,OAAAjB,IACAqT,EAAAD,EAAAJ,GAAAhT,GAAA+O,KAAA,OAAAzP,QAAA,KAAA,SACAgU,EAAAjT,KAAAb,MAAA0E,YAAAmP,IAGA,IAAAJ,EAAA,IAAAnO,OAAA,0BAAAwO,EAAAlS,KAAA,KAAA,mBAAA,KAEA/B,EAAAA,EAAAC,QAAA2T,EAAA,IAGAzQ,QAAA+Q,KAAAL,OAAA7T,KAQAmU,eAAA,SAAAC,GACAxU,EAAA,QAAAwU,GAAAC,OACAzU,EAAA,QAAAwU,GAAAE,WACA1U,EAAA,mBAAAwU,GAAAG,iBACA3U,EAAA,eAAAwU,GAAAI,cACA5U,EAAA,eAAAwU,GAAAK,cACA7U,EAAA,YAAAwU,GAAAM,WACA9U,EAAA,cAAAwU,GAAAO,aACA/U,EAAA,WAAAwU,GAAAQ,UACAhV,EAAA,mBAAAwU,GAAAS,WAIAjV,EAAA,IAAAwU,GAAAU,MAAA,WACAxT,KAAAkQ,SAAA5P,QAAAN,KAAAkQ,WAAA1J,SAAA0J,eAAA,IAAA5R,EAAA0B,MAAAoO,KAAA,WACA9P,EAAA0B,MAAAoO,KAAA,MAAA,YAAAA,KAAA,SAAA,cAKAqF,qBAAA,GACAC,6BAAA,GACAC,sBAAA,GAQAC,0BAAA,SAAAC,EAAAC,GACA,QAAA,IAAA9T,KAAAyT,qBAAAI,GACA,KAAA,4EAAAA,EAAA,KAGA7T,KAAAyT,qBAAAI,GAAAC,GASAC,kCAAA,SAAAF,EAAAC,GACA,QAAA,IAAA9T,KAAA0T,6BAAAG,GACA,KAAA,qFAAAA,EAAA,KAGA7T,KAAA0T,6BAAAG,GAAAC,GASAE,2BAAA,SAAAH,EAAAC,GACA,QAAA,IAAA9T,KAAA2T,sBAAAE,GACA,KAAA,6EAAAA,EAAA,KAGA7T,KAAA2T,sBAAAE,GAAAC,GAWAG,mBAAA,SAAAJ,EAAAf,EAAAoB,GASA,OAAA,SANA,IAAAlU,KAAAyT,qBAAAI,GACA7T,KAAAyT,qBAAAI,GAEAhV,MAAAsV,kBAGAN,EAAAf,EAAAoB,IASAE,2BAAA,SAAAP,EAAAK,GASA,OAAA,SANA,IAAAlU,KAAA0T,6BAAAG,GACA7T,KAAA0T,6BAAAG,GAEAhV,MAAAwV,0BAGAR,EAAAK,IAUAI,oBAAA,SAAAT,EAAAU,EAAAL,GAqBA,YAnBA,IAAAA,GAAA5V,EAAA0G,cAAAuP,IAEAL,EAAAK,EACAA,EAAA,MACA,iBAAAL,IACAA,EAAA,IAGAA,EAAAL,cACAK,EAAAL,YAAAA,GAUA,SANA,IAAA7T,KAAA2T,sBAAAE,GACA7T,KAAA2T,sBAAAE,GAEAhV,MAAA2V,mBAGAD,EAAAL,IASAO,gBAAA,SAAAxV,EAAAyV,GAGA,OAFAzV,EAAA,SAAAJ,MAAA8V,UAAA,IAAA1V,EAEA,oBAAA2V,mBAAA,IAAAA,aAAA3V,GACAkI,KAAA0N,MAAAD,aAAA3V,IAEAyV,GAUAI,gBAAA,SAAA7V,EAAAkG,GACA,GAAA,oBAAAyP,aAAA,CACA3V,EAAA,SAAAJ,MAAA8V,UAAA,IAAA1V,EAKA,IACA2V,aAAA3V,GAAAkI,KAAAC,UAAAjC,GACA,MAAAwF,OASAoK,mBAAA,SAAA9V,GACA,oBAAA2V,cACAA,aAAAI,WAAA,SAAAnW,MAAA8V,aAAA1V,MAQAgW,UAAA,SAAA/P,GAEA,OAAAqB,SAAA2O,OAAAvW,QAAA,IAAAwF,OAAA,yBAAAtF,MAAA8V,aAAAzP,gCAAA,OAiBAiQ,UAAA,SAAAjQ,EAAAC,EAAA8B,GACAA,EAAA3I,EAAAM,OAAA,GAAAoB,KAAAoV,qBAAAnO,GACA,IAAAiO,EAAA,SAAArW,MAAA8V,aAAAzP,KAAAxB,mBAAAyB,KACA8B,EAAApC,OACAqQ,GAAA,SAAAjO,EAAApC,MAEAoC,EAAAoO,SACAH,GAAA,WAAAjO,EAAAoO,QAEApO,EAAAqO,OACAJ,GAAA,uBAAAjO,EAAAqO,OACArO,EAAAsO,UACAL,GAAA,YAAAjO,EAAAsO,QAAAC,eAEAvO,EAAAwO,SACAP,GAAA,WAEA3O,SAAA2O,OAAAA,GAOAQ,aAAA,SAAAxQ,GACAlF,KAAAmV,UAAAjQ,EAAA,GAAA,IAAA1C,KAAA,yBASAmT,eAAA,SAAApB,GACA,IAAAqB,EAAAtX,EAAAiW,GAMA,OAJAqB,EAAAC,SAAA,aACAD,EAAAA,EAAAE,KAAA,mBAGA,CACAC,GAAAH,EAAA7O,KAAA,MACAiP,OAAAJ,EAAA7O,KAAA,WACAkP,MAAAL,EAAA7O,KAAA,SACAqE,OAAAwK,EAAA7O,KAAA,UACA1B,IAAAuQ,EAAA7O,KAAA,OACAmP,SAAAN,EAAAC,SAAA,YACAD,SAAAA,IAUAO,eAAA,SAAA5B,EAAA6B,GACA,IAAAR,EAAAtX,EAAAiW,GAMA,GAJA,UAAA6B,GAAA,UAAAA,IACAA,EAAA,UAGAR,EAAAC,SAAAO,GAAA,CAIA,IAAAC,EAAA,UAAAD,EAAA,QAAA,QAMA,GAJAR,EACA5D,SAAAoE,GACAE,YAAAD,GAEAT,EAAAC,SAAA,YAAA,CACA,IAAAU,EAAAX,EAAAE,KAAA,yBAEAU,EAAAlY,EAAA,SAAA,CACAmY,OAFA,UAAAL,EAAA,KAAA,OAEA,KACAM,OAAAH,EAAAnI,KAAA,WAAAmI,EAAAnI,KAAA,mBAGAmI,EAAAI,YAAAH,GAEAI,YAAA,CACAC,SAAA,CAAAL,EAAA,SAgBAM,WAAA,SAAA3I,EAAAlH,GAKA,QAJA,IAAAA,IACAA,EAAA,KAGAA,EAAA8P,SAAAA,QAAA9P,EAAA8P,SAAA,CAsBA,GAlBA9P,EAAAH,QACAxI,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAA,SACAX,IAAA0C,EAAAH,SAEA0H,SAAAL,GAGAlH,EAAA+P,UACA1Y,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAA,WACAX,IAAA0C,EAAA+P,WAEAxI,SAAAL,GAGAlH,EAAAnH,OACA,IAAA,IAAAoF,KAAA+B,EAAAnH,OAAA,CACA,IAAAqF,EAAA8B,EAAAnH,OAAAoF,GACA5G,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAA,EACAX,IAAAY,IAEAqJ,SAAAL,GAIAlH,EAAAgQ,cACAjX,KAAA8U,gBAAA,UAAAhJ,OAAAoL,SAGA/I,EAAAgJ,QAAA7Y,EAAAM,OAAA,CAAA0C,KAAA,UAAA2F,EAAAF,SAOAqQ,gBAAA,SAAAC,GACA,MAAAvE,EAAAxU,EAAA+Y,GACAvE,EAAAwE,GAAA,qBAAAC,IAEA,GAAA,IAAAA,EAAAC,QAAA,CACA,MAAAC,EAAA3E,EAAAgD,KAAA,cACA/W,EAAA0Y,EAAA1Y,MAAAwH,SAAAmR,gBACA,IAAA3Y,IACA,IAAAA,GAAAwY,EAAAI,UACAJ,EAAAK,iBACAL,EAAAM,kBACAJ,EAAAK,OAAAC,SACAhZ,IAAA0Y,EAAAnX,OAAA,GAAAiX,EAAAI,WACAJ,EAAAK,iBACAL,EAAAM,kBACAJ,EAAAO,QAAAD,cAWAE,eAAA,SAAAZ,GACA/Y,EAAA+Y,GAAAvB,KAAA,oBAAAiC,WAQAzZ,EAAAM,OAAAN,EAAA4Z,GACA,CACAC,YAAA,SAAAxX,EAAAyX,EAAAC,EAAAC,GACA,MAAA,QAAAzZ,MAAA0Z,YACAvY,KAAAwY,SAAA,CAAAC,KAAA9X,GAAAyX,EAAAC,EAAAC,GAEAtY,KAAAwY,SAAA,CAAAE,MAAA/X,GAAAyX,EAAAC,EAAAC,IAIAK,aAAA,SAAAhY,EAAAyX,EAAAC,EAAAC,GACA,MAAA,QAAAzZ,MAAA0Z,YACAvY,KAAAwY,SAAA,CAAAE,MAAA/X,GAAAyX,EAAAC,EAAAC,GAEAtY,KAAAwY,SAAA,CAAAC,KAAA9X,GAAAyX,EAAAC,EAAAC,IAOAM,QAAA,WACA,OAAA5Y,KAAAwT,MAAA,WACA,IAAAqF,EAAAva,EAAA0B,MACA6Y,EAAA7G,SAAA,YAEA6G,EAAA9R,KAAA,gBACA8R,EAAAC,WAAA,gBAQAC,OAAA,WACA,OAAA/Y,KAAAwT,MAAA,WACA,IAAAqF,EAAAva,EAAA0B,MACA6Y,EAAAvC,YAAA,YAEAuC,EAAA9R,KAAA,gBACA8R,EAAAzK,KAAA,WAAA,SAQA2E,KAAA,WACA,OAAA/S,KAAAwT,MAAA,WACA,IAAAV,EAAAxU,EAAA0B,MACAkU,EAAA,GAEApB,EAAA/L,KAAA,mBACAmN,EAAA8E,aAAAlG,EAAA/L,KAAA,kBAEA+L,EAAA/L,KAAA,UACAmN,EAAA+E,KAAA9W,SAAA2Q,EAAA/L,KAAA,UAEA+L,EAAA/L,KAAA,cACAmN,EAAAgF,QAAA/W,SAAA2Q,EAAA/L,KAAA,cAEA+L,EAAA/L,KAAA,mBACAmN,EAAAiF,YAAAhX,SAAA2Q,EAAA/L,KAAA,mBAEA+L,EAAA/L,KAAA,UACAmN,EAAAkF,KAAAtG,EAAA/L,KAAA,SAEA+L,EAAA/L,KAAA,eACAmN,EAAAmF,SAAAvG,EAAA/L,KAAA,cAEA+L,EAAA/L,KAAA,eACAmN,EAAAoF,SAAAxG,EAAA/L,KAAA,cAEA+L,EAAA/L,KAAA,kBACAmN,EAAAqF,aAAAzG,EAAA/L,KAAA,iBAGA,IAAAlI,MAAA2a,KAAAxZ,KAAAkU,OAIAlB,SAAA,WACA,OAAAhT,KAAAwT,MAAA,WACA,IAAA3U,MAAA4a,SAAAzZ,UAOAiT,eAAA,WACA,OAAAjT,KAAAwT,MAAA,WACAlV,EAAAyI,KAAA/G,KAAA,mBACA,IAAA6B,QAAA6X,eAAA1Z,UAQAkT,YAAA,WACA,OAAAlT,KAAAwT,MAAA,WACAlV,EAAAyI,KAAA/G,KAAA,gBACA,IAAAnB,MAAA8a,YAAA3Z,UAKAmT,YAAA,SAAAe,EAAA0F,EAAAC,GAEA,MAAA,aAAA3F,GACA,iBAAA0F,GACA1F,EAAA,IACA0F,GAAAC,EAEA3F,EAAA0F,EAGA5Z,KAAAwT,MAAA,WACA,IAAApU,EAAAd,EAAAyI,KAAA/G,KAAA,eACAZ,GACAA,EAAA0a,YAAA5F,QAIA5V,EAAA0G,cAAAkP,KACAA,EAAA,IAGAlU,KAAAwT,MAAA,WACA,IAAAuG,EAAAzb,EAAAM,OAAA,GAAAsV,GAEArS,QAAAmY,QAAAha,KAAA,gBACA+Z,EAAA5U,MAAA7G,EAAA0B,MAAAoO,KAAA,eAGAvM,QAAAmY,QAAAha,KAAA,8BACA+Z,EAAAE,mBAAA3b,EAAA0B,MAAAoO,KAAA,6BAGA9P,EAAAyI,KAAA/G,KAAA,gBACA,IAAAnB,MAAAqb,YAAAla,KAAA+Z,QAMA3G,SAAA,WACA,OAAApT,KAAAwT,MAAA,WACAlV,EAAAyI,KAAA/G,KAAA,aACA,IAAA6B,QAAAsY,SAAAna,UAKAqT,WAAA,WAEA,OAAArT,KAAAsX,GAAA,SAAA,SAAAC,GACA,IAAA6C,EAAA9b,EAAAiZ,EAAA8C,eACAva,EAAAsa,EAAArT,KAAA,WAAA,GACAqT,EAAArT,KAAA,WACAjH,EAAAsa,EAAArT,KAAA,UAAAqT,EAAArT,KAAA,UAGA,IAAAuT,EAAAF,EAAArT,KAAA,QAAAqT,EAAArT,KAAA,QAAAuT,QAAAF,EACAjM,EAAAmM,EAAAlM,KAAA,aAAA9P,EAAA,IAAAgc,EAAAlM,KAAA,cAAAkM,EAAAC,QAAA,QAEA1b,MAAAiY,WAAA3I,EAAA,CACA4I,QAAAqD,EAAArT,KAAA,WACAD,OAAAsT,EAAArT,KAAA,UACAiQ,SAAAoD,EAAArT,KAAA,YACAjH,OAAAA,EACAiH,KAAAzI,EAAAM,OAAA,CACA4b,cAAAJ,GACAA,EAAArT,KAAA,qBAKAuM,QAAA,WACA,OAAAtT,KAAAwT,MAAA,WACA,IAAA4G,EAAA9b,EAAA0B,MAEA,IAAAoa,EAAArT,KAAA,YAAAqT,EAAAK,OAAA5E,SAAA,QAAA,CACA,IAAA3B,EAAA,GAEAkG,EAAArT,KAAA,iBACAmN,EAAAwG,WAAAN,EAAArT,KAAA,gBAGA,IAAAlF,QAAA8Y,QAAAP,EAAAlG,QAKAX,SAAA,WACA,OAAAvT,KAAAwT,MAAA,WACA,IAAAoH,EAAAtc,EAAA0B,MACA6a,EAAAD,EAAA9E,KAAA,mCACAgF,EAAA,KACA,IAAAC,GAAA,EACA,IAAA,IAAA1b,EAAA,EAAAA,EAAAwb,EAAAva,OAAAjB,IACA,GAAAwb,EAAAxI,GAAAhT,GAAAkF,MAAA,CACAwW,GAAA,EACA,MAGA,GAAAA,GACA,IAAAH,EAAAI,SAAA,cAAA1a,OAAA,CACA,IAAA8Z,EAAA9b,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,YACAC,MAAArc,MAAAc,EAAA,MAAA,SACAwb,aAAAtc,MAAAc,EAAA,MAAA,WAEA6O,SAAAoM,GACAtD,GAAA,QAAA,KACA,IAAA,IAAAjY,EAAA,EAAAA,EAAAwb,EAAAva,OAAAjB,IACAwb,EAAAxI,GAAAhT,GAAAkF,IAAA,IAEA6V,EAAAgB,SACAP,EAAA7C,QAAAD,gBAIA6C,EAAAI,SAAA,cAAAI,UAGAP,EAAAvD,GAAA,SAAAwD,GACAA,UAMAjZ,QAAAsY,SAAAkB,cAAAC,GACAzc,MAAAc,EAAA,MAAA,wEAAA,CACAkB,MAAAya,IAIAzZ,QAAA0Z,KAAAC,OAAA,WACA3c,MAAAgU,oBCxoEAhU,MAAA2V,kBAAA3S,QAAA4Z,KAAA7c,OAAA,CACAgX,SAAA,KACA8F,UAAA,KACA1F,OAAA,KACAvJ,WAAA,KACAkP,YAAA,KAEAC,QAAA,KACAC,SAAA,KACAC,cAAA,KACAC,UAAA,KACAC,YAAA,KACAC,aAAA,KAEAC,MAAA,KACAC,iBAAA,KAEAC,SAAA,KAEAC,QAAA,KACAC,qBAAA,KACAC,YAAA,KACAC,aAAA,KACAC,WAAA,KACAC,SAAA,KACAC,aAAA,KAEAC,SAAA,KACAC,WAAA,KACAC,gBAAA,EAEAlT,YAAA,KACAmT,qBAAA,EACArQ,mBAAA,KAEAsQ,KAAA,SAAAzI,EAAAL,QAEA,IAAAA,GAAA5V,EAAA0G,cAAAuP,KAEAL,EAAAK,EACAA,EAAA,MAGAvU,KAAA4V,SAAAtX,EAAAiW,GACAvU,KAAA8Z,YAAA5F,EAAArV,MAAA2V,kBAAAyI,UAGAjd,KAAA4b,QAAAtd,EAAA,YAAA,CAAA2c,MAAA,gBACAjb,KAAA6b,SAAAvd,EAAA,SAAA,CAAA2c,MAAA,eAAAzM,SAAAxO,KAAA4b,SACA5b,KAAA8b,cAAAxd,EAAA,SAAA,CAAA2c,MAAA,cAAAzM,SAAAxO,KAAA6b,UACA7b,KAAAic,aAAA3d,EAAA,SAAA,CACA2c,MAAA,UACAC,MAAArc,MAAAc,EAAA,MAAA,WACAwb,aAAAtc,MAAAc,EAAA,MAAA,aACA6O,SAAAxO,KAAA6b,UACA7b,KAAA+b,UAAAzd,EAAA,OAAA,CACA4e,OAAA,SACAjC,MAAA,aACAC,MAAArc,MAAAc,EAAA,MAAA,wCACAwb,aAAAtc,MAAAc,EAAA,MAAA,wCACAwd,YAAA,aACA3O,SAAAxO,KAAA6b,UACA7b,KAAAgc,YAAA1d,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,yBACAC,MAAArc,MAAAc,EAAA,MAAA,gBACAwb,aAAAtc,MAAAc,EAAA,MAAA,gBACAwd,YAAA,YAAAtb,QAAAub,IAAA,QAAA,UACA5O,SAAAxO,KAAA6b,UAEA7b,KAAAqd,YAAArd,KAAAgc,YAAA,QAAAzE,IACAA,EAAAK,iBACA5X,KAAA8c,eAGA9c,KAAAsd,cAFAtd,KAAAud,gBAOAvd,KAAAkc,MAAA5d,EAAA,SAAA,CAAA2c,MAAA,YAGAjb,KAAAmc,iBAAA7d,EAAA,SAAA,CAAA2c,MAAA,WAAAzM,SAAAxO,KAAAkc,OAGAlc,KAAAoc,SAAA9d,EAAA,SAAA,CAAA2c,MAAA,sBAAAzM,SAAAxO,KAAAkc,OACArd,MAAAuY,gBAAApX,KAAAoc,UAGApc,KAAAqc,QAAA/d,EAAA,SAAA,CAAA2c,MAAA,qBACA,MAAAuC,EAAAlf,EAAA,SAAA,CAAA2c,MAAA,mBAAAzM,SAAAxO,KAAAqc,SACArc,KAAAsc,qBAAAhe,EAAA,SAAA,CAAA2c,MAAA,kBAAAzM,SAAAgP,GACAxd,KAAAuc,YAAAje,EAAA,aAAAkQ,SAAAxO,KAAAsc,sBACAtc,KAAAwc,aAAAle,EAAA,SAAA,CAAA2c,MAAA,mBAAAzM,SAAAgP,GACAxd,KAAAyc,WAAAne,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,MACA3X,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAxO,KAAAqc,SACArc,KAAA0c,SAAApe,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,aACA3X,KAAAzE,MAAAc,EAAA,MAAA,UACA6O,SAAAxO,KAAAqc,SACArc,KAAA2c,aAAAre,EAAA,SAAA,CAAA2c,MAAA,mBAAAzM,SAAAxO,KAAAqc,SAEA,IAAAoB,EAAAzd,KAAA4b,QAAA8B,IAAA1d,KAAAkc,OAAAwB,IAAA1d,KAAAqc,SAGArc,KAAA4c,SAAA,IAAA/d,MAAA8e,SAAAF,EAAA,CACAG,iBAAA,OACAC,oBAAA,CACA/W,OAAA,GACAiC,OAAA,OACA+U,WAAA,GACA7C,MAAA,kBAEA8C,YAAA,EACAC,mBAAA,IAEAhe,KAAA4c,SAAA9J,WAAA/L,KAAA,gBAAA/G,MACAA,KAAA4c,SAAAtF,GAAA,cAAA,KACAtX,KAAAsd,gBAEAtd,KAAA4c,SAAAtF,GAAA,QAAA,KACAtX,KAAAmX,QAAA,iBACAnX,KAAAie,YAIApc,QAAAqc,gBAAAC,iBAAA,CACA3G,QAAA3V,QAAAuc,MACAC,MAAA,GACA,KACAre,KAAAse,gBAEAzc,QAAAqc,gBAAAC,iBAAAtc,QAAA0c,QAAA,KACAve,KAAAwe,uBAEAxe,KAAAqd,YAAArd,KAAAyc,WAAA,QAAA,KACAzc,KAAAwe,uBAEAxe,KAAAqd,YAAArd,KAAA4c,SAAA6B,OAAA,QAAA,KACAze,KAAAwe,uBAEAxe,KAAAqd,YAAArd,KAAA4c,SAAA9J,WAAA,QAAAyE,IACA,MAAAmH,EAAApgB,EAAAqgB,MAAAzB,SAGAld,KAAA8c,gBACA4B,EAAAnE,QAAAva,KAAAgc,aAAA1b,QACAoe,EAAAnE,QAAAva,KAAAoc,UAAA9b,QAEAN,KAAAsd,gBAGAtd,KAAAqd,YAAArd,KAAA4c,SAAA9J,WAAA,SAAAyE,IACAA,EAAAK,iBACA5X,KAAAse,gBAEAte,KAAAqd,YAAArd,KAAAuc,YAAA,SAAA,cAEAvc,KAAA4e,OAAApV,KAAA,KACAxJ,KAAA6e,YACA7e,KAAA8e,aAAA9e,KAAAkc,UAIA6C,oBAAA,SAAA7Z,EAAAC,GACAnF,KAAAkU,SAAA8K,aACAhf,KAAAkU,SAAA8K,WAAA,IAGA,OAAA7Z,SACAnF,KAAAkU,SAAA8K,WAAA9Z,GAEAlF,KAAAkU,SAAA8K,WAAA9Z,GAAAC,GAIA8Z,YAAA,WACA,MAAAlY,EAAAzI,EAAAM,OAAA,GAAAoB,KAAAkU,SAAApU,QA0BA,OAxBAE,KAAAkU,SAAA8B,OACAjP,EAAAiP,OAAAhW,KAAAkU,SAAA8B,OACAhW,KAAA4V,UAAA5V,KAAA4V,SAAA7O,KAAA,aACAA,EAAAiP,OAAAhW,KAAA4V,SAAA7O,KAAA,YAGA/G,KAAAkU,SAAAwH,UACA3U,EAAA2U,UAAA1b,KAAAkU,SAAAwH,UACA1b,KAAA4V,UAAA5V,KAAA4V,SAAA7O,KAAA,QACAA,EAAA2U,UAAA1b,KAAA4V,SAAA7O,KAAA,OAGA/G,KAAAkU,SAAAL,cACA9M,EAAA8M,YAAA7T,KAAAkU,SAAAL,aAGA7T,KAAAkU,SAAA8K,aACAjY,EAAAiY,WAAAhf,KAAAkU,SAAA8K,YAGAhf,KAAAkU,SAAAgL,cACAnY,EAAAmY,YAAA,GAGAnY,GAGA6X,KAAA,SAAA7X,GACA,OAAA,IAAAiC,QAAA,CAAAC,EAAAC,KACAlJ,KAAAmX,QAAA,cAEAnX,KAAAmX,QAAA,gBACAnX,KAAAmf,kBACAnf,KAAAof,iBAEApf,KAAA4J,cACA5J,KAAA+c,qBAAA,EACA/c,KAAA4J,YAAAyV,UAGArf,KAAA4J,YAAAN,MAAAgW,YAAAC,SAEA1gB,MAAAiK,kBAAA,OAAA,2BAAA,CACAc,YAAA5J,KAAA4J,YAAArJ,MACAwG,KAAAzI,EAAAM,OAAAoB,KAAAif,cAAAlY,GAAA,GAAA,CACAyY,aAAA3gB,MAAA4gB,aAAAzf,KAAAkU,SAAAwL,qBAEAlW,KAAAkB,IACA1K,KAAA2f,kBACA3f,KAAAmX,QAAA,QAEAnX,KAAAmX,QAAA,cACAnX,KAAA4f,eACA5f,KAAA4J,YAAA,KACA,OAAA5J,KAAA0M,qBACA1M,KAAA0M,mBAAAhC,EAAA3D,KAAA2F,oBAEA1M,KAAA6f,WAAAnV,EAAA3D,MAAA,GACA/G,KAAA4J,YAAA,KACAX,MACAQ,MAAAkB,IACA3K,KAAA2f,kBACA3f,KAAA4f,eACA5f,KAAA4J,YAAA,KACA5J,KAAA+c,sBACAle,MAAAkJ,GAAAC,eACAkB,EAAAyB,IAEA3K,KAAA+c,qBAAA,OAKA+C,WAAA,WACA9f,KAAA4b,QAAAtF,YAAA,WAGAyJ,WAAA,WACA/f,KAAA4b,QAAA5J,SAAA,WAGAmN,gBAAA,WACAnf,KAAA8f,aACA9f,KAAAic,aAAA3F,YAAA,WAGAqJ,gBAAA,WACA3f,KAAAic,aAAAjK,SAAA,WAGAgO,WAAA,WACA,GAAAhgB,KAAAigB,YAAAlJ,QAAAlY,MAAAc,EAAA,MAAA,sFAEA,YADAK,KAAAuc,YAAAhY,IAAAvE,KAAAgW,QAIA,MAAAkK,EAAAlgB,KAAAuc,YAAAhY,MAEA2b,GAAAlgB,KAAAgW,SAIAhW,KAAAwc,aAAAlG,YAAA,UAEAtW,KAAA4e,KAAA,CAAA5I,OAAAkK,IAAA1W,KAAA,KACAxJ,KAAAwc,aAAAxK,SAAA,YACAvI,MAAA,KACAzJ,KAAAwc,aAAAxK,SAAA,UAEAhS,KAAAuc,YAAAhY,IAAAvE,KAAAgW,YAIA6J,WAAA,SAAA9Y,EAAAoZ,GAEAngB,KAAA6c,aACA7c,KAAA8b,cAAApd,KAAA,IACAsB,KAAA6c,WAAAoB,UACAje,KAAA6c,WAAA,MAGA7c,KAAAgW,OAAAjP,EAAAiP,OACAhW,KAAAmc,iBAAAzd,KAAAqI,EAAAqZ,WAEA,IAAAN,GAAA,EAEA,GAAA/Y,EAAAsZ,OAAAtZ,EAAAsZ,MAAA/f,OAAA,EAAA,CACAwf,GAAA,EACA9f,KAAAsc,qBAAAhG,YAAA,UACAtW,KAAAuc,YAAA7d,KAAA,IAEA,IAAA,IAAAW,EAAA,EAAAA,EAAA0H,EAAAsZ,MAAA/f,OAAAjB,IAAA,CACA,MAAAihB,EAAAvZ,EAAAsZ,MAAAhhB,GACAkhB,EAAAjiB,EAAA,YAAA,CACA6G,MAAAmb,EAAAvK,GACAzS,KAAAgd,EAAApb,OACAsJ,SAAAxO,KAAAuc,aACA+D,EAAAvK,IAAAhP,EAAAiP,QACAuK,EAAAnS,KAAA,WAAA,kBAIApO,KAAAsc,qBAAAtK,SAAA,UAGAjL,EAAAyZ,UACAV,GAAA,EACA9f,KAAA8b,cAAAnF,YAAA3W,KAAA8b,cAAAxd,EAAAyI,EAAAyZ,UACAxgB,KAAA6c,WAAA,IAAAhe,MAAA4hB,KAAAzgB,KAAA8b,eACA9b,KAAA6c,WAAAvF,GAAA,cAAAC,IACAjZ,EAAAiZ,EAAAmJ,KAAAtS,KAAA,SAAA4D,SAAA,YAEAhS,KAAA6c,WAAAvF,GAAA,YAAAC,IACAjZ,EAAAiZ,EAAAmJ,KAAAtS,KAAA,SAAAkI,YAAA,UACAzU,QAAA8e,KAAAxJ,QAAA,UACAnX,KAAAkc,MAAA/E,QAAA,aAIApQ,EAAA6Z,SACAd,GAAA,EACA9f,KAAA+b,UACAzF,YAAA,UACAlI,KAAA,OAAArH,EAAA6Z,UACA5gB,KAAA+b,WACA/b,KAAA+b,UAAA/J,SAAA,UAGAjL,EAAA8Z,aACAf,GAAA,EACA9f,KAAAgc,YAAA1F,YAAA,UACAtW,KAAAoc,SAAA1d,KAAAqI,EAAA8Z,aACAhiB,MAAAgU,eAAA7S,KAAAoc,WACA,IAAAvd,MAAAiiB,oBAAAlC,KAAAtgB,EAAA0B,KAAAoc,WAGApc,KAAAoc,SAAAtG,KAAA,KAAAtC,MAAA,WACAxT,KAAAkQ,SAAA5P,aAAA,IAAAhC,EAAA0B,MAAAoO,KAAA,WACA9P,EAAA0B,MAAAoO,KAAA,SAAA,cAGApO,KAAAgc,cACAhc,KAAAgc,YAAAhK,SAAA,UACAhS,KAAAoc,SAAApK,SAAA,WAGA8N,EACA9f,KAAA8f,aAEA9f,KAAA+f,aAGA/f,KAAAqc,QAAA/F,YAAA,WAEA,IAAA6J,IACAngB,KAAAyM,WAAA1F,EAAA0F,YAGA5K,QAAAkf,sBAAA,KACAliB,MAAAqT,eAAAnL,EAAAia,UACAniB,MAAA2T,eAAAzL,EAAAka,UACApiB,MAAAgU,eAAA7S,KAAAmc,kBAEAgE,IACAngB,KAAA2b,YAAA3b,KAAA4c,SAAA9J,WAAAoO,aAGArf,QAAAsf,mBACAtiB,MAAAoZ,eAAAjY,KAAAmc,kBAGAnc,KAAAmX,QAAA,iBAIAoG,YAAA,WACAvd,KAAA8c,iBAIA9c,KAAAkc,MAAAkF,UAAA,GAAApP,SAAA,aAEAhS,KAAAoc,SACAiF,IAAA,gCACAC,IAAAthB,KAAAuhB,wBACAjL,YAAA,UAGAtW,KAAAoc,SAAA,GAAAoF,YAEAxhB,KAAAoc,SAAAkF,IAAAthB,KAAAyhB,wBAEA5f,QAAAsf,mBACAnhB,KAAAoc,SAAAsF,IAAA,+BAAA,KACA7iB,MAAAoZ,eAAAjY,KAAAoc,YAIApc,KAAAgc,YACAhK,SAAA,UACA5D,KAAA,CACA8M,MAAArc,MAAAc,EAAA,MAAA,gBACAwb,aAAAtc,MAAAc,EAAA,MAAA,kBAGAkC,QAAA8e,KAAAxJ,QAAA,UACAnX,KAAAoc,SAAAjF,QAAA,UAEAtV,QAAAqc,gBAAAyD,WACA9f,QAAAqc,gBAAAC,iBAAAtc,QAAA0c,QAAA,KACAve,KAAAsd,gBAGAtd,KAAA8c,gBAAA,IAGAQ,YAAA,WACAtd,KAAA8c,iBAIA9c,KAAAkc,MAAA5F,YAAA,aAEAtW,KAAAoc,SACAiF,IAAA,gCACAC,IAAAthB,KAAAuhB,wBACAG,IAAA,+BAAA,KACA1hB,KAAAoc,SAAApK,SAAA,YAGAhS,KAAAgc,YACA1F,YAAA,UACAlI,KAAA,CACA8M,MAAArc,MAAAc,EAAA,MAAA,gBACAwb,aAAAtc,MAAAc,EAAA,MAAA,kBAGAkC,QAAAqc,gBAAA0D,cAEA5hB,KAAA8c,gBAAA,IAGA2E,qBAAA,WACA,MAAA,CACAI,CAAAhgB,QAAAub,IAAA,QAAA,QAAA,MAIAmE,qBAAA,WACA,MAAA,CACAM,CAAAhgB,QAAAub,IAAA,QAAA,QAAA,WAIAkB,YAAA,WACA,MAAAwD,EAAA9hB,KAAAkU,SAAA4N,WAEA,GAAAxjB,EAAAY,QAAA4iB,GACA,IAAA,IAAAziB,EAAA,EAAAA,EAAAyiB,EAAAxhB,OAAAjB,IACA,GAAAf,EAAAyjB,WAAAD,EAAAziB,MAAAyiB,EAAAziB,GAAA2iB,OACA,OAAA,EAKAhiB,KAAA2c,aAAArG,YAAA,UAEA,IAAAvP,EAAAzI,EAAA6C,MAAAnB,KAAAif,eAAA,IAAAjf,KAAA4c,SAAA9J,WAAAoO,YACAna,EAAAlI,MAAAyN,cAAAtM,KAAA2b,YAAA5U,EAAA/G,KAAAyM,WAAA,KAAAzM,KAAA0M,oBAEA7N,MAAAgI,kBAAA,wBAAAE,EAAA,CAAA2D,EAAA9C,KAGA,GAFA5H,KAAA2c,aAAA3K,SAAA,UAEA,YAAApK,EACA,GAAA8C,EAAAhD,QAAA,CACA,GAAA1H,KAAA4V,UAAA5V,KAAAgW,QAAAhW,KAAA4V,SAAA7O,KAAA,WAAA,CAEA,MAAAkb,EAAAjiB,KAAA4V,SAAAE,KAAA,UACAoM,EAAAD,EAAAnM,KAAA,KAEAoM,EAAA5hB,QAAAoK,EAAAyX,WACAD,EAAA9T,KAAA,OAAA1D,EAAAyX,WACAD,EAAA5e,KAAAoH,EAAA0X,WAEAH,EAAA3e,KAAAoH,EAAA0X,UAIApiB,KAAAkU,SAAAL,aAAAhV,MAAAwjB,iBAAAriB,KAAAkU,SAAAL,cACAhV,MAAAkJ,GAAAua,cAAAzjB,MAAAc,EAAA,MAAA,gBAAA,CACA2B,KAAAzC,MAAAwjB,iBAAAriB,KAAAkU,SAAAL,aAAA,MAIA7T,KAAAuiB,gBACAviB,KAAAmX,QAAA,cAAA,CACAzM,SAAAA,IAEA1K,KAAAwiB,cAAA9X,GACA1K,KAAAkU,SAAAsO,cAAA9X,GAGA7L,MAAAkJ,GAAA0a,gBAEAziB,KAAA6f,WAAAnV,GAAA,GACA7I,QAAA6gB,MAAA1iB,KAAA4c,SAAA9J,eAMAmN,QAAA,WACA,OAAA,OAAAjgB,KAAA2b,aAAA3b,KAAA4c,SAAA9J,WAAAoO,cAAAlhB,KAAA2b,aAGA6C,mBAAA,WACAxe,KAAA4c,SAAA+F,SAIA3iB,KAAAigB,YAAAlJ,QAAA,yEACA/W,KAAAuiB,kBAIAA,cAAA,WACAviB,KAAA4c,SAAA3b,QACAjB,KAAA4iB,YAEA5iB,KAAA4J,cACA5J,KAAA+c,qBAAA,EACA/c,KAAA4J,YAAAyV,WAIApB,QAAA,WACAje,KAAA4c,SAAAqB,iBACAje,KAAA4c,SACA5c,KAAA6iB,QAOAC,QAAA,WACA9iB,KAAA4e,QAGAmE,cAAA,WACA/iB,KAAAwe,sBAGAwE,SAAA,WACAhjB,KAAAuiB,iBAGAU,WAAA,SAAAlc,EAAAC,GACAhH,KAAA4e,KAAA7X,GAAAyC,KAAA,KACAxC,EAAA,aACAyC,MAAA,KACAzC,EAAA,YAIAoY,eAAA,WACApf,KAAAkU,SAAAkL,kBAGAQ,aAAA,WACA5f,KAAAkU,SAAA0L,gBAGA4C,cAAA,SAAA9X,KAGAoU,aAAA,SAAA3Q,GACAnO,KAAAkU,SAAA4K,aAAA3Q,IAGA0Q,UAAA,WACA7e,KAAAmX,QAAA,WACAnX,KAAAkU,SAAA2K,aAGA+D,UAAA,WACA5iB,KAAAmX,QAAA,WACAnX,KAAAkU,SAAA0O,cAEA,CACA3F,SAAA,CACAyC,kBAAA,EACAhE,UAAA,KACA7H,YAAA,KACAmC,OAAA,KACAgJ,WAAA,KACAlf,OAAA,KACAof,aAAA,EACAgE,aAAA,KACAV,cAAAlkB,EAAA6kB,KACArB,WAAA,GAGAjD,UAAAvgB,EAAA6kB,KAEAP,UAAAtkB,EAAA6kB,KAEA/D,eAAA9gB,EAAA6kB,KAEAvD,aAAAthB,EAAA6kB,KAEArE,aAAAxgB,EAAA6kB,QC3nBAtkB,MAAAsV,iBAAAtS,QAAA4Z,KAAA7c,OAAA,CACAwkB,aAAA,EACAvP,YAAA,KAEAwP,cAAA,KACAC,aAAA,KACAC,uBAAA,KAEAC,cAAA,KACAC,aAAA,KAEA3Q,WAAA,KACA4Q,MAAA,KACAC,aAAA,EAEAvH,SAAA,KACAU,eAAA,KACA8G,UAAA,KACAC,gBAAA,KACAC,QAAA,KACAC,aAAA,KACAC,gBAAA,KAEAC,qBAAA,KACAC,sBAAA,KAEArI,SAAA,KACAsI,cAAA,KAEAC,QAAA,KACAC,WAAA,EACAC,WAAA,KACAC,SAAA,EACAC,QAAA,EACAC,gBAAA,KAEAC,eAAA,KACAC,qBAAA,KACAC,WAAA,KACAxZ,OAAA,KAEAyZ,aAAA,KACAC,SAAA,KACA9O,OAAA,KAEA+O,aAAA,KACAC,SAAA,KACAC,oBAAA,KACAC,oBAAA,KACAC,oBAAA,KACAC,wBAAA,KAEAC,UAAA,KACAC,sBAAA,KACAC,aAAA,KACAC,SAAA,KACAC,KAAA,KACAC,oBAAA,KACAC,cAAA,KACAC,gBAAA,KACAC,KAAA,EACAC,UAAA,KACAC,aAAA,KACAC,WAAA,KAEAC,QAAA,KACAC,gBAAA,KACAC,gBAAA,KACAC,oBAAA,KACAC,mBAAA,KACAC,uBAAA,EACAC,UAAA,KACAC,gBAAA,KACAC,uBAAA,KACAC,WAAA,KAEAC,sBAAA,EACAC,aAAA,KAKA5J,KAAA,SAAAnJ,EAAAf,EAAAoB,GAgDA,GA/CAlU,KAAA6T,YAAAA,EACA7T,KAAA8S,WAAAA,EACA9S,KAAA8Z,YAAA5F,EAAArV,MAAAsV,iBAAA8I,UAKAjd,KAAAqjB,cAAArjB,KAAA6mB,0BAEA7mB,KAAAsjB,aAAA,GAGAtjB,KAAAkU,SAAA4S,YACAxoB,EAAAM,OAAAoB,KAAAqjB,cAAAxkB,MAAA4V,gBAAAzU,KAAAkU,SAAA4S,YAAA,IAIA9mB,KAAAujB,uBAAA,oBAAAvjB,KAAA6T,YAAA,IAAA7T,KAAAkU,SAAA6S,QACAzoB,EAAAM,OAAAoB,KAAAsjB,aAAAzkB,MAAA4V,gBAAAzU,KAAAujB,uBAAA,KAKAvjB,KAAA0jB,MAAA1jB,KAAA8S,WAAAgD,KAAA,SACA9V,KAAA6b,SAAA7b,KAAA8S,WAAAgD,KAAA9V,KAAAkU,SAAA8S,iBACAhnB,KAAA0kB,eAAA1kB,KAAA6b,SAAA/F,KAAA,wBACA9V,KAAA2kB,qBAAA3kB,KAAA0kB,eAAAuC,SACAjnB,KAAA6kB,aAAA7kB,KAAA8S,WAAAgD,KAAA,sBACA9V,KAAA+kB,aAAA/kB,KAAA6b,SAAA/F,KAAA,sBACA9V,KAAAokB,QAAApkB,KAAA6b,SAAA/F,KAAA,6BACA9V,KAAAykB,gBAAAzkB,KAAA6b,SAAA/F,KAAA,0BACA9V,KAAAoc,SAAApc,KAAA8S,WAAAgD,KAAA,kBACA9V,KAAAikB,qBAAAjkB,KAAAoc,SAAAtG,KAAA,sBACA9V,KAAAqlB,UAAArlB,KAAA8S,WAAAgD,KAAA,mBACA9V,KAAA2lB,cAAA3lB,KAAA8S,WAAAgD,KAAA,kBACA9V,KAAA4lB,gBAAA5lB,KAAA8S,WAAAgD,KAAA,oBACA9V,KAAAgmB,WAAAhmB,KAAA8S,WAAAgD,KAAA,eAGA9V,KAAAkU,SAAAoJ,cACAtd,KAAAoc,SAAA8K,OACA5oB,EAAA,kBAAA0B,KAAA8S,YAAAwD,YAAA,gBAMAtW,KAAAmnB,cAAA,CAqBA,GAhBAnnB,KAAAikB,qBAAA3jB,QACAN,KAAAqd,YAAArd,KAAAikB,qBAAA,QAAA,+BAMAjkB,KAAA0kB,eAAApkB,SACAN,KAAA4kB,WAAA5kB,KAAA0kB,eAAApR,UAAAvM,KAAA,WAAAqgB,KACApnB,KAAA4kB,WAAAtN,GAAA,eAAAtX,KAAAqnB,oBAAAC,KAAAtnB,QAOAA,KAAA6kB,aAAAvkB,OAAA,CACAN,KAAA8kB,SAAA9kB,KAAA6kB,aAAAvR,UAAAvM,KAAA,WAAAqgB,KAGA,IAAA7G,EAAAvgB,KAAA8kB,SAAAyC,SAAAC,OAAA,cAeA,GAbAjH,EAAAjgB,SACAigB,EAAAvgB,KAAA8kB,SAAAyC,SAAAvP,SAGAuI,EAAAjgB,OACAN,KAAAynB,SAAAlH,EAAAxZ,KAAA,YAGA/G,KAAAkU,SAAAwT,SAAA,CAAA3R,GAAA,KAGA/V,KAAA8kB,SAAAxN,GAAA,eAAAtX,KAAA2nB,kBAAAL,KAAAtnB,OAEAA,KAAAgW,OAAA,CAEA,IAAA4R,EAAA5nB,KAAAkU,SAAA0T,eAAA/oB,MAAAkJ,GAAA8f,YAEA,GAAAD,GAAAA,GAAA5nB,KAAAgW,OAAA,CAEA,IAAA8R,EAAA9nB,KAAA8kB,SAAAyC,SAAAC,OAAA,kBAAAI,EAAA,YAEAE,EAAAxnB,QAEAwnB,EAAA3Q,QAAA,gBAIAnX,KAAAkU,SAAAwT,UAAA1nB,KAAAkU,SAAAwT,SAAA1R,QAAA,MAAAhW,KAAAkU,SAAAwT,SAAA1R,OACAhW,KAAAynB,SAAAznB,KAAAkU,SAAAwT,SAAA1R,QAEAhW,KAAAynB,SAAA5oB,MAAAmX,QAIAhW,KAAAkU,SAAAwT,UAAA1nB,KAAAkU,SAAAwT,SAAA1R,eACAhW,KAAAkU,SAAAwT,SAAA1R,OAOAhW,KAAAqd,YAAArd,KAAAokB,QAAA,QAAA,MACApkB,KAAAqkB,WAAArkB,KAAAokB,QAAA7f,MACAvE,KAAA+nB,iBACA/nB,KAAAqkB,YAAArkB,KAAAokB,QAAA7f,OACAvE,KAAAgoB,gBAGAhoB,KAAAwjB,eACAyE,aAAAjoB,KAAAwjB,eAGAxjB,KAAAwjB,cAAA0E,WAAAloB,KAAAmoB,kCAAAb,KAAAtnB,MAAA,OAIAA,KAAAqd,YAAArd,KAAAokB,QAAA,WAAA7M,IACAA,EAAAC,UAAA3V,QAAAumB,aACA7Q,EAAAK,iBAEA5X,KAAAwjB,eACAyE,aAAAjoB,KAAAwjB,eAGAxjB,KAAAmoB,uCAKAnoB,KAAAqd,YAAArd,KAAAykB,gBAAA,QAAA,KACAzkB,KAAAokB,QAAA7f,IAAA,IAEAvE,KAAAwjB,eACAyE,aAAAjoB,KAAAwjB,eAGA3hB,QAAAsf,iBAAA,IACAnhB,KAAAokB,QAAAjN,QAAA,SAGAnX,KAAAgoB,gBAEAhoB,KAAAmoB,sCAIAtmB,QAAAsf,iBAAA,IACAnhB,KAAAokB,QAAAjN,QAAA,SAOAnX,KAAA+kB,aAAAzkB,SACAN,KAAAglB,SAAAhlB,KAAA+kB,aAAAzR,UAAAvM,KAAA,WAAAqgB,KACApnB,KAAAilB,oBAAAjlB,KAAAglB,SAAAlS,WAAAkI,SAAA,oBACAhb,KAAAklB,oBAAAllB,KAAAglB,SAAAlS,WAAAkI,SAAA,oBAEAhb,KAAAglB,SAAA1N,GAAA,eAAAtX,KAAAqoB,kBAAAf,KAAAtnB,QAMAA,KAAAqd,YAAArd,KAAAgmB,WAAA,QAAA,kBAKAhmB,KAAAojB,aAAA,EACApjB,KAAAsoB,YAKAtoB,KAAAuoB,sBAMAvoB,KAAAwoB,QAAA3pB,MAAA4pB,SAEAzoB,KAAA0oB,gBAAA,KAGAJ,UAAA,WACAtoB,KAAA2oB,eAGAC,mBAAA,WAEA,OADA5oB,KAAA4mB,aAAAtd,MAAAgW,YAAAC,SACAvf,KAAA4mB,aAAArmB,OAGAsoB,gBAAA,WACA7oB,KAAA4mB,eACA5mB,KAAA2mB,sBAAA,EACA3mB,KAAA4mB,aAAAvH,SACAxd,QAAAkf,sBAAA,KACA/gB,KAAA2mB,sBAAA,MAKAmC,mBAAA,WACA,OAAA9oB,KAAAoc,SAAAtG,KAAA,aAGAiT,eACA,GAAA/oB,KAAAyjB,aAIA,OAAAzjB,KAAAyjB,aAAAuF,QAGAC,QAAA,WACA,GAAAjpB,KAAAgW,OAGA,OAAAnX,MAAAwhB,MAAAvK,KAAAoT,GAAAA,EAAAnT,IAAA/V,KAAAgW,SAGAmR,YAAA,WACA,IAAA4B,EAAA/oB,KAAAmpB,kBAAAnpB,KAAA8oB,sBAGA,GAAA,IAAAC,EAAAzoB,OACA,OAAA,EAIAN,KAAAyjB,eACAzjB,KAAAyjB,aAAA,IAAA5hB,QAAAunB,OAAAppB,KAAAoc,SAAAtG,KAAA,OAAA,CACAuT,OAAA,EACAC,YAAA,EACAC,UAAA,EACAC,kBAAAxpB,KAAAypB,6BAAAnC,KAAAtnB,SAIAA,KAAA+jB,aAAA,GAEA,IAAA,IAAA1kB,EAAA,EAAAA,EAAA0pB,EAAAzoB,OAAAjB,IACAW,KAAA0pB,WAAAprB,EAAAyqB,EAAA1pB,KAGA,OAAA,GAGAkpB,oBAAA,WACA,IACAzE,EADAF,EAAA5jB,KAAA2pB,sBAiBA,OAdA/F,IACAE,EAAA9jB,KAAA4pB,eAAAhG,IAGA,IAAA5jB,KAAAgkB,gBAAAjlB,MAAA+kB,KACAA,EAAA,OAIAF,GAAAE,IAEAA,EAAA9jB,KAAAgkB,gBAAAhM,SAGAhY,KAAA6pB,aAAA/F,IAGAgG,eAAA,WACA9pB,KAAAyjB,aAAAsG,iBAEA/pB,KAAAgqB,eAEAnrB,MAAAiK,kBAAA,OAAA9I,KAAAkU,SAAA+V,qBAAA,CACAljB,KAAA,CACAggB,QAAA/mB,KAAAkU,SAAA6S,QACAlT,YAAA7T,KAAA6T,eAEArK,KAAAkB,IACA1K,KAAAkqB,oBACAlqB,KAAA8oB,qBAAAnS,YAAAjM,EAAA3D,KAAArI,MACAsB,KAAAmnB,cACAnnB,KAAAuoB,wBACA9e,MAAA,KACAzJ,KAAAkqB,oBACAlqB,KAAA2mB,sBACA9nB,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAA,gCAKA+pB,WAAA,SAAA5F,GACA9jB,KAAAyjB,aAAA0G,SAAArG,GACA9jB,KAAAoqB,iBAAAtG,GACA9jB,KAAA+jB,aAAAD,EAAA/c,KAAA,QAAA+c,EAEAA,EAAA/c,KAAA,sBAAA,IAAA/G,KAAAqjB,cAAAgH,gBAAAvpB,QAAAgjB,EAAA/c,KAAA,SACA/G,KAAAsqB,cAAAxG,IAIAsG,iBAAA,SAAAtG,GAEA9jB,KAAAuqB,mBAAAzG,GAEA,IAAA0G,EAAAxqB,KAAAyqB,iBAAA3G,GAEA0G,EAAAlqB,QACAN,KAAAqd,YAAAyG,EAAA,WAAA,yBACA9jB,KAAAqd,YAAAmN,EAAA,QAAA,4BACA1G,EAAA/c,KAAA,oBAAA,IAEA+c,EAAA/c,KAAA,oBAAA,IAIA2jB,aAAA,SAAA5G,GACA9jB,KAAAyjB,aAAAkH,YAAA7G,GACA9jB,KAAAuqB,mBAAAzG,UACA9jB,KAAA+jB,aAAAD,EAAA/c,KAAA,SAGAwjB,mBAAA,SAAAzG,GACAA,EAAA/c,KAAA,sBACA/G,KAAA4qB,eAAA9G,EAAA,YACA9jB,KAAA4qB,eAAA5qB,KAAAyqB,iBAAA3G,GAAA,UAGAA,EAAA+G,WAAA,qBAGAhE,wBAAA,WACA,MAAA,CACAiE,eAAA,KACAT,gBAAA,KAIAV,oBAAA,WACA,GAAA3pB,KAAAkU,SAAA6W,cAAA,CAKA,IAJA,IAAAC,EAAAhrB,KAAAkU,SAAA6W,cAAA7pB,MAAA,KACA2D,EAAA,GAGAxF,EAAA,EAAAA,EAAA2rB,EAAA1qB,OAAAjB,IAAA,CACAwF,GAAAmmB,EAAA3rB,GACA,IAAAykB,EAAA9jB,KAAA4pB,eAAA/kB,GAGA,IAAAif,EACA,OAAA9jB,KAAAqjB,cAAAyH,eAGA9qB,KAAAsqB,cAAAxG,GACAjf,GAAA,IAMA,OAFA7E,KAAAynB,SAAAznB,KAAAgW,QAEAhW,KAAAkU,SAAA6W,cAGA,OAAA/qB,KAAAqjB,cAAAyH,gBAGAG,0BAAA,WACA,OAAAjrB,KAAAqjB,cAAAgH,iBAGAtC,eAAA,WAEA/nB,KAAAykB,gBAAAnO,YAAA,UAEAtW,KAAAmlB,sBACAnlB,KAAAmlB,oBAAA7mB,EAAA,4BAAAO,MAAAc,EAAA,MAAA,SAAA,aACAK,KAAAglB,SAAAkG,WAAAlrB,KAAAmlB,oBAAAnK,aAGAhb,KAAAmlB,oBAAAgG,UAAAnrB,KAAAilB,qBAEAjlB,KAAAqkB,WAAA,EAEArkB,KAAAorB,6BACAprB,KAAAqrB,iBAAA,UAGArD,cAAA,WAEAhoB,KAAAykB,gBAAAzS,SAAA,UAEAhS,KAAAmlB,oBAAAmG,SAEAtrB,KAAAqkB,WAAA,EAEArkB,KAAAorB,8BAGAG,iBAAA,SAAAtsB,EAAAkG,GACA,iBAAAlG,EACAX,EAAAM,OAAAoB,KAAAqjB,cAAApkB,GAEAe,KAAAqjB,cAAApkB,GAAAkG,EAGAnF,KAAAwrB,sBAGAA,mBAAA,WACAxrB,KAAAkU,SAAA4S,YACAjoB,MAAAiW,gBAAA9U,KAAAkU,SAAA4S,WAAA9mB,KAAAqjB,gBAIAoI,eAAA,SAAAlM,EAAAtgB,EAAAyV,GAMA,YALA,IAAA1U,KAAAsjB,aAAA/D,KAEAvf,KAAAsjB,aAAA/D,GAAA,SAGA,IAAAtgB,EACAe,KAAAsjB,aAAA/D,QACA,IAAAvf,KAAAsjB,aAAA/D,GAAAtgB,GACAe,KAAAsjB,aAAA/D,GAAAtgB,QAEA,IAAAyV,EAAAA,EAAA,MAIAgX,uBAAA,SAAAzsB,EAAAyV,GACA,OAAA1U,KAAAyrB,eAAAzrB,KAAAqjB,cAAAyH,eAAA7rB,EAAAyV,IAGAiX,wBAAA,SAAA1sB,EAAAkG,GACA,IAAAymB,EAAA5rB,KAAA0rB,yBAEA,iBAAAzsB,EACAX,EAAAM,OAAAgtB,EAAA3sB,GAEA2sB,EAAA3sB,GAAAkG,EAGAnF,KAAAsjB,aAAAtjB,KAAAqjB,cAAAyH,gBAAAc,EAGA/sB,MAAAiW,gBAAA9U,KAAAujB,uBAAAvjB,KAAAsjB,eAGAuI,+BAAA,WACA,IAAAzd,EAAApO,KAAA8rB,2BAEA,UAAA1d,GACApO,KAAA2rB,wBAAA,CACAI,MAAA3d,EACAzB,KAAA3M,KAAAgsB,8BAQAxD,QAAA,SAAA3C,GACA,GAAA,UAAA7lB,KAAAkU,SAAA6S,QAAA,CAIAlB,EAAAhV,KAAAob,IAAApG,EAAA,GACA7lB,KAAA6lB,KAAAA,EAGA,IAAAxgB,EAAAkB,SAAAC,SAAAC,KACA9H,QAAA,QAAA,IACAA,QAAA,IAAAwF,OAAA,IAAAtF,MAAAqtB,YAAAvtB,QAAA,sBAAA,QAAA,SAAA,IACAA,QAAA,OAAA,IAEA,IAAAqB,KAAA6lB,OACA,MAAAhnB,MAAAqtB,YAAA,KACA7mB,GAAA,KAEAA,GAAAxG,MAAAqtB,YAAAlsB,KAAA6lB,MAGAsG,QAAAC,aAAA,GAAA,GAAA/mB,KAGAgnB,YAAA,WACArsB,KAAA8lB,UAAA,KACA9lB,KAAA+lB,aAAA,MAOAuG,cAAA,WACA,IAAA5E,EAAA,CACA1R,OAAAhW,KAAAgW,OACAzQ,OAAAvF,KAAAskB,WACAtiB,OAAAhC,KAAAkU,SAAAqY,WAAAvsB,KAAA6lB,KAAA,GACA2G,MAAAxsB,KAAAkU,SAAAqY,WAKAvsB,KAAAkU,SAAAuY,gBACAzsB,KAAAwkB,QAAA,UAAAxkB,KAAAkU,SAAA6S,UAAA/mB,KAAAoL,UAEAsc,EAAAlD,OAAAxkB,KAAAwkB,QAAA,KACAkD,EAAAgF,iBAAA,EACA1sB,KAAAwkB,SACAkD,EAAAiF,SAAA,IAGA3sB,KAAAukB,UACAmD,EAAAnD,SAAA,GAGA1iB,QAAAmY,QAAAha,KAAA8jB,QAAA,0BACA4D,EAAAtc,OAAApL,KAAAoL,QAGA9M,EAAAM,OAAA8oB,EAAA1nB,KAAAkU,SAAAwT,UAEA,IAAA5nB,EAAA,CACAinB,QAAA/mB,KAAAkU,SAAA6S,QACAlT,YAAA7T,KAAA6T,YACA0L,OAAAvf,KAAAqjB,cAAAyH,eACApD,SAAAA,EACAkF,mBAAA5sB,KAAAkU,SAAA0Y,mBACAhB,UAAAttB,EAAAM,OAAA,GAAAoB,KAAA0rB,0BACAmB,UAAA7sB,KAAA8sB,mBAAA,EAAA,GAmBA,OAfAhtB,EAAA8rB,UAAAG,MAAA/rB,KAAA8rB,2BACAhsB,EAAA8rB,UAAAjf,KAAA3M,KAAAgsB,2BAEA,cAAAhsB,KAAA8rB,kCACA,IAAA9rB,KAAAqjB,cAAA0J,sBACA/sB,KAAAqjB,cAAA0J,oBAAA,IAEAjtB,EAAAitB,oBAAA/sB,KAAAqjB,cAAA0J,qBAIA/sB,KAAAmX,QAAA,qBAAA,CACArX,OAAAA,IAGAA,GAGA4oB,eAAA,SAAAsE,GAEA,GAAAhtB,KAAAojB,YAAA,CAKApjB,KAAA6oB,kBAEA7oB,KAAAgqB,eAGAhqB,KAAAylB,OACAzlB,KAAAylB,KAAAxH,iBACAje,KAAAylB,OAGA,IAAAuH,IACAhtB,KAAAwoB,QAAA,GACAxoB,KAAAqsB,eAGA,IAAAvsB,EAAAE,KAAAssB,gBAEAztB,MAAAiK,kBAAA,OAAA9I,KAAAkU,SAAA+Y,qBAAA,CACAlmB,KAAAjH,EACA8J,YAAA5J,KAAA4oB,uBACApf,KAAAkB,IACA1K,KAAAkqB,qBACA,UAAAlqB,KAAAkU,SAAA6S,QAAAllB,QAAAqrB,iBAAAltB,KAAA0jB,OAAAtC,UAAA,GACAphB,KAAAmtB,YAAArtB,EAAA4K,EAAA3D,QACA0C,MAAAkB,IACA3K,KAAAkqB,oBACAlqB,KAAA2mB,sBACA9nB,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAA,iCAKAwoB,kCAAA,WACAnoB,KAAAskB,cAAAtkB,KAAAskB,WAAAtkB,KAAAqkB,UAAArkB,KAAAokB,QAAA7f,MAAA,OACAvE,KAAA0oB,kBAIA0E,mBAAA,WAEAptB,KAAAsmB,wBAMAtmB,KAAA6b,SAAAyF,IAAA,aAAAthB,KAAA6b,SAAAwR,UAGArtB,KAAAymB,uBAAAzmB,KAAA6b,SAAAb,WACAhb,KAAAymB,uBAAA6E,SAEAtrB,KAAA0mB,WAGA1mB,KAAA0mB,WAAAlY,SAAAxO,KAAA6b,UAFA7b,KAAAstB,kBAKAttB,KAAAsmB,uBAAA,IAGAiH,aAAA,SAAAzmB,EAAA0mB,GAEA,IAAAC,EAAAztB,KAAAylB,KAAAiI,wBAGA,GAAA,IAFAD,EAAAntB,SAMA,iBAAAwG,IACAA,EAAA9G,KAAA2tB,YAAA7mB,KAGAA,EAAAiQ,SAAAA,QAAAjQ,EAAAiQ,UAAA,CAKA/W,KAAA6oB,kBAGA,IAAA+E,EAAA5tB,KAAAssB,gBAEAkB,EAAAA,EAAA3uB,MAAAgP,gBAAA2f,GAAA,GACA,IAAA1tB,EAAAxB,EAAAM,OAAAgvB,EAAA9mB,EAAAoN,UAAA,GAAAsZ,EAAA,CACAK,cAAA/mB,EAAAxF,KACAwsB,WAAAL,IAIAztB,KAAAgqB,eACAhqB,KAAA0lB,oBAAA+H,EAEA3mB,EAAAmF,UACApN,MAAA8H,gBACA7G,EAAAjB,MAAA8H,eAAA9H,MAAA+H,gBAEA/H,MAAAiM,gBAAA,OAAAjM,MAAAuH,aAAApG,KAAAkU,SAAA6Z,qBAAAjuB,GAAA0J,KAAAkB,IACA1K,KAAAkqB,sBACAzgB,MAAAkB,IACA3K,KAAAkqB,uBAGArrB,MAAAiK,kBAAA,OAAA9I,KAAAkU,SAAA6Z,oBAAA,CACAhnB,KAAAjH,EACA8J,YAAA5J,KAAA4oB,uBACApf,KAAAkB,IACA1K,KAAAkqB,oBACAxf,EAAA3D,KAAAW,SAEA1H,KAAAqsB,cACArsB,KAAAmtB,YAAAS,EAAAljB,EAAA3D,WAEA,IAAA2D,EAAA3D,KAAAinB,aACAhuB,KAAAiuB,mBAAAvjB,EAAA3D,KAAAinB,aAGAtjB,EAAA3D,KAAAlH,SACAhB,MAAAkJ,GAAAua,cAAA5X,EAAA3D,KAAAlH,SAGAG,KAAAkuB,YAAApnB,EAAAhH,IAEAjB,MAAAkJ,GAAAC,aAAA0C,EAAA3D,KAAAlH,WAEA4J,MAAA,KACAzJ,KAAAkqB,wBAKAyD,YAAA,SAAAQ,GACA,IAAA,IAAA9uB,EAAA,EAAAA,EAAAW,KAAAimB,QAAA3lB,OAAAjB,IACA,GAAAW,KAAAimB,QAAA5mB,GAAAiC,OAAA6sB,EACA,OAAAnuB,KAAAimB,QAAA5mB,GAGA,KAAA,2BAAA8uB,GAGAD,YAAA,SAAApnB,EAAAhH,GAEAjB,MAAAkJ,GAAA0a,WAEAziB,KAAAouB,cAAAtnB,EAAAhH,IAGAuuB,mBAAA,WAEAruB,KAAAsmB,wBAIAtmB,KAAAymB,uBAAAjY,SAAAxO,KAAA6b,UACA7b,KAAA0mB,WAAA4E,SAIAtrB,KAAA6b,SAAAyF,IAAA,aAAA,IAEAthB,KAAAsmB,uBAAA,IAGAgI,qBAAA,WAEA,GAAAtuB,KAAAimB,QAAA,CACA,IAAAsI,EAAAvuB,KAAAylB,KAAA+I,sBAAAluB,OAEA,IAAAiuB,GACAA,IAAAvuB,KAAAylB,KAAAgJ,qBAAAnuB,QACAN,KAAAqmB,mBAAA/P,YAAA,iBACAtW,KAAAqmB,mBAAArU,SAAA,WACAhS,KAAAomB,oBAAAhY,KAAA,eAAA,UAEApO,KAAAqmB,mBAAArU,SAAA,iBACAhS,KAAAqmB,mBAAA/P,YAAA,WACAtW,KAAAomB,oBAAAhY,KAAA,eAAA,UAGApO,KAAAotB,uBAEAptB,KAAAqmB,mBAAA/P,YAAA,yBACAtW,KAAAomB,oBAAAhY,KAAA,eAAA,SACApO,KAAAquB,wBAKAG,oBAAA,WACA,OAAAxuB,KAAAylB,KAAAzlB,KAAAylB,KAAA+I,sBAAAlwB,KAGAovB,sBAAA,WACA,OAAA1tB,KAAAylB,KAAAzlB,KAAAylB,KAAAiI,wBAAA,IAGAgB,UAAA,SAAAtjB,GAEA,IAAAmV,EAAAvgB,KAAA4kB,WAAA2C,SAAAC,OAAA,kBAAApc,EAAA,YAEAmV,EAAAjgB,QACAN,KAAA4kB,WAAA+J,aAAApO,EAAA,KAIAqO,uBAAA,SAAAxgB,GACA,OAAApO,KAAAilB,oBAAAnP,KAAA,gBAAA1H,EAAA,aAGA0d,yBAAA,WACA,OAAA9rB,KAAAilB,oBAAAnP,KAAA,eAAA/O,KAAA,SAGAskB,iBAAA,SAAAjd,GAEA,IAAAmS,EAAAvgB,KAAA4uB,uBAAAxgB,GAEA,GAAAmS,EAAAjgB,OAAA,CACAN,KAAAilB,oBAAAnP,KAAA,SAAAQ,YAAA,OACAiK,EAAAvO,SAAA,OAEA,IAAAiE,EAAAsK,EAAAjd,OACAtD,KAAA+kB,aAAA3W,KAAA,QAAAvP,MAAAc,EAAA,MAAA,sBAAA,CAAAkvB,UAAA5Y,KACAjW,KAAA+kB,aAAAzhB,KAAA2S,GAEA,UAAA7H,EACApO,KAAA8uB,iBAAA,QAEA9uB,KAAA8uB,iBAAAvO,EAAAxZ,KAAA,gBAAA,OAGA,cAAAqH,EACApO,KAAAklB,oBAAApP,KAAA,KAAA9D,SAAA,YAEAhS,KAAAklB,oBAAApP,KAAA,KAAAQ,YAAA,cAKAyY,uBAAA,SAAAC,GACA,OAAAhvB,KAAAklB,oBAAApP,KAAA,cAAAkZ,EAAA,YAGAhD,yBAAA,WACA,OAAAhsB,KAAAklB,oBAAApP,KAAA,eAAA/O,KAAA,QAGAkoB,oBAAA,WACA,OAAAjvB,KAAA0rB,uBAAA,SAAA,SAGAoD,iBAAA,SAAAE,GACA,SAAAA,IACAA,EAAA,OAGAhvB,KAAA+kB,aAAA3W,KAAA,YAAA4gB,GACAhvB,KAAAklB,oBAAApP,KAAA,SAAAQ,YAAA,OACAtW,KAAA+uB,uBAAAC,GAAAhd,SAAA,QAGA4X,eAAA,SAAA3qB,GACA,YAAA,IAAAe,KAAA+jB,aAAA9kB,GACA,KAGAe,KAAA+jB,aAAA9kB,IAGA4qB,aAAA,SAAA/F,GACA,IAAAA,IAAAA,EAAAxjB,OACA,OAAA,EAGA,GAAAN,KAAA8jB,SAAA9jB,KAAA8jB,QAAA,IAAA9jB,KAAA8jB,QAAA,KAAAA,EAAA,IAAAA,EAAA/c,KAAA,SAAA/G,KAAA4jB,UACA,OAAA,EAIA5jB,KAAAquB,qBAEAruB,KAAA8jB,QAAAA,EACA9jB,KAAA4jB,UAAAE,EAAA/c,KAAA,OACA/G,KAAAurB,iBAAA,iBAAAvrB,KAAA4jB,WACA5jB,KAAAyjB,aAAAyL,WAAApL,GAEAjlB,MAAAkJ,GAAAonB,yBAEAnvB,KAAAqkB,YAEArkB,KAAAskB,WAAA,KACAtkB,KAAAokB,QAAA7f,IAAA,IACAvE,KAAAgoB,iBAOAhoB,KAAAilB,oBAAAjK,SAAA,kBAAAI,SAGA,IACAgU,EADApvB,KAAA8jB,QAAAvJ,QAAA,iBAAAS,SAAA,KACAjU,KAAA,gBACA,GAAAqoB,EACA,IAAA,IAAA/vB,EAAA,EAAAA,EAAA+vB,EAAA9uB,OAAAjB,IAAA,CACA,IAAAkhB,EAAAjiB,EAAA,QAAA,CACA+wB,cAAA,IAEA9c,OACAjU,EAAA,OAAA,CACAgF,KAAA8rB,EAAA/vB,GAAA,GACAiwB,YAAAF,EAAA/vB,GAAA,MAGAmP,SAAAxO,KAAAilB,qBACAjlB,KAAAglB,SAAAkG,WAAA3K,EAAAvF,YAqBA,GAhBAnZ,QAAAmY,QAAAha,KAAA8jB,QAAA,uBACA9jB,KAAAolB,0BACAplB,KAAAolB,wBAAA9mB,EAAA,gCAAAO,MAAAc,EAAA,MAAA,aAAA,aACAK,KAAAglB,SAAAkG,WAAAlrB,KAAAolB,wBAAApK,aAGAhb,KAAAolB,wBAAA+F,UAAAnrB,KAAAilB,sBACAjlB,KAAAolB,yBACAplB,KAAAolB,wBAAA9O,YAAA,OAAAgV,SAGAtrB,KAAAuvB,gCAKAvvB,KAAA0kB,eAAApkB,SACAuB,QAAAmY,QAAAha,KAAA8jB,QAAA,wBACA9jB,KAAA2kB,qBAAA3S,SAAA,UAEAhS,KAAA2kB,qBAAArO,YAAA,UAGAtW,KAAAukB,SAAA,CAEA,IAAAiL,EAAAxvB,KAAA4kB,WAAA2C,SAAAvP,QACAhY,KAAA0uB,UAAAc,EAAAzoB,KAAA,WAmBA,GAXA/G,KAAAslB,uBACAtlB,KAAAslB,sBAAAlK,SAGApb,KAAAulB,aAAA,GACAvlB,KAAAwlB,SAAA,KAGAxlB,KAAA6jB,gBAAA7jB,KAAAyvB,wBAGAzvB,KAAA6jB,gBAAAvjB,OAAA,EAAA,CACAN,KAAAslB,sBAAAhnB,EAAA,2BAAAkQ,SAAAxO,KAAA6b,UAEA,IAAA,IAAAxc,EAAA,EAAAA,EAAAW,KAAA6jB,gBAAAvjB,OAAAjB,IAAA,CACA,IAAAqwB,EAAA1vB,KAAA6jB,gBAAAxkB,GAEAswB,EAAArxB,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,YAAA,IAAAyU,EAAAE,UAAA,IAAAF,EAAAE,UAAA,IACAC,YAAAH,EAAAtW,KACA+D,YAAAuS,EAAAI,KACA3U,aAAAuU,EAAAxU,MACAA,MAAAwU,EAAAxU,QACA1M,SAAAxO,KAAAslB,uBAEAtlB,KAAAulB,aAAAmK,EAAAtW,MAAAuW,EAEA3vB,KAAAqd,YAAAsS,EAAA,QAAA,CAAAvW,KAAAsW,EAAAtW,OAAA,SAAA7B,GACAvX,KAAA+vB,eAAAxY,EAAAxQ,KAAAqS,MACApZ,KAAA0oB,qBAMA,IAAAlD,EAAAxlB,KAAAivB,sBAiBA,OAfAzJ,GAAAxlB,KAAAgwB,uBAAAxK,KAGAA,EADAxlB,KAAAwlB,UAAAxlB,KAAAgwB,uBAAAhwB,KAAAwlB,UACAxlB,KAAAwlB,SAIAxlB,KAAA6jB,gBAAA,GAAAzK,MAIApZ,KAAA+vB,eAAAvK,GAEAxlB,KAAAiwB,kBAEA,GAGAC,kBAAA,SAAAjxB,GACA,IAAA6kB,EAAA9jB,KAAA4pB,eAAA3qB,GAEA,QAAA6kB,GACA9jB,KAAA6pB,aAAA/F,IAMAyL,8BAAA,WACA,IAAAY,EAAAnwB,KAAA0rB,uBAAA,SACA0E,EAAApwB,KAAA0rB,uBAAA,QAEAyE,GAAAC,IAEAD,EAAAnwB,KAAAqwB,iBAEAxuB,QAAA3C,QAAAixB,KACAC,EAAAD,EAAA,GACAA,EAAAA,EAAA,KAIA,QAAAC,GAAA,SAAAA,IACAA,EAAA,OAGApwB,KAAAqrB,iBAAA8E,GACAnwB,KAAA8uB,iBAAAsB,IAGAC,eAAA,WAEA,OAAArwB,KAAA8jB,SAAAjiB,QAAAmY,QAAAha,KAAA8jB,QAAA,qBACA9jB,KAAA8jB,QAAA1V,KAAA,qBAAAlN,MAAA,KAGA,CAAAlB,KAAAilB,oBAAAnP,KAAA,WAAA/O,KAAA,QAAA,QAIA0oB,sBAAA,WACA,IAAAa,EAAA,CACA,CAAAlX,KAAA,QAAA8B,MAAArc,MAAAc,EAAA,MAAA,sBAAAmwB,KAAA,SAOA,OAJA9vB,KAAA8jB,SAAAjiB,QAAAmY,QAAAha,KAAA8jB,QAAA,oBACAwM,EAAA5wB,KAAA,CAAA0Z,KAAA,SAAA8B,MAAArc,MAAAc,EAAA,MAAA,yBAAAmwB,KAAA,SAGAQ,GAGAN,uBAAA,SAAAxK,GACA,IAAA,IAAAnmB,EAAA,EAAAA,EAAAW,KAAA6jB,gBAAAvjB,OAAAjB,IACA,GAAAW,KAAA6jB,gBAAAxkB,GAAA+Z,OAAAoM,EACA,OAAA,EAIA,OAAA,GAGAuK,eAAA,SAAAvK,EAAA+K,GAEAA,GAAAvwB,KAAAgwB,uBAAAxK,KACAA,EAAAxlB,KAAA6jB,gBAAA,GAAAzK,MAIAoM,IAAAxlB,KAAAwlB,WAKAxlB,KAAAwlB,eAAA,IAAAxlB,KAAAulB,aAAAvlB,KAAAwlB,WACAxlB,KAAAulB,aAAAvlB,KAAAwlB,UAAAlP,YAAA,UAGAtW,KAAAwlB,SAAAA,EACAxlB,KAAA2rB,wBAAA,OAAA3rB,KAAAwlB,eAEA,IAAAxlB,KAAAulB,aAAAvlB,KAAAwlB,WACAxlB,KAAAulB,aAAAvlB,KAAAwlB,UAAAxT,SAAA,YAIAwe,WAAA,SAAApX,EAAAlF,GAEA,OAAA,IADAlU,KAAAywB,aAAArX,GACA,CAAApZ,KAAAA,KAAAqlB,UAAAnR,IAGAuc,aAAA,SAAArX,GACA,OAAAA,GACA,IAAA,QACA,OAAAva,MAAA6xB,sBACA,IAAA,SACA,OAAA7xB,MAAA8xB,uBACA,QACA,KAAA,cAAAvX,sBAIAwX,0BAAA,SAAA7a,IAGA,IAFAzX,EAAA6O,QAAA4I,EAAA/V,KAAAkU,SAAA0Y,qBAGA5sB,KAAAkU,SAAA0Y,mBAAAltB,KAAAqW,IAIA8a,wBAAA,SAAA9a,GACA,IAAAhX,EAAAT,EAAA6O,QAAA4I,EAAA/V,KAAAkU,SAAA0Y,qBAEA,IAAA7tB,GACAiB,KAAAkU,SAAA0Y,mBAAApd,OAAAzQ,EAAA,IAIA+xB,eAAA,SAAAzL,GACAA,EAAA/O,YAAA,YAAAya,QAAA,aAAAza,YAAA,YAEA,IAAA,IAAAjX,EAAA,EAAAA,EAAAgmB,EAAA/kB,OAAAjB,IAAA,CACA,IAAA0W,EAAAzX,EAAA+mB,EAAAhmB,IAAA0H,KAAA,MACA/G,KAAA6wB,wBAAA9a,GAGA/V,KAAAgxB,iBAAA3L,IAGA4L,gBAAA,SAAA5L,GACAA,EAAA/O,YAAA,OAAAtE,SAAA,YAEA,IAAA,IAAA3S,EAAA,EAAAA,EAAAgmB,EAAA/kB,OAAAjB,IAAA,CACA,IAAA0W,EAAAzX,EAAA+mB,EAAAhmB,IAAA0H,KAAA,MACA/G,KAAA4wB,0BAAA7a,GAGA/V,KAAAkxB,kBAAA7L,IAGA8L,eAAA,SAAApb,GACA,OAAA/V,KAAAylB,KAAA0L,eAAApb,IAGAqb,mBAAA,SAAAC,GACAA,EAAA/yB,EAAAgzB,UAAAD,GAEA,IAAA,IAAAhyB,EAAA,EAAAA,EAAAgyB,EAAA/wB,OAAAjB,IAAA,CACA,IAAA0W,EAAAsb,EAAAhyB,GACAuW,EAAA5V,KAAAmxB,eAAApb,GAEAH,GAAAA,EAAAtV,OACAN,KAAA8wB,eAAAlb,GAEA5V,KAAA6wB,wBAAA9a,KAKAwb,oBAAA,SAAAF,GACAA,EAAA/yB,EAAAgzB,UAAAD,GAEA,IAAA,IAAAhyB,EAAA,EAAAA,EAAAgyB,EAAA/wB,OAAAjB,IAAA,CACA,IAAA0W,EAAAsb,EAAAhyB,GACAuW,EAAA5V,KAAAmxB,eAAApb,GAEAH,GAAAA,EAAAtV,OACAN,KAAAixB,gBAAArb,GAEA5V,KAAA4wB,0BAAA7a,KAKAyb,yBAAA,SAAAzb,GACA,OAAA/V,KAAA0lB,sBACA1lB,KAAA0lB,oBAAA,IAGA1lB,KAAA0lB,oBAAAhmB,KAAAqW,IAGA0b,UAAA,SAAAC,GACA1xB,KAAA2xB,qBAAApf,OAAAmf,IAGAE,iBAAA,WAKA,OAJA,OAAA5xB,KAAA8c,iBACA9c,KAAA8c,eAAA9c,KAAAoc,SAAA9b,SAAAN,KAAAoc,SAAAvG,SAAA,WAGA7V,KAAA8c,gBAGA6U,mBAAA,WAEA,GAAA3xB,KAAAkU,SAAA2d,gBACA,OAAAvzB,EAAA0B,KAAAkU,SAAA2d,iBAEA,IAAA/e,EAAAxU,EAAA,kBAMA,OAJAwU,EAAAxS,SACAwS,EAAAxU,EAAA,6BAAAkQ,SAAAlQ,EAAA,aAGAwU,GAIAkX,aAAA,WACAhqB,KAAAqlB,UAAArT,SAAA,QACAhS,KAAA2jB,aAAA,GAGAuG,kBAAA,WACAlqB,KAAAqlB,UAAA/O,YAAA,QACAtW,KAAA2jB,aAAA,GAGAmO,4BAAA,WAEA,IAAAC,EAAA,IAAAlzB,MAAAmzB,sBAAAhyB,KAAA,CACAiyB,OAAA,WACAF,EAAA9T,aAIA,OAAA8T,GAGAnZ,QAAA,WACA5Y,KAAAyjB,cACAzjB,KAAAyjB,aAAA7K,UAGA5Y,KAAAylB,MACAzlB,KAAAylB,KAAA7M,UAGA5Y,KAAA6iB,QAGA9J,OAAA,WACA/Y,KAAAyjB,cACAzjB,KAAAyjB,aAAA1K,SAGA/Y,KAAAylB,MACAzlB,KAAAylB,KAAA1M,SAGA/Y,KAAA6iB,QAGA8F,YAAA,WACA3oB,KAAAkU,SAAAyU,cACA3oB,KAAAmX,QAAA,cAGA8Y,eAAA,WACAjwB,KAAAkU,SAAA+b,eAAAjwB,KAAA4jB,WACA5jB,KAAAmX,QAAA,eAAA,CAAAyM,UAAA5jB,KAAA4jB,aAGAsO,aAAA,WACAlyB,KAAAkU,SAAAge,aAAAlyB,KAAAgW,QACAhW,KAAAmX,QAAA,aAAA,CAAAnB,OAAAhW,KAAAgW,UAGAmc,iBAAA,WACAnyB,KAAAkU,SAAAie,mBACAnyB,KAAAmX,QAAA,mBAGAqS,kBAAA,WACAxpB,KAAAkU,SAAAsV,oBACAxpB,KAAAmX,QAAA,oBAGA6Z,iBAAA,SAAA3L,GACArlB,KAAAkU,SAAA8c,iBAAA3L,GACArlB,KAAAmX,QAAA,iBAAA,CAAAN,SAAAwO,KAGA6L,kBAAA,SAAA7L,GACArlB,KAAAkU,SAAAgd,kBAAA7L,GACArlB,KAAAmX,QAAA,kBAAA,CAAAN,SAAAwO,KAGA+I,cAAA,SAAAtnB,EAAAhH,GACAE,KAAAkU,SAAAka,cAAAtnB,EAAAhH,GACAE,KAAAmX,QAAA,cAAA,CAAArQ,OAAAA,EAAAhH,OAAAA,KAMA2pB,6BAAA,WAGAzpB,KAAAyjB,aAAA8K,cAKAvuB,KAAA6pB,aAAA7pB,KAAAyjB,aAAA2O,iBACApyB,KAAA0oB,iBALA1oB,KAAAyjB,aAAAyL,WAAAlvB,KAAAgkB,gBAAAhM,UASAqa,2BAAA,SAAA9a,GACAA,EAAAK,iBAEA,IAAAzJ,EAAA7P,EAAAiZ,EAAA8C,eAGAlM,EAAA0H,SAAA,aAAA1H,EAAApH,KAAA,mBAIA/G,KAAAutB,aAAApf,EAAApH,KAAA,UAAAlF,QAAAywB,YAAAnkB,KAGAokB,+BAAA,SAAAhb,GACA,IAAAgJ,EAAAjiB,EAAAiZ,EAAAib,QAGAjS,EAAA1K,SAAA,aAAA0K,EAAAxZ,KAAA,mBAIA/G,KAAAutB,aAAAhN,EAAAxZ,KAAA,YAGAsgB,oBAAA,SAAA9P,GACAvX,KAAA4kB,WAAA2C,SAAAjR,YAAA,OACA,IAAAiK,EAAAjiB,EAAAiZ,EAAAkb,gBAAAzgB,SAAA,OACAhS,KAAA0kB,eAAAhmB,KAAA6hB,EAAA7hB,QAEAsB,KAAAukB,SAAA,EACAvkB,KAAAwkB,QAAA,EACAxkB,KAAAoL,OAAA,KAEAvJ,QAAAmY,QAAAuG,EAAA,gBACAvgB,KAAAukB,SAAA,EACA1iB,QAAAmY,QAAAuG,EAAA,eACAvgB,KAAAwkB,QAAA,EAEAxkB,KAAAoL,OAAAmV,EAAAxZ,KAAA,UAGA/G,KAAAorB,6BACAprB,KAAA0oB,kBAGAf,kBAAA,SAAApQ,GACAvX,KAAA8kB,SAAAyC,SAAAjR,YAAA,OACA,IAAAiK,EAAAjiB,EAAAiZ,EAAAkb,gBAAAzgB,SAAA,OACAhS,KAAA6kB,aAAAnmB,KAAA6hB,EAAA7hB,QACAsB,KAAAynB,SAAAlH,EAAAxZ,KAAA,YACA/G,KAAAkyB,gBAGAzK,SAAA,SAAAzR,GACA,IAAA0c,EAAA,OAAA1yB,KAAAgW,OAKA,IAAA2c,EACA7O,EALA9jB,KAAAgW,OAAAA,EACAhW,KAAAgkB,gBAAA1lB,IASA,IAFA,IAAAs0B,IAAAF,GAAA1yB,KAAA8jB,SAAA9jB,KAAA8jB,QAAAxjB,QAEAjB,EAAA,EAAAA,EAAAW,KAAA+oB,SAAAzoB,OAAAjB,SAEA,KADAykB,EAAA9jB,KAAA+oB,SAAA1W,GAAAhT,IACA0H,KAAA,WAAA,IAAA+c,EAAA/c,KAAA,SAAA8rB,WAAA3xB,MAAA,KAAAJ,QAAAkV,EAAA6c,aACA/O,EAAAmD,SAAA3Q,YAAA,UACAtW,KAAAgkB,gBAAAhkB,KAAAgkB,gBAAAtG,IAAAoG,GACA6O,IACAA,EAAA7O,KAGAA,EAAAmD,SAAAjV,SAAA,UAGAhS,KAAA8jB,SAAA9jB,KAAA8jB,QAAAgP,IAAA,IAAAhP,EAAAgP,IAAA,KACAF,GAAA,IAKA5yB,KAAAojB,aAAAwP,GACA5yB,KAAA6pB,aAAA8I,GAIA,IACAI,EADAC,EAAAhzB,KAAA8oB,qBAAA9N,SAAA,YAGA,IAAA3b,EAAA,EAAAA,EAAA2zB,EAAA1yB,OAAAjB,IAEA,KADA0zB,EAAAC,EAAA3gB,GAAAhT,IACA4zB,UAAA,WAAA,iBAAA3yB,OACAyyB,EAAAzc,YAAA,UAEAyc,EAAA/gB,SAAA,UAIAhS,KAAAojB,cACA,UAAApjB,KAAAkU,SAAA6S,SAEAloB,MAAAkJ,GAAAmrB,UAAAld,GAIAhW,KAAA0oB,mBAIAL,kBAAA,SAAA9Q,GACA,IAAAgJ,EAAAjiB,EAAAiZ,EAAAkb,gBAEAlS,EAAA1K,SAAA,aAAA0K,EAAA1K,SAAA,SAKA0K,EAAA0G,SAAAA,SAAAkM,GAAAnzB,KAAAilB,qBACAjlB,KAAAqrB,iBAAA9K,EAAAxZ,KAAA,SAEA/G,KAAA8uB,iBAAAvO,EAAAxZ,KAAA,QAGA/G,KAAA6rB,iCACA7rB,KAAA0oB,mBAGA0K,uBAAA,WACApzB,KAAAsuB,uBACAtuB,KAAAwpB,qBAGA6J,sBAAA,SAAA9b,GACAvX,KAAAszB,cAAAh1B,EAAAiZ,EAAA8C,gBACA9C,EAAAM,mBAGA0b,yBAAA,SAAAhc,GACAvX,KAAAszB,cAAAh1B,EAAAiZ,EAAA8C,eAAAmZ,KAAA,MACAjc,EAAAM,mBAGAuT,2BAAA,WACA,IAAA7K,EAAAvgB,KAAA4uB,uBAAA,aAEA,GAAArO,EAAAjgB,OAIA,GAAAN,KAAAukB,SAAAvkB,KAAAwkB,QAAAxkB,KAAAqkB,WAEA,GADA9D,EAAAvO,SAAA,YACA,cAAAhS,KAAA8rB,2BAAA,CAEA,IAAA0D,EAAAxvB,KAAAilB,oBAAAnP,KAAA,0BACA9V,KAAAqrB,iBAAAmE,EAAAzoB,KAAA,SACA/G,KAAA8uB,iBAAA,aAGAvO,EAAAjK,YAAA,YACAtW,KAAAuvB,iCAOApG,kBAAA,SAAAsK,GACA,OAAAA,EAAAzY,SAAA,MAAAA,SAAA,MAGA0Y,iBAAA,SAAA5P,GACA,IAAA2P,EAAA3P,EAAA6P,SAAA,MACA,OAAA3zB,KAAAmpB,kBAAAsK,IAGAhJ,iBAAA,SAAA3G,GACA,OAAAA,EAAA6P,SAAA,YAGAL,cAAA,SAAAxP,GACAA,EAAAmD,OAAA,MAAApR,SAAA,YACA7V,KAAA4zB,gBAAA9P,GAEA9jB,KAAAsqB,cAAAxG,IAIAwG,cAAA,SAAAxG,GACAA,EAAArJ,KAAA,WAAArM,KAAA,CACAylB,gBAAA,OACA1Y,aAAAtc,MAAAc,EAAA,MAAA,yBAEAmkB,EAAAmD,OAAA,MAAAjV,SAAA,YAEA,IAAA8hB,EAAA9zB,KAAA0zB,iBAAA5P,GACA,IAAA,IAAAzkB,EAAA,EAAAA,EAAAy0B,EAAAxzB,OAAAjB,IACAW,KAAA0pB,WAAAprB,EAAAw1B,EAAAz0B,KACAW,KAAAgkB,kBACAhkB,KAAAgkB,gBAAAhkB,KAAAgkB,gBAAAtG,IAAAoW,EAAAz0B,KAIA,IAAAJ,EAAA6kB,EAAA/c,KAAA,QACA,IAAA/G,KAAAqjB,cAAAgH,gBAAAvpB,QAAA7B,KACAe,KAAAqjB,cAAAgH,gBAAA3qB,KAAAT,GACAe,KAAAwrB,uBAIAoI,gBAAA,SAAA9P,GACAA,EAAArJ,KAAA,WAAArM,KAAA,CACAylB,gBAAA,QACA1Y,aAAAtc,MAAAc,EAAA,MAAA,yBAEAmkB,EAAAmD,OAAA,MAAA3Q,YAAA,YAEA,IAAAwd,EAAA9zB,KAAA0zB,iBAAA5P,GACA,IAAA,IAAAzkB,EAAA,EAAAA,EAAAy0B,EAAAxzB,OAAAjB,IACAW,KAAA0qB,aAAApsB,EAAAw1B,EAAAz0B,KACAW,KAAAgkB,gBAAAhkB,KAAAgkB,gBAAA+P,IAAAD,EAAAz0B,IAGA,IAAAA,EAAAW,KAAAqjB,cAAAgH,gBAAAvpB,QAAAgjB,EAAA/c,KAAA,SACA,IAAA1H,IACAW,KAAAqjB,cAAAgH,gBAAA7a,OAAAnQ,EAAA,GACAW,KAAAwrB,uBAOAsB,iBAAA,WACA,MAAA,UAAA9sB,KAAAkU,SAAA6S,SAAA,cAAA/mB,KAAA8rB,4BAGAqB,YAAA,SAAArtB,EAAA4K,GAKA1K,KAAAimB,UACAjmB,KAAAquB,qBACAruB,KAAAimB,QAAAjmB,KAAAkmB,gBAAAlmB,KAAAmmB,gBAAAnmB,KAAA0mB,WAAA,MAMA1mB,KAAA4lB,gBAAAtlB,SACAN,KAAA2lB,cAAArP,YAAA,UACAtW,KAAA4lB,gBAAAlnB,KAAA,IAEAsB,KAAAg0B,gBACAxqB,KAAAyqB,IACAj0B,KAAA2lB,cAAA3T,SAAA,UAEA,IAAAkiB,EAAAr1B,MAAAwjB,iBAAAriB,KAAA6T,aAAAhV,MAAAwjB,iBAAAriB,KAAA6T,aAAA,GAAA,UACAsgB,EAAAt1B,MAAAwjB,iBAAAriB,KAAA6T,aAAAhV,MAAAwjB,iBAAAriB,KAAA6T,aAAA,GAAA,WAEA,GAAA7T,KAAA8sB,mBAOA,CACA,IAAA9U,EAAAnH,KAAAujB,IAAAp0B,KAAAkU,SAAAqY,WAAAvsB,KAAA6lB,KAAA,GAAA,EAAAoO,GACAnc,EAAAjH,KAAAujB,IAAApc,GAAAhY,KAAAkU,SAAAqY,UAAA,GAAA0H,GACAI,EAAAx1B,MAAAc,EAAA,MAAA,+FAAA,CACAqY,MAAAA,EACAF,KAAAA,EACAmc,MAAAA,EACAK,KAAAJ,EACAK,MAAAJ,IAGAK,EAAAl2B,EAAA,kCAAAkQ,SAAAxO,KAAA4lB,iBACA6O,EAAA5jB,KAAAob,IAAApb,KAAA6jB,KAAAT,EAAAj0B,KAAAkU,SAAAqY,WAAA,GAEAoI,EAAAr2B,EAAA,SAAA,CACA2c,MAAA,uBAAAjb,KAAA6lB,KAAA,EAAA,GAAA,aACA3K,MAAArc,MAAAc,EAAA,MAAA,mBACA6O,SAAAgmB,GACAI,EAAAt2B,EAAA,SAAA,CACA2c,MAAA,uBAAAjb,KAAA6lB,KAAA4O,EAAA,GAAA,aACAvZ,MAAArc,MAAAc,EAAA,MAAA,eACA6O,SAAAgmB,GAEAl2B,EAAA,SAAA,CACA2c,MAAA,YACA3X,KAAA+wB,IACA7lB,SAAAgmB,GAEAx0B,KAAA6lB,KAAA,GACA7lB,KAAAqd,YAAAsX,EAAA,SAAA,WACA30B,KAAA4qB,eAAA+J,EAAA,SACA30B,KAAA4qB,eAAAgK,EAAA,SACA50B,KAAAwoB,QAAAxoB,KAAA6lB,KAAA,GACA7lB,KAAA0oB,gBAAA,MAIA1oB,KAAA6lB,KAAA4O,GACAz0B,KAAAqd,YAAAuX,EAAA,SAAA,WACA50B,KAAA4qB,eAAA+J,EAAA,SACA30B,KAAA4qB,eAAAgK,EAAA,SACA50B,KAAAwoB,QAAAxoB,KAAA6lB,KAAA,GACA7lB,KAAA0oB,gBAAA,UAjDA,CACA,IAAA2L,EAAAx1B,MAAAc,EAAA,MAAA,6DAAA,CACAs0B,MAAAA,EACAK,KAAAJ,EACAK,MAAAJ,IAEAn0B,KAAA4lB,gBAAAtiB,KAAA+wB,MAgDA5qB,MAAA,KACAzJ,KAAA2lB,cAAA3T,SAAA,aAOAhS,KAAAqlB,UAAA3mB,KAAAgM,EAAAhM,MACAG,MAAAqT,eAAAxH,EAAAsW,UACAniB,MAAA2T,eAAA9H,EAAAuW,UAKAjhB,KAAAomB,oBAAApmB,KAAAqlB,UAAAvP,KAAA,6BAEApL,EAAAub,SAAAvb,EAAAub,QAAA3lB,OACAN,KAAAomB,oBAAA9lB,SACAN,KAAAimB,QAAAvb,EAAAub,QACAjmB,KAAAkmB,gBAAAxb,EAAAwb,gBACAlmB,KAAAmmB,gBAAAzb,EAAAyb,gBAGAnmB,KAAAqmB,mBAAA/nB,EAAA,2BAAA6sB,UAAAnrB,KAAAomB,qBAEApmB,KAAAomB,oBAAAhY,KAAA,CACAymB,KAAA,WACAC,SAAA,IACAC,eAAA,QACA5Z,aAAAtc,MAAAc,EAAA,MAAA,gBAGAK,KAAAqd,YAAArd,KAAAomB,oBAAA,SAAA,WACA,IAAApmB,KAAAylB,KAAA+I,sBAAAluB,OACAN,KAAAylB,KAAAuP,oBAEAh1B,KAAAylB,KAAAwP,yBAIAj1B,KAAAqd,YAAArd,KAAAomB,oBAAA,WAAA,SAAA7O,GACAA,EAAAC,UAAA3V,QAAAqzB,YACA3d,EAAAK,iBAEAtZ,EAAAiZ,EAAA8C,eAAAlD,QAAA,eAKAnX,KAAAomB,oBAAAuN,WAAArzB,QACAN,KAAAomB,oBAAAa,OAAA,WAAA7L,SAEApb,KAAAomB,oBAAAhL,UAMApb,KAAAumB,UAAA7b,EAAA6b,UACAvmB,KAAAwmB,gBAAA3nB,MAAAE,MAAAiB,KAAAumB,WAAA,GAAA5b,GAAAA,EAAArJ,MAEAtB,KAAAumB,WAAAvmB,KAAAumB,UAAAjmB,OACAN,KAAAgmB,WAAA1P,YAAA,UAEAtW,KAAAgmB,WAAAhU,SAAA,UAOA,IAAAmjB,EAAAn1B,KAAAimB,SAAAjmB,KAAAkU,SAAAihB,WAeA,GAbAn1B,KAAAylB,KAAAzlB,KAAAwwB,WAAAxwB,KAAAivB,sBAAA,CACAlI,QAAA/mB,KAAAkU,SAAA6S,QACAwF,UAAA,UAAAvsB,KAAAkU,SAAA6S,SAAA,cAAA/mB,KAAA8rB,2BAAA9rB,KAAAkU,SAAAqY,UAAA,KACAzsB,OAAAA,EACAq1B,WAAAA,EACAC,YAAAp1B,KAAAimB,SAAAjmB,KAAAkU,SAAAkhB,YACAC,eAAAr1B,KAAAimB,QACAuD,kBAAAxpB,KAAAozB,uBAAA9L,KAAAtnB,QAMAA,KAAA0lB,oBAAA,CACA,GAAAyP,EACA,IAAA,IAAA91B,EAAA,EAAAA,EAAAW,KAAA0lB,oBAAAplB,OAAAjB,IACAW,KAAAylB,KAAA6P,kBAAAt1B,KAAA0lB,oBAAArmB,IAIAW,KAAA0lB,oBAAA,KAMA1lB,KAAAmyB,oBAGAlE,mBAAA,SAAAD,GACA,IAAA,IAAApK,KAAAoK,EACA,GAAAA,EAAAvuB,eAAAmkB,GAAA,CACA,MAAAE,EAAA9jB,KAAA4pB,eAAAhG,GACA,GAAAE,EAAA,CACA,IAAAyR,EAAAzR,EAAA9I,SAAA,UACA,OAAAgT,EAAApK,IACA2R,EAAAj1B,SACAi1B,EAAAj3B,EAAA,yBAAAkQ,SAAAsV,IAEAyR,EAAAjyB,KAAA0qB,EAAApK,KACA2R,GACAA,EAAAna,YAOA4Y,cAAA,WACA,OAAA,IAAAhrB,QAAA,CAAAC,EAAAC,KACA,GAAA,OAAAlJ,KAAA+lB,aACA9c,EAAAjJ,KAAA+lB,kBACA,CACA,IAAAjmB,EAAAE,KAAAssB,uBACAxsB,EAAA4nB,SAAA1lB,cACAlC,EAAA4nB,SAAA8E,MAGA,OAAAxsB,KAAA8lB,YACA9lB,KAAA8lB,UAAAjV,KAAAC,MAAA,IAAAD,KAAAe,WAEA9R,EAAAgmB,UAAA9lB,KAAA8lB,UAEAjnB,MAAAiK,kBAAA,OAAA9I,KAAAkU,SAAAshB,oBAAA,CACAzuB,KAAAjH,EACA8J,YAAA5J,KAAA4oB,uBACApf,KAAAkB,IACAA,EAAA3D,KAAA+e,WAAA9lB,KAAA8lB,WACA9lB,KAAA+lB,aAAArb,EAAA3D,KAAA0uB,MACAxsB,EAAAyB,EAAA3D,KAAA0uB,QAEAvsB,MAEAO,MAAAP,OAKAokB,gBAAA,WACA,IAIAjuB,EAqBA+a,EAzBAsb,EAAA,GACAC,EAAA,GACAC,EAAA,GAIA,IAAAv2B,EAAA,EAAAA,EAAAW,KAAAimB,QAAA3lB,OAAAjB,IAAA,CACA,IAAAyH,EAAA9G,KAAAimB,QAAA5mB,GAEA,GAAAyH,EAAAqQ,QAAA,CACA,IAAAhJ,EAAA7P,EAAA,aAAAO,MAAA4F,cAAAqC,EAAAxF,MAAA,qBACAyF,KAAA,SAAAD,GACAyL,OAAAzL,EAAAqQ,SAEAnX,KAAAqd,YAAAlP,EAAA,SAAA,8BACAunB,EAAAh2B,KAAAyO,QAEArH,EAAA+uB,YAGAD,EAAAl2B,KAAAoH,GAFA6uB,EAAAj2B,KAAAoH,GASA,GAAA6uB,EAAAr1B,QAAAs1B,EAAAt1B,OAAA,CACA,IAAAw1B,EAAAx3B,EAAA,WAEA8b,EAAA9b,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,cACAkC,YAAA,WACAjC,MAAArc,MAAAc,EAAA,MAAA,aACA6O,SAAAsnB,GAEA,IAAAC,EAAAz3B,EAAA,sBAAAkQ,SAAAsnB,GACAE,EAAAh2B,KAAAi2B,uBAAAN,GAAA,GACAO,EAAAl2B,KAAAi2B,uBAAAL,GAAA,GAEAI,GACAA,EAAAxnB,SAAAunB,GAGAC,GAAAE,GACA53B,EAAA,SAAAkQ,SAAAunB,GAGAG,GACAA,EAAA1nB,SAAAunB,GAGAL,EAAAh2B,KAAAo2B,GAKA,IAFA91B,KAAA0mB,WAAApoB,IAEAe,EAAA,EAAAA,EAAAq2B,EAAAp1B,OAAAjB,IAAA,CACA,IAAA82B,EAAA73B,EAAA,UAAAiU,OAAAmjB,EAAAr2B,IACAW,KAAA0mB,WAAA1mB,KAAA0mB,WAAAhJ,IAAAyY,GAGAn2B,KAAA0mB,WAAAlY,SAAAxO,KAAA6b,UACAhd,MAAAqT,eAAAlS,KAAAkmB,iBACArnB,MAAA2T,eAAAxS,KAAAmmB,iBAEAtnB,MAAAgU,eAAA7S,KAAA0mB,YAEAtM,GACAA,EAAArT,KAAA,WAAAuQ,GAAA,eAAAtX,KAAAuyB,+BAAAjL,KAAAtnB,QAIAo2B,eAAA,WACAp2B,KAAAgmB,WAAAhU,SAAA,UAOA,IALA,IAAA7D,EAAA7P,EAAA,UAAA,CACA2c,MAAA,gBAGAob,EAAA,GACAh3B,EAAA,EAAAA,EAAAW,KAAAumB,UAAAjmB,OAAAjB,IACAg3B,EAAA32B,KAAA,CAAAuW,MAAAjW,KAAAumB,UAAAlnB,GAAA6F,KAAAC,MAAAnF,KAAAumB,UAAAlnB,GAAAiC,OAEA,IAAAg1B,EAAAz3B,MAAA03B,GAAAC,kBAAA,CACAvgB,MAAApX,MAAAc,EAAA,MAAA,eACAsH,QAAAovB,EACApb,MAAA,cACAzM,SAAAL,GAEAsoB,EAAA53B,MAAA03B,GAAAC,kBAAA,CACAvgB,MAAApX,MAAAc,EAAA,MAAA,UACAsH,QAAA,CACA,CAAAgP,MAAA,MAAA9Q,MAAA,OAAA,CAAA8Q,MAAA,OAAA9Q,MAAA,QAAA,CAAA8Q,MAAA,MAAA9Q,MAAA,QAEA8V,MAAA,cACAzM,SAAAL,GAEA,IAAAuoB,EAAAJ,EAAAxgB,KAAA,UACA9V,KAAAqd,YAAAqZ,EAAA,SAAA,KACA,IAAAp1B,EAAAo1B,EAAAnyB,MACAvE,KAAAwmB,gBAAAllB,GAAAq1B,YACAF,EAAAngB,YAAA,UAEAmgB,EAAAzkB,SAAA,YAGA0kB,EAAAvf,QAAA,UAGA,IAAAsW,EAAAztB,KAAAylB,KAAAiI,wBAEA,IAAAD,EAAAntB,OACA,IAAAs2B,EAAA/3B,MAAA03B,GAAAM,gBAAA,CACA5gB,MAAApX,MAAAc,EAAA,MAAA,SACAm3B,YAAAj4B,MAAAc,EAAA,MAAA,YACA2B,KAAA,SACA8yB,IAAA,IACA5lB,SAAAL,GAGA7P,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,uBACA3X,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAL,GAEA,IAAA4oB,EAAAz4B,EAAA,SAAA,CACA2c,MAAA,mBACAzM,SAAAL,GAEA,IAAAtM,QAAAm1B,IAAAh3B,KAAAgmB,WAAA7X,GAEAmJ,GAAA,OAAA,KACAtX,KAAAgmB,WAAA1P,YAAA,YAGA,IAAA2gB,GAAA,EAEAj3B,KAAAqd,YAAAlP,EAAA,UAAA,SAAAoJ,GAEA,GADAA,EAAAK,kBACAqf,EAAA,CAIAA,GAAA,EACAF,EAAAzgB,YAAA,UAEA,IAAAxW,EAAAE,KAAAssB,gBAOA,UANAxsB,EAAA4nB,SAAA1lB,cACAlC,EAAA4nB,SAAA8E,MAEA1sB,EAAAwB,KAAAg1B,EAAAxgB,KAAA,UAAAvR,MACAzE,EAAAyB,OAAAk1B,EAAA3gB,KAAA,UAAAvR,MAEAkpB,EAAAntB,OACAR,EAAA4nB,SAAA3R,GAAA0X,MACA,CACA,IAAAjB,EAAArqB,SAAAy0B,EAAA9gB,KAAA,SAAAvR,OACAioB,IAAA0K,MAAA1K,KACA1sB,EAAA4nB,SAAA8E,MAAAA,GAIA3tB,MAAA+H,iBACA9G,EAAAjB,MAAA8H,eAAA9H,MAAA+H,gBAGA/H,MAAAiM,gBAAA,OAAAjM,MAAAuH,aAAA,0BAAAtG,GACA0J,MAAA,WACAytB,GAAA,EACAF,EAAA/kB,SAAA,aAEAvI,OAAA,WACAwtB,GAAA,EACAF,EAAA/kB,SAAA,UACAhS,KAAA2mB,sBACA9nB,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAA,qCAMAs2B,uBAAA,SAAAhQ,EAAA4P,GACA,GAAA5P,GAAAA,EAAA3lB,OAAA,CAGA,IAFA,IAAAyR,EAAAzT,EAAA,SAEAe,EAAA,EAAAA,EAAA4mB,EAAA3lB,OAAAjB,IACAf,EAAA,SAAAiU,OAAAjU,EAAA,OAAA,CACAyX,GAAAlX,MAAA4F,cAAAwhB,EAAA5mB,GAAAiC,MAAA,iBACA2Z,MAAA4a,EAAA,QAAA,KACA9uB,KAAA,CACAD,OAAAmf,EAAA5mB,IAEAiE,KAAA2iB,EAAA5mB,GAAA6F,QACAsJ,SAAAuD,GAGA,OAAAA,KAGA,CACAkL,SAAA,CACA8J,QAAA,QACAgL,MAAA,KACAjL,WAAA,KACAY,SAAA,KACA6E,UAAA,IACAK,mBAAA,GACAuI,YAAA,EACAC,aAAA,EACAvD,gBAAA,KACAvU,aAAA,EACA0J,gBAAA,iBACAiD,qBAAA,uCACAgD,qBAAA,+BACAuI,oBAAA,iCACAzH,oBAAA,iCACAnG,cAAA,KACAmD,cAAA,KACA0B,eAAA,EAEA9D,YAAArqB,EAAA6kB,KACA8M,eAAA3xB,EAAA6kB,KACA+O,aAAA5zB,EAAA6kB,KACAgP,iBAAA7zB,EAAA6kB,KACAqG,kBAAAlrB,EAAA6kB,KACA6N,iBAAA1yB,EAAA6kB,KACA+N,kBAAA5yB,EAAA6kB,KACAiL,cAAA9vB,EAAA6kB,QCtiEAtkB,MAAAs4B,qBAAAt1B,QAAA4Z,KAAA7c,OAAA,CACAkU,WAAA,KACAskB,oBAAA,KACAC,kBAAA,KACAC,UAAA,KAEApU,aAAA,KACAqU,YAAA,KACAC,cAAA,KAEAC,aAAA,EAEAC,cAAA,KACAC,aAAA,KACAC,sBAAA,KACAC,uBAAA,KAEA7a,KAAA,SAAAkG,EAAA7L,EAAAnD,GACAlU,KAAAkjB,aAAAA,EACAljB,KAAA8S,WAAAxU,EAAA+Y,GACArX,KAAA8Z,YAAA5F,EAAArV,MAAAs4B,qBAAAla,UAGAjd,KAAAo3B,oBAAA94B,EACA,iFAGAw5B,YAAA93B,KAAA8S,YAGA9S,KAAAq3B,kBAAAr3B,KAAA+3B,sBACA,IAAA1S,EAAArlB,KAAAq3B,kBAAArc,WAEAhb,KAAAg4B,gBAAA3S,EAAA/kB,QACAN,KAAAi4B,eAAAj4B,KAAAkU,SAAAqY,WAAAlH,EAAA/kB,QAAAN,KAAAkU,SAAAqY,WAGAvsB,KAAAu3B,YAAA,IAAA14B,MAAAiiB,mBACA9gB,KAAAu3B,YAAA3Y,KAAAyG,GAEArlB,KAAAkU,SAAAihB,aACAn1B,KAAAw3B,cAAA,IAAA31B,QAAAunB,OACAppB,KAAAq3B,kBACAhS,EAAAmC,OAAA,mBACA,CACA6B,MAAArpB,KAAAkU,SAAAkhB,YACA7L,SAAAvpB,KAAAk4B,iBACAC,OAAA,UAAAn4B,KAAAkU,SAAA6S,QAAA,4BAAA,KACAS,OAAA,uBACA6N,aAAAr1B,KAAAkU,SAAAmhB,aACA7L,kBAAAxpB,KAAAwpB,kBAAAlC,KAAAtnB,QAGAA,KAAA43B,sBAAArgB,IACAvX,KAAAw3B,cAAArN,SAAA5S,EAAAV,WAGA7W,KAAA63B,uBAAAtgB,IACAvX,KAAAw3B,cAAA7M,YAAApT,EAAAV,WAGA7W,KAAAkjB,aAAA5L,GAAA,iBAAAtX,KAAA43B,uBACA53B,KAAAkjB,aAAA5L,GAAA,kBAAAtX,KAAA63B,yBAIA,UAAA73B,KAAAkU,SAAA6S,UACA/mB,KAAAo4B,sBAAA7gB,IACA,IAAAmH,EAAApgB,EAAAiZ,EAAA2F,QAEA,GAAA,MAAAwB,EAAA2Z,KAAA,YAAA,CAKA,IAAAziB,EAEA,GAAA8I,EAAA7I,SAAA,WACAD,EAAA8I,OAIA,KAFA9I,EAAA8I,EAAAnE,QAAA,aAEAja,OACA,OAIAuB,QAAAmY,QAAApE,EAAA,kBACA5V,KAAAsU,oBAAAsB,KAIA5V,KAAAkjB,aAAAqB,UACAvkB,KAAAqd,YAAArd,KAAAq3B,kBAAA,WAAAr3B,KAAAo4B,uBACA95B,EAAAg6B,kBACAt4B,KAAAqd,YAAArd,KAAAq3B,kBAAA,UAAAr3B,KAAAo4B,yBAMAp4B,KAAAsoB,YAGAtoB,KAAAkU,SAAAqY,YACA,UAAAvsB,KAAAkU,SAAA6S,QACA/mB,KAAAs3B,UAAAz1B,QAAAqrB,iBAEAltB,KAAAs3B,UAAAt3B,KAAAkjB,aAAAQ,MAGA1jB,KAAAs3B,UAAAlW,UAAA,GACAphB,KAAAqd,YAAArd,KAAAs3B,UAAA,SAAA,iBACAt3B,KAAAu4B,kBAIAR,oBAAA,WACA,KAAA,8FAGAzP,UAAA,aAGAkQ,eAAA,WACA,OAAAx4B,KAAAq3B,kBAAArc,YAGAyT,mBAAA,WACA,OAAAzuB,KAAAq3B,kBAAArc,SAAA,oBAGAmW,eAAA,SAAApb,GACA,IAAAH,EAAA5V,KAAAq3B,kBAAArc,SAAA,aAAAjF,EAAA,YAEA,OAAAH,EAAAtV,OACAsV,EAEA,MAIA4Y,oBAAA,WACA,IAAAxuB,KAAAw3B,cACA,KAAA,+BAGA,OAAAx3B,KAAAw3B,cAAApF,gBAGA1E,sBAAA,WACA,IAAA+K,EACA,IACAA,EAAAz4B,KAAAwuB,sBACA,MAAA7jB,IAGA,IAAA0mB,EAAA,GACA,GAAAoH,EACA,IAAA,IAAAp5B,EAAA,EAAAA,EAAAo5B,EAAAn4B,OAAAjB,IACAgyB,EAAA3xB,KAAA+4B,EAAApmB,GAAAhT,GAAA0H,KAAA,OAGA,OAAAsqB,GAGAqH,cAAA,SAAA9iB,GACA,IAAA5V,KAAAw3B,cACA,KAAA,+BAIA,OADAx3B,KAAAw3B,cAAAtI,WAAAtZ,GAAA,IACA,GAGA0f,kBAAA,SAAAvf,GACA,IAAA/V,KAAAw3B,cACA,KAAA,+BAGA,IAAA5hB,EAAA5V,KAAAmxB,eAAApb,GAEA,QAAAH,IACA5V,KAAAw3B,cAAAtI,WAAAtZ,GAAA,IACA,IAMAof,kBAAA,WACAh1B,KAAAw3B,cAAAmB,aAGA1D,oBAAA,WACAj1B,KAAAw3B,cAAAoB,eAGAV,eAAA,WACA,OAAA,GAGAW,gBAAA,WACA,OAAA74B,KAAA03B,eAGAM,gBAAA,SAAAc,GACA94B,KAAA03B,cAAAoB,GAGAC,eAAA,WACA,OAAA/4B,KAAA23B,cAGAM,eAAA,SAAAe,GACAh5B,KAAA23B,aAAAqB,GAMAT,cAAA,WACAv4B,KAAAi5B,eACAj5B,KAAAk5B,YAOAD,YAAA,WACA,SAAAj5B,KAAA+4B,mBAAA/4B,KAAAkU,SAAAqY,aAOAvsB,KAAAs3B,UAAA,KAAAz1B,QAAA8e,KAAA,GACA9e,QAAA8e,KAAAwY,cACAt3B,QAAA8e,KAAAS,aACAphB,KAAA8S,WAAA9Q,SAAAo3B,IACAp5B,KAAA8S,WAAAua,SAIArtB,KAAAs3B,UAAAe,KAAA,gBACAr4B,KAAAs3B,UAAAlW,aACAphB,KAAAs3B,UAAA+B,cAEA,KAOAH,SAAA,WACAl5B,KAAA+4B,mBAAA/4B,KAAAy3B,aAAAz3B,KAAAkU,SAAAqY,YAIAvsB,KAAAy3B,aAAA,EACAz3B,KAAAo3B,oBAAA9gB,YAAA,UACAtW,KAAA4qB,eAAA5qB,KAAAs3B,UAAA,UAEAz4B,MAAAiK,kBAAA,OAAA9I,KAAAkU,SAAAolB,uBAAA,CACAvyB,KAAA/G,KAAAu5B,sBACA/vB,KAAAkB,IACA1K,KAAAy3B,aAAA,EACAz3B,KAAAo3B,oBAAAplB,SAAA,UAEA,IAAAwnB,EAAAl7B,EAAAoM,EAAA3D,KAAArI,MAEAsB,KAAAy5B,eAAAD,GACA36B,MAAAqT,eAAAxH,EAAA3D,KAAAia,UACAniB,MAAA2T,eAAA9H,EAAA3D,KAAAka,UAEAjhB,KAAAw3B,gBACAx3B,KAAAw3B,cAAArN,SAAAqP,EAAAhS,OAAA,oBACAxnB,KAAAkjB,aAAAoL,wBAGAtuB,KAAAg4B,gBAAAh4B,KAAA64B,kBAAAW,EAAAl5B,QACAN,KAAAi4B,eAAAuB,EAAAl5B,QAAAN,KAAAkU,SAAAqY,WAGAvsB,KAAAqd,YAAArd,KAAAs3B,UAAA,SAAA,iBACAt3B,KAAAu4B,kBACA9uB,MAAAkB,IACA3K,KAAAy3B,aAAA,EACAz3B,KAAAo3B,oBAAAplB,SAAA,cAIAunB,kBAAA,WAEA,IAAAz5B,EAAAxB,EAAAM,QAAA,EAAA,GAAAoB,KAAAkU,SAAApU,QAEA,OADAA,EAAA4nB,SAAA1lB,OAAAhC,KAAA64B,kBACA/4B,GAGA25B,eAAA,SAAAD,GACAA,EAAAhrB,SAAAxO,KAAAq3B,mBACAr3B,KAAAu3B,YAAA3Y,KAAA4a,GACAx5B,KAAA05B,iBAAAF,IAGAE,iBAAA,SAAAF,GACAx5B,KAAAkU,SAAAwlB,iBAAAF,GACAx5B,KAAAmX,QAAA,iBAAA,CACAwiB,YAAAH,KAIAhQ,kBAAA,WACAxpB,KAAAkU,SAAAsV,oBACAxpB,KAAAmX,QAAA,oBAGA7C,oBAAA,SAAAsB,GACA/W,MAAAyV,oBAAAsB,EAAA7O,KAAA,QAAA6O,EAAA,CACAsN,aAAAljB,KAAAkjB,gBAIAtK,QAAA,WACA5Y,KAAAw3B,eACAx3B,KAAAw3B,cAAA5e,WAIAG,OAAA,WACA/Y,KAAAw3B,eACAx3B,KAAAw3B,cAAAze,UAIAkF,QAAA,WAEAje,KAAAo3B,oBAAAhc,SAGApb,KAAAu3B,YAAAtZ,iBACAje,KAAAu3B,YAGAv3B,KAAAw3B,gBACAx3B,KAAAkjB,aAAA7B,IAAA,iBAAArhB,KAAA43B,uBACA53B,KAAAkjB,aAAA7B,IAAA,kBAAArhB,KAAA63B,wBAEA73B,KAAAw3B,cAAAvZ,iBACAje,KAAAw3B,eAGAx3B,KAAA6iB,SAEA,CACA5F,SAAA,CACA8J,QAAA,QACAwF,UAAA,KACAzsB,OAAA,KACAq1B,YAAA,EACAC,aAAA,EACAC,cAAA,EACAiE,uBAAA,oCACAI,iBAAAp7B,EAAA6kB,KACAqG,kBAAAlrB,EAAA6kB,QC/WAtkB,MAAA+6B,uBAAA/3B,QAAA4Z,KAAA7c,OAAA,CACA24B,YAAA,KACAC,cAAA,KACAqC,YAAA,KACA9H,MAAA,KACA+H,cAAA,KAEAhnB,WAAA,KACAinB,mBAAA,KACA1U,UAAA,KACA2U,eAAA,KACAC,wBAAA,KAEAC,cAAA,EAEAld,KAAA,SAAA9I,GAKA,IAAA5V,EAAA0G,cAAAkP,GAAA,CAKA,IAHA,IAAAimB,EAAA,GACAh6B,EAAA,CAAA,KAAA,OAAA,cAAA,UAAA,WAAA,kBAAA,QAAA,kBAAA,WAEAd,EAAA,EAAAA,EAAAc,EAAAG,aACA,IAAA85B,UAAA/6B,GADAA,IAEA86B,EAAAh6B,EAAAd,IAAA+6B,UAAA/6B,GAMA6U,EAAAimB,EAGAn6B,KAAA8Z,YAAA5F,EAAArV,MAAA+6B,uBAAA3c,UAGAjd,KAAAkU,SAAAmmB,kBACAr6B,KAAAq6B,gBAAA,0BAAAr6B,KAAAkU,SAAAmmB,iBAIA,GAAAr6B,KAAAkU,SAAAsY,QACAxsB,KAAAkU,SAAAomB,UAAA,GAGAt6B,KAAA8S,WAAA9S,KAAAu6B,eAGAv6B,KAAA8S,WAAA/L,KAAA,gBAAA/G,MAEAA,KAAA+5B,mBAAA/5B,KAAAw6B,uBAEAx6B,KAAAg6B,eAAAh6B,KAAAy6B,oBACAz6B,KAAAg6B,iBACAh6B,KAAAi6B,wBAAAj6B,KAAAg6B,eAAA/S,OAAA,SACAjnB,KAAAi6B,wBAAA35B,SACAN,KAAAi6B,wBAAA,OAIAj6B,KAAAu3B,YAAA,IAAA14B,MAAAiiB,mBAEA9gB,KAAA06B,oBACA16B,KAAA26B,kBACA36B,KAAA46B,gBAEA56B,KAAAg6B,gBACAh6B,KAAAqd,YAAArd,KAAAg6B,eAAA,WAAA,aAGAn4B,QAAAkf,sBAAA,KACA/gB,KAAAk6B,cAAA,KAIA3L,oBACA,OAAAvuB,KAAAqlB,UAAA/kB,QAGAi6B,aAAA,WACA,OAAAj8B,EAAA,IAAA0B,KAAAkU,SAAA6B,KAGAykB,qBAAA,WACA,OAAAx6B,KAAA8S,WAAAkI,SAAA,cAGA6f,YAAA,WACA,OAAA76B,KAAA+5B,mBAAA/e,YAGAyf,kBAAA,WACA,OAAAz6B,KAAA8S,WAAAgD,KAAA,mBAGA4kB,kBAAA,WACA16B,KAAAkU,SAAAihB,aACAn1B,KAAAw3B,cAAA,IAAA31B,QAAAunB,OAAA,CACAC,MAAArpB,KAAAkU,SAAAomB,SACA9S,OAAA,oBAKAmT,gBAAA,WACA36B,KAAAkU,SAAAomB,WACAt6B,KAAA65B,YAAA,IAAAh4B,QAAAi5B,SAAA,CACAzjB,UAAArX,KAAA+5B,mBACAvS,OAAAxnB,KAAAkU,SAAAihB,WAAA,IAEAn1B,KAAA65B,YAAAkB,YAAAllB,SAAA,OACA7V,KAAAw3B,cAAAwD,mBAEAh7B,KAAA65B,YAAAkB,YAEA,KACAE,qBAAA,UACAC,KAAAl7B,KAAAm7B,qBACAC,kBAAA,EACAC,eAAA,EACAC,cAAA,IACAC,aAAAv7B,KAAAkU,SAAAihB,WAAA,KACAn1B,KAAAw3B,cAAAgE,kBACA,SAKAL,mBAAA,WACA,MAAA,SAAAn7B,KAAAkU,SAAAsR,SAAA,IAAA,MAGAiW,mBAAA,WACA,OAAAz7B,KAAAkU,SAAAsY,OAAAxsB,KAAAqlB,UAAA/kB,OAAAN,KAAAkU,SAAAsY,OAGAkP,qBAAA,WACA17B,KAAAy7B,qBACAz7B,KAAA27B,uBAEA37B,KAAA47B,yBAIAA,sBAAA,WACA,IAAAxhB,EAAApa,KAAAi6B,yBAAAj6B,KAAAg6B,eACA5f,GACAA,EAAApI,SAAA,WAIA2pB,qBAAA,WACA,IAAAvhB,EAAApa,KAAAi6B,yBAAAj6B,KAAAg6B,eACA5f,GACAA,EAAA9D,YAAA,WAIAskB,cAAA,WACA,OAAA56B,KAAAqlB,UACArlB,KAAA67B,eAAA77B,KAAAqlB,WAEArlB,KAAAqlB,UAAA/mB,IAGA0B,KAAA87B,YAAA97B,KAAA66B,gBAGAiB,YAAA,SAAAzW,GACArlB,KAAAu3B,YAAA3Y,KAAAyG,GAEArlB,KAAAkU,SAAAihB,YACAn1B,KAAAw3B,cAAArN,SAAA9E,GAGArlB,KAAAkU,SAAAomB,UACAt6B,KAAA65B,YAAA1P,SAAA9E,GAGArlB,KAAAkU,SAAA6nB,WACA/7B,KAAAg8B,yBAAAzkB,IACA,IAAA3B,EAAAtX,EAAAiZ,EAAA8C,gBACAxY,QAAAmY,QAAApE,EAAA,kBAAAA,EAAAC,SAAA,aAAAD,EAAAC,SAAA,aACA7V,KAAA85B,cAAA95B,KAAAsU,oBAAAsB,KAIA5V,KAAAqd,YAAAgI,EAAA,WAAArlB,KAAAg8B,0BAEA19B,EAAAg6B,kBACAt4B,KAAAqd,YAAAgI,EAAA,UAAArlB,KAAAg8B,2BAIA3W,EAAAvP,KAAA,WAAAwB,GAAA,iBAAAC,IACAvX,KAAAi8B,cAAA39B,EAAAiZ,EAAA8C,eAAAE,QAAA,aAEAhD,EAAAM,oBAGA7X,KAAAqlB,UAAArlB,KAAAqlB,UAAA3H,IAAA2H,GACArlB,KAAA07B,wBAGApnB,oBAAA,SAAAsB,EAAA1B,GAKA,OAJAA,IACAA,EAAA,IAEAA,EAAAgL,YAAAlf,KAAAkU,SAAAgL,YACArgB,MAAAyV,oBAAAtU,KAAAkU,SAAAL,YAAA+B,EAAA1B,IAGA2nB,eAAA,SAAAxW,GAKA,GAJArlB,KAAAkU,SAAAihB,YACAn1B,KAAAw3B,cAAA7M,YAAAtF,GAGArlB,KAAA+xB,MAAA,CAGA,IAFA,IAAAV,EAAA,GAEAhyB,EAAA,EAAAA,EAAAgmB,EAAA/kB,OAAAjB,IAAA,CACA,IAAA0W,EAAAsP,EAAAhT,GAAAhT,GAAA0H,KAAA,MAEAgP,GACAsb,EAAA3xB,KAAAqW,GAIAsb,EAAA/wB,QACAN,KAAA+xB,MAAA7O,aAAAkO,mBAAAC,GAKAhM,EAAArK,SAAA,SAAAqd,KAAA,YAAA,GAEAr4B,KAAAqlB,UAAArlB,KAAAqlB,UAAA0O,IAAA1O,GACArlB,KAAA07B,uBAEA17B,KAAAk8B,oBAGAD,cAAA,SAAArmB,GACA5V,KAAA67B,eAAAjmB,GACA5V,KAAAm8B,mBAAAvmB,EAAA,KACAA,EAAAwF,YAIA+gB,mBAAA,SAAAvmB,EAAA5O,GACA4O,EAAA0L,IAAA,UAAA,GAEA,IAAA8a,EAAA,CACAC,SAAA,GAEAD,EAAA,UAAAv9B,MAAA4Z,QAAA7C,EAAA0mB,aAAAn6B,SAAAyT,EAAA0L,IAAA,UAAAziB,MAAA6Z,SAEA,SAAA1Y,KAAAkU,SAAAsR,UAAA,IAAAxlB,KAAAqlB,UAAA/kB,SACA87B,EAAA,mBAAAxmB,EAAAyjB,cAAAl3B,SAAAyT,EAAA0L,IAAA,oBAIAxV,OAAAywB,aACAzwB,OAAAywB,YAAAC,QAGA5mB,EAAA4C,SAAA4jB,EAAAv9B,MAAA+6B,uBAAA6C,mBAAA,KACAz1B,IAGA8E,OAAAywB,aACAzwB,OAAAywB,YAAAG,YAKAC,UAAA,WAEA38B,KAAAy7B,uBAIAz7B,KAAA+xB,MAGA/xB,KAAA+xB,MAAA6K,OAFA58B,KAAA+xB,MAAA/xB,KAAA68B,gBAMAA,YAAA,WACA,OAAAh+B,MAAAuV,2BAAApU,KAAAkU,SAAAL,YAAA7T,KAAA88B,qBAGAA,iBAAA,WACA,OAAAx+B,EAAAM,OAAA,CACAm+B,kBAAA,EACAjW,WAAA9mB,KAAAq6B,gBACA2C,QAAAh9B,KAAAkU,SAAA8oB,QACAtV,SAAA1nB,KAAAkU,SAAAwT,SACA0N,YAAA,GAAAp1B,KAAAkU,SAAAsY,MACAyQ,aAAAj9B,KAAAkU,SAAA+oB,aACArQ,mBAAA5sB,KAAAk9B,wBACAC,SAAAn9B,KAAAo9B,cAAA9V,KAAAtnB,OACAA,KAAAkU,SAAAmpB,gBAGA3P,sBAAA,WAGA,IAFA,IAAA2D,EAAA,GAEAhyB,EAAA,EAAAA,EAAAW,KAAAqlB,UAAA/kB,OAAAjB,IACAgyB,EAAA3xB,KAAAM,KAAAqlB,UAAAhT,GAAAhT,GAAA0H,KAAA,OAGA,OAAAsqB,GAGA6L,sBAAA,WACA,IAAA7L,EAAArxB,KAAA0tB,wBAUA,OARA1tB,KAAAkU,SAAAopB,oBAAAt9B,KAAAkU,SAAAqpB,iBACAlM,EAAA3xB,KAAAM,KAAAkU,SAAAqpB,iBAGAv9B,KAAAkU,SAAA0Y,oBACAyE,EAAA3xB,QAAAM,KAAAkU,SAAA0Y,oBAGAyE,GAGA+L,cAAA,SAAAvmB,GACA,GAAA7W,KAAAkU,SAAAsY,MAAA,CAEA,IAAAgR,EAAAx9B,KAAAkU,SAAAsY,MAAAxsB,KAAAqlB,UAAA/kB,OAEAuW,EAAAvW,OAAAk9B,IACA3mB,EAAAA,EAAA9V,MAAA,EAAAy8B,IAIAx9B,KAAAy9B,eAAA5mB,GACA7W,KAAA09B,iCAGAD,eAAA,SAAA5mB,GACA,IAAA,IAAAxX,EAAA,EAAAA,EAAAwX,EAAAvW,OAAAjB,IAAA,CACA,IAAAs+B,EAAA9mB,EAAAxX,GACAuW,EAAA5V,KAAA49B,iBAAAD,GAEA39B,KAAA69B,cAAAjoB,GACA5V,KAAA87B,YAAAlmB,GACA5V,KAAA89B,wBAAAH,EAAA/nB,SAAAA,GAGA+nB,EAAA/nB,SAAAA,EAGA5V,KAAA+9B,iBAAAlnB,IAGA+mB,iBAAA,SAAAD,GACA,IAAA/nB,EAAA+nB,EAAA/nB,SAAAooB,QAQA,OALAn/B,MAAAsX,eAAAP,EAAA,UAAA5V,KAAAkU,SAAAsR,SAAA,QAAA,SACA5P,EAAA5D,SAAA,aACA4D,EAAAqoB,QAAA,8BAAAj+B,KAAAkU,SAAAhP,OAAAlF,KAAAkU,SAAAgqB,OAAA,GAAA,gBAAAP,EAAA5nB,qCACAlX,MAAAc,EAAA,MAAA,UAAA,UAEAiW,GAGAioB,cAAA,SAAAjoB,GACAA,EAAApH,SAAAxO,KAAA+5B,qBAGA+D,wBAAA,SAAAK,EAAAC,GACA,IAAAC,EAAAF,EAAAn8B,SACAs8B,EAAAF,EAAAp8B,SACAu8B,EAAAH,EAAAJ,QAAAxvB,SAAA3M,QAAA+Q,MAEAwrB,EAAA9c,IAAA,aAAA,UAEAid,EAAAjd,IAAA,CACAkd,SAAA,WACAC,OAAA,IACArF,IAAAiF,EAAAjF,IACA3gB,KAAA4lB,EAAA5lB,OAGA,IAAA2jB,EAAA,CACAhD,IAAAkF,EAAAlF,IACA3gB,KAAA6lB,EAAA7lB,MAGA8lB,EAAA/lB,SAAA4jB,EAAAv9B,MAAA+6B,uBAAA8E,iBAAA,WACAH,EAAAnjB,SACAgjB,EAAA9c,IAAA,aAAA,eAIAoc,8BAAA,WACA19B,KAAA+xB,MAAA7O,cACAljB,KAAA+xB,MAAA7O,aAAAqO,oBAAAvxB,KAAAk9B,0BAIA/L,eAAA,SAAApb,GACA,IAAA,IAAA1W,EAAA,EAAAA,EAAAW,KAAAqlB,UAAA/kB,OAAAjB,IAAA,CACA,IAAAuW,EAAA5V,KAAAqlB,UAAAhT,GAAAhT,GAEA,GAAAuW,EAAA7O,KAAA,OAAAgP,EACA,OAAAH,IAKAmoB,iBAAA,SAAAlnB,GACA7W,KAAAmX,QAAA,iBAAA,CAAAN,SAAAA,IACA7W,KAAAkU,SAAA6pB,iBAAAlnB,GAEA/K,OAAAywB,aACAzwB,OAAAywB,YAAAoC,aAIAzC,iBAAA,WACAl8B,KAAAmX,QAAA,kBACAnX,KAAAkU,SAAAgoB,qBAEA,CACAwC,gBAAA,IACAjC,mBAAA,IAEAxf,SAAA,CACAlH,GAAA,KACA7Q,KAAA,KACA05B,QAAA,KACA/qB,YAAA,KACAmpB,QAAA,KACAtV,SAAA,GACA4V,oBAAA,EACAC,gBAAA,KACA3Q,mBAAA,KACApH,SAAA,OACA0Y,QAAA,EACA1R,MAAA,KACAyQ,cAAA,EACA5C,gBAAA,KACAgD,cAAA,GACAU,iBAAAz/B,EAAA6kB,KACA+Y,iBAAA59B,EAAA6kB,KACAmX,UAAA,EACAnF,YAAA,EACA4G,UAAA,EACA7c,aAAA,EACA2f,eAAA,MC3cAhgC,MAAAwV,yBAAAxS,QAAAi9B,MAAAlgC,OAAA,CACAiV,YAAA,KACAqP,aAAA,KAEAhH,MAAA,KACA6iB,WAAA,KACA3iB,SAAA,KACA2M,SAAA,KACAiW,eAAA,KACAtb,MAAA,KACAU,QAAA,KACAiB,UAAA,KACA4Z,OAAA,KACAC,gBAAA,KACAC,kBAAA,KACA1iB,WAAA,KACA2iB,eAAA,KAEApiB,KAAA,SAAAnJ,EAAAK,GACAlU,KAAA6T,YAAAA,EACA7T,KAAA8Z,YAAA5F,EAAArV,MAAAwV,yBAAA4I,UAGA,IAAAnK,EAAAxU,EAAA,kDAAAkQ,SAAA3M,QAAA+Q,MACAsJ,EAAA5d,EAAA,2DAAAkQ,SAAAsE,GACAuJ,EAAA/d,EAAA,yBAAAkQ,SAAAsE,GAEA9S,KAAA6iB,KAAA/P,EAAA9S,KAAAkU,UAEAlU,KAAAo/B,eAAA9gC,EAAA,iCAAAkQ,SAAA6N,GACArc,KAAAk/B,gBAAA5gC,EAAA,gCAAAkQ,SAAA6N,GACArc,KAAAm/B,kBAAA7gC,EAAA,iDAAAkQ,SAAA6N,GACArc,KAAAyc,WAAAne,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,MACA3X,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAxO,KAAAk/B,iBACAl/B,KAAA++B,WAAAzgC,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,sBACA3X,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAxO,KAAAk/B,iBAEAl/B,KAAAkc,MAAAA,EAEAlc,KAAAqd,YAAArd,KAAAyc,WAAA,WAAA,UACAzc,KAAAqd,YAAArd,KAAA++B,WAAA,WAAA,mBAGAM,SAAA,WACAr/B,KAAAkjB,aAIArhB,QAAAsf,iBAAA,IACAnhB,KAAAkjB,aAAAkB,QAAAjN,QAAA,SAJAnX,KAAAs/B,sBAQAt/B,KAAA6iB,QAGA2G,kBAAA,WACAxpB,KAAAu/B,wBAGAA,qBAAA,WACAv/B,KAAA++B,aACA/+B,KAAAkjB,aAAAsL,sBAAAluB,OACAN,KAAAw/B,kBAEAx/B,KAAAy/B,qBAKAD,gBAAA,WACAx/B,KAAA++B,WAAAzoB,YAAA,aAGAmpB,iBAAA,WACAz/B,KAAA++B,WAAA/sB,SAAA,aAGA0tB,gBAAA,WACA1/B,KAAAyc,WAAAnG,YAAA,aAGAqpB,iBAAA,WACA3/B,KAAAyc,WAAAzK,SAAA,aAGA4tB,kBAAA,WACA5/B,KAAAo/B,eAAA9oB,YAAA,WAGAupB,kBAAA,WACA7/B,KAAAo/B,eAAAptB,SAAA,WAGAqN,OAAA,WACArf,KAAAyc,WAAA5G,SAAA,aACA7V,KAAAknB,QAIAuW,eAAA,WACA,GAAAz9B,KAAAkjB,cAAAljB,KAAAkjB,aAAAsL,sBAAAluB,OAAA,CAEAN,KAAAkjB,aAAAuC,KAAA+R,cAAAsI,sBAEA,IAAArH,EAAAz4B,KAAAkjB,aAAAsL,sBACAmP,EAAA39B,KAAA2V,eAAA8iB,GAEAz4B,KAAAm9B,SAAAQ,GAEA39B,KAAAkU,SAAA6rB,yBACA//B,KAAAkjB,aAAA+N,gBAAAjxB,KAAAkjB,aAAAsL,uBAGAxuB,KAAAkU,SAAA8rB,cACAhgC,KAAAknB,SAKAvR,eAAA,SAAA8iB,GAGA,IAFA,IAAAwH,EAAA,GAEA5gC,EAAA,EAAAA,EAAAo5B,EAAAn4B,OAAAjB,IAAA,CACA,IAAAuW,EAAAtX,EAAAm6B,EAAAp5B,IACAs+B,EAAA9+B,MAAA8W,eAAAC,GAEAqqB,EAAAvgC,KAAAi+B,GAGA,OAAAsC,GAGArD,KAAA,WACA58B,KAAAu/B,uBACAv/B,KAAA6iB,QAGAsa,SAAA,SAAAQ,GACA39B,KAAAkU,SAAAipB,SAAAQ,IAGA/kB,QAAA,WACA5Y,KAAAkjB,cACAljB,KAAAkjB,aAAAtK,UAGA5Y,KAAA6iB,QAGA9J,OAAA,WACA/Y,KAAAkjB,cACAljB,KAAAkjB,aAAAnK,SAGA/Y,KAAA6iB,QAGAyc,oBAAA,WAEA,IAAAv4B,EAAA,CACAggB,QAAA,QACAlT,YAAA7T,KAAA6T,YACAmpB,QAAAh9B,KAAAkU,SAAA8oB,SAGA,OAAAh9B,KAAAkU,SAAA+oB,cAAA,SAAAj9B,KAAAkU,SAAA+oB,eACAl2B,EAAAk2B,aAAAj9B,KAAAkU,SAAA+oB,aAAA,IAAA,KAGAp+B,MAAAgI,kBAAA,0BAAAE,EAAA,CAAA2D,EAAA9C,KACA,YAAAA,IACA5H,KAAAkc,MAAAxd,KAAAgM,EAAAhM,MAEAsB,KAAAkc,MAAAgkB,IAAA,yBAAA5/B,QACAN,KAAAkc,MAAAlK,SAAA,eAIAhS,KAAAkjB,aAAArkB,MAAAoV,mBAAAjU,KAAA6T,YAAA7T,KAAAkc,MAAA,CACA6K,QAAA,QACAgL,MAAA/xB,KACA8mB,WAAA9mB,KAAAkU,SAAA4S,WACAY,SAAA1nB,KAAAkU,SAAAwT,SACAkF,mBAAA5sB,KAAAkU,SAAA0Y,mBACAuI,YAAA,EACAC,YAAAp1B,KAAAkU,SAAAkhB,YACAvD,gBAAA7xB,KAAAm/B,kBACA3V,kBAAAxpB,KAAAwpB,kBAAAlC,KAAAtnB,MACAsd,YAAAtd,KAAAkU,SAAAoJ,YACAsK,cAAA5nB,KAAAkU,SAAA0T,cACAmD,cAAA/qB,KAAAkU,SAAA6W,gBAIA/qB,KAAAqd,YAAArd,KAAAkjB,aAAAmC,UAAA,aAAA,SAAA9N,EAAA4oB,GAGAA,EAAAC,SAAAljB,SAAAijB,EAAAE,UAAAnjB,QACAld,KAAAy9B,yBAMA,CACAxgB,SAAA,CACAqjB,WAAA,EACAxZ,WAAA,KACAkW,QAAA,KACAtV,SAAA,KACA0N,aAAA,EACA6H,aAAA,KACArQ,mBAAA,GACAmT,yBAAA,EACAC,cAAA,EACAO,SAAAjiC,EAAA6kB,KACAga,SAAA7+B,EAAA6kB,KACA7F,aAAA,EACAsK,cAAA,KACAmD,cAAA,QClOAlsB,MAAA2hC,mBAAA3+B,QAAA4Z,KAAA7c,OAAA,CACAklB,QAAA,KACApF,QAAA,KACAvQ,MAAA,KACA+F,SAAA,KAEAusB,UAAA,KACAC,QAAA,KAEA1jB,KAAA,SAAAuC,EAAArC,EAAAhJ,GACAlU,KAAA8jB,QAAAxlB,EAAAihB,GACAvf,KAAA0e,QAAApgB,EAAA4e,GACAld,KAAAmO,MAAAnO,KAAA8jB,QAAAvJ,QAAA,QAEAva,KAAA8Z,YAAA5F,GAEAlU,KAAA2gC,kBAGAC,aAAA,SAAArhB,GACA,IAAAkhB,EAAAzgC,KAAAygC,UACAzgC,KAAA6gC,gBAEA7gC,KAAA8jB,QAAAxlB,EAAAihB,GAEAkhB,GACAzgC,KAAA2gC,kBAIAA,eAAA,WACA3gC,KAAAygC,YAIAzgC,KAAAygC,WAAA,EAEAzgC,KAAAqd,YAAArd,KAAA8jB,QAAA,QAAA,sBACA9jB,KAAAqd,YAAArd,KAAA0e,QAAA,QAAA,sBACA1e,KAAAqd,YAAArd,KAAAmO,MAAA,SAAA,kBAGA0yB,cAAA,WACA7gC,KAAAygC,YAIAzgC,KAAAygC,WAAA,EAEAzgC,KAAA0gC,SACAzY,aAAAjoB,KAAA0gC,SAGA1gC,KAAA8gC,mBAAA9gC,KAAA8jB,SACA9jB,KAAA8gC,mBAAA9gC,KAAA0e,SACA1e,KAAA8gC,mBAAA9gC,KAAAmO,SAGA4yB,mBAAA,WACA/gC,KAAA0gC,SACAzY,aAAAjoB,KAAA0gC,SAGA1gC,KAAA0gC,QAAAxY,WAAAloB,KAAAghC,aAAA1Z,KAAAtnB,MAAA,MAGAihC,mBAAA,WACAjhC,KAAA0e,QAAAoU,IAAA,KAAAvsB,SAAAmR,eACA1X,KAAA6gC,iBAIAK,aAAA,WACAlhC,KAAA0gC,SACAzY,aAAAjoB,KAAA0gC,SAGA1gC,KAAAghC,gBAGAA,aAAA,WACA,GAAAhhC,KAAA0e,QAAAyU,GAAA,YAAA,CAIA,IAAAgO,EAAAnhC,KAAA8jB,QAAAvf,MAEA,QAAA,IAAA48B,EAAA,CAKA,IAAAC,EAAAphC,KAAAqhC,oBAAAF,GAEAnhC,KAAA0e,QAAAna,IAAA68B,GAEA,IAAA,IAAA/hC,EAAA,EAAAA,EAAAW,KAAA0e,QAAApe,OAAAjB,IACAW,KAAA0e,QAAArf,GAAAiiC,cAAA,IAAAC,WAAA,QAAA,CACAC,UAAA,gBAEAxhC,KAAA0e,QAAArf,GAAAiiC,cAAA,IAAAG,MAAA,UAKAzhC,KAAA0e,QAAAyU,GAAA,WACAt0B,MAAAuF,gBAAApE,KAAA0e,YAIA2iB,oBAAA,SAAAF,GACA,OAAAA,KC/GAtiC,MAAA4hB,KAAA5e,QAAA4Z,KAAA7c,OAAA,CACAkU,WAAA,KACAf,IAAA,KACA2vB,SAAA,KACAC,MAAA,KACAC,aAAA,KACAC,cAAA,KACAza,KAAA,KAEApK,KAAA,SAAA3F,GACArX,KAAA8S,WAAAxU,EAAA+Y,GACArX,KAAA+R,IAAA/R,KAAA8S,WAAAgD,KAAA,cACA9V,KAAA2hC,MAAA3hC,KAAA+R,IAAA+D,KAAA,YACA9V,KAAA4hC,aAAA5hC,KAAA2hC,MAAAna,OAAA,cACAxnB,KAAA6hC,cAAA7hC,KAAA2hC,MAAAna,OAAA,sBACAxnB,KAAA0hC,SAAA1hC,KAAA8S,WAAAgD,KAAA,oBAAAxC,UACAtT,KAAAonB,KAAApnB,KAAA0hC,SAAA36B,KAAA,WAAAqgB,KAGApnB,KAAA8S,WAAA/L,KAAA,UACAlF,QAAAigC,IAAA,oDACA9hC,KAAA8S,WAAA/L,KAAA,QAAAkX,WAGAje,KAAA8S,WAAA/L,KAAA,OAAA/G,MAEA,IAAA,IAAAX,EAAA,EAAAA,EAAAW,KAAA2hC,MAAArhC,OAAAjB,IAAA,CACA,MAAA6iB,EAAAliB,KAAA2hC,MAAAtvB,GAAAhT,GAGAoH,EAAAyb,EAAA9T,KAAA,QACA3H,GAAA,MAAAA,EAAAkJ,OAAA,KACA3P,KAAAqd,YAAA6E,EAAA,UAAA3K,IACA,CAAA1V,QAAAqzB,UAAArzB,QAAAumB,YAAA9Y,SAAAiI,EAAAC,WACAD,EAAAK,iBACA5X,KAAA+hC,UAAAxqB,EAAA8C,kBAGAra,KAAAqd,YAAA6E,EAAA,QAAA3K,IACAA,EAAAK,iBACAtZ,EAAAiZ,EAAA8C,eACAra,KAAA+hC,UAAAxqB,EAAA8C,eACAra,KAAAgiC,iBAAAzqB,EAAA8C,iBAGA5T,EAAA/E,OAAA,KAAAoK,OAAAm2B,gBACAC,YAAAhgB,IAIAliB,KAAAqd,YAAA6E,EAAA,UAAA3K,IACA,GACA,CAAA1V,QAAAsgC,SAAAtgC,QAAAugC,WAAA9yB,SAAAiI,EAAAC,UACAlZ,EAAA+jC,SAAAriC,KAAA+R,IAAA,GAAAwF,EAAA8C,eACA,CACA,IAAAqG,EAEAA,EADAnJ,EAAAC,WAAA,QAAA3Y,MAAA0Z,YAAA1W,QAAAsgC,SAAAtgC,QAAAugC,WACA9jC,EAAAiZ,EAAA8C,eAAA4M,SAAAuM,KAAA,MAAAxY,SAAA,KAEA1c,EAAAiZ,EAAA8C,eAAA4M,SAAAxM,KAAA,MAAAO,SAAA,KAEA0F,EAAApgB,SACAiX,EAAAK,iBACA5X,KAAAgiC,iBAAAthB,GACAA,EAAA3I,QACA/X,KAAAsiC,YAAA5hB,OAMA1gB,KAAAuiC,gBAEA1gC,QAAA8e,KAAArJ,GAAA,SAAA,KACAtX,KAAAuiC,kBAIAviC,KAAAonB,KAAAG,SAAAjQ,GAAA,QAAAC,IAEA,MADAjZ,EAAAiZ,EAAA8C,eACAjM,KAAA,QAAAuB,OAAA,IACA4H,EAAAK,mBAIA5X,KAAAonB,KAAA9P,GAAA,eAAAC,IACAvX,KAAA+hC,UAAAzjC,EAAAiZ,EAAAkb,gBAAA1rB,KAAA,UAIAg7B,UAAA,SAAAS,GACA,MAAA9hB,EAAA1gB,KAAAyiC,QAAAD,GAEA9hB,EAAA,KAAA1gB,KAAA4hC,aAAA,KAIA5hC,KAAA0iC,cACA1iC,KAAA4hC,aAAAlhB,EAAA1O,SAAA,OACAhS,KAAAgiC,iBAAAthB,GACA1gB,KAAAsiC,YAAA5hB,GAEA1gB,KAAAonB,KAAAG,SAAAjR,YAAA,OACAtW,KAAAonB,KAAAG,SAAAC,OAAA,aAAA9G,EAAA3Z,KAAA,WAAAiL,SAAA,OAEAhS,KAAAmX,QAAA,YAAA,CACAuJ,KAAAA,MAIAgiB,YAAA,WACA,MAAAhiB,EAAA1gB,KAAA4hC,aAAAtrB,YAAA,OACAtW,KAAA4hC,aAAA,KAEA5hC,KAAAmX,QAAA,cAAA,CACAuJ,KAAAA,KAIAshB,iBAAA,SAAAQ,GACA,MAAA9hB,EAAA1gB,KAAAyiC,QAAAD,GAEA9hB,EAAA,KAAA1gB,KAAA6hC,cAAA,KAIA7hC,KAAA6hC,cAAAzzB,KAAA,WAAA,MACApO,KAAA6hC,cAAAnhB,EAAAtS,KAAA,WAAA,OAGAk0B,YAAA,SAAAE,GACA,MAAA9hB,EAAA1gB,KAAAyiC,QAAAD,GACAG,EAAA3iC,KAAA+R,IAAA4wB,aAEAC,EADAliB,EAAA1e,SAAAyW,KACAzY,KAAA+R,IAAA/P,SAAAyW,KACA,IAAAoqB,GAAA,EAGA,GAAAD,EAAA,EACAC,EAAAF,EAAAC,EAAA,OACA,CACA,MAAAE,EAAApiB,EAAA4b,aACAyG,EAAA/iC,KAAA+R,IAAAsmB,KAAA,eAGAuK,EAAAE,EAAAC,IACAF,EAAAF,GAAAC,GAAAG,EAAAD,IAAA,KAIA,IAAAD,GACA7iC,KAAA+R,IAAA4wB,WAAAE,IAIAN,cAAA,WACA1xB,KAAAC,MAAA9Q,KAAA+R,IAAAsmB,KAAA,eAAA,IAAAr4B,KAAA8S,WAAAulB,KAAA,gBACAr4B,KAAA+R,IAAAC,SAAA,cACAhS,KAAA0hC,SAAAprB,YAAA,YAEAtW,KAAA+R,IAAAuE,YAAA,cACAtW,KAAA0hC,SAAA1vB,SAAA,YAIAywB,QAAA,SAAAD,GACA,GAAAA,aAAAhkC,OACA,OAAAgkC,EAGA,GAAAA,aAAAQ,YACA,OAAA1kC,EAAAkkC,GAGA,GAAA,iBAAAA,EACA,KAAA,iBAGA,MAAA9hB,EAAA1gB,KAAA2hC,MAAAna,OAAA,aAAAgb,OAEA,IAAA9hB,EAAApgB,OACA,KAAA,mBAAAkiC,EAGA,OAAA9hB,KCxLA7hB,MAAAokC,WAAAphC,QAAA4Z,KAAA7c,OAAA,CACAsV,SAAA,KACAgvB,WAAA,KACAC,OAAA,KAEAC,SAAA,KACAC,OAAA,KACApE,OAAA,KACAqE,YAAA,KAEAtmB,KAAA,SAAA9I,GACAlU,KAAA8Z,YAAA5F,EAAArV,MAAAokC,WAAAhmB,UAEAjd,KAAAkU,SAAAqvB,iBACAvjC,KAAAkU,SAAAsvB,SAAA,GAGAxjC,KAAAojC,SAAA9kC,EAAA0B,KAAAkU,SAAAuvB,iBACAzjC,KAAAqjC,OAAA/kC,EAAA0B,KAAAkU,SAAAwvB,eACA1jC,KAAAi/B,OAAAj/B,KAAAqjC,OAAAroB,SAAA,SACAhb,KAAAkjC,WAAAljC,KAAAi/B,OAAAjkB,WAAA1a,OAEAN,KAAAkU,SAAAomB,WACAt6B,KAAAmjC,OAAA,IAAAtkC,MAAA8kC,gBAAA3jC,KAAAqjC,OAAA,CACA9H,aAAAv7B,KAAA4jC,aAAAtc,KAAAtnB,SAIAA,KAAAsjC,YAAAtjC,KAAAqjC,OAAAvtB,KAAA,0BACA9V,KAAAqd,YAAArd,KAAAsjC,YAAA,QAAA,wBAEAtjC,KAAA6jC,YAGAC,OAAA,SAAAC,GACA,KAAA/jC,KAAAkU,SAAA8vB,UAAAhkC,KAAAkjC,YAAAljC,KAAAkU,SAAA8vB,UAAA,CAKA,IAAAC,EAAA3lC,EAAAylC,GAAAv1B,SAAAxO,KAAAi/B,QACAiF,EAAAD,EAAAnuB,KAAA,WAEA9V,KAAAkU,SAAAomB,UACAt6B,KAAAmjC,OAAAhZ,SAAA8Z,GAGAjkC,KAAAsjC,YAAAtjC,KAAAsjC,YAAA5lB,IAAAwmB,GAEAlkC,KAAAqd,YAAA6mB,EAAA,QAAA,wBACAlkC,KAAAkjC,aAEAljC,KAAA6jC,aAGAD,aAAA,WACA,GAAA5jC,KAAAkU,SAAAomB,SAAA,CAOA,IAFA,IAAAjJ,EAAA,GAEAhyB,EAAA,EAAAA,EAAAW,KAAAmjC,OAAAna,OAAA1oB,OAAAjB,IAAA,CACA,IAAA0W,EAAAzX,EAAA0B,KAAAmjC,OAAAna,OAAA3pB,IAAA+O,KAAApO,KAAAkU,SAAAiwB,aACA9S,EAAA3xB,KAAAqW,GAIA,IAAAhP,EAAA,CACAsqB,IAAAlqB,KAAAC,UAAAiqB,IAGAxyB,MAAAgI,kBAAA7G,KAAAkU,SAAAkwB,cAAAr9B,EAAA,CAAA2D,EAAA9C,KACA,YAAAA,IACA8C,EAAAhD,SACA1H,KAAAqkC,eAAAhT,GACAxyB,MAAAkJ,GAAAua,cAAAzjB,MAAAc,EAAA,MAAAK,KAAAkU,SAAAowB,yBAEAzlC,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAAK,KAAAkU,SAAAqwB,0BAMAC,qBAAA,SAAA7lB,GACA,KAAA3e,KAAAkU,SAAAsvB,UAAAxjC,KAAAkjC,YAAAljC,KAAAkU,SAAAsvB,UAAA,CAKA,IAAAS,EAAA3lC,EAAAqgB,EAAAzB,QAAA3C,QAAA,MAEAva,KAAAykC,kBAAAR,IACAjkC,KAAA0kC,WAAAT,KAIAQ,kBAAA,SAAAR,GACA,IAAA/+B,EAAAlF,KAAA2kC,YAAAV,GACA,OAAAltB,QAAAlY,MAAAc,EAAA,MAAAK,KAAAkU,SAAA0wB,qBAAA,CAAA1/B,KAAAA,MAGAw/B,WAAA,SAAAT,GACA,IAAAl9B,EAAA,CACAgP,GAAA/V,KAAA6kC,UAAAZ,IAGAplC,MAAAgI,kBAAA7G,KAAAkU,SAAA4wB,aAAA/9B,EAAA,CAAA2D,EAAA9C,KACA,YAAAA,GACA5H,KAAA+kC,yBAAAr6B,EAAAu5B,MAKAc,yBAAA,SAAAr6B,EAAAu5B,GACA,IAAAluB,EAAA/V,KAAA6kC,UAAAZ,GACA/+B,EAAAlF,KAAA2kC,YAAAV,GAEAv5B,EAAAhD,SACA1H,KAAAmjC,QACAnjC,KAAAmjC,OAAAxY,YAAAsZ,GAGAA,EAAA7oB,SACApb,KAAAkjC,aACAljC,KAAA6jC,WACA7jC,KAAAglC,aAAAjvB,GAEAlX,MAAAkJ,GAAAua,cAAAzjB,MAAAc,EAAA,MAAAK,KAAAkU,SAAA+wB,qBAAA,CAAA//B,KAAAA,MAEArG,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAAK,KAAAkU,SAAAgxB,kBAAA,CAAAhgC,KAAAA,MAIAm/B,eAAA,SAAAhT,GACArxB,KAAAkU,SAAAmwB,eAAAhT,IAGA2T,aAAA,SAAAjvB,GACA/V,KAAAkU,SAAA8wB,aAAAjvB,IAGA8uB,UAAA,SAAAZ,GACA,OAAAA,EAAA71B,KAAApO,KAAAkU,SAAAiwB,cAGAQ,YAAA,SAAAV,GACA,OAAAplC,MAAAuE,WAAA6gC,EAAA71B,KAAApO,KAAAkU,SAAAixB,iBAGAtB,SAAA,WAWA,GATA,IAAA7jC,KAAAkjC,YACAljC,KAAAqjC,OAAAnc,OACAlnB,KAAAojC,SAAA9sB,YAAA,YAEAtW,KAAAqjC,OAAAzG,OACA58B,KAAAojC,SAAApxB,SAAA,WAIAhS,KAAAkU,SAAAomB,SAAA,CACA,IAAA8K,EAAAplC,KAAAqjC,OAAAvtB,KAAA,SAEA,IAAA9V,KAAAkjC,WACAkC,EAAApzB,SAAA,YAEAozB,EAAA9uB,YAAA,YAKAtW,KAAAkU,SAAAsvB,UAAAxjC,KAAAkjC,YAAAljC,KAAAkU,SAAAsvB,SACAxjC,KAAAsjC,YAAAtxB,SAAA,YAEAhS,KAAAsjC,YAAAhtB,YAAA,YAIAtW,KAAAkU,SAAAmxB,qBACArlC,KAAAkU,SAAA8vB,UAAAhkC,KAAAkjC,YAAAljC,KAAAkU,SAAA8vB,SACA1lC,EAAA0B,KAAAkU,SAAAmxB,oBAAArzB,SAAA,UAEA1T,EAAA0B,KAAAkU,SAAAmxB,oBAAA/uB,YAAA,aAIA,CACA2G,SAAA,CACAymB,cAAA,KACAD,gBAAA,KACA4B,mBAAA,KACAlB,YAAA,UACAgB,cAAA,YACA7K,UAAA,EACAiJ,gBAAA,EACAC,SAAA,EACAQ,SAAA,KACAI,cAAA,KACAU,aAAA,KACAR,sBAAAzlC,MAAAc,EAAA,MAAA,oBACA4kC,mBAAA1lC,MAAAc,EAAA,MAAA,4BACAilC,qBAAA/lC,MAAAc,EAAA,MAAA,6CACAslC,qBAAApmC,MAAAc,EAAA,MAAA,qBACAulC,kBAAArmC,MAAAc,EAAA,MAAA,6BACA0kC,eAAA/lC,EAAA6kB,KACA6hB,aAAA1mC,EAAA6kB,QC/MAtkB,MAAAymC,YAAAzmC,MAAA2V,kBAAA5V,OAAA,CACA2mC,eAAA,KAEAC,iBAAA,KACAC,kBAAA,KACAC,aAAA,EACAC,aAAA,KAEA3oB,KAAA,SAAAzI,EAAAL,GACAlU,KAAAsX,GAAA,aAAA,KACAtX,KAAAqd,YAAArd,KAAAoc,SAAAtG,KAAA,sCAAA,QAAA,mBACA9V,KAAAqd,YAAArd,KAAAoc,SAAAtG,KAAA,yCAAA,QAAA,oBAEA9V,KAAAulC,eAAAvlC,KAAAoc,SAAAtG,KAAA,aACA9V,KAAAqd,YAAArd,KAAAulC,eAAA,QAAA,oBAGAvlC,KAAAsX,GAAA,gBAAA,KACAtX,KAAA0lC,cACA1lC,KAAAkU,SAAAgP,aACAljB,KAAAkU,SAAAgP,aAAAwF,iBACA1oB,KAAAkU,SAAA7P,QACArE,KAAA2lC,aACA3lC,KAAAkU,SAAA7P,MAAAuhC,eAAA5lC,KAAA4V,SAAA7O,KAAA,MAAA/G,KAAA2lC,cAEA3lC,KAAAkU,SAAA7P,MAAAwhC,iBAAA7lC,KAAA4V,SAAA7O,KAAA,WAMA/G,KAAA6iB,KAAAtO,EAAAL,GAEAlU,KAAAkU,SAAA4N,WAAApiB,KAAA,IAAAM,KAAA8lC,sBAGAC,gBAAA,WACA,IAAAlnC,MAAAmnC,iBAAAhmC,KAAA4V,SAAA7O,KAAA,MAAA,CAEAk/B,OAAAl/B,IACAA,EAAA2U,YACA1b,KAAAkU,SAAAwH,UAAA1b,KAAA2lC,aAAA5+B,EAAA2U,WAGA1b,KAAA0lC,aAAA,EACA1lC,KAAA4e,WAKAsnB,iBAAA,WACA,IAAAhyB,EAAA,GAEAlU,KAAA4V,SAAA7O,KAAA,iBACAmN,EAAAiyB,cAAAnmC,KAAA4V,SAAA7O,KAAA,eACAmN,EAAAkyB,eAAApmC,KAAA4V,SAAA7O,KAAA,iBAGA,IAAAlI,MAAAwnC,iBAAArmC,KAAA4V,SAAA7O,KAAA,MAAA,KAAAmN,IAGAoyB,eAAA,WACA,QAAA,IAAAtmC,KAAAulC,eAAA,GAAAgB,eACA,OAGA,MAAAC,SAAAA,EAAAC,UAAAA,GAAAzmC,KAAA0mC,iBAEA,OAAA1mC,KAAAwlC,mBACAxlC,KAAAwlC,iBAAAgB,EACAxmC,KAAAylC,kBAAAgB,GAGAzmC,KAAAulC,eAAA,GAAAgB,eAAA,EACAvmC,KAAAulC,eAAA,GAAAoB,aAAAH,EAAAlmC,OAGAN,KAAAulC,eAAA7jB,IAAA,wBAAAnK,IACAA,EAAAK,mBAEAsQ,WAAA,KACAloB,KAAAulC,eAAAlkB,IAAA,0BACA,MAGAykB,kBAAA,WACA,GAAA,OAAA9lC,KAAAwlC,iBACA,OAAA,EAGA,MAAAgB,SAAAA,EAAAC,UAAAA,GAAAzmC,KAAA0mC,iBAEA,OAAAD,IAAAzmC,KAAAylC,oBAKAgB,EAcA1vB,QAAAlY,MAAAc,EAAA,MAAA,iFAAA,CACAinC,OAAA5mC,KAAAylC,kBACAoB,OAAAJ,KAdAzmC,KAAA8mC,mBAAAN,GACAxmC,KAAAulC,eAAAhhC,IAAA,GAAA1F,MAAA8F,MAAA6hC,EAAA,QAAAxmC,KAAAylC,sBACA,GAIA1uB,QAAAlY,MAAAc,EAAA,MAAA,0DAAA,CACAonC,IAAA/mC,KAAAylC,uBAWAiB,eAAA,WACA,MAAAM,EAAAhnC,KAAAulC,eAAAhhC,MAAArD,MAAA,KACAulC,EAAAO,EAAA1mC,OAAA,EAAA0mC,EAAAC,MAAA,KAEA,MAAA,CAAAT,SADAQ,EAAAvmC,KAAA,KACAgmC,UAAAA,MAKA5nC,MAAAmV,2BAAA,yBAAAnV,MAAAymC,aC5HAzmC,MAAAmnC,iBAAAnkC,QAAAi9B,MAAAlgC,OAAA,CAEAsd,MAAA,KACAG,QAAA,KACA6qB,YAAA,KACAC,SAAA,KACA1qB,WAAA,KACA2qB,YAAA,KACA1qB,SAAA,KACA2qB,iBAAA,KACAC,YAAA,KACAC,gBAAA,KACAC,eAAA,KAGAC,OAAA,KACAC,MAAA,KACAC,SAAA,KACAC,WAAA,KACA70B,KAAA,KACA80B,eAAA,KACAC,QAAA,KACAC,kBAAA,KACAC,eAAA,KACAC,YAAA,KACAC,cAAA,KACAC,iBAAA,KAGAC,qBAAA,EACAC,iBAAA,EACAC,cAAA,EACAC,eAAA,EACAC,mBAAA,KACAC,UAAA,EAGAC,qBAAA,EACAC,YAAA,GACAC,QAAA,KACAC,UAAA,KACAC,iBAAA,EACAC,gBAAA,EACAC,eAAA,EACAC,eAAA,EACAC,eAAA,EACAC,cAAA,EACAC,aAAA,EACAC,YAAA,EACAC,cAAA,EACAC,YAAA,EACAC,SAAA,GACAC,iBAAA,EACAC,gBAAA,KACAC,aAAA,KACAC,qBAAA,KACAC,gBAAA,EACAC,eAAA,KACAC,oBAAA,EACAC,sBAAA,YACAC,yBAAA,EAGAC,YAAA,KACAC,cAAA,KAEAntB,KAAA,SAAA4rB,EAAA10B,GACAlU,KAAA6oC,UAAArmC,KAAA4nC,MAEApqC,KAAA8Z,YAAA5F,EAAArV,MAAAmnC,iBAAA/oB,UAEA,OAAAjd,KAAAkU,SAAAm2B,uBACArqC,KAAAkU,SAAAm2B,qBAAAxrC,MAAAyrC,WAGAtqC,KAAA4oC,QAAAA,EACA5oC,KAAAwpC,SAAA,CAAAe,EAAA,EAAAC,EAAA,GAGAxqC,KAAA8S,WAAAxU,EAAA,kDAAAkQ,SAAA3M,QAAA+Q,MACA5S,KAAAkc,MAAA5d,EAAA,4BAAAkQ,SAAAxO,KAAA8S,YACA9S,KAAAqc,QAAA/d,EAAA,yBAAAkQ,SAAAxO,KAAA8S,YAEA9S,KAAA6iB,KAAA7iB,KAAA8S,WAAA9S,KAAAkU,UAEAlU,KAAAmnC,SAAA7oC,EAAA,gCAAAkQ,SAAAxO,KAAAqc,SACArc,KAAAyc,WAAAne,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,aACA3X,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAxO,KAAAmnC,UACAnnC,KAAAonC,YAAA9oC,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,0BACA3X,KAAAzE,MAAAc,EAAA,MAAA,UACA6O,SAAAxO,KAAAmnC,UAEAnnC,KAAAkU,SAAAu2B,mBACAzqC,KAAA0c,SAAApe,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,uBACA3X,KAAAzE,MAAAc,EAAA,MAAA,yBACA6O,SAAAxO,KAAAmnC,UACAnnC,KAAAqd,YAAArd,KAAA0c,SAAA,WAAA1c,KAAA0qC,YAGA1qC,KAAAqd,YAAArd,KAAAonC,YAAA,WAAApnC,KAAA0qC,WACA1qC,KAAAqd,YAAArd,KAAAyc,WAAA,WAAAzc,KAAAknB,MACAlnB,KAAA4qB,eAAA5qB,KAAAye,OAAA,SAEAze,KAAA2pC,aAAA3pC,KAAA2qC,kBACA9rC,MAAAgI,kBAAA,sBAAA,CAAA+hC,QAAAA,GAAA5oC,KAAA4qC,WAAAtjB,KAAAtnB,QAMA2qC,gBAAA,WACA,IAAAE,EAAAhpC,QAAA0Z,KAAAuX,IAAA,GAAAgY,gBAAAC,YACAC,EAAAnpC,QAAA0Z,KAAAuX,IAAA,GAAAgY,gBAAAG,aAEA,OAAAp6B,KAAAob,IAAA+e,EAAAH,IAAA/+B,OAAAo/B,iBAAA,EAAA,EAAA,IAQAN,WAAA,SAAA7jC,GACAA,EAAArI,MACAuJ,MAAApJ,MAAAc,EAAA,MAAA,qCAGAK,KAAAkc,MAAAxd,KAAAqI,EAAArI,MACAsB,KAAA2hC,MAAArjC,EAAA,WAAA0B,KAAAkc,OACAlc,KAAAmrC,gBAAA7sC,EAAA,SAAA0B,KAAAkc,OACAlc,KAAAorC,OAAA9sC,EAAA,QAAA0B,KAAAmrC,iBACAnrC,KAAAknC,YAAA5oC,EAAA,gCAAA0B,KAAAkc,OACAlc,KAAAqnC,iBAAA/oC,EAAA,0BAAA0B,KAAAkc,OACAlc,KAAAopC,aAAAppC,KAAAqnC,iBAAAlO,cACAn5B,KAAAqpC,YAAArpC,KAAAqnC,iBAAAgE,aAEArrC,KAAAsrC,eAEAtrC,KAAAurC,wBAGAvrC,KAAAynC,OAAA,IAAA+D,OAAAC,aAAA,gBAGAzrC,KAAAunC,gBAAAjpC,EAAA,mBAAA0B,KAAAqnC,kBACArnC,KAAAunC,gBAAAmE,MAAA1rC,KAAAqpC,aACArpC,KAAAunC,gBAAAla,OAAArtB,KAAAopC,cAEAppC,KAAAynC,OAAAkE,qBAAA,EACA3rC,KAAAkqC,YAAA,KACAroC,QAAAkf,sBAAA/gB,KAAAynC,OAAAmE,UAAAtkB,KAAAtnB,KAAAynC,UAIA,IAAAoE,EAAAhtC,MAAAuH,aAAA,oBAAA,CACAwiC,QAAA5oC,KAAA4oC,QACAxyB,KAAApW,KAAA2pC,aACAd,UAAA7oC,KAAA6oC,YAIA2C,OAAAM,MAAAC,QAAAF,EAAAG,IACAhsC,KAAA0nC,MAAAsE,EACAhsC,KAAA0nC,MAAAuE,IAAA,CACAC,QAAA,SACAC,QAAA,SACA1zB,KAAAzY,KAAAqpC,YAAA,EACAjQ,IAAAp5B,KAAAopC,aAAA,IAEAppC,KAAAynC,OAAA/pB,IAAA1d,KAAA0nC,OAEA1nC,KAAAuoC,eAAAvoC,KAAA0nC,MAAA0E,YACApsC,KAAAsoC,cAAAtoC,KAAA0nC,MAAA2E,WACArsC,KAAAyoC,UAAA,EAEAzoC,KAAA4pC,qBAAA5pC,KAAAssC,2BAGAtsC,KAAAusC,oCACAvsC,KAAAwsC,4BAGA,IAAAC,EAAA,CACAC,gBAAA1sC,KAAAssC,2BACAK,QAAA,EACAC,QAAA,GAGAC,GAAA,EACA,GAAA9lC,EAAA6gC,WAAA,CAEA,IAAAkF,EAAA/lC,EAAA6gC,WAGAmF,EAAAN,EAAAC,gBAAAhB,MAAAoB,EAAAvC,EACAyC,EAAAP,EAAAC,gBAAArf,OAAAyf,EAAAtC,EAEAiC,EAAAE,QAAAI,EAAAN,EAAAC,gBAAAhB,MAAA,EACAe,EAAAG,QAAAI,EAAAP,EAAAC,gBAAArf,OAAA,EAEAwf,GAAA,EAGA7sC,KAAAitC,qBAAAR,GAEAI,GACA7sC,KAAAktC,oBAGAltC,KAAAmtC,kBACAntC,KAAAotC,oBAGAptC,KAAAqtC,uBAGArtC,KAAAqd,YAAArd,KAAAunC,gBAAA,sBAAAvnC,KAAAstC,kBACAttC,KAAAqd,YAAArd,KAAAunC,gBAAA,uBAAAvnC,KAAAutC,kBACAvtC,KAAAqd,YAAArd,KAAAunC,gBAAA,mBAAAvnC,KAAAwtC,gBACAxtC,KAAAqd,YAAArd,KAAAunC,gBAAA,uBAAAvnC,KAAAytC,iBAEAztC,KAAA0tC,eAGA1tC,KAAAkqC,cAGAlqC,KAAA2hC,MAAA3pB,QAAAb,QAAA,YAOAw2B,aAAA,WACA,IAAA3tC,KAAA6pC,eAAA,CAIA7pC,KAAA6pC,gBAAA,EACA7pC,KAAA2pC,aAAA3pC,KAAA2qC,kBAGA,IAAAkB,EAAAhtC,MAAAuH,aAAA,oBAAA,CACAwiC,QAAA5oC,KAAA4oC,QACAxyB,KAAApW,KAAA2pC,aACAd,UAAA7oC,KAAA6oC,YAGA7oC,KAAA0nC,MAAAkG,OAAA/B,EAAAG,IACAhsC,KAAAuoC,eAAAyD,EAAAI,YACApsC,KAAAsoC,cAAA0D,EAAAK,WACArsC,KAAA4pC,qBAAA,CAAA8B,MAAA1rC,KAAAuoC,eAAAlb,OAAArtB,KAAAsoC,eACAtoC,KAAAurC,wBACAvrC,KAAAkqC,cACAlqC,KAAA6pC,gBAAA,MAOA0B,sBAAA,WACA,GAAAvrC,KAAA8S,WAAA,CAKA,IAAAu4B,EAAAv/B,OAAAu/B,WACAlS,EAAArtB,OAAAqtB,YAEAn5B,KAAA8S,WAAAwO,IAAA,CACAoqB,MAAAL,EACAwC,YAAAxC,EACA5yB,KAAA,EAEA4U,OAAA8L,EACA2U,aAAA3U,EACAC,IAAA,IAGAp5B,KAAAkc,MAAAoF,IAAA,CACA+L,OAAA8L,EAAA,KAGAkS,EAAAlS,EACAn5B,KAAA8S,WAAAd,SAAA,YAEAhS,KAAA8S,WAAAwD,YAAA,YAGAtW,KAAAwnC,gBACAxnC,KAAAwnC,eAAAlmB,IAAA,CACA7I,KAAAzY,KAAAwnC,eAAAvgB,SAAAykB,QAAA,EAAA1rC,KAAAwnC,eAAAkE,QAAA,EAAA,KACAtS,IAAAp5B,KAAAwnC,eAAAvgB,SAAAoG,SAAA,EAAArtB,KAAAwnC,eAAAna,SAAA,EAAA,OAKArtB,KAAAqnC,kBAAArnC,KAAA0nC,OACA1nC,KAAAwsC,8BAOAA,0BAAA,WAEA,IAAAuB,EAAA,CACArC,MAAA1rC,KAAAqpC,YACAhc,OAAArtB,KAAAopC,cAGAppC,KAAAopC,aAAAppC,KAAAqnC,iBAAAlO,cACAn5B,KAAAqpC,YAAArpC,KAAAqnC,iBAAAgE,aAEArrC,KAAAynC,OAAAuG,cAAA,CACAtC,MAAA1rC,KAAAqpC,YACAhc,OAAArtB,KAAAopC,eAGA,IAAA6E,EAAAjuC,KAAAssC,2BAIA,GAAA,SAAAtsC,KAAA2oC,YAAA,CACA3oC,KAAAyoC,UAAAzoC,KAAAkuC,kBAAAluC,KAAAssC,4BACA,IAAA6B,EAAAnuC,KAAAouC,sBAAApuC,KAAAwoC,oBACAxoC,KAAAusC,oCACAvsC,KAAAquC,mBAAAF,QAGAnuC,KAAAyoC,UAAAzoC,KAAAsuC,oBAAAtuC,KAAAssC,4BAAAtsC,KAAAupC,YAIAvpC,KAAAuuC,iBAAAR,GACA/tC,KAAAwuC,sBACAxuC,KAAAyuC,sBAAAV,GACA/tC,KAAA0uC,aAEA1uC,KAAAkqC,eAEA+D,EAAAvC,MAAA1rC,KAAA4pC,qBAAA8B,MAAA,KAAAuC,EAAA5gB,OAAArtB,KAAA4pC,qBAAAvc,OAAA,MACArtB,KAAA2tC,gBAUAY,iBAAA,SAAAR,GACA/tC,KAAA0nC,MAAAuE,IAAA,CACAxzB,KAAAzY,KAAA0nC,MAAAjvB,MAAAs1B,EAAArC,MAAA1rC,KAAAqpC,aAAA,EACAjQ,IAAAp5B,KAAA0nC,MAAAtO,KAAA2U,EAAA1gB,OAAArtB,KAAAopC,cAAA,KAOA+D,gBAAA,WACAntC,KAAA2nC,SAAA,IAAA6D,OAAAmD,KAAA,CACAjD,MAAA1rC,KAAA0nC,MAAAgE,MACAre,OAAArtB,KAAA0nC,MAAAra,OACAuhB,KAAA,kBACA1C,QAAA,SACAC,QAAA,SACA0C,yBAAA,iBACAp2B,KAAAzY,KAAA0nC,MAAAjvB,KACA2gB,IAAAp5B,KAAA0nC,MAAAtO,MAEAp5B,KAAAynC,OAAA/pB,IAAA1d,KAAA2nC,UACA3nC,KAAAkqC,eAMAgD,kBAAA,WACA,IAAAzD,EAAAzpC,KAAAypC,gBACAqF,EAAA9uC,KAAAssC,2BAAAZ,MAAAjC,EAAAiD,gBAAAhB,MAEAqD,EAAAtF,EAAAkD,QAAAmC,EAAA9uC,KAAAyoC,UAAAzoC,KAAAupC,YACAyF,EAAAvF,EAAAmD,QAAAkC,EAAA9uC,KAAAyoC,UAAAzoC,KAAAupC,YAGAwF,GAAA/uC,KAAA0nC,MAAAjvB,KACAu2B,GAAAhvC,KAAA0nC,MAAAtO,IAEA,IAAA6V,EAAA,EACAC,EAAA,EAGAlvC,KAAA2nC,UAAA,IAAA8B,EAAAkD,SAAA,IAAAlD,EAAAmD,UACA,SAAA5sC,KAAA2oC,aACAsG,EAAAjvC,KAAA2nC,SAAAlvB,KAAAzY,KAAA0nC,MAAAjvB,KACAy2B,EAAAlvC,KAAA2nC,SAAAvO,IAAAp5B,KAAA0nC,MAAAtO,MAGA6V,EAAAjvC,KAAA8nC,QAAArvB,KAAAzY,KAAA0nC,MAAAjvB,KACAy2B,EAAAlvC,KAAA8nC,QAAA1O,IAAAp5B,KAAA0nC,MAAAtO,KAIA2V,GAAAE,EACAD,GAAAE,EAGAzF,EAAAkD,SAAAsC,GAAAH,EAAA9uC,KAAAyoC,UAAAzoC,KAAAupC,aACAE,EAAAmD,SAAAsC,GAAAJ,EAAA9uC,KAAAyoC,UAAAzoC,KAAAupC,cAGAvpC,KAAA4nC,WAAA,IAAA4D,OAAA2D,MAAA,CACA,IAAA3D,OAAA4D,OAAA,CAAAC,OAAA,EAAAT,KAAA,kBAAAU,YAAA,EAAAC,OAAA,wBAAA92B,KAAA,EAAA2gB,IAAA,EAAA8S,QAAA,SAAAC,QAAA,WACA,IAAAX,OAAA4D,OAAA,CAAAC,OAAA,EAAAT,KAAA,sBAAAU,YAAA,EAAAC,OAAA,wBAAA92B,KAAA,EAAA2gB,IAAA,EAAA8S,QAAA,SAAAC,QAAA,YACA,CACAD,QAAA,SACAC,QAAA,SACA1zB,KAAAs2B,EACA3V,IAAA4V,IAGAhvC,KAAAitC,qBAAAxD,GACAzpC,KAAAynC,OAAA/pB,IAAA1d,KAAA4nC,aAMA4H,iBAAA,WACAxvC,KAAA4nC,YAGA5nC,KAAAynC,OAAArsB,OAAApb,KAAA4nC,YACA5nC,KAAA4nC,WAAA,MAHA5nC,KAAAktC,oBAMAltC,KAAAkqC,eAMAsE,oBAAA,WACA,GAAAxuC,KAAA2nC,SAAA,CACA,IAAA8H,EAAA,CACAh3B,KAAAzY,KAAAqpC,YAAA,EACAjQ,IAAAp5B,KAAAopC,aAAA,GAIA,GAAA,SAAAppC,KAAA2oC,YACA8G,EAAA/D,MAAA1rC,KAAAqpC,YACAoG,EAAApiB,OAAArtB,KAAAopC,kBAGA,GAAAppC,KAAAspC,aAAA,CAEA,IAAAoG,EAAA1vC,KAAAspC,aAIAwF,EAFA9uC,KAAAssC,2BAEAZ,MAAAgE,EAAAhD,gBAAAhB,MAGA+D,EAAA/D,MAAAgE,EAAAhE,MAAAoD,EAAA9uC,KAAAyoC,UACAgH,EAAApiB,OAAAqiB,EAAAriB,OAAAyhB,EAAA9uC,KAAAyoC,UAGAzoC,KAAA0nC,MAAAuE,IAAA,CACAxzB,KAAAzY,KAAAqpC,YAAA,EAAAqG,EAAA/C,QAAAmC,EACA1V,IAAAp5B,KAAAopC,aAAA,EAAAsG,EAAA9C,QAAAkC,SAGAxwC,EAAAM,OAAA6wC,EAAAzvC,KAAAssC,4BAGAtsC,KAAA2nC,SAAAsE,IAAAwD,KAIAhB,sBAAA,SAAAV,GACA,GAAA/tC,KAAA4nC,WAAA,CACA,IAAA+E,EAAA3sC,KAAA4nC,WAAAnvB,KAAAzY,KAAAqpC,YAAA,EACAuD,EAAA5sC,KAAA4nC,WAAAxO,IAAAp5B,KAAAopC,aAAA,EAEAuG,EAAA3vC,KAAA0nC,MAAAgE,MAEAkE,EADA5vC,KAAAssC,2BAAAZ,MAAA1rC,KAAAyoC,UACAkH,EAAA3vC,KAAAupC,YAEAoD,IAAAoB,EAAArC,MAAA1rC,KAAAqpC,aAAA,EACAuD,IAAAmB,EAAA1gB,OAAArtB,KAAAopC,cAAA,EAEAuD,GAAAiD,EACAhD,GAAAgD,EAEA5vC,KAAA4nC,WAAAqE,IAAA,CACAxzB,KAAAzY,KAAAqpC,YAAA,EAAAsD,EACAvT,IAAAp5B,KAAAopC,aAAA,EAAAwD,MAQAiD,sBAAA,WACA,OAAA7vC,KAAAqoC,iBAAA,KAAA,GAMAiE,yBAAA,WAiBA,YAhBA,IAAAtsC,KAAAssC,yBAAAwD,IACA9vC,KAAAssC,yBAAAwD,EAAA,IAGA9vC,KAAAssC,yBAAAwD,EAAAC,WAAA/vC,KAAAuoC,eAAAvoC,KAAAsoC,cACAtoC,KAAAssC,yBAAAwD,EAAAE,YAAAhwC,KAAAopC,aAAAppC,KAAAqpC,YAEArpC,KAAAssC,yBAAAwD,EAAAL,WAAA,GACAzvC,KAAAssC,yBAAAwD,EAAAC,WAAA/vC,KAAAssC,yBAAAwD,EAAAE,aACAhwC,KAAAssC,yBAAAwD,EAAAL,WAAApiB,OAAAxc,KAAAujB,IAAAp0B,KAAAopC,aAAAppC,KAAAuoC,gBACAvoC,KAAAssC,yBAAAwD,EAAAL,WAAA/D,MAAA76B,KAAAK,MAAAlR,KAAAsoC,eAAAtoC,KAAAuoC,eAAAvoC,KAAAssC,yBAAAwD,EAAAL,WAAApiB,WAEArtB,KAAAssC,yBAAAwD,EAAAL,WAAA/D,MAAA76B,KAAAujB,IAAAp0B,KAAAqpC,YAAArpC,KAAAsoC,eACAtoC,KAAAssC,yBAAAwD,EAAAL,WAAApiB,OAAAxc,KAAAK,MAAAlR,KAAAuoC,gBAAAvoC,KAAAssC,yBAAAwD,EAAAL,WAAA/D,MAAA1rC,KAAAsoC,iBAGAtoC,KAAAssC,yBAAAwD,EAAAL,YAMAf,WAAA,gBACA,IAAA1uC,KAAA0uC,WAAAoB,IACA9vC,KAAA0uC,WAAAoB,EAAA,IAGA9vC,KAAA0uC,WAAAoB,EAAApD,gBAAA1sC,KAAAssC,2BACAtsC,KAAA0nC,MAAAuE,IAAA,CACAP,MAAA1rC,KAAA0uC,WAAAoB,EAAApD,gBAAAhB,MAAA1rC,KAAAyoC,UACApb,OAAArtB,KAAA0uC,WAAAoB,EAAApD,gBAAArf,OAAArtB,KAAAyoC,aAOA4E,qBAAA,WAEArtC,KAAAqd,YAAArd,KAAA2hC,MAAA,QAAA3hC,KAAAiwC,iBAGAjwC,KAAAqd,YAAA/e,EAAA,gBAAA,QAAA0B,KAAAwvC,kBAGAxvC,KAAAqd,YAAA/e,EAAA,gBAAA,SAAA,WACA0B,KAAAkwC,aAAA,OAEAlwC,KAAAqd,YAAA/e,EAAA,iBAAA,SAAA,WACA0B,KAAAkwC,YAAA,OAEAlwC,KAAAqd,YAAA/e,EAAA,kBAAA,SAAA,WACA0B,KAAAmwC,UAAA,QAEAnwC,KAAAqd,YAAA/e,EAAA,oBAAA,SAAA,WACA0B,KAAAmwC,UAAA,QAIAnwC,KAAAowC,mBAAA,IAAAvxC,MAAAwxC,eAAA,aAAA,CACAC,QAAA,KACAtwC,KAAAuwC,aAEAC,SAAAC,IACAzwC,KAAA0wC,WAAAD,IAEAE,MAAA,KACA3wC,KAAA4wC,YACA5wC,KAAA6wC,uCAKA7wC,KAAAqd,YAAAxb,QAAA0Z,KAAA,WAAA,SAAAhE,GACAA,EAAAC,UAAA3V,QAAAivC,YACA9wC,KAAAmpC,cAAA,MAGAnpC,KAAAqd,YAAAxb,QAAA0Z,KAAA,SAAA,SAAAhE,GACAA,EAAAC,UAAA3V,QAAAivC,YACA9wC,KAAAmpC,cAAA,MAIAnpC,KAAAqd,YAAA/e,EAAA,kCAAA0B,KAAA8S,YAAA,QAAA9S,KAAA+wC,wBACA/wC,KAAAqd,YAAA/e,EAAA,qBAAA0B,KAAA8S,YAAA,QAAA9S,KAAAgxC,yBACAhxC,KAAAqd,YAAA/e,EAAA,0CAAA0B,KAAA8S,YAAA,QAAA9S,KAAAixC,yBAQAF,uBAAA,SAAAx5B,GACA,IAAA25B,EAAA5yC,EAAAiZ,EAAA8C,eAAAtT,KAAA,cACA2X,EAAApgB,EAAAiZ,EAAA8C,eAIA,GAHAqE,EAAAiV,WAAArd,YAAA,UACAoI,EAAA1M,SAAA,UAEA,UAAAk/B,EAGA,OAFAlxC,KAAAmxC,6BACAnxC,KAAAixC,yBAIAjxC,KAAAoxC,wBAEApxC,KAAAqxC,sBAAAH,GACAlxC,KAAAsxC,6BAQAN,wBAAA,SAAAz5B,GACA,GAAAA,EAAA8C,cAAAlV,QAAAnF,KAAAgqC,sBAAA,CAGAhqC,KAAAgqC,sBAAAzyB,EAAA8C,cAAAlV,MAIA,IAFA,IAAAosC,EAAAjzC,EAAA,mBAAA0B,KAAA8S,YAEAzT,EAAA,EAAAA,EAAAkyC,EAAAjxC,OAAAjB,IAAA,CACA,IAAAmyC,EAAAlzC,EAAAizC,EAAAlyC,IACAmyC,EAAAzqC,KAAA,aAAA,EAAAyqC,EAAAzqC,KAAA,eACAyqC,EAAA9yC,KAAA8yC,EAAA9yC,OAAAwC,MAAA,KAAAuwC,UAAAhxC,KAAA,MAGA8wC,EAAA/pB,OAAA,WAAArb,UAMA8kC,uBAAA,WACA,IAAAC,EAAAlxC,KAAA0xC,uBAEAR,EAAAS,EAAA,GAAAT,EAAAU,EAAA,IACA5xC,KAAAqxC,sBAAAH,EAAAS,EAAAT,EAAAU,GACA5xC,KAAAsxC,8BASAI,qBAAA,WACA,IAAAC,EAAAE,WAAAvzC,EAAA,wBAAAiG,OACAqtC,EAAAC,WAAAvzC,EAAA,wBAAAiG,OACA,MAAA,CACAotC,EAAAza,MAAAya,GAAA,EAAAA,EACAC,EAAA1a,MAAA0a,GAAA,EAAAA,IAUAE,qBAAA,SAAAH,EAAAC,GACAtzC,EAAA,wBAAAiG,IAAAstC,WAAAF,IACArzC,EAAA,wBAAAiG,IAAAstC,WAAAD,KAMAR,sBAAA,WACApxC,KAAAiqC,yBAAA,EACA3rC,EAAA,mCAAA0B,KAAA8S,YAAAd,SAAA,UACA1T,EAAA,mCAAA0B,KAAA8S,YAAAwD,YAAA,UACAhY,EAAA,eAAA0B,KAAA8S,YAAAwD,YAAA,WAMA66B,sBAAA,WACAnxC,KAAAiqC,0BAIAjqC,KAAAiqC,yBAAA,EACA3rC,EAAA,mCAAA0B,KAAA8S,YAAAwD,YAAA,UACAhY,EAAA,mCAAA0B,KAAA8S,YAAAd,SAAA,UACA1T,EAAA,eAAA0B,KAAA8S,YAAAd,SAAA,YAQAi+B,gBAAA,SAAA14B,GACA,IAAAvX,KAAA0oC,oBAAA,CACA,IAAAhoB,EAAApiB,EAAAiZ,EAAA8C,eACAoL,EAAA/E,EAAA3Z,KAAA,QACA/G,KAAA2hC,MAAArrB,YAAA,YACAoK,EAAA1O,SAAA,YACAhS,KAAA+xC,SAAAtsB,KASAssB,SAAA,SAAAtsB,GACAzlB,KAAA2oC,cAAAljB,IAIAzlB,KAAAorC,OAAAp5B,SAAA,UACAhS,KAAAorC,OAAA5jB,OAAA,eAAA/B,EAAA,MACAnP,YAAA,UAEA,WAAAmP,EACAzlB,KAAAgyC,eAEAhyC,KAAAiyC,gBAIAjyC,KAAAurC,wBAGA,SAAAvrC,KAAA2oC,aAAA,SAAAljB,EACAzlB,KAAAkyC,kBACA,SAAAlyC,KAAA2oC,aAAA,SAAAljB,GACAzlB,KAAAmyC,iBAIAnyC,KAAA2oC,YAAAljB,IAWA2nB,kBAAA,SAAAsC,QACA,IAAA1vC,KAAAotC,kBAAA0C,IACA9vC,KAAAotC,kBAAA0C,EAAA,IAIAJ,EACA1vC,KAAAspC,aAAAoG,EACA1vC,KAAA8nC,SACA9nC,KAAAotC,kBAAA0C,EAAAsC,WAAA,EAAApyC,KAAAyoC,UAEAzoC,KAAAspC,aAAA,CACAqD,SAAA3sC,KAAA8nC,QAAArvB,KAAAzY,KAAA0nC,MAAAjvB,MAAAzY,KAAAotC,kBAAA0C,EAAAsC,WACAxF,SAAA5sC,KAAA8nC,QAAA1O,IAAAp5B,KAAA0nC,MAAAtO,KAAAp5B,KAAAotC,kBAAA0C,EAAAsC,WACA/kB,OAAArtB,KAAA8nC,QAAAza,OAAArtB,KAAAotC,kBAAA0C,EAAAsC,WACA1G,MAAA1rC,KAAA8nC,QAAA4D,MAAA1rC,KAAAotC,kBAAA0C,EAAAsC,WACA1F,gBAAA1sC,KAAAssC,8BAGAtsC,KAAAotC,kBAAA0C,EAAAL,WAAAzvC,KAAAssC,2BACAtsC,KAAAspC,aAAA,CACAqD,QAAA,EACAC,QAAA,EACAvf,OAAArtB,KAAAotC,kBAAA0C,EAAAL,WAAApiB,OACAqe,MAAA1rC,KAAAotC,kBAAA0C,EAAAL,WAAA/D,MACAgB,gBAAA1sC,KAAAotC,kBAAA0C,EAAAL,cAQAxC,qBAAA,SAAAyC,QACA,IAAA1vC,KAAAitC,qBAAA6C,IACA9vC,KAAAitC,qBAAA6C,EAAA,IAIAJ,EACA1vC,KAAAypC,gBAAAiG,EACA1vC,KAAA4nC,aACA5nC,KAAAitC,qBAAA6C,EAAAsC,WAAA,EAAApyC,KAAAyoC,UACAzoC,KAAAypC,gBAAA,CACAkD,SAAA3sC,KAAA4nC,WAAAnvB,KAAAzY,KAAA0nC,MAAAjvB,MAAAzY,KAAAitC,qBAAA6C,EAAAsC,WAAApyC,KAAAupC,YACAqD,SAAA5sC,KAAA4nC,WAAAxO,IAAAp5B,KAAA0nC,MAAAtO,KAAAp5B,KAAAitC,qBAAA6C,EAAAsC,WAAApyC,KAAAupC,YACAmD,gBAAA1sC,KAAAssC,8BAUA4D,YAAA,SAAAmC,GACA,IAAAryC,KAAA0oC,oBAAA,CAEA,GAAA,KAAA2J,IAAA,KAAAA,EACA,OAAA,EAGAryC,KAAA0oC,qBAAA,EACA1oC,KAAAqoC,kBAAAgK,EAGAryC,KAAAqoC,iBAAAlmC,UAAAnC,KAAAqoC,iBAAA,KAAA,IAAA,IAEA,IAEAiK,EAFAC,EAAAvyC,KAAA0nC,MAAA8K,MAAAH,EACAI,EAAAzyC,KAAAssC,2BAIAgG,EADAtyC,KAAA6vC,wBACA7vC,KAAAsuC,oBAAA,CAAAjhB,OAAAolB,EAAA/G,MAAAA,MAAA+G,EAAAplB,SAEArtB,KAAAsuC,oBAAAmE,GAKAzyC,KAAAyoC,UAAA6J,IACAA,EAAAtyC,KAAAyoC,WAGA,IAAAiK,EAAA,CACAF,MAAA,KAAAH,EAAA,OAAA,QAGAM,EAAA,CACAH,MAAAD,EACA7G,MAAA+G,EAAA/G,MAAA4G,EACAjlB,OAAAolB,EAAAplB,OAAAilB,GAGA/I,EAAA,EACAvpC,KAAAupC,YAAA,GACAA,EAAA,EAAAvpC,KAAAupC,YACAvpC,KAAAupC,YAAA,IAEAvpC,KAAA2nC,SAAA+D,MAAA1rC,KAAAopC,aACAG,EAAAvpC,KAAAopC,aAAAppC,KAAA2nC,SAAA+D,MACA1rC,KAAA2nC,SAAAta,OAAArtB,KAAAqpC,cACAE,EAAAvpC,KAAAqpC,YAAArpC,KAAA2nC,SAAAta,QAEArtB,KAAAupC,YAAAA,GAGAA,EAAA,IACAoJ,EAAAjH,OAAAnC,EACAoJ,EAAAtlB,QAAAkc,GAGA,IAAAmG,EAAA1vC,KAAAspC,aAGA2F,EAAAS,EAAA/C,QACAuC,EAAAQ,EAAA9C,QACAgG,EAAAP,GAAAxhC,KAAAgiC,GAAA,KAIAC,EAAA7D,EAAAp+B,KAAAkiC,IAAAH,GAAA1D,EAAAr+B,KAAAmiC,IAAAJ,GACAK,EAAAhE,EAAAp+B,KAAAmiC,IAAAJ,GAAA1D,EAAAr+B,KAAAkiC,IAAAH,GAEA9D,EAAA2D,EAAA/G,MAAAgE,EAAAhD,gBAAAhB,MAEAwH,EAAAJ,EAAAhE,EAAA9uC,KAAAyoC,UAAAzoC,KAAAupC,YACA4J,EAAAF,EAAAnE,EAAA9uC,KAAAyoC,UAAAzoC,KAAAupC,YAEAoJ,EAAAl6B,KAAAzY,KAAAqpC,YAAA,EAAA6J,EACAP,EAAAvZ,IAAAp5B,KAAAopC,aAAA,EAAA+J,EAEAzD,EAAA/C,QAAAmG,EACApD,EAAA9C,QAAAqG,EAEA,IAAAG,EAAA1D,EAAAhE,MACAgE,EAAAhE,MAAAgE,EAAAriB,OACAqiB,EAAAriB,OAAA+lB,EAEApzC,KAAAotC,kBAAAsC,GAEA1vC,KAAA4nC,YACA5nC,KAAAynC,OAAArsB,OAAApb,KAAA4nC,YAGA5nC,KAAA2nC,SAAA0L,QAAAX,EAAA,CACAt6B,SAAApY,KAAAkU,SAAAo/B,kBACAC,WAAA,KAEA,IAAAH,EAAApzC,KAAA2nC,SAAAta,OAAAkc,EACAvpC,KAAA2nC,SAAAta,OAAArtB,KAAA2nC,SAAA+D,MAAAnC,EACAvpC,KAAA2nC,SAAA+D,MAAA0H,EACApzC,KAAA2nC,SAAAsE,IAAA,CAAAuG,MAAA,OAKAxyC,KAAA0nC,MAAA2L,QAAAV,EAAA,CACAnC,SAAAxwC,KAAAynC,OAAAmE,UAAAtkB,KAAAtnB,KAAAynC,QACArvB,SAAApY,KAAAkU,SAAAo/B,kBACAC,WAAA,KACA,IAAAC,EAAA3B,YAAA7xC,KAAA0nC,MAAA8K,MAAA,KAAA,KACAxyC,KAAA0nC,MAAAuE,IAAA,CAAAuG,MAAAgB,IACAxzC,KAAA0oC,qBAAA,EACA1oC,KAAA4nC,YACA5nC,KAAAyzC,yBAAApB,GACAryC,KAAA0wC,WAAA1wC,KAAAowC,oBACApwC,KAAAynC,OAAA/pB,IAAA1d,KAAA4nC,aAEA5nC,KAAA0zC,gCAYAvD,UAAA,SAAAjV,GACA,IAAAl7B,KAAA0oC,oBAAA,CACA1oC,KAAA0oC,qBAAA,EAEA1oC,KAAA6vC,0BACA3U,EAAA,MAAAA,EAAA,IAAA,KAGAl7B,KAAA4nC,WACA5nC,KAAAynC,OAAArsB,OAAApb,KAAA4nC,YAEA5nC,KAAA0zC,2BAGA,IAAAC,EAAA,CAAApJ,EAAAvqC,KAAAqpC,YAAA,EAAAmB,EAAAxqC,KAAAopC,aAAA,GACAppC,KAAAowC,mBAAAwD,UAAA5zC,KAAAooC,sBACApoC,KAAAooC,sBAAApoC,KAAAooC,qBACA,IAIA8G,EAAAD,EAJA4E,EAAA,CACArB,MAAAxyC,KAAAqoC,iBAAAroC,KAAAooC,sBAIAkB,EAAAtpC,KAAAspC,aACAG,EAAAzpC,KAAAypC,gBAGA,MAAAvO,GAAAl7B,KAAA6vC,yBAAA,MAAA3U,IAAAl7B,KAAA6vC,yBACAvG,EAAAqD,SAAArD,EAAAqD,QACAlD,EAAAkD,SAAAlD,EAAAkD,QACAsC,EAAAjvC,KAAA0nC,MAAAjvB,KAAAk7B,EAAApJ,EACAsJ,EAAAp7B,KAAAk7B,EAAApJ,EAAA0E,IAEA3F,EAAAsD,SAAAtD,EAAAsD,QACAnD,EAAAmD,SAAAnD,EAAAmD,QACAsC,EAAAlvC,KAAA0nC,MAAAtO,IAAAua,EAAAnJ,EACAqJ,EAAAza,IAAAua,EAAAnJ,EAAA0E,GAGA,MAAAhU,GACA2Y,EAAAC,QAAA,EAAA9zC,KAAA0nC,MAAAoM,OACA9zC,KAAAwpC,SAAAgB,EAAA,EAAAxqC,KAAAwpC,SAAAgB,IAEAqJ,EAAAE,QAAA,EAAA/zC,KAAA0nC,MAAAqM,OACA/zC,KAAAwpC,SAAAe,EAAA,EAAAvqC,KAAAwpC,SAAAe,GAGAvqC,KAAAotC,kBAAA9D,GACAtpC,KAAAitC,qBAAAxD,GAEAzpC,KAAA0nC,MAAA2L,QAAAQ,EAAA,CACArD,SAAAxwC,KAAAynC,OAAAmE,UAAAtkB,KAAAtnB,KAAAynC,QACArvB,SAAApY,KAAAkU,SAAAo/B,kBACAC,WAAA,KACAvzC,KAAA0oC,qBAAA,EACA1oC,KAAA4nC,aAEA5nC,KAAAyzC,yBAAA,GACAzzC,KAAAynC,OAAA/pB,IAAA1d,KAAA4nC,kBAYA8I,WAAA,SAAAD,GACA,IAAAzwC,KAAA0oC,oBAAA,CACA1oC,KAAA0oC,qBAAA,EAEA,IAAAsL,EAAAh0C,KAAA0nC,MAAA8K,MAEAxyC,KAAAooC,sBAAApoC,KAAAkU,SAAAm2B,qBAAAwH,WAAApB,EAAAtrC,OAAA0L,KAAAK,MAAA2gC,WAAApB,EAAAtrC,SAAA,IAGAnF,KAAA0nC,MAAAuE,IAAA,CACAuG,MAAAxyC,KAAAqoC,iBAAAroC,KAAAooC,uBAIApoC,KAAAyoC,UAAAzoC,KAAAsuC,oBAAAtuC,KAAAssC,4BAAAtsC,KAAAupC,YACAvpC,KAAA0uC,aAEA1uC,KAAAspC,cACAtpC,KAAAi0C,kCAAAD,GAGAh0C,KAAAkqC,cAEAlqC,KAAA0oC,qBAAA,IAWAuL,kCAAA,SAAAD,GACA,IAOA/E,EAAAC,EAAAgF,EAAAC,EAAArF,EAPA2D,EAAAzyC,KAAAssC,2BACA8H,EAAAp0C,KAAA0nC,MAAA8K,MAAAwB,EACAtE,EAAA1vC,KAAAspC,aAEA+K,EAAAr0C,KAAAyoC,UACA6L,EAAA,EAIA,EAAA,CAEA,IAAAC,EAAA7E,EAAA/C,QACA6H,EAAA9E,EAAA9C,QACAgG,EAAAwB,GAAAvjC,KAAAgiC,GAAA,KAIAqB,EAAAK,EAAA1jC,KAAAkiC,IAAAH,GAAA4B,EAAA3jC,KAAAmiC,IAAAJ,GACAuB,EAAAI,EAAA1jC,KAAAmiC,IAAAJ,GAAA4B,EAAA3jC,KAAAkiC,IAAAH,GAKA3D,EAAAiF,EAAAG,GAHAvF,EAAA2D,EAAA/G,MAAAgE,EAAAhD,gBAAAhB,OAIAwD,EAAAiF,EAAAE,EAAAvF,EAGA,IAAA2F,EAAAz0C,KAAA00C,sBAAAL,GACAM,EAAA,CACAjJ,MAAA1rC,KAAA2nC,SAAA+D,MACAre,OAAArtB,KAAA2nC,SAAAta,OACA5U,KAAAzY,KAAAqpC,YAAA,EAAArpC,KAAA2nC,SAAA+D,MAAA,EAAAuD,EACA7V,IAAAp5B,KAAAopC,aAAA,EAAAppC,KAAA2nC,SAAAta,OAAA,EAAA6hB,GAGAmF,GADAC,EAAAt0C,KAAA40C,4BAAAD,EAAAF,SAIA,IAAAH,GAGAt0C,KAAA0nC,MAAAuE,IAAA,CACAxzB,KAAAzY,KAAAqpC,YAAA,EAAA4F,EACA7V,IAAAp5B,KAAAopC,aAAA,EAAA8F,IAIAQ,EAAA/C,QAAAuH,EACAxE,EAAA9C,QAAAuH,EACAzE,EAAAhE,MAAA1rC,KAAA2nC,SAAA+D,MAAA2I,EAAAvF,EACAY,EAAAriB,OAAArtB,KAAA2nC,SAAAta,OAAAgnB,EAAAvF,EAEA9uC,KAAAotC,kBAAAsC,GAGA1vC,KAAAyoC,UAAA4L,EAEAr0C,KAAA4nC,YACA5nC,KAAAyzC,yBAAAW,GAEAp0C,KAAA60C,gBAAA70C,KAAA4nC,WAAA5nC,KAAA2nC,UAGA3nC,KAAA4nC,WAAAqE,IAAA,CAAA5P,QAAA,IAFAr8B,KAAA4nC,WAAAqE,IAAA,CAAA5P,QAAA,KAIA,IAAA+X,GACAp0C,KAAA0zC,2BAGA1zC,KAAA0uC,cAMAmC,kCAAA,WACA,GAAA7wC,KAAA4nC,aAAA5nC,KAAA60C,gBAAA70C,KAAA4nC,WAAA5nC,KAAA2nC,UAAA,CACA3nC,KAAA4nC,WAAAqE,IAAA,CAAA5P,QAAA,IACA,IAAAqT,EAAA1vC,KAAAypC,gBACAiG,EAAA/C,QAAA,EACA+C,EAAA9C,QAAA,EACA5sC,KAAAitC,qBAAAyC,GACA1vC,KAAAwvC,qBAOAkE,yBAAA,WACA,IAAAhE,EAAA1vC,KAAAypC,gBACAiG,EAAA/C,QAAA,EACA+C,EAAA9C,QAAA,EACA5sC,KAAAitC,qBAAAyC,IAWAmF,gBAAA,SAAAC,EAAAC,GACA,OAAAD,EAAAr8B,KAAAs8B,EAAAt8B,KAAAs8B,EAAArJ,MAAA,GACAoJ,EAAA1b,IAAA2b,EAAA3b,IAAA2b,EAAA1nB,OAAA,GACAynB,EAAAr8B,KAAAs8B,EAAAt8B,KAAAs8B,EAAArJ,MAAA,GACAoJ,EAAA1b,IAAA2b,EAAA3b,IAAA2b,EAAA1nB,OAAA,GAQAomB,yBAAA,SAAAjB,GACA,IAAAI,EAAAJ,GAAA3hC,KAAAgiC,GAAA,KACAnD,EAAA1vC,KAAAypC,gBAEAsF,EAAAW,EAAA/C,QACAqC,EAAAU,EAAA9C,QAIAoI,EAAAjG,EAAAl+B,KAAAkiC,IAAAH,GAAA5D,EAAAn+B,KAAAmiC,IAAAJ,GACAqC,EAAAlG,EAAAl+B,KAAAmiC,IAAAJ,GAAA5D,EAAAn+B,KAAAkiC,IAAAH,GACA9D,EAAA9uC,KAAAssC,2BAAAZ,MAAAgE,EAAAhD,gBAAAhB,MAEAwJ,EAAAF,EAAAlG,EAAA9uC,KAAAyoC,UACA0M,EAAAF,EAAAnG,EAAA9uC,KAAAyoC,UAEAzoC,KAAA4nC,WAAAnvB,KAAAzY,KAAA0nC,MAAAjvB,KAAAy8B,EACAl1C,KAAA4nC,WAAAxO,IAAAp5B,KAAA0nC,MAAAtO,IAAA+b,EAEAzF,EAAA/C,QAAAqI,EACAtF,EAAA9C,QAAAqI,EACAj1C,KAAAitC,qBAAAyC,IAUAkF,4BAAA,SAAAD,EAAAS,GAKA,IAJA,IACAC,EAcAf,EAfAgB,EAAAt1C,KAAAu1C,sBAAAZ,GAIAa,EAAA,EAAAA,EAAAF,EAAAh1C,SACA+0C,EAAAC,EAAAE,GAEAx1C,KAAAy1C,yBAAA,CAAAJ,GAAAD,IAHAI,IAOAH,GAAA,EAMA,GAAAA,EAEA,CAEA,IAAAK,EAAA11C,KAAA21C,gBAAAP,EAAAC,GAEAO,EAAA,CACArL,EAAAoK,EAAAl8B,KAAAk8B,EAAAjJ,MAAA,EACAlB,EAAAmK,EAAAvb,IAAAub,EAAAtnB,OAAA,GAKAwoB,EAAAhlC,KAAAilC,KAAAJ,EAAA,GAAAlL,EAAAkL,EAAA,GAAAlL,GAAA6K,EAAA9K,GAAAmL,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,GAAA8K,EAAA7K,EAAAkL,EAAA,GAAAnL,EAAAmL,EAAA,GAAAlL,EAAAkL,EAAA,GAAAlL,EAAAkL,EAAA,GAAAnL,GAAA15B,KAAAklC,KAAAllC,KAAAmlC,IAAAN,EAAA,GAAAlL,EAAAkL,EAAA,GAAAlL,EAAA,GAAA35B,KAAAmlC,IAAAN,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,EAAA,IACA0L,EAAAplC,KAAAilC,KAAAJ,EAAA,GAAAlL,EAAAkL,EAAA,GAAAlL,GAAAoL,EAAArL,GAAAmL,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,GAAAqL,EAAApL,EAAAkL,EAAA,GAAAnL,EAAAmL,EAAA,GAAAlL,EAAAkL,EAAA,GAAAlL,EAAAkL,EAAA,GAAAnL,GAAA15B,KAAAklC,KAAAllC,KAAAmlC,IAAAN,EAAA,GAAAlL,EAAAkL,EAAA,GAAAlL,EAAA,GAAA35B,KAAAmlC,IAAAN,EAAA,GAAAnL,EAAAmL,EAAA,GAAAnL,EAAA,IAGA+J,GAAAuB,EAAAI,GAAAA,OAhBA3B,EAAA,EAmBA,OAAAA,GAQA5J,UAAA,SAAAnzB,GACA,IAAAma,EAAApzB,EAAAiZ,EAAA8C,eACA,GAAAqX,EAAA7b,SAAA,YACA,OAAA,EAGAvX,EAAA,OAAA0B,KAAAmnC,UAAAn1B,SAAA,YACAhS,KAAAmnC,SAAA50B,OAAA,+BAEA,IAAA2jC,EAAA,CACAtN,QAAA5oC,KAAA4oC,QACAP,iBAAAroC,KAAAqoC,iBACA8N,cAAAn2C,KAAAooC,qBACAzpC,QAAA+yB,EAAA7b,SAAA,WAAA,EAAA,GAGA,GAAA7V,KAAAspC,aAAA,CACA,IAAA8M,EAAA,GAEAA,EAAA/oB,OAAArtB,KAAAspC,aAAAjc,OACA+oB,EAAA1K,MAAA1rC,KAAAspC,aAAAoC,MACA0K,EAAAzJ,QAAA3sC,KAAAspC,aAAAqD,QACAyJ,EAAAxJ,QAAA5sC,KAAAspC,aAAAsD,QAEAsJ,EAAAxJ,gBAAA1sC,KAAAspC,aAAAoD,gBAEAwJ,EAAAE,SAAAA,OAEAF,EAAAxJ,gBAAA1sC,KAAAssC,2BAGAtsC,KAAA4nC,aACAsO,EAAAtO,WAAA5nC,KAAAypC,iBAGAyM,EAAA1M,SAAAxpC,KAAAwpC,SACA0M,EAAAG,KAAAr2C,KAAAyoC,UAEA5pC,MAAAgI,kBAAA,oBAAAqvC,EAAAnvC,IACA/G,KAAAmnC,SAAArxB,KAAA,QAAAQ,YAAA,YAAAggC,MAAAxgC,KAAA,YAAAsF,SAEArU,EAAAY,MACAM,MAAAlB,EAAAY,QAIA3H,KAAAimC,OAAAl/B,GACA/G,KAAAknB,OACAroB,MAAAkJ,GAAA0a,eASA6rB,oBAAA,SAAAmB,GAEA,IAAAmD,EAAA/hC,KAAAilC,IAAA91C,KAAAooC,uBAAAv3B,KAAAgiC,GAAA,KAGA0D,EAAA1lC,KAAAmiC,IAAAJ,GAAAnD,EAAApiB,OAAAxc,KAAAkiC,IAAAH,GAAAnD,EAAA/D,MACA8K,EAAA3lC,KAAAmiC,IAAAJ,GAAAnD,EAAA/D,MAAA76B,KAAAkiC,IAAAH,GAAAnD,EAAApiB,OAGA,OAAAxc,KAAAob,IAAAsqB,EAAA9G,EAAA/D,MAAA8K,EAAA/G,EAAApiB,SAQA6gB,kBAAA,SAAAuB,GAEA,IAAAgH,EAAAz2C,KAAA02C,qBAAAjH,GAGAkH,EAAA,EACA,GAAAF,EAAAppB,OAAArtB,KAAAopC,cAAAqN,EAAA/K,MAAA1rC,KAAAqpC,YAAA,CACA,IAAAuN,EAAA52C,KAAAopC,aAAAqN,EAAAppB,OACAwpB,EAAA72C,KAAAqpC,YAAAoN,EAAA/K,MACAiL,EAAA9lC,KAAAujB,IAAAyiB,EAAAD,GAGA,OAAAD,GAMAG,qBAAA,SAAArH,GACA,OAAAzvC,KAAAsuC,oBAAAmB,GAAAzvC,KAAAkuC,kBAAAuB,IAQAc,UAAA,WACA,IAAAvwC,KAAA+S,KAAA,CACA,IAyBA1T,EAzBA03C,EAAA,CACAzH,YAAA,EACAC,OAAA,yBAIAyH,EAAAh3C,KAAA2nC,SAAA+D,MACAuL,EAAAj3C,KAAA2nC,SAAAta,OACA6pB,EAAAF,EAAA,EACAG,EAAAF,EAAA,EAEAlkC,EAAA,CACA,IAAAy4B,OAAAmD,KAAA,CACAW,YAAA,EACAC,OAAA,sBACArD,QAAA,SACAC,QAAA,SACAT,MAAAsL,EACA3pB,OAAA4pB,EACAx+B,KAAAu+B,EAAA,EACA5d,IAAA6d,EAAA,EACArI,KAAA,yBAKA,IAAAvvC,EAAA,EAAAA,GArBA,EAqBAA,IACA0T,EAAArT,KAAA,IAAA8rC,OAAA4L,KAAA,CAAA/3C,EAAA63C,EAAA,EAAA73C,EAAA63C,EAAAD,GAAAF,IAEA,IAAA13C,EAAA,EAAAA,GAxBA,EAwBAA,IACA0T,EAAArT,KAAA,IAAA8rC,OAAA4L,KAAA,CAAA,EAAA/3C,EAAA83C,EAAAH,EAAA33C,EAAA83C,GAAAJ,IAGA/2C,KAAA+S,KAAA,IAAAy4B,OAAA2D,MAAAp8B,EAAA,CACA0F,KAAAzY,KAAAqpC,YAAA,EACAjQ,IAAAp5B,KAAAopC,aAAA,EACA8C,QAAA,SACAC,QAAA,SACAqG,MAAAxyC,KAAA2nC,SAAA6K,QAGAxyC,KAAAynC,OAAA/pB,IAAA1d,KAAA+S,MACA/S,KAAAkqC,gBAOA0G,UAAA,WACA5wC,KAAAynC,OAAArsB,OAAApb,KAAA+S,MACA/S,KAAA+S,KAAA,KACA/S,KAAAkqC,eAMAmN,UAAA,WACAr3C,KAAAie,WAMA2e,KAAA,WACA58B,KAAA6iB,OACAhhB,QAAA+Q,KAAAZ,SAAA,cAMAkV,KAAA,WACAlnB,KAAA8gC,qBACA9gC,KAAAowC,mBAAAtP,qBACAj/B,QAAA+Q,KAAA0D,YAAA,aACAtW,KAAA6iB,QAMAojB,OAAA,SAAAl/B,GACA/G,KAAAkU,SAAA+xB,OAAAl/B,GACA/G,KAAAmX,QAAA,SAMA66B,aAAA,WACAhyC,KAAAknC,YAAA5wB,YAAA,WAMA27B,cAAA,WACAjyC,KAAAknC,YAAAl1B,SAAA,WAMAmgC,eAAA,WACA,IAAAzF,EAAA1sC,KAAAssC,2BACAtsC,KAAAyoC,UAAAzoC,KAAAkuC,kBAAAxB,GAEA,IAAAgG,EAAA,CACAhH,MAAA1rC,KAAAqpC,YACAhc,OAAArtB,KAAAopC,cAGAuJ,EAAA,CACAjH,MAAAgB,EAAAhB,MAAA1rC,KAAAyoC,UACApb,OAAAqf,EAAArf,OAAArtB,KAAAyoC,UACAhwB,KAAAzY,KAAAqpC,YAAA,EACAjQ,IAAAp5B,KAAAopC,aAAA,GA6BAppC,KAAAs3C,sBA1BA,KACAt3C,KAAAusC,oCAGA,IAAAmD,EAAA1vC,KAAAspC,aACAmJ,EAAAzyC,KAAAssC,2BACAwC,EAAA2D,EAAA/G,MAAAgE,EAAAhD,gBAAAhB,MAGA6L,EAAA,CACA9+B,KAAAzY,KAAA0nC,MAAAjvB,KAAAi3B,EAAA/C,QAAAmC,EAAA9uC,KAAAyoC,UACArP,IAAAp5B,KAAA0nC,MAAAtO,IAAAsW,EAAA9C,QAAAkC,EAAA9uC,KAAAyoC,UACAiD,MAAAgE,EAAAhE,MAAAoD,EAAA9uC,KAAAyoC,UACApb,OAAAqiB,EAAAriB,OAAAyhB,EAAA9uC,KAAAyoC,WAGAzoC,KAAAw3C,aAAAD,GAEAv3C,KAAA4nC,aACAkH,EAAA2D,EAAA/G,MAAA1rC,KAAAypC,gBAAAiD,gBAAAhB,MACA1rC,KAAA4nC,WAAAnvB,KAAAzY,KAAA0nC,MAAAjvB,KAAAzY,KAAAypC,gBAAAkD,QAAAmC,EAAA9uC,KAAAyoC,UACAzoC,KAAA4nC,WAAAxO,IAAAp5B,KAAA0nC,MAAAtO,IAAAp5B,KAAAypC,gBAAAmD,QAAAkC,EAAA9uC,KAAAyoC,UACAzoC,KAAAynC,OAAA/pB,IAAA1d,KAAA4nC,cAIA+K,EAAAD,IAMAR,gBAAA,WACA,IAAAQ,EAAA,GAEA1yC,KAAAy3C,eACA,IAAA/K,EAAA1sC,KAAAssC,2BACAoL,EAAA13C,KAAAsuC,oBAAA5B,GAAA1sC,KAAAupC,YACAoO,EAAAD,EAAA13C,KAAAyoC,UACAzoC,KAAAyoC,UAAAiP,EAEA,IAAA/E,EAAA,CACAjH,MAAAgB,EAAAhB,MAAA1rC,KAAAyoC,UACApb,OAAAqf,EAAArf,OAAArtB,KAAAyoC,UACAhwB,KAAAzY,KAAAqpC,YAAA,EACAjQ,IAAAp5B,KAAAopC,aAAA,GAMAwO,GAHA53C,KAAA8nC,QAAArvB,KAAAzY,KAAA0nC,MAAAjvB,MAGAk/B,EACAE,GAHA73C,KAAA8nC,QAAA1O,IAAAp5B,KAAA0nC,MAAAtO,KAGAue,EACAhF,EAAAl6B,KAAAzY,KAAAqpC,YAAA,EAAAuO,EACAjF,EAAAvZ,IAAAp5B,KAAAopC,aAAA,EAAAyO,EAGAnF,EAAArlB,OAAArtB,KAAA8nC,QAAAza,OAAAsqB,EACAjF,EAAAhH,MAAA1rC,KAAA8nC,QAAA4D,MAAAiM,IAEA33C,KAAA4nC,YAAA5nC,KAAA4nC,aAAA5nC,KAAA60C,gBAAA70C,KAAA4nC,WAAA5nC,KAAA8nC,YACA9nC,KAAA4nC,YACA5nC,KAAAwvC,mBAGAxvC,KAAA0zC,4BAaA1zC,KAAAs3C,sBAVA,KAEA,GAAAt3C,KAAA4nC,WAAA,CACA,IAAAkH,EAAA9uC,KAAAssC,2BAAAZ,MAAA1rC,KAAAypC,gBAAAiD,gBAAAhB,MACA1rC,KAAA4nC,WAAAnvB,KAAAzY,KAAA0nC,MAAAjvB,KAAAzY,KAAAypC,gBAAAkD,QAAAmC,EAAA9uC,KAAAyoC,UACAzoC,KAAA4nC,WAAAxO,IAAAp5B,KAAA0nC,MAAAtO,IAAAp5B,KAAAypC,gBAAAmD,QAAAkC,EAAA9uC,KAAAyoC,UACAzoC,KAAAynC,OAAA/pB,IAAA1d,KAAA4nC,cAIA+K,EAAAD,IAWA4E,sBAAA,SAAAtwC,EAAA2rC,EAAAD,GACA1yC,KAAA0oC,sBACA1oC,KAAA0oC,qBAAA,EAGA1oC,KAAA4nC,aACA5nC,KAAAynC,OAAArsB,OAAApb,KAAA4nC,YACA5nC,KAAAkqC,eAGAlqC,KAAA0nC,MAAA2L,QAAAV,EAAA,CACAnC,SAAAxwC,KAAAynC,OAAAmE,UAAAtkB,KAAAtnB,KAAAynC,QACArvB,SAAApY,KAAAkU,SAAAo/B,kBACAC,WAAA,KACAvsC,IACAhH,KAAA0oC,qBAAA,EACA1oC,KAAAkqC,iBAIAlqC,KAAA2nC,SAAA0L,QAAAX,EAAA,CACAt6B,SAAApY,KAAAkU,SAAAo/B,sBAKAhI,aAAA,WACAtrC,KAAAwnC,eAAAlpC,EAAA,yCAAAkQ,SAAAlQ,EAAA,SAAA0B,KAAA8S,aACA,IACAiU,EADAxgB,SAAA4qB,eAAA,kBACA2mB,WAAA,MACAp3C,EAAA,IAAA8B,KAEAu1C,EAAAhxB,EAAA0gB,OAAAiE,MACAsM,EAAAjxB,EAAA0gB,OAAApa,OAmBArtB,KAAA0pC,gBAAA59B,OAAAmsC,aAjBA,WACA,IAAAC,EAAA/1C,UAAA,IAAAK,KAAA9B,GAAA,IALA,IAAA,GAMAqmB,EAAAoxB,OACApxB,EAAAqxB,UAAA,EAAA,EAAAL,EAAAC,GACAjxB,EAAAsxB,UAAAN,EAAA,EAAAC,EAAA,GACAjxB,EAAAuxB,OAAA,EAAAznC,KAAAgiC,GAAAqF,GACA,IAAA,IAAA74C,EAAA,EAAAA,EAVA,GAUAA,IACA0nB,EAAAwxB,YACAxxB,EAAAuxB,OAAA,EAAAznC,KAAAgiC,GAZA,IAaA9rB,EAAAyxB,OAAAT,EAAA,GAAA,GACAhxB,EAAA0xB,OAAAV,EAAA,EAAA,GACAhxB,EAAA2xB,UAAAX,EAAA,GACAhxB,EAAA4xB,YAAA,oBAAAt5C,EAhBA,GAgBA,IACA0nB,EAAAwoB,SAEAxoB,EAAA6xB,YAEA,IAAA,KAGAlL,aAAA,WACA5hC,OAAA+sC,cAAA74C,KAAA0pC,iBACA1pC,KAAAwnC,eAAApsB,SACApb,KAAAwnC,eAAA,MAQAgQ,aAAA,SAAAsB,GACA94C,KAAA+4C,mBAAAD,GACA94C,KAAAg5C,yBACAh5C,KAAAmqC,iBAMAsN,aAAA,WACAz3C,KAAA8nC,UACA9nC,KAAA6nC,eAAAzsB,OAAApb,KAAA8nC,SACA9nC,KAAA6nC,eAAAzsB,OAAApb,KAAAkoC,eACAloC,KAAA6nC,eAAAzsB,OAAApb,KAAAgoC,gBACAhoC,KAAA6nC,eAAAzsB,OAAApb,KAAAioC,aACAjoC,KAAA6nC,eAAAzsB,OAAApb,KAAA+nC,mBACA/nC,KAAA6nC,eAAAzsB,OAAApb,KAAAmoC,kBAEAnoC,KAAA6nC,eAAA,KACA7nC,KAAAmqC,cAAA,OASA4O,mBAAA,SAAAD,GAEA94C,KAAA6nC,eAAA,IAAA2D,OAAAC,aAAA,kBAAA,CACAwN,gBAAA,gBACAC,YAAA,UACAC,WAAA,IAGAn5C,KAAA6nC,eAAAmG,cAAA,CACAtC,MAAA1rC,KAAAqpC,YACAhc,OAAArtB,KAAAopC,eAGAppC,KAAAmqC,cAAA,IAAAtoC,QAAAkf,sBAAA/gB,KAAA6nC,eAAA+D,UAAAtkB,KAAAtnB,KAAA6nC,iBAEAvpC,EAAA,mBAAA0B,KAAAqnC,kBAAA/lB,IAAA,CACAkd,SAAA,WACApF,IAAA,EACA3gB,KAAA,IAGAzY,KAAAkoC,cAAA,IAAAsD,OAAAmD,KAAA,CACAl2B,KAAAzY,KAAAqpC,YAAA,EACAjQ,IAAAp5B,KAAAopC,aAAA,EACA8C,QAAA,SACAC,QAAA,SACAT,MAAA1rC,KAAAqpC,YACAhc,OAAArtB,KAAAopC,aACAwF,KAAA,oBAIA,IAAAlC,EAAA1sC,KAAAssC,2BACA8M,EAAA,IAAAp5C,KAAAooC,qBAAA,EAAA,IAAApoC,KAAA82C,qBAAApK,GACA2M,EAAA3M,EAAAhB,MAAA0N,EACAE,EAAA5M,EAAArf,OAAA+rB,EAEA,GAAAp5C,KAAA6vC,wBAAA,CACA,IAAAuD,EAAAkG,EACAA,EAAAD,EACAA,EAAAjG,EAIApzC,KAAA8nC,QAAA,IAAA0D,OAAAmD,KAAA,CACAl2B,KAAAzY,KAAAqpC,YAAA,EACAjQ,IAAAp5B,KAAAopC,aAAA,EACA8C,QAAA,SACAC,QAAA,SACAT,MAAA2N,EACAhsB,OAAAisB,EACA/J,OAAA,QACAX,KAAA,kBACAU,YAAA,IAIAwJ,GACA94C,KAAA8nC,QAAAmE,IAAA6M,GAGA94C,KAAA8nC,QAAA+G,yBAAA,kBACA7uC,KAAA6nC,eAAAnqB,IAAA1d,KAAAkoC,eACAloC,KAAA6nC,eAAAnqB,IAAA1d,KAAA8nC,UAMAkR,uBAAA,gBACA,IAAAh5C,KAAAg5C,uBAAAlJ,IACA9vC,KAAAg5C,uBAAAlJ,EAAA,IAGA9vC,KAAAgoC,iBACAhoC,KAAA6nC,eAAAzsB,OAAApb,KAAAgoC,gBACAhoC,KAAA6nC,eAAAzsB,OAAApb,KAAAioC,aACAjoC,KAAA6nC,eAAAzsB,OAAApb,KAAA+nC,mBACA/nC,KAAA6nC,eAAAzsB,OAAApb,KAAAmoC,mBAEAnoC,KAAAg5C,uBAAAlJ,EAAAyJ,YAAA,CACAjK,YAAA,EACAC,OAAA,mBACAX,MAAA,GAGA5uC,KAAAg5C,uBAAAlJ,EAAA0J,YAAA,CACAlK,YAAA,EACAC,OAAA,yBAIAvvC,KAAAg5C,uBAAAlJ,EAAA2J,UAAA,CACA,IAAAjO,OAAAkO,KAAA,sBAAA15C,KAAAg5C,uBAAAlJ,EAAAyJ,aACA,IAAA/N,OAAAkO,KAAA,MAAA15C,KAAA8nC,QAAA4D,MAAA,GAAA,SAAA1rC,KAAA8nC,QAAA4D,MAAA,GAAA,SAAA1rC,KAAA8nC,QAAA4D,MAAA,GAAA,MAAA1rC,KAAAg5C,uBAAAlJ,EAAAyJ,aACA,IAAA/N,OAAAkO,KAAA,MAAA15C,KAAA8nC,QAAA4D,MAAA,GAAA,KAAA1rC,KAAA8nC,QAAAza,OAAA,GAAA,MAAArtB,KAAA8nC,QAAA4D,MAAA,GAAA,KAAA1rC,KAAA8nC,QAAAza,OAAA,GAAA,OAAArtB,KAAA8nC,QAAA4D,MAAA,GAAA,KAAA1rC,KAAA8nC,QAAAza,OAAA,GAAArtB,KAAAg5C,uBAAAlJ,EAAAyJ,aACA,IAAA/N,OAAAkO,KAAA,SAAA15C,KAAA8nC,QAAAza,OAAA,GAAA,SAAArtB,KAAA8nC,QAAAza,OAAA,GAAA,SAAArtB,KAAA8nC,QAAAza,OAAA,GAAArtB,KAAAg5C,uBAAAlJ,EAAAyJ,cAGAv5C,KAAAgoC,eAAA,IAAAwD,OAAA2D,MAAAnvC,KAAAg5C,uBAAAlJ,EAAA2J,UAAA,CACAhhC,KAAAzY,KAAA8nC,QAAArvB,KACA2gB,IAAAp5B,KAAA8nC,QAAA1O,IACA8S,QAAA,SACAC,QAAA,WAIAnsC,KAAA+nC,kBAAA,IAAAyD,OAAAmD,KAAA,CACAl2B,KAAAzY,KAAA8nC,QAAArvB,KACA2gB,IAAAp5B,KAAA8nC,QAAA1O,IACAsS,MAAA1rC,KAAA8nC,QAAA4D,MACAre,OAAArtB,KAAA8nC,QAAAza,OACAuhB,KAAA,gBACAW,OAAA,wBACAD,YAAA,EACApD,QAAA,SACAC,QAAA,WAGAnsC,KAAAioC,YAAA,IAAAuD,OAAA2D,MACA,CACA,IAAA3D,OAAA4L,KAAA,CAAA,IAAAp3C,KAAA8nC,QAAA4D,MAAA,EAAA,IAAA1rC,KAAA8nC,QAAA4D,MAAA1rC,KAAA8nC,QAAAza,QAAArtB,KAAAg5C,uBAAAlJ,EAAA0J,aACA,IAAAhO,OAAA4L,KAAA,CAAA,IAAAp3C,KAAA8nC,QAAA4D,MAAA,EAAA,IAAA1rC,KAAA8nC,QAAA4D,MAAA1rC,KAAA8nC,QAAAza,QAAArtB,KAAAg5C,uBAAAlJ,EAAA0J,aACA,IAAAhO,OAAA4L,KAAA,CAAA,EAAA,IAAAp3C,KAAA8nC,QAAAza,OAAArtB,KAAA8nC,QAAA4D,MAAA,IAAA1rC,KAAA8nC,QAAAza,QAAArtB,KAAAg5C,uBAAAlJ,EAAA0J,aACA,IAAAhO,OAAA4L,KAAA,CAAA,EAAA,IAAAp3C,KAAA8nC,QAAAza,OAAArtB,KAAA8nC,QAAA4D,MAAA,IAAA1rC,KAAA8nC,QAAAza,QAAArtB,KAAAg5C,uBAAAlJ,EAAA0J,cACA,CACA/gC,KAAAzY,KAAA8nC,QAAArvB,KACA2gB,IAAAp5B,KAAA8nC,QAAA1O,IACA8S,QAAA,SACAC,QAAA,WAGAnsC,KAAAg5C,uBAAAlJ,EAAA6J,YAAA35C,KAAA+nC,kBAAA3O,IAAAp5B,KAAA8nC,QAAAza,OAAA,EAAA,GACArtB,KAAAg5C,uBAAAlJ,EAAA8J,wBAAA,gBAEA55C,KAAAg5C,uBAAAlJ,EAAA6J,YAAA,GAAA35C,KAAAopC,aAAA,IACAppC,KAAAg5C,uBAAAlJ,EAAA6J,aAAA,GACA35C,KAAAg5C,uBAAAlJ,EAAA8J,wBAAA,mBAGA55C,KAAAmoC,iBAAA,IAAAqD,OAAAqO,QAAAhpC,KAAAK,MAAAlR,KAAA8nC,QAAA4D,OAAA,MAAA76B,KAAAK,MAAAlR,KAAA8nC,QAAAza,QAAA,CACA5U,KAAAzY,KAAA+nC,kBAAAtvB,KACA2gB,IAAAp5B,KAAAg5C,uBAAAlJ,EAAA6J,YACAG,SAAA,GACAlL,KAAA,mBACAqK,gBAAAj5C,KAAAg5C,uBAAAlJ,EAAA8J,wBACAG,KAAA,QACArO,MAAA,GACAre,OAAA,GACA6e,QAAA,SACAC,QAAA,SACA6N,UAAA,WAGAh6C,KAAA6nC,eAAAnqB,IAAA1d,KAAAgoC,gBACAhoC,KAAA6nC,eAAAnqB,IAAA1d,KAAAioC,aACAjoC,KAAA6nC,eAAAnqB,IAAA1d,KAAA+nC,mBACA/nC,KAAA6nC,eAAAnqB,IAAA1d,KAAAmoC,mBAQAkG,mBAAA,SAAA4L,GACA,GAAAj6C,KAAA6nC,eAAA,CAKA,IAAAqS,EACAl6C,KAAA8nC,QAAArvB,KAAAzY,KAAA6nC,eAAA6D,MAAA,EADAwO,EAEAl6C,KAAA8nC,QAAA1O,IAAAp5B,KAAA6nC,eAAAxa,OAAA,EAIArtB,KAAA6nC,eAAAmG,cAAA,CACAtC,MAAA1rC,KAAAqpC,YACAhc,OAAArtB,KAAAopC,eAIA,IACA+Q,EADAn6C,KAAAouC,sBAAApuC,KAAAwoC,oBACAkD,MAAAuO,EAAAvO,MAGA1rC,KAAA8nC,QAAA4D,MAAA76B,KAAAK,MAAAlR,KAAA8nC,QAAA4D,MAAAyO,GACAn6C,KAAA8nC,QAAAza,OAAAxc,KAAAK,MAAAlR,KAAA8nC,QAAAza,OAAA8sB,GAIAn6C,KAAA8nC,QAAArvB,KAAAzY,KAAAqpC,YAAA,EAAA6Q,EAAAC,EACAn6C,KAAA8nC,QAAA1O,IAAAp5B,KAAAopC,aAAA,EAAA8Q,EAAAC,EAGAn6C,KAAAkoC,cAAA+D,IAAA,CACAP,MAAA1rC,KAAAqpC,YACAhc,OAAArtB,KAAAopC,aACA3wB,KAAAzY,KAAAqpC,YAAA,EACAjQ,IAAAp5B,KAAAopC,aAAA,IAGAppC,KAAAg5C,yBACAh5C,KAAAmqC,kBAQAiE,sBAAA,SAAAgM,GACA,MAAA,CACA1O,MAAA76B,KAAAob,IAAAmuB,EAAAxtC,EAAA29B,EAAA6P,EAAAvtC,EAAA09B,EAAA6P,EAAAx4C,EAAA2oC,EAAA6P,EAAAC,EAAA9P,GAAA15B,KAAAujB,IAAAgmB,EAAAxtC,EAAA29B,EAAA6P,EAAAvtC,EAAA09B,EAAA6P,EAAAx4C,EAAA2oC,EAAA6P,EAAAC,EAAA9P,GACAld,OAAAxc,KAAAob,IAAAmuB,EAAAxtC,EAAA49B,EAAA4P,EAAAvtC,EAAA29B,EAAA4P,EAAAx4C,EAAA4oC,EAAA4P,EAAAC,EAAA7P,GAAA35B,KAAAujB,IAAAgmB,EAAAxtC,EAAA49B,EAAA4P,EAAAvtC,EAAA29B,EAAA4P,EAAAx4C,EAAA4oC,EAAA4P,EAAAC,EAAA7P,KASA+C,iBAAA,SAAAh2B,GAEA,IAAAs1B,EAAA7sC,KAAA4nC,YAAA5nC,KAAAs6C,aAAA/iC,EAAAvX,KAAA4nC,YACA2S,EAAAv6C,KAAA6nC,gBAAA7nC,KAAAs6C,aAAA/iC,EAAAvX,KAAA8nC,SACA3P,EAAAn4B,KAAA6nC,gBAAA7nC,KAAAw6C,sBAAAjjC,IAEA4gB,GAAAoiB,GAAA1N,KACA7sC,KAAAipC,eAAA1xB,EAAAkjC,MACAz6C,KAAAkpC,eAAA3xB,EAAAmjC,MAEA7N,EACA7sC,KAAAgpC,eAAA,EACA7Q,EACAn4B,KAAA+oC,eAAA5Q,EACAoiB,IACAv6C,KAAA8oC,iBAAA,KAUAwE,iBAAA,SAAA/1B,GACA,OAAAvX,KAAA8pC,gBACAjoC,QAAAkf,sBAAA/gB,KAAA26C,yBAAArzB,KAAAtnB,OAEAA,KAAA8pC,eAAAvyB,GAGAojC,yBAAA,WACA,OAAA36C,KAAA8pC,iBAIA9pC,KAAA4nC,YAAA5nC,KAAAgpC,eACAhpC,KAAA46C,iBAAA56C,KAAA8pC,gBACA9pC,KAAAitC,uBACAjtC,KAAAkqC,eACAlqC,KAAA8oC,iBAAA9oC,KAAA+oC,gBACA/oC,KAAA8oC,gBACA9oC,KAAA66C,mBAAA76C,KAAA8pC,gBAEA9pC,KAAA86C,qBAAA96C,KAAA8pC,gBAGA9pC,KAAAg5C,yBAEAh5C,KAAAotC,oBACAptC,KAAAmqC,iBAEAnqC,KAAA+6C,gBAAA/6C,KAAA8pC,gBAGA9pC,KAAAipC,eAAAjpC,KAAA8pC,eAAA2Q,MACAz6C,KAAAkpC,eAAAlpC,KAAA8pC,eAAA4Q,MAEA16C,KAAA8pC,eAAA,OAQA0D,eAAA,SAAAj2B,GACAvX,KAAA8oC,iBAAA,EACA9oC,KAAA+oC,gBAAA,EACA/oC,KAAAgpC,eAAA,GAQAyE,gBAAA,SAAAl2B,GACAvX,KAAAwtC,eAAAj2B,GACAvX,KAAA8pC,eAAAvyB,EACAvX,KAAA26C,4BAQAE,mBAAA,SAAAtjC,GAQA,QAPA,IAAAvX,KAAA66C,mBAAA/K,IACA9vC,KAAA66C,mBAAA/K,EAAA,IAGA9vC,KAAA66C,mBAAA/K,EAAAb,OAAA13B,EAAAkjC,MAAAz6C,KAAAipC,eACAjpC,KAAA66C,mBAAA/K,EAAAZ,OAAA33B,EAAAmjC,MAAA16C,KAAAkpC,eAEA,IAAAlpC,KAAA66C,mBAAA/K,EAAAb,QAAA,IAAAjvC,KAAA66C,mBAAA/K,EAAAZ,OACA,OAAA,EAaA,GAVAlvC,KAAA66C,mBAAA/K,EAAA6E,UAAA,CACAl8B,KAAAzY,KAAA8nC,QAAArvB,KAAAzY,KAAA8nC,QAAA4D,MAAA,EACAtS,IAAAp5B,KAAA8nC,QAAA1O,IAAAp5B,KAAA8nC,QAAAza,OAAA,EACAqe,MAAA1rC,KAAA8nC,QAAA4D,MACAre,OAAArtB,KAAA8nC,QAAAza,QAGArtB,KAAA66C,mBAAA/K,EAAAkL,SAAAh7C,KAAAu1C,sBAAAv1C,KAAA66C,mBAAA/K,EAAA6E,UAAA30C,KAAA66C,mBAAA/K,EAAAb,OAAAjvC,KAAA66C,mBAAA/K,EAAAZ,SAGAlvC,KAAAy1C,yBAAAz1C,KAAA66C,mBAAA/K,EAAAkL,SAAAh7C,KAAAwoC,oBAAA,CAcA,IAVAxoC,KAAA66C,mBAAA/K,EAAAmL,IAAA,EACAj7C,KAAA66C,mBAAA/K,EAAAoL,IAAA,EACAl7C,KAAA66C,mBAAA/K,EAAAoH,MAAAl3C,KAAA66C,mBAAA/K,EAAAb,OAAA,GAAA,EAAA,EACAjvC,KAAA66C,mBAAA/K,EAAAqH,MAAAn3C,KAAA66C,mBAAA/K,EAAAZ,OAAA,GAAA,EAAA,EAGAlvC,KAAA66C,mBAAA/K,EAAAqL,SAAA,EACAn7C,KAAA66C,mBAAA/K,EAAAsL,eAAA,GAGAp7C,KAAA66C,mBAAA/K,EAAAmL,IAAApqC,KAAAujB,IAAAvjB,KAAAilC,IAAA91C,KAAA66C,mBAAA/K,EAAAb,QAAA,IAAAjvC,KAAA66C,mBAAA/K,EAAAmL,KAAA,EAAAj7C,KAAA66C,mBAAA/K,EAAAmL,MACA,IAAAj7C,KAAA66C,mBAAA/K,EAAAoL,IAAArqC,KAAAujB,IAAAvjB,KAAAilC,IAAA91C,KAAA66C,mBAAA/K,EAAAZ,QAAA,IAAAlvC,KAAA66C,mBAAA/K,EAAAoL,KAAA,EAAAl7C,KAAA66C,mBAAA/K,EAAAoL,MACAl7C,KAAA66C,mBAAA/K,EAAAkL,SAAAh7C,KAAAu1C,sBAAAv1C,KAAA66C,mBAAA/K,EAAA6E,UAAA30C,KAAA66C,mBAAA/K,EAAAmL,KAAAj7C,KAAA66C,mBAAA/K,EAAAb,OAAA,EAAA,GAAA,GAAAjvC,KAAA66C,mBAAA/K,EAAAoL,KAAAl7C,KAAA66C,mBAAA/K,EAAAZ,OAAA,EAAA,GAAA,IAEAlvC,KAAAy1C,yBAAAz1C,KAAA66C,mBAAA/K,EAAAkL,SAAAh7C,KAAAwoC,qBACAxoC,KAAA66C,mBAAA/K,EAAAmL,IAAAj7C,KAAA66C,mBAAA/K,EAAAoL,IAAAl7C,KAAA66C,mBAAA/K,EAAAqL,WACAn7C,KAAA66C,mBAAA/K,EAAAqL,SAAAn7C,KAAA66C,mBAAA/K,EAAAmL,IAAAj7C,KAAA66C,mBAAA/K,EAAAoL,IACAl7C,KAAA66C,mBAAA/K,EAAAsL,eAAA,CACA7Q,EAAAvqC,KAAA66C,mBAAA/K,EAAAmL,KAAAj7C,KAAA66C,mBAAA/K,EAAAb,OAAA,EAAA,GAAA,GACAzE,EAAAxqC,KAAA66C,mBAAA/K,EAAAoL,KAAAl7C,KAAA66C,mBAAA/K,EAAAZ,OAAA,EAAA,GAAA,KAQA,GAAA,GAAAlvC,KAAA66C,mBAAA/K,EAAAqL,SACA,OAEAn7C,KAAA66C,mBAAA/K,EAAAb,OAAAjvC,KAAA66C,mBAAA/K,EAAAsL,eAAA7Q,EACAvqC,KAAA66C,mBAAA/K,EAAAZ,OAAAlvC,KAAA66C,mBAAA/K,EAAAsL,eAAA5Q,EAIAxqC,KAAA8nC,QAAAmE,IAAA,CACAxzB,KAAAzY,KAAA8nC,QAAArvB,KAAAzY,KAAA66C,mBAAA/K,EAAAb,OACA7V,IAAAp5B,KAAA8nC,QAAA1O,IAAAp5B,KAAA66C,mBAAA/K,EAAAZ,UASA0L,iBAAA,SAAArjC,GAKA,QAJA,IAAAvX,KAAA46C,iBAAA9K,IACA9vC,KAAA46C,iBAAA9K,EAAA,IAGA9vC,KAAA4nC,WAAA,CAIA,GAHA5nC,KAAA46C,iBAAA9K,EAAAb,OAAA13B,EAAAkjC,MAAAz6C,KAAAipC,eACAjpC,KAAA46C,iBAAA9K,EAAAZ,OAAA33B,EAAAmjC,MAAA16C,KAAAkpC,eAEA,IAAAlpC,KAAA46C,iBAAA9K,EAAAb,QAAA,IAAAjvC,KAAA46C,iBAAA9K,EAAAZ,OACA,OAOA,GAJAlvC,KAAA46C,iBAAA9K,EAAAuL,KAAAr7C,KAAA4nC,WAAAnvB,KAAAzY,KAAA46C,iBAAA9K,EAAAb,OACAjvC,KAAA46C,iBAAA9K,EAAAwL,KAAAt7C,KAAA4nC,WAAAxO,IAAAp5B,KAAA46C,iBAAA9K,EAAAZ,OAGA,SAAAlvC,KAAA2oC,aACA,IAAA3oC,KAAAy1C,yBAAA,CAAA,CAAAlL,EAAAvqC,KAAA46C,iBAAA9K,EAAAuL,KAAA7Q,EAAAxqC,KAAA46C,iBAAA9K,EAAAwL,OAAAt7C,KAAAwoC,oBACA,YAGA,KAAAxoC,KAAA2nC,SAAAlvB,KAAAzY,KAAA2nC,SAAA+D,MAAA,EAAA1rC,KAAA46C,iBAAA9K,EAAAuL,KAAA,GAAAr7C,KAAA2nC,SAAAlvB,KAAAzY,KAAA2nC,SAAA+D,MAAA,EAAA1rC,KAAA46C,iBAAA9K,EAAAuL,KAAA,GACAr7C,KAAA2nC,SAAAvO,IAAAp5B,KAAA2nC,SAAAta,OAAA,EAAArtB,KAAA46C,iBAAA9K,EAAAwL,KAAA,GAAAt7C,KAAA2nC,SAAAvO,IAAAp5B,KAAA2nC,SAAAta,OAAA,EAAArtB,KAAA46C,iBAAA9K,EAAAwL,KAAA,GACA,OAIAt7C,KAAA4nC,WAAAqE,IAAA,CACAxzB,KAAAzY,KAAA4nC,WAAAnvB,KAAAzY,KAAA46C,iBAAA9K,EAAAb,OACA7V,IAAAp5B,KAAA4nC,WAAAxO,IAAAp5B,KAAA46C,iBAAA9K,EAAAZ,WASAmC,sBAAA,SAAAH,GAIA,OAFAlxC,KAAAurC,wBAEA2F,GACA,IAAA,OACAlxC,KAAA+pC,oBAAA,EACA,MAEA,IAAA,WACA/pC,KAAA+pC,mBAAA/pC,KAAAsoC,cAAAtoC,KAAAuoC,eACA,MAEA,IAAA,UACAvoC,KAAA+pC,mBAAA/pC,KAAA8nC,QAAA4D,MAAA1rC,KAAA8nC,QAAAza,OACA,MAEA,IAAA,SAEA,MACA,QACArtB,KAAA+pC,mBAAA8H,WAAAX,KASAI,0BAAA,gBACA,IAAAtxC,KAAAsxC,0BAAAxB,IACA9vC,KAAAsxC,0BAAAxB,EAAA,KAGA9vC,KAAA0oC,qBAAA1oC,KAAA+pC,qBAIA/pC,KAAA0oC,qBAAA,EAGA1oC,KAAAsxC,0BAAAxB,EAAA6E,UAAA,CACAl8B,KAAAzY,KAAA8nC,QAAArvB,KAAAzY,KAAA8nC,QAAA4D,MAAA,EACAtS,IAAAp5B,KAAA8nC,QAAA1O,IAAAp5B,KAAA8nC,QAAAza,OAAA,EACAqe,MAAA1rC,KAAA8nC,QAAA4D,MACAre,OAAArtB,KAAA8nC,QAAAza,QAIArtB,KAAA8nC,QAAA4D,MAAA1rC,KAAA8nC,QAAAza,OAAArtB,KAAA+pC,oBACA/pC,KAAAsxC,0BAAAxB,EAAAyL,eAAAv7C,KAAAsxC,0BAAAxB,EAAA6E,UAAAtnB,OAGArtB,KAAAsxC,0BAAAxB,EAAA6E,UAAAtnB,OAAArtB,KAAA8nC,QAAA4D,MAAA1rC,KAAA+pC,mBAGA/pC,KAAAsxC,0BAAAxB,EAAA6E,UAAAvb,MAAAp5B,KAAAsxC,0BAAAxB,EAAA6E,UAAAtnB,OAAArtB,KAAAsxC,0BAAAxB,EAAAyL,gBAAA,EAGAv7C,KAAAy1C,yBAAAz1C,KAAAu1C,sBAAAv1C,KAAAsxC,0BAAAxB,EAAA6E,WAAA30C,KAAAwoC,sBACAxoC,KAAAsxC,0BAAAxB,EAAA6E,UAAAjJ,MAAA1rC,KAAA8nC,QAAAza,OAAArtB,KAAA+pC,mBACA/pC,KAAAsxC,0BAAAxB,EAAA6E,UAAAtnB,OAAArtB,KAAAsxC,0BAAAxB,EAAA6E,UAAAjJ,MAAA1rC,KAAA+pC,sBAIA/pC,KAAAsxC,0BAAAxB,EAAA0L,cAAAx7C,KAAAsxC,0BAAAxB,EAAA6E,UAAAjJ,MACA1rC,KAAAsxC,0BAAAxB,EAAA6E,UAAAjJ,MAAA1rC,KAAA8nC,QAAAza,OAAArtB,KAAA+pC,mBACA/pC,KAAAsxC,0BAAAxB,EAAA6E,UAAAl8B,OAAAzY,KAAAsxC,0BAAAxB,EAAA6E,UAAAjJ,MAAA1rC,KAAAsxC,0BAAAxB,EAAA0L,eAAA,EAEAx7C,KAAAy1C,yBAAAz1C,KAAAu1C,sBAAAv1C,KAAAsxC,0BAAAxB,EAAA6E,WAAA30C,KAAAwoC,sBACAxoC,KAAAsxC,0BAAAxB,EAAA6E,UAAAtnB,OAAArtB,KAAA8nC,QAAA4D,MAAA1rC,KAAA+pC,mBACA/pC,KAAAsxC,0BAAAxB,EAAA6E,UAAAjJ,MAAA1rC,KAAAsxC,0BAAAxB,EAAA6E,UAAAtnB,OAAArtB,KAAA+pC,qBAIA/pC,KAAAsxC,0BAAAxB,EAAA+D,WAAA,CACAxmB,OAAArtB,KAAAsxC,0BAAAxB,EAAA6E,UAAAtnB,OACAqe,MAAA1rC,KAAAsxC,0BAAAxB,EAAA6E,UAAAjJ,OAIA1rC,KAAA8nC,QAAAuL,QAAArzC,KAAAsxC,0BAAAxB,EAAA+D,WAAA,CACArD,SAAA,KACAxwC,KAAAg5C,yBACAh5C,KAAA6nC,eAAA+D,aAEAxzB,SAAApY,KAAAkU,SAAAo/B,kBACAC,WAAA,KACAvzC,KAAAg5C,yBACAh5C,KAAA0oC,qBAAA,EACA1oC,KAAAmqC,gBACAnqC,KAAAotC,yBAUA0N,qBAAA,SAAAvjC,QACA,IAAAvX,KAAA86C,qBAAAhL,IACA9vC,KAAA86C,qBAAAhL,EAAA,IAIA9vC,KAAA86C,qBAAAhL,EAAAb,OAAA13B,EAAAkjC,MAAAz6C,KAAAipC,eACAjpC,KAAA86C,qBAAAhL,EAAAZ,OAAA33B,EAAAmjC,MAAA16C,KAAAkpC,eAEA,MAAAlpC,KAAA+oC,gBAAA,MAAA/oC,KAAA+oC,iBACA/oC,KAAA86C,qBAAAhL,EAAAb,OAAA,GAGA,MAAAjvC,KAAA+oC,gBAAA,MAAA/oC,KAAA+oC,iBACA/oC,KAAA86C,qBAAAhL,EAAAZ,OAAA,GAGA,IAAAlvC,KAAA86C,qBAAAhL,EAAAb,QAAA,IAAAjvC,KAAA86C,qBAAAhL,EAAAZ,SAKAlvC,KAAA86C,qBAAAhL,EAAA2L,kBAAA,CACAhjC,KAAAzY,KAAA8nC,QAAArvB,KAAAzY,KAAA8nC,QAAA4D,MAAA,EACAtS,IAAAp5B,KAAA8nC,QAAA1O,IAAAp5B,KAAA8nC,QAAAza,OAAA,EACAqe,MAAA1rC,KAAA8nC,QAAA4D,MACAre,OAAArtB,KAAA8nC,QAAAza,QAGArtB,KAAA86C,qBAAAhL,EAAA6E,UAAA30C,KAAA07C,iCAAA17C,KAAA86C,qBAAAhL,EAAA2L,kBAAAz7C,KAAA86C,qBAAAhL,EAAAb,OAAAjvC,KAAA86C,qBAAAhL,EAAAZ,OAAAlvC,KAAA+oC,gBAEA/oC,KAAA86C,qBAAAhL,EAAA6E,UAAAtnB,OAAA,IAAArtB,KAAA86C,qBAAAhL,EAAA6E,UAAAjJ,MAAA,IAIA1rC,KAAAy1C,yBAAAz1C,KAAAu1C,sBAAAv1C,KAAA86C,qBAAAhL,EAAA6E,WAAA30C,KAAAwoC,sBAKAxoC,KAAA8nC,QAAAmE,IAAA,CACA7S,IAAAp5B,KAAA86C,qBAAAhL,EAAA6E,UAAAvb,IAAAp5B,KAAA86C,qBAAAhL,EAAA6E,UAAAtnB,OAAA,EACA5U,KAAAzY,KAAA86C,qBAAAhL,EAAA6E,UAAAl8B,KAAAzY,KAAA86C,qBAAAhL,EAAA6E,UAAAjJ,MAAA,EACAA,MAAA1rC,KAAA86C,qBAAAhL,EAAA6E,UAAAjJ,MACAre,OAAArtB,KAAA86C,qBAAAhL,EAAA6E,UAAAtnB,SAGArtB,KAAAg5C,4BAGA0C,iCAAA,SAAAD,EAAAxM,EAAAC,EAAAyM,GAcA,QAbA,IAAA37C,KAAA07C,iCAAA5L,IACA9vC,KAAA07C,iCAAA5L,EAAA,IAIA9vC,KAAA07C,iCAAA5L,EAAA8L,SAAA,EACA57C,KAAA07C,iCAAA5L,EAAA+L,UAAA,EAEA77C,KAAA07C,iCAAA5L,EAAA6E,UAAA8G,EACAz7C,KAAA07C,iCAAA5L,EAAAb,OAAAA,EACAjvC,KAAA07C,iCAAA5L,EAAAZ,OAAAA,EAGAlvC,KAAA+pC,mBAAA,CAIA,OAHA/pC,KAAA07C,iCAAA5L,EAAAgM,OAAA,EAGAH,GACA,IAAA,IACA37C,KAAA07C,iCAAA5L,EAAAgM,QAAA97C,KAAA07C,iCAAA5L,EAAAZ,OACA,MACA,IAAA,IACAlvC,KAAA07C,iCAAA5L,EAAAgM,OAAA97C,KAAA07C,iCAAA5L,EAAAZ,OACA,MACA,IAAA,IACAlvC,KAAA07C,iCAAA5L,EAAAgM,OAAA97C,KAAA07C,iCAAA5L,EAAAb,OACA,MACA,IAAA,IACAjvC,KAAA07C,iCAAA5L,EAAAgM,QAAA97C,KAAA07C,iCAAA5L,EAAAb,OACA,MACA,IAAA,KACAjvC,KAAA07C,iCAAA5L,EAAAgM,OAAAjrC,KAAAilC,IAAA91C,KAAA07C,iCAAA5L,EAAAZ,QAAAr+B,KAAAilC,IAAA91C,KAAA07C,iCAAA5L,EAAAb,SAAAjvC,KAAA07C,iCAAA5L,EAAAZ,OAAAlvC,KAAA07C,iCAAA5L,EAAAb,OACA,MACA,IAAA,KACAjvC,KAAA07C,iCAAA5L,EAAAgM,OAAAjrC,KAAAilC,IAAA91C,KAAA07C,iCAAA5L,EAAAZ,QAAAr+B,KAAAilC,IAAA91C,KAAA07C,iCAAA5L,EAAAb,SAAAjvC,KAAA07C,iCAAA5L,EAAAZ,QAAAlvC,KAAA07C,iCAAA5L,EAAAb,OACA,MACA,IAAA,KACAjvC,KAAA07C,iCAAA5L,EAAAgM,OAAAjrC,KAAAilC,IAAA91C,KAAA07C,iCAAA5L,EAAAZ,QAAAr+B,KAAAilC,IAAA91C,KAAA07C,iCAAA5L,EAAAb,QAAAjvC,KAAA07C,iCAAA5L,EAAAZ,OAAAlvC,KAAA07C,iCAAA5L,EAAAb,OACA,MACA,IAAA,KACAjvC,KAAA07C,iCAAA5L,EAAAgM,OAAAjrC,KAAAilC,IAAA91C,KAAA07C,iCAAA5L,EAAAZ,QAAAr+B,KAAAilC,IAAA91C,KAAA07C,iCAAA5L,EAAAb,QAAAjvC,KAAA07C,iCAAA5L,EAAAZ,QAAAlvC,KAAA07C,iCAAA5L,EAAAb,OAgBA,OAZAjvC,KAAA+pC,mBAAA,GACA/pC,KAAA07C,iCAAA5L,EAAAb,OAAAjvC,KAAA07C,iCAAA5L,EAAAgM,OACA97C,KAAA07C,iCAAA5L,EAAAZ,OAAAlvC,KAAA07C,iCAAA5L,EAAAb,OAAAjvC,KAAA+pC,qBAEA/pC,KAAA07C,iCAAA5L,EAAAZ,OAAAlvC,KAAA07C,iCAAA5L,EAAAgM,OACA97C,KAAA07C,iCAAA5L,EAAAb,OAAAjvC,KAAA07C,iCAAA5L,EAAAZ,OAAAlvC,KAAA+pC,oBAGA/pC,KAAA07C,iCAAA5L,EAAA6E,UAAAtnB,QAAArtB,KAAA07C,iCAAA5L,EAAAZ,OACAlvC,KAAA07C,iCAAA5L,EAAA6E,UAAAjJ,OAAA1rC,KAAA07C,iCAAA5L,EAAAb,OAGA0M,GACA,IAAA,IACA37C,KAAA07C,iCAAA5L,EAAA6E,UAAAvb,KAAAp5B,KAAA07C,iCAAA5L,EAAAZ,OACAlvC,KAAA07C,iCAAA5L,EAAA6E,UAAAl8B,MAAAzY,KAAA07C,iCAAA5L,EAAAb,OAAA,EACA,MACA,IAAA,IACAjvC,KAAA07C,iCAAA5L,EAAA6E,UAAAl8B,OAAAzY,KAAA07C,iCAAA5L,EAAAb,OAAA,EACA,MACA,IAAA,IACAjvC,KAAA07C,iCAAA5L,EAAA6E,UAAAvb,MAAAp5B,KAAA07C,iCAAA5L,EAAAZ,OAAA,EACA,MACA,IAAA,IACAlvC,KAAA07C,iCAAA5L,EAAA6E,UAAAvb,KAAAp5B,KAAA07C,iCAAA5L,EAAAZ,OAAA,EACAlvC,KAAA07C,iCAAA5L,EAAA6E,UAAAl8B,MAAAzY,KAAA07C,iCAAA5L,EAAAb,OACA,MACA,IAAA,KACAjvC,KAAA07C,iCAAA5L,EAAA6E,UAAAvb,KAAAp5B,KAAA07C,iCAAA5L,EAAAZ,OACA,MACA,IAAA,KACAlvC,KAAA07C,iCAAA5L,EAAA6E,UAAAvb,KAAAp5B,KAAA07C,iCAAA5L,EAAAZ,OACAlvC,KAAA07C,iCAAA5L,EAAA6E,UAAAl8B,MAAAzY,KAAA07C,iCAAA5L,EAAAb,OACA,MACA,IAAA,KACAjvC,KAAA07C,iCAAA5L,EAAA6E,UAAAl8B,MAAAzY,KAAA07C,iCAAA5L,EAAAb,aAKAjvC,KAAAmpC,cACA,OAAAwS,GAAA,OAAAA,GACA,OAAAA,GAAA,OAAAA,IAEA37C,KAAA07C,iCAAA5L,EAAAF,MACA/+B,KAAAilC,IAAA7G,GAAAp+B,KAAAilC,IAAA5G,IACAlvC,KAAA07C,iCAAA5L,EAAAF,MAAA6L,EAAA/P,MAAA+P,EAAApuB,OACArtB,KAAA07C,iCAAA5L,EAAAZ,OAAAlvC,KAAA07C,iCAAA5L,EAAAb,OAAAjvC,KAAA07C,iCAAA5L,EAAAF,MACA5vC,KAAA07C,iCAAA5L,EAAAZ,QAAA,OAAAyM,GAAA,OAAAA,GAAA,EAAA,IAEA37C,KAAA07C,iCAAA5L,EAAAF,MAAA6L,EAAA/P,MAAA+P,EAAApuB,OACArtB,KAAA07C,iCAAA5L,EAAAb,OAAAjvC,KAAA07C,iCAAA5L,EAAAZ,OAAAlvC,KAAA07C,iCAAA5L,EAAAF,MACA5vC,KAAA07C,iCAAA5L,EAAAb,QAAA,OAAA0M,GAAA,OAAAA,GAAA,EAAA,IAIAA,EAAAj2C,MAAA,OACA1F,KAAA07C,iCAAA5L,EAAA6E,UAAAvb,KAAAp5B,KAAA07C,iCAAA5L,EAAAZ,OACAlvC,KAAA07C,iCAAA5L,EAAA6E,UAAAtnB,QAAArtB,KAAA07C,iCAAA5L,EAAAZ,QAEAyM,EAAAj2C,MAAA,OACA1F,KAAA07C,iCAAA5L,EAAA6E,UAAAtnB,QAAArtB,KAAA07C,iCAAA5L,EAAAZ,QAEAyM,EAAAj2C,MAAA,OACA1F,KAAA07C,iCAAA5L,EAAA6E,UAAAjJ,OAAA1rC,KAAA07C,iCAAA5L,EAAAb,QAEA0M,EAAAj2C,MAAA,OACA1F,KAAA07C,iCAAA5L,EAAA6E,UAAAl8B,MAAAzY,KAAA07C,iCAAA5L,EAAAb,OACAjvC,KAAA07C,iCAAA5L,EAAA6E,UAAAjJ,OAAA1rC,KAAA07C,iCAAA5L,EAAAb,QASA,OALAjvC,KAAA07C,iCAAA5L,EAAA6E,UAAAvb,IAAAp5B,KAAA07C,iCAAA5L,EAAA6E,UAAAvb,IACAp5B,KAAA07C,iCAAA5L,EAAA6E,UAAAl8B,KAAAzY,KAAA07C,iCAAA5L,EAAA6E,UAAAl8B,KACAzY,KAAA07C,iCAAA5L,EAAA6E,UAAAjJ,MAAA1rC,KAAA07C,iCAAA5L,EAAA6E,UAAAjJ,MACA1rC,KAAA07C,iCAAA5L,EAAA6E,UAAAtnB,OAAArtB,KAAA07C,iCAAA5L,EAAA6E,UAAAtnB,OAEArtB,KAAA07C,iCAAA5L,EAAA6E,WAQAoG,gBAAA,SAAAxjC,QACA,IAAAvX,KAAA+6C,gBAAAjL,IACA9vC,KAAA+6C,gBAAAjL,EAAA,IAGAjuC,QAAAsf,iBAAA,KAGAnhB,KAAA+6C,gBAAAjL,EAAAiM,OAAA,UACA/7C,KAAA+6C,gBAAAjL,EAAA3X,OAAAn4B,KAAA6nC,gBAAA7nC,KAAAw6C,sBAAAjjC,GACAvX,KAAA4nC,YAAA5nC,KAAAs6C,aAAA/iC,EAAAvX,KAAA4nC,YACA5nC,KAAA+6C,gBAAAjL,EAAAiM,OAAA,UACA/7C,KAAA+6C,gBAAAjL,EAAA3X,OACA,MAAAn4B,KAAA+6C,gBAAAjL,EAAA3X,QAAA,MAAAn4B,KAAA+6C,gBAAAjL,EAAA3X,OACAn4B,KAAA+6C,gBAAAjL,EAAAiM,OAAA,YACA,MAAA/7C,KAAA+6C,gBAAAjL,EAAA3X,QAAA,MAAAn4B,KAAA+6C,gBAAAjL,EAAA3X,OACAn4B,KAAA+6C,gBAAAjL,EAAAiM,OAAA,YACA,OAAA/7C,KAAA+6C,gBAAAjL,EAAA3X,QAAA,OAAAn4B,KAAA+6C,gBAAAjL,EAAA3X,OACAn4B,KAAA+6C,gBAAAjL,EAAAiM,OAAA,cACA,OAAA/7C,KAAA+6C,gBAAAjL,EAAA3X,QAAA,OAAAn4B,KAAA+6C,gBAAAjL,EAAA3X,SACAn4B,KAAA+6C,gBAAAjL,EAAAiM,OAAA,eAEA/7C,KAAA6nC,gBAAA7nC,KAAAs6C,aAAA/iC,EAAAvX,KAAA8nC,WACA9nC,KAAA+6C,gBAAAjL,EAAAiM,OAAA,QAGAz9C,EAAA,SAAAgjB,IAAA,SAAAthB,KAAA+6C,gBAAAjL,EAAAiM,UAQAvB,sBAAA,SAAAjjC,GAgBA,QAfA,IAAAvX,KAAAw6C,sBAAA1K,IACA9vC,KAAAw6C,sBAAA1K,EAAA,IAGA9vC,KAAAw6C,sBAAA1K,EAAAkM,aAAAh8C,KAAAunC,gBAAAvlC,SACAhC,KAAAw6C,sBAAA1K,EAAAmM,OAAA1kC,EAAAkjC,MAAAz6C,KAAAw6C,sBAAA1K,EAAAkM,aAAAvjC,KACAzY,KAAAw6C,sBAAA1K,EAAAoM,OAAA3kC,EAAAmjC,MAAA16C,KAAAw6C,sBAAA1K,EAAAkM,aAAA5iB,IAGAp5B,KAAAw6C,sBAAA1K,EAAAqM,GAAAn8C,KAAA8nC,QAAArvB,KAAAzY,KAAA8nC,QAAA4D,MAAA,EACA1rC,KAAAw6C,sBAAA1K,EAAAsM,GAAAp8C,KAAAw6C,sBAAA1K,EAAAqM,GAAAn8C,KAAA8nC,QAAA4D,MACA1rC,KAAAw6C,sBAAA1K,EAAAuM,GAAAr8C,KAAA8nC,QAAA1O,IAAAp5B,KAAA8nC,QAAAza,OAAA,EACArtB,KAAAw6C,sBAAA1K,EAAAwM,GAAAt8C,KAAAw6C,sBAAA1K,EAAAuM,GAAAr8C,KAAA8nC,QAAAza,OAGArtB,KAAAw6C,sBAAA1K,EAAAmM,OAAAj8C,KAAAw6C,sBAAA1K,EAAAqM,GAAA,IAAAn8C,KAAAw6C,sBAAA1K,EAAAmM,OAAAj8C,KAAAw6C,sBAAA1K,EAAAqM,GAAA,EAAA,CACA,GAAAn8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAuM,GAAA,IAAAr8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAuM,GAAA,EACA,MAAA,KACA,GAAAr8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAwM,GAAA,GAAAt8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAwM,GAAA,GACA,MAAA,KAIA,GAAAt8C,KAAAw6C,sBAAA1K,EAAAmM,OAAAj8C,KAAAw6C,sBAAA1K,EAAAsM,GAAA,IAAAp8C,KAAAw6C,sBAAA1K,EAAAmM,OAAAj8C,KAAAw6C,sBAAA1K,EAAAsM,GAAA,EAAA,CACA,GAAAp8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAuM,GAAA,IAAAr8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAuM,GAAA,EACA,MAAA,KACA,GAAAr8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAwM,GAAA,GAAAt8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAwM,GAAA,GACA,MAAA,KAKA,OAAAt8C,KAAAw6C,sBAAA1K,EAAAmM,OAAAj8C,KAAAw6C,sBAAA1K,EAAAqM,GAAA,GAAAn8C,KAAAw6C,sBAAA1K,EAAAmM,OAAAj8C,KAAAw6C,sBAAA1K,EAAAqM,GAAA,GAAAn8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAwM,GAAA,IAAAt8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAuM,GAAA,GACA,IAEAr8C,KAAAw6C,sBAAA1K,EAAAmM,OAAAj8C,KAAAw6C,sBAAA1K,EAAAsM,GAAA,GAAAp8C,KAAAw6C,sBAAA1K,EAAAmM,OAAAj8C,KAAAw6C,sBAAA1K,EAAAsM,GAAA,GAAAp8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAwM,GAAA,IAAAt8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAuM,GAAA,GACA,IAIAr8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAuM,GAAA,GAAAr8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAuM,GAAA,GAAAr8C,KAAAw6C,sBAAA1K,EAAAmM,OAAAj8C,KAAAw6C,sBAAA1K,EAAAqM,GAAA,IAAAn8C,KAAAw6C,sBAAA1K,EAAAmM,OAAAj8C,KAAAw6C,sBAAA1K,EAAAsM,GAAA,GACA,IAEAp8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAwM,GAAA,GAAAt8C,KAAAw6C,sBAAA1K,EAAAoM,OAAAl8C,KAAAw6C,sBAAA1K,EAAAwM,GAAA,GAAAt8C,KAAAw6C,sBAAA1K,EAAAmM,OAAAj8C,KAAAw6C,sBAAA1K,EAAAqM,GAAA,IAAAn8C,KAAAw6C,sBAAA1K,EAAAmM,OAAAj8C,KAAAw6C,sBAAA1K,EAAAsM,GAAA,IACA,KAeA9B,aAAA,SAAA37B,EAAAm2B,GAeA,YAdA,IAAA90C,KAAAs6C,aAAAxK,IACA9vC,KAAAs6C,aAAAxK,EAAA,IAGA9vC,KAAAs6C,aAAAxK,EAAAkM,aAAAh8C,KAAAunC,gBAAAvlC,SACAhC,KAAAs6C,aAAAxK,EAAAmM,OAAAt9B,EAAA87B,MAAAz6C,KAAAs6C,aAAAxK,EAAAkM,aAAAvjC,KACAzY,KAAAs6C,aAAAxK,EAAAoM,OAAAv9B,EAAA+7B,MAAA16C,KAAAs6C,aAAAxK,EAAAkM,aAAA5iB,IAGAp5B,KAAAs6C,aAAAxK,EAAAqM,GAAArH,EAAAr8B,KAAAq8B,EAAApJ,MAAA,EACA1rC,KAAAs6C,aAAAxK,EAAAsM,GAAAp8C,KAAAs6C,aAAAxK,EAAAqM,GAAArH,EAAApJ,MACA1rC,KAAAs6C,aAAAxK,EAAAuM,GAAAvH,EAAA1b,IAAA0b,EAAAznB,OAAA,EACArtB,KAAAs6C,aAAAxK,EAAAwM,GAAAt8C,KAAAs6C,aAAAxK,EAAAuM,GAAAvH,EAAAznB,OAGArtB,KAAAs6C,aAAAxK,EAAAmM,QAAAj8C,KAAAs6C,aAAAxK,EAAAqM,IACAn8C,KAAAs6C,aAAAxK,EAAAmM,QAAAj8C,KAAAs6C,aAAAxK,EAAAsM,IACAp8C,KAAAs6C,aAAAxK,EAAAoM,QAAAl8C,KAAAs6C,aAAAxK,EAAAuM,IACAr8C,KAAAs6C,aAAAxK,EAAAoM,QAAAl8C,KAAAs6C,aAAAxK,EAAAwM,IAaA/G,sBAAA,SAAAZ,EAAAhI,EAAAC,GAqBA,YApBA,IAAA5sC,KAAAu1C,sBAAAzF,IACA9vC,KAAAu1C,sBAAAzF,EAAA,SAGA,IAAAnD,IACAA,EAAA,QAEA,IAAAC,IACAA,EAAA,GAGA5sC,KAAAu1C,sBAAAzF,EAAAyM,QAAA,CACAhS,EAAAoK,EAAAl8B,KAAAk0B,EACAnC,EAAAmK,EAAAvb,IAAAwT,GAGA5sC,KAAAu1C,sBAAAzF,EAAA0M,SAAA,CAAAjS,EAAAvqC,KAAAu1C,sBAAAzF,EAAAyM,QAAAhS,EAAAoK,EAAAjJ,MAAAlB,EAAAxqC,KAAAu1C,sBAAAzF,EAAAyM,QAAA/R,GACAxqC,KAAAu1C,sBAAAzF,EAAA2M,YAAA,CAAAlS,EAAAvqC,KAAAu1C,sBAAAzF,EAAA0M,SAAAjS,EAAAC,EAAAxqC,KAAAu1C,sBAAAzF,EAAA0M,SAAAhS,EAAAmK,EAAAtnB,QACArtB,KAAAu1C,sBAAAzF,EAAA4M,WAAA,CAAAnS,EAAAvqC,KAAAu1C,sBAAAzF,EAAAyM,QAAAhS,EAAAC,EAAAxqC,KAAAu1C,sBAAAzF,EAAA2M,YAAAjS,GAEA,CAAAxqC,KAAAu1C,sBAAAzF,EAAAyM,QAAAv8C,KAAAu1C,sBAAAzF,EAAA0M,SAAAx8C,KAAAu1C,sBAAAzF,EAAA2M,YAAAz8C,KAAAu1C,sBAAAzF,EAAA4M,aAMAnQ,kCAAA,WACAvsC,KAAAwoC,mBAAAxoC,KAAA00C,sBAAA,QASAA,sBAAA,SAAAiI,GACA,IAIA/M,EAJAgD,GAAA,IAAA5yC,KAAA6vC,wBAAA,GAAA,GAAA7vC,KAAAooC,uBAAAv3B,KAAAgiC,GAAA,KAEAnG,EAAA1sC,KAAAssC,2BAKAsD,EADA,iBAAA+M,EACAA,EACA,UAAAA,EACA38C,KAAAsuC,oBAAA5B,GAEA1sC,KAAAkuC,kBAAAxB,GAIA,IAAA8J,EAAA9J,EAAArf,OAAAuiB,EACA2G,EAAA7J,EAAAhB,MAAAkE,EAKAgN,EAAA/rC,KAAAkiC,IAAAH,GAAA4D,EACAqG,EAAAhsC,KAAAmiC,IAAAJ,GAAA2D,EACAuG,EAAAjsC,KAAAkiC,IAAAH,GAAA2D,EACAwG,EAAAlsC,KAAAmiC,IAAAJ,GAAA4D,EAGAwG,GAAAh9C,KAAAopC,cAAAwT,EAAAC,IAAA,EACAI,GAAAj9C,KAAAqpC,aAAA0T,EAAAD,IAAA,EAGA,MAAA,CACAlwC,EAAA,CACA29B,EAAA0S,EAAAH,EACAtS,EAAAwS,GAEAnwC,EAAA,CACA09B,EAAAvqC,KAAAqpC,YAAA4T,EACAzS,EAAAwS,EAAAJ,GAEAh7C,EAAA,CACA2oC,EAAA0S,EAAAF,EACAvS,EAAAxqC,KAAAopC,aAAA4T,GAEA3C,EAAA,CACA9P,EAAA0S,EACAzS,EAAAwS,EAAAH,KAUAK,OAAA,SAAAC,GACAn9C,KAAAynC,OAAArsB,OAAApb,KAAAo9C,UACAp9C,KAAAo9C,SAAAD,EACAn9C,KAAAynC,OAAA/pB,IAAA1d,KAAAo9C,WAaA3H,yBAAA,SAAA4H,EAAA1I,GAWA,SAVA,IAAA30C,KAAAy1C,yBAAA3F,IACA9vC,KAAAy1C,yBAAA3F,EAAA,IAIA9vC,KAAAy1C,yBAAA3F,EAAAwN,GAAAt9C,KAAAu9C,WAAA5I,EAAA/nC,EAAA+nC,EAAA9nC,GACA7M,KAAAy1C,yBAAA3F,EAAA0N,GAAAx9C,KAAAu9C,WAAA5I,EAAA9nC,EAAA8nC,EAAA/yC,GACA5B,KAAAy1C,yBAAA3F,EAAA2N,WAAAz9C,KAAA09C,kBAAA19C,KAAAy1C,yBAAA3F,EAAAwN,GAAAt9C,KAAAy1C,yBAAA3F,EAAAwN,IACAt9C,KAAAy1C,yBAAA3F,EAAA6N,WAAA39C,KAAA09C,kBAAA19C,KAAAy1C,yBAAA3F,EAAA0N,GAAAx9C,KAAAy1C,yBAAA3F,EAAA0N,IAEAx9C,KAAAy1C,yBAAA3F,EAAAzwC,EAAA,EAAAW,KAAAy1C,yBAAA3F,EAAAzwC,EAAAg+C,EAAA/8C,OAAAN,KAAAy1C,yBAAA3F,EAAAzwC,IAeA,GAdAW,KAAAy1C,yBAAA3F,EAAA8N,MAAAP,EAAAr9C,KAAAy1C,yBAAA3F,EAAAzwC,GAIAW,KAAAy1C,yBAAA3F,EAAA+N,GAAA79C,KAAAu9C,WAAA5I,EAAA/nC,EAAA5M,KAAAy1C,yBAAA3F,EAAA8N,OACA59C,KAAAy1C,yBAAA3F,EAAAgO,GAAA99C,KAAAu9C,WAAA5I,EAAA9nC,EAAA7M,KAAAy1C,yBAAA3F,EAAA8N,OAGA59C,KAAAy1C,yBAAA3F,EAAAiO,WAAA/9C,KAAA09C,kBAAA19C,KAAAy1C,yBAAA3F,EAAAwN,GAAAt9C,KAAAy1C,yBAAA3F,EAAA+N,IACA79C,KAAAy1C,yBAAA3F,EAAAkO,WAAAh+C,KAAA09C,kBAAA19C,KAAAy1C,yBAAA3F,EAAA0N,GAAAx9C,KAAAy1C,yBAAA3F,EAAAgO,IAEA99C,KAAAy1C,yBAAA3F,EAAAmO,aAAA,GAAAj+C,KAAAy1C,yBAAA3F,EAAAiO,YAAA/9C,KAAAy1C,yBAAA3F,EAAAiO,YAAA/9C,KAAAy1C,yBAAA3F,EAAA2N,WACAz9C,KAAAy1C,yBAAA3F,EAAAoO,aAAA,GAAAl+C,KAAAy1C,yBAAA3F,EAAAkO,YAAAh+C,KAAAy1C,yBAAA3F,EAAAkO,YAAAh+C,KAAAy1C,yBAAA3F,EAAA6N,YAEA39C,KAAAy1C,yBAAA3F,EAAAmO,eAAAj+C,KAAAy1C,yBAAA3F,EAAAoO,aACA,OAAA,EAIA,OAAA,GASAX,WAAA,SAAA3wC,EAAAC,GACA,MAAA,CAAA09B,EAAA19B,EAAA09B,EAAA39B,EAAA29B,EAAAC,EAAA39B,EAAA29B,EAAA59B,EAAA49B,IASAkT,kBAAA,SAAA9wC,EAAAC,GACA,OAAAD,EAAA29B,EAAA19B,EAAA09B,EAAA39B,EAAA49B,EAAA39B,EAAA29B,GASA2T,oBAAA,SAAAC,GACA,OAAAvtC,KAAAklC,KAAAqI,EAAA7T,EAAA6T,EAAA7T,EAAA6T,EAAA5T,EAAA4T,EAAA5T,IASA6T,wBAAA,SAAAzxC,EAAAC,GACA,OAAAgE,KAAAK,MAAA,IAAAL,KAAAytC,KAAAztC,KAAAujB,IAAA,EAAAp0B,KAAA09C,kBAAA9wC,EAAAC,IAAA7M,KAAAm+C,oBAAAvxC,GAAA5M,KAAAm+C,oBAAAtxC,MAAAgE,KAAAgiC,GAAA,KAAA,KAWA8C,gBAAA,SAAAhB,EAAAU,GAcA,IAZA,IAAAkJ,EAAA,CACA,CAAA5J,EAAA/nC,EAAA+nC,EAAA9nC,GACA,CAAA8nC,EAAA9nC,EAAA8nC,EAAA/yC,GACA,CAAA+yC,EAAA/yC,EAAA+yC,EAAA0F,GACA,CAAA1F,EAAA0F,EAAA1F,EAAA/nC,IAGA4xC,EAAA,CAAAjU,EAAAvqC,KAAAqpC,YAAA,EAAAmB,EAAAxqC,KAAAopC,aAAA,GACAqV,EAAA,IACAC,EAAA,KAGAC,EAAA,EAAAA,EAAAJ,EAAAj+C,OAAAq+C,IAAA,CACA,IAAAjJ,EAAA6I,EAAAI,GACAC,EAAA5+C,KAAAu9C,WAAA7H,EAAA,GAAA8I,GACAK,EAAA7+C,KAAAu9C,WAAA7H,EAAA,GAAAA,EAAA,IACAoJ,EAAA9+C,KAAAu9C,WAAA7H,EAAA,GAAAL,GAMA0J,EAAAluC,KAAAilC,IAAA91C,KAAAq+C,wBAAAO,EAAAE,IAAA9+C,KAAAq+C,wBAAAO,EAAAC,GAAA7+C,KAAAq+C,wBAAAQ,EAAAC,KAEAC,EAAAN,IACAA,EAAAM,EACAL,EAAAhJ,GAIA,OAAAgJ,GAQAhI,qBAAA,SAAAjH,GACA,IAAAuP,EAAA,GAEApM,EAAA/hC,KAAAilC,IAAA91C,KAAAooC,uBAAAv3B,KAAAgiC,GAAA,KAEAoM,EAAAxP,EAAApiB,OAAAoiB,EAAA/D,MAIA,GAHAsT,EAAA3xB,OAAAoiB,EAAA/D,OAAA76B,KAAAmiC,IAAAJ,GAAA/hC,KAAAkiC,IAAAH,GAAAqM,GACAD,EAAAtT,MAAA+D,EAAA/D,OAAA76B,KAAAkiC,IAAAH,GAAA/hC,KAAAmiC,IAAAJ,GAAAqM,GAEAj/C,KAAA6vC,wBAAA,CACA,IAAAuD,EAAA4L,EAAAtT,MACAsT,EAAAtT,MAAAsT,EAAA3xB,OACA2xB,EAAA3xB,OAAA+lB,EAGA,OAAA4L,IAEA,CACA/hC,SAAA,CACAq2B,kBAAA,IACA7I,kBAAA,EACAxE,OAAA3nC,EAAA6kB,KACAknB,qBAAA,QChsFAxrC,MAAAqgD,WAAArgD,MAAAsV,iBAAAvV,OAAA,CACAugD,4BAAA,KACAC,2BAAA,KACAC,kCAAA,EAEAC,cAAA,KACAC,aAAA,KACAC,aAAA,KACAC,SAAA,KAEAC,SAAA,KACAC,cAAA,KACAC,YAAA,KAEAC,kBAAA,EACAC,oBAAA,GACAC,kBAAA,GACAC,yBAAA,GAEAC,WAAA,KACAC,YAAA,KACAC,+BAAA,KACAC,qBAAA,GAEAC,sBAAA,CACAC,QAAA,CACA,CAAAn7C,MAAA,WAAA+V,MAAArc,MAAAc,EAAA,MAAA,cAAA,CAAAwF,MAAA,UAAA+V,MAAArc,MAAAc,EAAA,MAAA,iBAGA4gD,wBAAA,CACAD,QAAA,CACA,CAAAn7C,MAAA,UAAA+V,MAAArc,MAAAc,EAAA,MAAA,4DAAA,CAAAwF,MAAA,QAAA+V,MAAArc,MAAAc,EAAA,MAAA,gEAIAqd,KAAA,SAAAnJ,EAAAf,EAAAoB,GACAlU,KAAA6iB,KAAAhP,EAAAf,EAAAoB,GAEA,UAAAlU,KAAAkU,SAAA6S,SACA/mB,KAAAkgD,aACAlgD,KAAAwgD,qBAGAxgD,KAAAqd,YAAAxb,QAAA8e,KAAA,gBAAA,0BAEA3gB,KAAAqd,YAAArd,KAAA0jB,MAAA,SAAA,wBAEA1jB,KAAAkU,SAAA6d,OACA/xB,KAAAkU,SAAA6d,MAAAza,GAAA,wBAAAtX,KAAAygD,qBAAAn5B,KAAAtnB,SAKAmnB,YAAA,WAKA,MAJA,UAAAnnB,KAAAkU,SAAA6S,SAAA/mB,KAAAkgD,aACAlgD,KAAAwgD,qBAGAxgD,KAAA6iB,QAGA6G,WAAA,SAAA5F,GACA9jB,KAAA6iB,KAAAiB,GAEA9jB,KAAA0gD,yBAAA58B,GAEA,UAAA9jB,KAAAkU,SAAA6S,UACA/mB,KAAAkgD,aAAAlgD,KAAA2gD,gBAAA78B,GAAA,GACAA,EAAA/c,KAAA,cACA/G,KAAAkgD,YAAA/1B,SAAArG,EAAAmD,UAIAjnB,KAAAigD,YACAjgD,KAAAigD,WAAAW,sBAKAl2B,aAAA,SAAA5G,GACA9jB,KAAA6iB,KAAAiB,GAGA,IAAA+8B,EAAA/8B,EAAA/c,KAAA,eAEA85C,GACAA,EAAA5iC,UAGA,UAAAje,KAAAkU,SAAA6S,UACA/mB,KAAAkgD,aAAAlgD,KAAA2gD,gBAAA78B,GAAA,GACA9jB,KAAAkgD,YAAAv1B,YAAA7G,EAAAmD,UAGAjnB,KAAAigD,YACAjgD,KAAAigD,WAAAW,sBAKAD,gBAAA,SAAA78B,GACA,OAAAA,EAAAg9B,aAAA,MAAA,MAAAxgD,QAMAkgD,mBAAA,WACAxgD,KAAAkgD,cAKAlgD,KAAAkU,SAAAihB,YAAA,EACAn1B,KAAAkU,SAAAkhB,aAAA,EAKAp1B,KAAAigD,WAAA,IAAAp+C,QAAAk/C,SAAA,CACAC,sBAAA,MACAC,cAAA,IACAz5B,OAAA,IAAAxnB,KAAAylB,KAAA+I,sBAAA0R,IAAA,6BACAghB,OAAAC,GAAAnhD,KAAAohD,mBAAAD,GACAE,YAAA,KAEA,IAAAjzC,EAEAA,EADApO,KAAAigD,WAAAqB,UAAAthD,KAAAigD,WAAAqB,SAAAphB,IAAA,4BAAA5/B,OACA,8BAEA,mBAKA,IAFA,IAAAihD,EAAA,GAEAliD,EAAA,EAAAA,EAAAW,KAAA+oB,SAAAzoB,OAAAjB,IAAA,CAEA,IAAAykB,EAAA9jB,KAAA+oB,SAAA1W,GAAAhT,GACAwC,QAAAmY,QAAA8J,EAAA1V,IACAmzC,EAAA7hD,KAAAokB,GAIA,OAAAy9B,GAGAC,YAAAxhD,KAAAyhD,aAAAn6B,KAAAtnB,MACA0hD,mBAAA1hD,KAAA2hD,oBAAAr6B,KAAAtnB,MACA4hD,WAAA5hD,KAAA6hD,gBAAAv6B,KAAAtnB,MACA8hD,iBAAA,MAMA9hD,KAAAkgD,YAAA,IAAAr+C,QAAAk/C,SAAA,CACAC,sBAAA,MACAC,cAAA,IAEAz5B,OAAA,KAKA,IAHA,IAAAu6B,EAAA/hD,KAAAyjB,aAAAuX,mBACAgnB,EAAA,GAEA3iD,EAAA,EAAAA,EAAA0iD,EAAAzhD,OAAAjB,IAAA,CACA,IAAAykB,EAAAi+B,EAAA1vC,GAAAhT,GAEAW,KAAAiiD,2BAAAn+B,EAAA/c,KAAA,UAIA+c,EAAAjO,SAAA,QAAA7V,KAAA2gD,gBAAA78B,GAAA,GACAk+B,EAAAtiD,KAAAokB,EAAAmD,SAAA,KAIA,OAAA3oB,EAAA0jD,IAGAd,OAAAgB,IACA,IAAAC,EAAA7jD,EAAA,qEACA8jD,EAAA9jD,EAAA,UAAAkQ,SAAA2zC,GACAE,EAAA/jD,EAAA,SAAAkQ,SAAA4zC,GAaA,OAXAF,EAAA1zC,SAAA6zC,GAAA/rC,YAAA,YACA4rC,EAAAlnC,SAAA,KAAAhJ,SAAA,OAGAkwC,EAAA5gC,IAAA,CACAghC,cAAAtiD,KAAAkgD,YAAAoB,SAAAhgC,IAAA,eACAihC,gBAAAviD,KAAAkgD,YAAAoB,SAAAhgC,IAAA,iBACAkhC,iBAAAxiD,KAAAkgD,YAAAoB,SAAAhgC,IAAA,kBACAmhC,eAAAziD,KAAAkgD,YAAAoB,SAAAhgC,IAAA,kBAGA6gC,GAGAd,YAAA,KACA,IAAAE,EAAA,GAGAmB,EAAA,GACA1iD,KAAAkgD,YAAAoB,SAAAxrC,KAAA,eAAAtC,MAAA,WACAkvC,EAAAhjD,KAAApB,EAAA0B,MAAA+G,KAAA,WAGA,IAAA,IAAA1H,EAAA,EAAAA,EAAAW,KAAA+oB,SAAAzoB,OAAAjB,IAAA,CAEA,IAAAykB,EAAA9jB,KAAA+oB,SAAA1W,GAAAhT,GACAJ,EAAA6kB,EAAA/c,KAAA,OAEA/G,KAAAiiD,2BAAAhjD,KAIAJ,MAAAsO,QAAAlO,EAAAyjD,IACAnB,EAAA7hD,KAAAokB,IAIA,OAAAy9B,GAGAC,YAAAxhD,KAAAyhD,aAAAn6B,KAAAtnB,MACA0hD,mBAAA1hD,KAAA2hD,oBAAAr6B,KAAAtnB,MACA4hD,WAAA5hD,KAAA2iD,kBAAAr7B,KAAAtnB,UAOA6hD,gBAAA,WACA,GAAA7hD,KAAAigD,WAAA2C,mBAAA5iD,KAAAigD,WAAA2C,kBAAA,KAAA5iD,KAAA8jB,QAAA,GAAA,CAQA,IANA,IAAA++B,EAAA7iD,KAAA8jB,QAEAg/B,EAAA9iD,KAAAigD,WAAA2C,kBAAA77C,KAAA,aACAg8C,EAAA,GAGA1jD,EAAA,EAAAA,EAAAW,KAAAigD,WAAAqB,SAAAhhD,OAAAjB,IAAA,CACA,IAAA2jD,EAAAnkD,MAAA8W,eAAA3V,KAAAigD,WAAAqB,SAAAjiD,IAAA0W,GAEAgtC,EAAArjD,KAAAsjD,GAIA,GAAAD,EAAAziD,OAAA,CACAN,KAAAgqB,eAEAhqB,KAAAygD,uBACAzgD,KAAA4/C,YAAAqD,mBACAjjD,KAAA4/C,YAAAsD,aAAAH,EAAAziD,QACAN,KAAA4/C,YAAAuD,kBAGA,IAAAC,EAAA,GACA,IAAA/jD,EAAA,EAAAA,EAAA0jD,EAAAziD,OAAAjB,IACA+jD,EAAA1jD,KAAA,CACAoH,OAAA,oBACAhH,OAAA,CACA8oC,QAAAma,EAAA1jD,GACAgkD,SAAAP,KAMA,IAAAQ,EAAAC,IACAvjD,KAAA2/C,cAAA6D,eAGA,IAAA,IAAAnkD,EAAA,EAAAA,EAAAkkD,EAAAjjD,OAAAjB,IAAA,CACA,IAAAqL,EAAA64C,EAAAlkD,GAGAqL,EAAA+4C,UACAzjD,KAAA2/C,cAAA+D,UAAA,CACA9a,QAAAl+B,EAAAk+B,QACA+a,kBAAAj5C,EAAAi5C,kBACAC,OAAA,CAAA/jD,QAAA6K,EAAA+4C,SAAAnD,QAAAtgD,KAAAqgD,sBAAAC,WAIA51C,EAAA/C,OACAM,MAAAyC,EAAA/C,OAIA3H,KAAAkqB,oBACAlqB,KAAA4/C,YAAAiE,kBACA,IAAAne,GAAA,EAEAoe,EAAA,WAEA9jD,KAAAyjB,aAAAyL,WAAA2zB,GAGA7iD,KAAA03B,eAAA13B,KAAAigD,WAAAqB,SAAAhhD,OAGA,IAAA,IAAAjB,EAAA,EAAAA,EAAA0jD,EAAAziD,OAAAjB,IACAf,EAAA,YAAAykD,EAAA1jD,GAAA,KAAA+b,SAGApb,KAAAylB,KAAAwP,sBACAj1B,KAAA+jD,8BAAAjB,GAEApd,GACA1lC,KAAA0oB,kBAIA,GAAA1oB,KAAA2/C,cAAAqE,iBAAA,CAkDAhkD,KAAAigD,WAAAgE,iBACAjkD,KAAA2/C,cAAAuE,iBAjDAC,IAIA,IAHA,IAAAC,EAAA,GAGA/kD,EAAA,EAAAA,EAAA8kD,EAAA7jD,OAAAjB,IACA,WAAA8kD,EAAA9kD,GAAAglD,QAKA,aAAAF,EAAA9kD,GAAAglD,QACAD,EAAA1kD,KAAA,CACAoH,OAAA,oBACAhH,OAAA,CACAujD,SAAAP,EACAla,QAAAub,EAAA9kD,GAAAupC,QACAn9B,SAAA04C,EAAA9kD,GAAAskD,qBAKA,YAAAQ,EAAA9kD,GAAAglD,QACAD,EAAA1kD,KAAA,CACAoH,OAAA,oBACAhH,OAAA,CACAujD,SAAAP,EACAla,QAAAub,EAAA9kD,GAAAupC,QACArY,OAAA,MArBAmV,GAAA,EA4BA,IAAA0e,EAAA9jD,OACAwjD,EAAAQ,MAAAtkD,OAGAA,KAAAgqB,eACAhqB,KAAA4/C,YAAAqD,mBACAjjD,KAAA4/C,YAAAsD,aAAAljD,KAAA2/C,cAAAqE,kBACAhkD,KAAA4/C,YAAAuD,kBAGAnjD,KAAAukD,sBAAAH,EAAAd,WAOAQ,EAAAQ,MAAAtkD,MACAA,KAAAigD,WAAAgE,kBAQA,YAHAjkD,KAAAukD,sBAAAnB,EAAAE,SAOAtjD,KAAA8jB,QAAA9R,SAAA,OAEAhS,KAAA+jD,gCAGA/jD,KAAAigD,WAAAuE,2BAMA7B,kBAAA,WAEA,GACA3iD,KAAAkgD,YAAA0C,mBACA,IAAA5iD,KAAAkgD,YAAA0C,kBAAAjvB,SAAA,MAAA3Y,SAAA,MAAAwM,OAAAxnB,KAAAkgD,YAAAoB,UAAAhhD,OACA,CACA,IAAAwiD,EAAA9iD,KAAAkgD,YAAA0C,kBAAA77C,KAAA,aAEA/G,KAAA+jD,8BAAAjB,GAKA,IAFA,IAAA2B,EAAA,GAEAplD,EAAA,EAAAA,EAAAW,KAAAkgD,YAAAoB,SAAAhhD,OAAAjB,IAAA,CACA,IACAgkD,EADArjD,KAAAkgD,YAAAoB,SAAAjvC,GAAAhT,GAAA2b,SAAA,KACAjU,KAAA,aAGA,GAAAs8C,GAAAP,EAAA,CACA2B,EAAA/kD,KAAA2jD,GACA,OAIA,GAAAoB,EAAAnkD,OAAA,CACAmkD,EAAA93C,OACA83C,EAAAhT,UAEAzxC,KAAAgqB,eACAhqB,KAAAygD,uBACAzgD,KAAA4/C,YAAAqD,mBACAjjD,KAAA4/C,YAAAsD,aAAAuB,EAAAnkD,QACAN,KAAA4/C,YAAAuD,kBAEA,IAAAC,EAAA,GAEA,IAAA/jD,EAAA,EAAAA,EAAAolD,EAAAnkD,OAAAjB,IACA+jD,EAAA1jD,KAAA,CACAoH,OAAA,qBACAhH,OAAA,CACAujD,SAAAoB,EAAAplD,GACAqlD,SAAA5B,KAMA9iD,KAAA2kD,YAmBA,IAAAC,EAAA,GAEAC,EAAA,GAEAvB,EAAAC,IACAvjD,KAAA2/C,cAAA6D,eAGA,IAAA,IAAAnkD,EAAA,EAAAA,EAAAkkD,EAAAjjD,OAAAjB,IAAA,CACA,IAAA0H,EAAAw8C,EAAAlkD,GAGA0H,EAAAW,UACAX,EAAA+9C,eACAF,EAAA79C,EAAA+9C,cAGA/9C,EAAAg+C,cACAF,EAAA7kD,KAAAkgD,YAAA0C,kBAAA77C,KAAA,OAAA,WAAAA,EAAAi+C,eAKAj+C,EAAA08C,WACA18C,EAAA68C,OAAA,CACA/jD,QAAAkH,EAAA08C,SACAnD,QAAAtgD,KAAAugD,wBAAAD,SAGAtgD,KAAA2/C,cAAA+D,UAAA38C,IAGAA,EAAAY,OACAM,MAAAlB,EAAAY,OAIA,GAAA3H,KAAA2/C,cAAAqE,iBAAA,CA6CAhkD,KAAA2/C,cAAAuE,iBA3CAC,IACAnkD,KAAA2/C,cAAA6D,eAMA,IAJA,IAAAY,EAAA,GAEAtkD,EAAA,GAEAT,EAAA,EAAAA,EAAA8kD,EAAA7jD,OAAAjB,IACA,WAAA8kD,EAAA9kD,GAAAglD,SAIA,YAAAF,EAAA9kD,GAAAglD,SACAvkD,EAAAywB,OAAA,GAGA,UAAA4zB,EAAA9kD,GAAAglD,SACAvkD,EAAAmlD,OAAA,GAGAnlD,EAAAujD,SAAAt8C,EAAAs8C,SACAvjD,EAAA4kD,SAAA39C,EAAA29C,SAEAN,EAAA1kD,KAAA,CACAoH,OAAA,qBACAhH,OAAAA,KAKA,IAAAskD,EAAA9jD,OACAN,KAAAklD,yBAAAN,EAAAH,EAAAI,IAGA7kD,KAAAgqB,eACAhqB,KAAA4/C,YAAAqD,mBACAjjD,KAAA4/C,YAAAsD,aAAAljD,KAAA2/C,cAAAqE,kBACAhkD,KAAA4/C,YAAAuD,kBAEAnjD,KAAAukD,sBAAAH,EAAAd,MAMAtjD,KAAAkqB,oBACAlqB,KAAA4/C,YAAAiE,uBAEA7jD,KAAAklD,yBAAAN,EAAAH,EAAAI,IAQA,YAHA7kD,KAAAukD,sBAAAnB,EAAAE,SAOAtjD,KAAA8jB,QAAA9R,SAAA,OAEAhS,KAAA+jD,gCAGA/jD,KAAAkgD,YAAAsE,2BAMAU,yBAAA,SAAAN,EAAAO,EAAAN,GACA7kD,KAAAgqB,eACAhqB,KAAA4/C,YAAAqD,mBACAjjD,KAAA4/C,YAAAsD,aAAA,GACAljD,KAAA4/C,YAAAuD,kBAEA,IAAAiC,EAAAD,IAIA,IAFA,IAAAE,EAAA,EACA74B,EAAA24B,EAAA7kD,OACAjB,EAAA,EAAAA,EAAA8lD,EAAA7kD,OAAAjB,IAEAR,MAAAgI,kBAAA,uBAAA,CAAAw8C,SAAA8B,EAAA9lD,IAAA,OACAgmD,IAAA74B,IACAxsB,KAAAkqB,oBACAlqB,KAAA4/C,YAAAiE,kBACA7jD,KAAAkgD,YAAAsE,0BACAxkD,KAAAurB,iBAAA,iBAAAs5B,GACA7kD,KAAA8pB,qBAMA,GAAA86B,EAAAtkD,OAAA,EAAA,CAGA,IAFA,IAAA8iD,EAAA,GAEA/jD,EAAA,EAAAA,EAAAulD,EAAAtkD,OAAAjB,IACA+jD,EAAA1jD,KAAA,CACAoH,OAAA,oBACAhH,OAAA8kD,EAAAvlD,KAGAW,KAAAukD,sBAAAnB,GAAA,WACAgC,EAAAD,WAGAC,EAAAD,IAWAG,eAAA,SAAAxhC,GAEA,IADA,IAAAyhC,GACAA,EAAAvlD,KAAAwlD,iBAAA1hC,KAAAyhC,EAAAjlD,QACAwjB,EAAAyhC,EAEA,OAAAzhC,GAUA0hC,iBAAA,SAAA1hC,GACA,GAAA9jB,KAAA2gD,gBAAA78B,GAAA,EACA,OAAAA,EAAAmD,SAAAA,SAAA0M,SAAA,MAIA8xB,wBAAA,SAAA3C,GAMA,IALA,IAAA4C,EAAA1lD,KAAA2lD,gBAAA7C,GAGA8C,EAAAF,EAAAz+B,SAAA8J,QAAA,MAEA1xB,EAAA,EAAAA,EAAAumD,EAAAtlD,OAAAjB,IAAA,CACA,IAAAwmD,EAAAvnD,EAAAsnD,EAAAvmD,IAEAwmD,EAAAhwC,SAAA,aACAgwC,EAAA7qC,SAAA,WAAA7D,QAAA,SAIAnX,KAAA6pB,aAAA67B,GACA1lD,KAAA0oB,kBAQAJ,UAAA,WACAtoB,KAAAs/C,gBACAt/C,KAAAs/C,cAAAhhD,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,aACAkC,YAAA,SACA2oC,MAAA,wCACAxiD,KAAAzE,MAAAc,EAAA,MAAA,kBAEAK,KAAAyxB,UAAAzxB,KAAAs/C,eAEAt/C,KAAAu/C,aAAAjhD,EAAA,kEAAA4oB,OAAA6+B,aAAA/lD,KAAAs/C,gBAGAt/C,KAAA2/C,cAAA,IAAA9gD,MAAAmnD,cACAhmD,KAAA4/C,YAAA,IAAA/gD,MAAAonD,YAAAjmD,KAAA0jB,OAAA,GAEA,IAAAzc,EAAA,CACA5B,IAAAxG,MAAAuH,aAAA,iBACA8/C,UAAAlmD,KAAAu/C,aACA4G,SAAAnmD,KAAA8S,YAGA7L,EAAAm/C,OAAA,CACAC,gBAAArmD,KAAAsmD,eAAAh/B,KAAAtnB,MACAumD,sBAAAvmD,KAAAwmD,kBAAAl/B,KAAAtnB,MACAymD,eAAAzmD,KAAA0mD,kBAAAp/B,KAAAtnB,OAGAA,KAAAkU,SAAAwT,eAAA,IAAA1nB,KAAAkU,SAAAwT,SAAAi/B,OACA1/C,EAAA2/C,aAAA5mD,KAAAkU,SAAAwT,SAAAi/B,MAGA3mD,KAAAggD,yBAAA/4C,EAEAjH,KAAA0/C,SAAA,IAAA7gD,MAAAgoD,SAAA7mD,KAAAs/C,cAAAr4C,GAEAjH,KAAAs/C,cAAAhoC,GAAA,QAAA,KACAtX,KAAAs/C,cAAAzpC,SAAA,aAGA7V,KAAA2jB,aACA3jB,KAAAs/C,cAAAr4B,SAAAnR,KAAA,6BAAAqB,QAAA,WAIAnX,KAAA6iB,QAGA8G,oBAAA,WAEA,GAAA,UAAA3pB,KAAAkU,SAAA6S,cAAA,IAAAjb,OAAAif,cAAA,CACA,IAAA+7B,EAAAh7C,OAAAif,cAAA7pB,MAAA,KACA6lD,EAAA/mD,KAAA+oB,SAAAi+B,UAAAlxC,KAAAoT,GACA5qB,EAAA4qB,GAAAniB,KAAA,mBAAA+/C,EAAA,IAEA,GAAAC,EAAA,CACA,IAAAjjC,EAAAxlB,EAAAyoD,GAEA,IAAA,IAAA1nD,EAAA,EAAAA,EAAAynD,EAAAxmD,OAAAjB,IAAA,CAEA,IAAA4nD,EAAAjnD,KAAA0zB,iBAAA5P,GAAAkjC,UAAAlxC,KAAAoT,GACA5qB,EAAA,WAAA4qB,GAAA5lB,SAAAwjD,EAAAznD,IAEA,IAAA4nD,EACA,MAEAjnD,KAAAsqB,cAAAxG,GACAA,EAAAxlB,EAAA2oD,GAGA,OAAAnjC,EAAA/c,KAAA,QAIA,OAAA/G,KAAA6iB,QAGAoN,eAAA,WACA,IAAAnM,EAAA9jB,KAAA2lD,gBAAA3lD,KAAA4jB,WACAE,EAAA/c,KAAA,cAEAlF,QAAAmY,QAAAha,KAAA8jB,QAAA,oBACA9jB,KAAA0/C,SAAAwH,UAAA,CACA7D,SAAArjD,KAAA8jB,QAAA1V,KAAA,oBAEApO,KAAAs/C,cAAAhpC,YAAA,aAEAtW,KAAAs/C,cAAAttC,SAAA,YAIA8R,EAAAxjB,QAAA,UAAAN,KAAAkU,SAAA6S,SACA/mB,KAAAmnD,WAAArjC,GAGA9jB,KAAA6iB,QAGAskC,WAAA,SAAArjC,GACA,GAAA,oBAAAqI,QACA,OAIA,IAEAo5B,EAFA6B,EAAA,GACAC,EAAAvjC,EAEA,MAAAyhC,EAAAvlD,KAAAwlD,iBAAA6B,KAAA9B,EAAAjlD,QACA8mD,EAAAp5C,QAAAq5C,GACAA,EAAA9B,EAGA,IAAA57C,EAAA,SACA09C,EAAAtgD,KAAA,mBACA4C,GAAA,IAAA09C,EAAAtgD,KAAA,iBACAqgD,EAAAE,QAAAC,IACA59C,GAAA,IAAA49C,EAAAvsC,SAAA,UAAA1X,UAIA6oB,QAAAC,aAAA,GAAA,GAAAvtB,MAAA+F,OAAA+E,KAGAs4C,2BAAA,SAAAr+B,GACA,IAAA7V,EAAA6V,EAAAle,MAAA,2BAEA,OAAAqI,EAAAA,EAAA,GAAA,MAGAga,eAAA,WAEA,IAAA/nB,KAAAkU,SAAAoJ,aAAAtd,KAAA8jB,QAAA6P,SAAA,MAAArzB,OAAA,CACA,GAAA,OAAAN,KAAAm/C,4BAAA,CACA,IAAAppC,EAAA,qBAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UAEA5R,KAAAm/C,4BAAA7gD,EAAA,oDAAAw5B,YAAA93B,KAAAokB,SACA,IAAAojC,EAAAlpD,EAAA,oCAAAkQ,SAAAxO,KAAAm/C,6BACAn/C,KAAAo/C,2BAAA9gD,EAAA,8BAAAyX,EAAA,wBAAAvH,SAAAg5C,GACAlpD,EAAA,uCAAAyX,EAAA,OAAAzS,KAAA,IAAAzE,MAAAc,EAAA,MAAA,yBAAA6O,SAAAg5C,GAEAxnD,KAAAqd,YAAArd,KAAAo/C,2BAAA,UAAA,WACAp/C,KAAA2rB,wBAAA,oBAAA3rB,KAAAo/C,2BAAA/mB,KAAA,YACAr4B,KAAA0oB,yBAGA1oB,KAAAm/C,4BAAA3mC,SAAA,QAGA,IAAAivC,EAAAznD,KAAA0rB,uBAAA,qBAAA,GACA1rB,KAAAo/C,2BAAA/mB,KAAA,UAAAovB,GAEAznD,KAAAm/C,4BAAA3mC,SAAA,CACAkvC,aAAA,EACArrB,QAAA,GACA,QAEAr8B,KAAAq/C,kCAAA,EAGAr/C,KAAA6iB,QAGAmF,cAAA,WACAhoB,KAAAq/C,mCACAr/C,KAAAm/C,4BAAA3mC,SAAA,QAEAxY,KAAAm/C,4BAAA3mC,SAAA,CACAkvC,cAAA,GACArrB,QAAA,GACA,QAEAr8B,KAAAq/C,kCAAA,GAGAr/C,KAAA6iB,QAGAyJ,cAAA,WACA,IAAAvlB,EAAA/G,KAAA6iB,OAMA,OAJA7iB,KAAAq/C,kCAAAr/C,KAAAo/C,2BAAA/mB,KAAA,aACAtxB,EAAA2gB,SAAAigC,mBAAA,GAGA5gD,GAQAu/C,eAAA,WACAtmD,KAAAgqB,eAGAhqB,KAAAygD,uBACAzgD,KAAA4/C,YAAAqD,mBACAjjD,KAAA4/C,YAAAuD,kBAEAnjD,KAAA2/C,cAAA6D,gBAMAgD,kBAAA,SAAA7nC,EAAA5X,GACA,IAAA6gD,EAAAzlD,SAAA4E,EAAA8gD,OAAA9gD,EAAAktB,MAAA,IAAA,IACAj0B,KAAA4/C,YAAAkI,sBAAAF,IAMAlB,kBAAA,SAAA/nC,EAAA5X,GACA,IAAA2D,EAAA3D,EAAA4K,OACAlG,EAAA1E,EAAAghD,MAAA,GAAA7iD,KAEA8iD,GAAA,EAEAt9C,EAAAhD,SAAAgD,EAAA+4C,UAEAzjD,KAAA+/C,kBAAArgD,KAAAgL,EAAAk+B,SAGAl+B,EAAA+4C,WACA/4C,EAAAk5C,OAAA,CACA/jD,QAAAhB,MAAAc,EAAA,MAAA+K,EAAA+4C,SAAA,CAAAwE,KAAAv9C,EAAAe,WACA60C,QAAAtgD,KAAAqgD,sBAAAC,SAGAtgD,KAAA2/C,cAAA+D,UAAAh5C,IAGA7L,MAAAkJ,GAAA0a,aAEA/X,EAAA/C,MACAM,MAAApJ,MAAAc,EAAA,MAAA,kDAAA,CAAAgI,MAAA+C,EAAA/C,SAEAM,MAAApJ,MAAAc,EAAA,MAAA,gCAAA,CAAA8L,SAAAA,KAGAu8C,GAAA,GAIAhoD,KAAA0/C,SAAAwI,iBACAloD,KAAAkqB,oBACAlqB,KAAA4/C,YAAAiE,kBAEA7jD,KAAA2/C,cAAAqE,iBACAhkD,KAAA2/C,cAAAuE,iBAAAlkD,KAAAmoD,gBAAA7gC,KAAAtnB,OAEAgoD,GACAhoD,KAAAooD,uBAWAA,mBAAA,WACA,UAAApoD,KAAAkU,SAAA6S,UACA/mB,KAAAqrB,iBAAA,gBACArrB,KAAA8uB,iBAAA,SAEA9uB,KAAA0oB,kBASAy/B,gBAAA,SAAAhE,GACAnkD,KAAAgqB,eACAhqB,KAAA4/C,YAAAqD,mBAEAjjD,KAAA2/C,cAAA6D,eAQAxjD,KAAA4/C,YAAAsD,aAAAiB,EAAA7jD,QAEA,IAAA+nD,EAAA,CAAAjF,EAAAkF,EAAAthD,KACA,IAAAkvC,EAAA,GACApvC,EAAA,KAEAyhD,EAAA,CAAAxhD,EAAAa,KACA,YAAAA,GAAAb,EAAA6hC,QACA5oC,KAAA+/C,kBAAArgD,KAAAqH,EAAA6hC,SACA7hC,EAAAY,OACAM,MAAAlB,EAAAY,OAEA2gD,IACAtoD,KAAA4/C,YAAA4I,4BAAA,GACAxoD,KAAA4/C,YAAA6I,oBAEAH,IAAAlF,EAAA9iD,OACA0G,IAEAqhD,EAAAjF,EAAAkF,EAAAthD,IAIA,YAAAo8C,EAAAkF,GAAAjE,QACAv9C,EAAA,sBACAovC,EAAAwS,cAAAtF,EAAAkF,GAAA1f,QAEAwa,EAAAkF,GAAAK,mBACAzS,EAAAtN,QAAAwa,EAAAkF,GAAAK,mBAEAzS,EAAA0S,eAAAxF,EAAAkF,GAAA78C,UAEA,WAAA23C,EAAAkF,GAAAjE,SACAv9C,EAAA,sBACAovC,EAAAtN,QAAAwa,EAAAkF,GAAA1f,SAGA9hC,EAIAjI,MAAAgI,kBAAAC,EAAAovC,EAAAqS,GAFAA,EAAA,CAAA3f,QAAAwa,EAAAkF,GAAA1f,SAAA,YAMA5oC,KAAA4/C,YAAAuD,kBACAkF,EAAAlE,EAAA,EApDA,KACAnkD,KAAAkqB,oBACAlqB,KAAA4/C,YAAAiE,kBACA7jD,KAAAooD,wBAwDAj2B,iBAAA,WACAnyB,KAAA6oD,mBAAA,EAAA7oD,KAAAylB,KAAA+S,kBACAx4B,KAAAylB,KAAAnO,GAAA,iBAAAC,IACAvX,KAAA6oD,mBAAA,EAAAtxC,EAAAoiB,eAGA35B,KAAA6iB,QAOAgmC,kBAAA,SAAAt2C,EAAAinB,GAUA,GATA,UAAAx5B,KAAAkU,SAAA6S,UACAxU,GACAvS,KAAAigD,WAAAl2B,iBAGA/pB,KAAAigD,WAAA91B,SAAAqP,EAAA0G,IAAA,+BAIAlgC,KAAA+/C,kBAAAz/C,OAAA,CACA,GAAAN,KAAAylB,KAAAvR,SAAAihB,WACA,IAAA,IAAA91B,EAAA,EAAAA,EAAAW,KAAA+/C,kBAAAz/C,OAAAjB,IACAW,KAAAylB,KAAA6P,kBAAAt1B,KAAA+/C,kBAAA1gD,IAKAW,KAAA+/C,kBAAA,GAGA//C,KAAA6iB,KAAAtQ,EAAAinB,GAEAx5B,KAAA4qB,eAAA5qB,KAAAqlB,UAAA,WACArlB,KAAAqd,YAAArd,KAAAqlB,UAAA,UAAArlB,KAAA8oD,WAAAxhC,KAAAtnB,OACAA,KAAAylB,KAAA+R,cAAAlgB,GAAA,YAAAtX,KAAA+oD,gBAAAzhC,KAAAtnB,QAOA8oD,WAAA,SAAAvxC,GACA,GAAAA,EAAAC,UAAA3V,QAAAqzB,WAAA3d,EAAAI,SAAA,CACA,GAAA9Y,MAAAwnC,iBAAA2iB,aACAnqD,MAAAwnC,iBAAA2iB,aAAAC,mBACA,CACA,IAAArzC,EAAA5V,KAAAylB,KAAA+R,cAAA0xB,aAAApzC,KAAA,YAEAF,EAAAtV,QACAN,KAAAmpD,aAAAvzC,GAKA,OADA2B,EAAAM,mBACA,IAQAkxC,gBAAA,SAAAxxC,GACA,IAAA3B,EAAAtX,EAAAiZ,EAAA+c,MAAAxe,KAAA,YAEAjX,MAAAwnC,iBAAA2iB,cAAApzC,EAAAtV,QACAN,KAAAmpD,aAAAvzC,IAQAuzC,aAAA,SAAAvzC,GACA,IAAA1B,EAAA,GAEA0B,EAAA7O,KAAA,iBACAmN,EAAAiyB,cAAAvwB,EAAA7O,KAAA,eACAmN,EAAAkyB,eAAAxwB,EAAA7O,KAAA,iBAGA,IAAAlI,MAAAwnC,iBAAAzwB,EAAA7O,KAAA,MAAA/G,KAAAylB,KAAA+R,cAAAtjB,IAMAutC,aAAA,WACAzhD,KAAAogD,qBAAA,IAMAgB,mBAAA,SAAAxrC,GACA,IACAwzC,EACAC,EAEA,OAJArpD,KAAA0rB,uBAAA,SAKA,IAAA,QACA09B,EAAA9qD,EAAA,+CAAAkQ,SAAA3M,QAAA+Q,MACAy2C,EAAA/qD,EAAA,4BAAAkQ,SAAA46C,GACA,IAAA/lB,EAAA/kC,EAAA,yBAAAkQ,SAAA66C,GACApqB,EAAA3gC,EAAA,YAAAkQ,SAAA60B,GAEAztB,EAAApH,SAAAywB,GAGAj/B,KAAAspD,gBAAAtpD,KAAAylB,KAAA4d,OAAAroB,SAAA,SAAAA,SAAA,YAAAA,WAGA,IAFA,IAAAuuC,EAAA3zC,EAAAoF,WAEA3b,EAAA,EAAAA,EAAAkqD,EAAAjpD,OAAAjB,IAAA,CAEA,IAAAmqD,EAAAlrD,EAAAirD,EAAAlqD,IAGA,GAAAmqD,EAAA3zC,SAAA,iBACA2zC,EAAApuC,SACAguC,EAAA9nC,IAAA,UAAAziB,MAAA4Z,KAAA,QAFA,CAMA,IAAAgxC,EAAAnrD,EAAA0B,KAAAspD,gBAAAjqD,IACAqsC,EAAA+d,EAAA/d,QAEA+d,EAAA/d,MAAAA,GACA8d,EAAA9d,MAAAA,IAGA,OAAA0d,EAEA,IAAA,SAMA,OALAA,EAAA9qD,EAAA,2CAAAkQ,SAAA3M,QAAA+Q,MACAy2C,EAAA/qD,EAAA,4BAAAkQ,SAAA46C,GAEAxzC,EAAApH,SAAA66C,GAEAD,EAIA,OAAA9qD,KAMAqjD,oBAAA,SAAA+H,GAGA,GAFAzhC,aAAAjoB,KAAAmgD,gCAEAuJ,EAAA,CACA,IAAArG,EAAAqG,EAAA3iD,KAAA,aAEAs8C,GACArjD,KAAA2pD,iBAAA3pD,KAAA2lD,gBAAAtC,GAEArjD,KAAA4pD,eAAA5pD,KAAA2pD,oBAAA3pD,KAAA6pD,YAAA7pD,KAAA2pD,oBACA3pD,KAAAmgD,+BAAAj4B,WAAAloB,KAAA8pD,cAAAxiC,KAAAtnB,MAAA,OAGAA,KAAA2pD,iBAAA,KAIAD,GAAAA,EAAA,KAAA1pD,KAAA8jB,QAAA,GAEA9jB,KAAA8jB,QAAAxN,YAAA,OAEAtW,KAAA8jB,QAAA9R,SAAA,QAOA+xC,8BAAA,SAAAgG,GAIA,IAAAC,EAHA/hC,aAAAjoB,KAAAmgD,gCAKA4J,IACAC,EAAAhqD,KAAA2lD,gBAAAoE,GAAAh5B,QAAA,MAAA/V,SAAA,MAGA,IAAA,IAAA3b,EAAAW,KAAAogD,qBAAA9/C,OAAA,EAAAjB,GAAA,EAAAA,IAAA,CACA,IAAAykB,EAAA9jB,KAAAogD,qBAAA/gD,QAGA,IAAA2qD,GAAA,IAAAA,EAAAxiC,OAAA,cAAA1D,EAAA/c,KAAA,OAAA,MAAAzG,SACAN,KAAAiqD,gBAAAnmC,GACA9jB,KAAAogD,qBAAA5wC,OAAAnQ,EAAA,MAKAsmD,gBAAA,SAAA1mD,GACA,OAAAe,KAAA+oB,SAAAvB,OAAA,eAAAvoB,EAAA,OAGA2qD,eAAA,SAAA9lC,GACA,OAAAA,EAAA6P,SAAA,MAAA7d,KAAA,MAAAxV,QAGAupD,YAAA,SAAA/lC,GACA,OAAAA,EAAAmD,OAAA,MAAApR,SAAA,aAGAi0C,cAAA,WAEA9pD,KAAA+jD,8BAAA/jD,KAAA2pD,iBAAA5iD,KAAA,cAEA/G,KAAA2pD,iBAAAh2B,SAAA,WAAAxc,QAAA,SAGAnX,KAAAogD,qBAAA1gD,KAAAM,KAAA2pD,mBAGAM,gBAAA,SAAAnmC,GACAA,EAAAmD,SAAApR,SAAA,aACAiO,EAAA6P,SAAA,WAAAxc,QAAA,UAIAupC,yBAAA,SAAA58B,GAEA,GAAA9jB,KAAAiiD,2BAAAn+B,EAAA/c,KAAA,QAAA,CAIA,IAAAmjD,EAAA,CACA,CACAj0C,MAAApX,MAAAc,EAAA,MAAA,iBACAwqD,QAAA,KACAnqD,KAAAoqD,iBAAAtmC,MAMA,UAAA9jB,KAAAkU,SAAA6S,SAAA/mB,KAAA2gD,gBAAA78B,GAAA,IACAomC,EAAAxqD,KAAA,CACAuW,MAAApX,MAAAc,EAAA,MAAA,iBACAwqD,QAAA,KACAnqD,KAAAqqD,cAAAvmC,MAGAomC,EAAAxqD,KAAA,CACAuW,MAAApX,MAAAc,EAAA,MAAA,iBACAwqD,QAAA,KACAnqD,KAAAsqD,cAAAxmC,OAKA,IAAAjiB,QAAA0oD,YAAAzmC,EAAAomC,EAAA,CAAAM,UAAA,WAGAJ,iBAAA,SAAAK,GACA,IAAAC,EAAA9G,OAAA/kD,MAAAc,EAAA,MAAA,iCAEA,GAAA+qD,EAAA,CACA,IAAA5qD,EAAA,CACA4kD,SAAA+F,EAAA1jD,KAAA,aACA4jD,WAAAD,GAGA1qD,KAAAgqB,eAEAnrB,MAAAgI,kBAAA,uBAAA/G,EAAA,CAAAiH,EAAAa,KAGA,GAFA5H,KAAAkqB,oBAEA,YAAAtiB,GAAAb,EAAAW,QAAA,CACA1H,KAAA4qD,0BAAAH,GAEA,IAAAI,EAAAvsD,EACA,oBACAmsD,EAAA1jD,KAAA,OAAA,WAAAA,EAAA+jD,UAAA,KACAjpD,QAAAmY,QAAAywC,EAAA,mBAAA,mBAAA,IACA,oBAAA1jD,EAAAs8C,SAAA,KACAxhD,QAAAmY,QAAAywC,EAAA,mBAAA,mBAAA,KACA5oD,QAAAmY,QAAAywC,EAAA,oBAAA,oBAAA,KACA5oD,QAAAmY,QAAAywC,EAAA,+BAAA,+BAAA,IACA,IACA1jD,EAAA4jD,WARA,aAaAzoC,EAAA2oC,EAAA7vC,SAAA,WACAhb,KAAA+qD,iBAAAN,EAAAI,GACA7qD,KAAA0pB,WAAAxH,GAGA,YAAAta,GAAAb,EAAAY,OACAM,MAAAlB,EAAAY,WAMA2iD,cAAA,SAAAU,GACA,GAAAj0C,QAAAlY,MAAAc,EAAA,MAAA,mCAAA,CAAAsrD,OAAA3sD,EAAA8C,KAAA4pD,EAAA1nD,WAAA,CACA,IAAAxD,EAAA,CACAujD,SAAA2H,EAAAjkD,KAAA,cAGA/G,KAAAgqB,eAEAnrB,MAAAgI,kBAAA,uBAAA/G,EAAA,CAAAiH,EAAAa,KAGA,GAFA5H,KAAAkqB,oBAEA,YAAAtiB,GAAAb,EAAAW,QAAA,CACA,IAAA+iD,EAAAzqD,KAAAwlD,iBAAAwF,GAGAhrD,KAAA0qB,aAAAsgC,GAEAA,EAAA/jC,SAAA7L,SACApb,KAAAkrD,aAAAT,GAGA,YAAA7iD,GAAAb,EAAAY,OACAM,MAAAlB,EAAAY,WASA0iD,cAAA,SAAAvmC,GACA,MAAAqnC,EAAArnC,EAAA9I,SAAA,UACAowC,EAAAvsD,MAAAuC,KAAA+pD,EAAA7nD,QACA+nD,EAAAzH,OAAA/kD,MAAAc,EAAA,MAAA,iBAAAyrD,GAEAC,GAAAA,IAAAD,IAIAprD,KAAAgqB,eAEAnrB,MAAAiK,kBAAA,OAAA,uBAAA,CACA/B,KAAA,CACAs8C,SAAAv/B,EAAA/c,KAAA,aACAskD,QAAAA,KAEA7hD,KAAAkB,IACAA,EAAA3D,KAAAW,SACAyjD,EAAA7nD,KAAAoH,EAAA3D,KAAAskD,SAGAvnC,EAAA/c,KAAA,SAAA/G,KAAA8jB,QAAA/c,KAAA,SACA/G,KAAA0oB,iBAGA,UAAA1oB,KAAAkU,SAAA6S,SACA/mB,KAAAmnD,WAAArjC,KAGApZ,EAAA3D,KAAAY,OACAM,MAAAyC,EAAA3D,KAAAY,SAEA2jD,QAAA,KACAtrD,KAAAkqB,wBAUA0gC,0BAAA,SAAAH,GACAzqD,KAAA4pD,eAAAa,KACAA,EAAAxjC,SAAAjV,SAAA,YAAAO,OAAA,uCACAvS,KAAAoqB,iBAAAqgC,KAWAM,iBAAA,SAAAN,EAAAI,GAMA,IALA,IACAU,EADAd,EAAA92B,SAAA,MACA3Y,SAAA,MACAwwC,EAAAltD,EAAA8C,KAAAypD,EAAA7vC,SAAA,WAAA1X,QACAmoD,GAAA,EAEApsD,EAAA,EAAAA,EAAAksD,EAAAjrD,OAAAjB,IAAA,CACA,IAAAqsD,EAAAptD,EAAAitD,EAAAlsD,IAEA,GAAAf,EAAA8C,KAAAsqD,EAAA1wC,SAAA,WAAA1X,QAAAkoD,EAAA,CACAE,EAAAC,OAAAd,GACAY,GAAA,EACA,OAIAA,GACAhB,EAAA92B,SAAA,MAAAphB,OAAAs4C,IAIAK,aAAA,SAAAT,GACA,OAAAA,GAAA,IAAAA,EAAA92B,SAAA,MAAA3Y,SAAA,MAAA1a,SACAN,KAAAuqB,mBAAAkgC,GACAA,EAAA92B,SAAA,MAAAvY,SACAqvC,EAAA92B,SAAA,WAAAvY,SACAqvC,EAAAxjC,SAAA3Q,YAAA,cAIAmqC,qBAAA,WACAzgD,KAAA4/C,cACA5/C,KAAA4/C,YAAA,IAAA/gD,MAAAonD,YAAAjmD,KAAA0jB,OAAA,IAGA,IAAA5Q,EAAAxU,IACA8iB,EAAA,EACApf,EAAA,EAEA,UAAAhC,KAAAkU,SAAA6S,SACAjU,EAAA9S,KAAA4/C,YAAAJ,aAAAjlC,QAAA,YACA6G,EAAAvf,QAAA8e,KAAAS,cAEAtO,EAAA9S,KAAA4/C,YAAAJ,aAAAjlC,QAAA,SACA6G,EAAAphB,KAAA0jB,MAAAtC,aAGA,IACA29B,EAAA39B,EADAtO,EAAA9Q,SAAAo3B,IAEAwyB,EAAA/pD,QAAA8e,KAAA0M,SAGArrB,EADA8Q,EAAAua,SAAAu+B,EACAA,EAAA,EAAA,EAAA7M,EAEAjsC,EAAAua,SAAA,EAAA,EAGA,UAAArtB,KAAAkU,SAAA6S,UACA/kB,EAAAof,GAAAtO,EAAAua,SAAA,EAAA,IAGArtB,KAAA4/C,YAAAJ,aAAAl+B,IAAA,CACA8X,IAAAp3B,KAIAuiD,sBAAA,SAAAnB,EAAAyI,GAqBA,IApBA,IAAAtI,EAAA,GAEAuI,EAAAC,IACAltD,MAAAgI,kBAAAklD,EAAAjlD,OAAAilD,EAAAjsD,OAAA,CAAAiH,EAAAa,KACA5H,KAAA4/C,YAAA4I,4BAAA,GACAxoD,KAAA4/C,YAAA6I,oBAEA,YAAA7gD,IACA27C,EAAA7jD,KAAAqH,GAGAlI,MAAAkJ,GAAA0a,YAGA8gC,EAAAjjD,QAAA8iD,EAAA9iD,QACAurD,EAAAtI,MAKAlkD,EAAA,EAAAA,EAAA+jD,EAAA9iD,OAAAjB,IACAysD,EAAA1I,EAAA/jD,OAMAR,MAAA+U,0BAAA,yBAAA/U,MAAAqgD,YCt9CArgD,MAAAmtD,iBAAAntD,MAAA+6B,uBAAAh7B,OAAA,CACA+lD,UAAA,EACAsH,IAAA,KACAC,WAAA,KACAxM,SAAA,KACAE,YAAA,KAEA5iC,KAAA,WACAhd,KAAA6iB,KAAAyhC,MAAAtkD,KAAAo6B,WAEAp6B,KAAAkU,SAAAi4C,WACAnsD,KAAAosD,kBAGApsD,KAAAqd,YAAArd,KAAA+5B,mBAAA,UAAA/5B,KAAA8oD,WAAAxhC,KAAAtnB,OACAA,KAAAw3B,cAAAlgB,GAAA,YAAAtX,KAAA+oD,gBAAAzhC,KAAAtnB,QAOA8oD,WAAA,SAAAvxC,GACA,GAAAA,EAAAC,UAAA3V,QAAAqzB,WAAA3d,EAAAI,SAAA,CACA,GAAA9Y,MAAAwnC,iBAAA2iB,aACAnqD,MAAAwnC,iBAAA2iB,aAAAC,mBACA,CACA,IAAArzC,EAAA5V,KAAAw3B,cAAA0xB,aAEAtzC,EAAAtV,QACAN,KAAAmpD,aAAAvzC,GAMA,OAFA2B,EAAAM,mBAEA,IAQAkxC,gBAAA,SAAAxxC,GACA,IAAA3B,EAAAtX,EAAAiZ,EAAA+c,MAEAz1B,MAAAwnC,iBAAA2iB,cAAApzC,EAAAtV,QACAN,KAAAmpD,aAAAvzC,IAQAuzC,aAAA,SAAAvzC,GACA,IAAA1B,EAAA,GAEA0B,EAAA7O,KAAA,iBACAmN,EAAAiyB,cAAAvwB,EAAA7O,KAAA,eACAmN,EAAAkyB,eAAAxwB,EAAA7O,KAAA,iBAGA,IAAAlI,MAAAwnC,iBAAAzwB,EAAA7O,KAAA,MAAA/G,KAAAw3B,cAAAtjB,IAMAI,oBAAA,SAAAsB,GACA,OAAA5V,KAAA6iB,KAAAjN,EAAA,CACA9V,OAAA,CACAusD,qBAAArsD,KAAAkU,SAAAm4C,sBAEAhoD,MAAArE,QAOAosD,gBAAA,WACApsD,KAAA4/C,YAAA,IAAA/gD,MAAAonD,YAAA3nD,EAAA,sCAAAkQ,SAAAxO,KAAA8S,aAEA,IAAA7L,EAAA,CACA5B,IAAAxG,MAAAuH,aAAA,iBACA+/C,SAAAnmD,KAAA8S,WACAw5C,SAAA,CACA1tB,QAAA5+B,KAAAkU,SAAA0qB,UAIA5+B,KAAAkU,SAAAqpB,kBACAt2B,EAAAqlD,SAAA5wC,UAAA1b,KAAAkU,SAAAqpB,iBAGAv9B,KAAAkU,SAAAwT,SAAA1R,SACA/O,EAAAqlD,SAAAt2C,OAAAhW,KAAAkU,SAAAwT,SAAA1R,QAGAhW,KAAAg6B,iBACAh6B,KAAAksD,WAAA5tD,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,aACAkC,YAAA,SACA7Z,KAAA,GAAAtD,KAAAkU,SAAAsY,MAAA3tB,MAAAc,EAAA,MAAA,iBAAAd,MAAAc,EAAA,MAAA,kBACAm4B,YAAA93B,KAAAg6B,gBACA/yB,EAAAi/C,UAAA5nD,EAAA,WAAA,CACAgD,KAAA,OACA2Z,MAAA,SACAsxC,SAAA,GAAAvsD,KAAAkU,SAAAsY,QACAsL,YAAA93B,KAAAksD,YAGArqD,QAAA8e,KAAAxJ,QAAA,gBAIA,IAAAtY,MAAA8H,oBAAA,IAAA9H,MAAA+H,iBAEAK,EAAAqlD,SAAAztD,MAAA8H,eAAA9H,MAAA+H,qBAGA,IAAA5G,KAAAkU,SAAAwT,SAAAi/B,OACA1/C,EAAA2/C,aAAA5mD,KAAAkU,SAAAwT,SAAAi/B,MAGA1/C,EAAAulD,gBAAAxsD,KAAAwsD,gBAAAllC,KAAAtnB,MAEAiH,EAAAm/C,OAAA,GACAn/C,EAAAm/C,OAAAC,gBAAArmD,KAAAsmD,eAAAh/B,KAAAtnB,MACAiH,EAAAm/C,OAAAG,sBAAAvmD,KAAAwmD,kBAAAl/B,KAAAtnB,MACAiH,EAAAm/C,OAAAK,eAAAzmD,KAAA0mD,kBAAAp/B,KAAAtnB,MAEAA,KAAA0/C,SAAA,IAAA7gD,MAAAgoD,SAAA7mD,KAAA8S,WAAA7L,GAEAjH,KAAAksD,YACAlsD,KAAAksD,WAAA50C,GAAA,QAAAC,IAGAvX,KAAAksD,WAAAzxC,KAAA,oBAAAtD,QAAA,YAKAyuB,eAAA,SAAAlqB,EAAA+wC,GACA,IAAAV,EAAA,CACArwC,UAAA+wC,EACAz2C,OAAAhW,KAAAkU,SAAAwT,SAAA1R,OACAI,KAAApW,KAAAkU,SAAAsR,UAGA3mB,MAAAgI,kBAAA,4BAAAklD,EAAAhlD,IACA,GAAAA,EAAAY,MACAM,MAAAlB,EAAAY,WACA,CACA,IAAA+kD,EAAA1sD,KAAAqlB,UAAAmC,OAAA,aAAA9L,EAAA,MACA1b,KAAAi8B,cAAAywB,GACA,IAAA/uB,EAAA9+B,MAAA8W,eAAA5O,EAAArI,MACAsB,KAAAy9B,eAAA,CAAAE,QAKAkI,iBAAA,SAAAnqB,GACA,IAAAqwC,EAAA,CACArwC,UAAAA,EACA1F,OAAAhW,KAAAkU,SAAAwT,SAAA1R,OACAI,KAAApW,KAAAkU,SAAAsR,UAGA3mB,MAAAgI,kBAAA,4BAAAklD,EAAAhlD,IACA,GAAAA,EAAAY,MACAM,MAAAlB,EAAAY,WACA,CACA,IAAA+kD,EAAA1sD,KAAAqlB,UAAAmC,OAAA,aAAA9L,EAAA,MACAgxC,EAAA52C,KAAA,iBAAAa,YAAArY,EAAAyI,EAAArI,MAAAoX,KAAA,kBACA9V,KAAAu3B,YAAA3Y,KAAA8tC,OAQAC,mBAAA,SAAAp4C,GAEA,GAAAvU,KAAAy7B,qBAAA,CAIA,IAAAmxB,EAAAr4C,EAAAqB,SAGAg3C,EAAA56C,SAAA,aACA46C,EAAA3uB,QAAA,8BAAAj+B,KAAAkU,SAAAhP,KAAA,cAAAqP,EAAAwB,GAAA,mCACAlX,MAAAc,EAAA,MAAA,UAAA,UAEAitD,EAAAp+C,SAAAxO,KAAA+5B,oBAEA,IAAA8yB,IAAAD,EAAAtwB,aAAA,IAEAt8B,KAAAg6B,eAAA1Y,IAAA,UAAAziB,MAAA4Z,KAAAo0C,EAAA,MAEA,IAAAzwB,EAAA,GACAA,EAAA,UAAAv9B,MAAA4Z,MAAA,EACAzY,KAAAg6B,eAAAxhB,SAAA4jB,EAAA,QAEAp8B,KAAA87B,YAAA8wB,UAEA5sD,KAAA+xB,QAMAu0B,eAAA,WACAtmD,KAAA4/C,YAAAJ,aAAAl+B,IAAA,CACA8X,IAAAvoB,KAAAK,MAAAlR,KAAA8S,WAAAumB,cAAA,GAAA,IAGAr5B,KAAA8S,WAAAd,SAAA,aACAhS,KAAA4/C,YAAAqD,mBACAjjD,KAAA4/C,YAAAuD,mBAMAqD,kBAAA,SAAA7nC,EAAA5X,GACA,IAAA6gD,EAAAzlD,SAAA4E,EAAA8gD,OAAA9gD,EAAAktB,MAAA,IAAA,IACAj0B,KAAA4/C,YAAAkI,sBAAAF,IAMAlB,kBAAA,SAAA/nC,EAAA5X,GACA,GAAAA,EAAA4K,OAAAhK,MACAM,MAAAlB,EAAA4K,OAAAhK,WACA,CACA,IAAAokD,EAAA,CACArwC,UAAA3U,EAAA4K,OAAAi3B,QACA5yB,OAAAhW,KAAAkU,SAAAwT,SAAA1R,OACAI,KAAApW,KAAAkU,SAAAsR,UAGA3mB,MAAAgI,kBAAA,4BAAAklD,EAAAhlD,IACA,GAAAA,EAAAY,MACAM,MAAAlB,EAAAY,WACA,CACA,IAAAjJ,EAAAJ,EAAAyI,EAAArI,MACAG,MAAAqT,eAAAnL,EAAAia,UACAhhB,KAAA2sD,mBAAA9tD,MAAA8W,eAAAjX,IAIAsB,KAAA0/C,SAAAwI,iBACAloD,KAAA4/C,YAAAiE,kBACA7jD,KAAA8S,WAAAwD,YAAA,aAEAxK,OAAAywB,aACAzwB,OAAAywB,YAAAoC,eAKA9/B,MAAAkJ,GAAA0a,aAOA+pC,gBAAA,SAAAM,GACA,OAAA9sD,KAAAkU,SAAAsY,OAAAxsB,KAAAqlB,UAAA/kB,OAAAwsD,EAAA9sD,KAAAkU,SAAAsY,SCpRA3tB,MAAAkuD,mBAAAluD,MAAAwV,yBAAAzV,OAAA,CACAouD,oBAAA,KACAC,mBAAA,KAEAjwC,KAAA,SAAAnJ,EAAAK,GACAA,EAAA5V,EAAAM,OAAA,GAAAC,MAAAkuD,mBAAA9vC,SAAA/I,GAEAlU,KAAA6iB,KAAAhP,EAAAK,GAEAA,EAAAg5C,WAAA5sD,QACAN,KAAAmtD,4BAAAj5C,EAAAg5C,aAIAC,4BAAA,SAAAD,GACA,GAAAA,GAAAA,EAAA5sD,OAAA,CAIA,IAAA8sD,EAAA9uD,EAAA,2BAAAkQ,SAAAxO,KAAAk/B,iBACAl/B,KAAA++B,WAAAvwB,SAAA4+C,GAEAptD,KAAAgtD,oBAAA1uD,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,uBACA3X,KAAAzE,MAAAc,EAAA,MAAA,sBACA6O,SAAA4+C,GAKA,IAHA,IAAAr3B,EAAAz3B,EAAA,+CAAAw5B,YAAA93B,KAAAgtD,qBACAK,EAAA/uD,EAAA,aAAAkQ,SAAAunB,GAEA12B,EAAA,EAAAA,EAAA6tD,EAAA5sD,OAAAjB,IACAf,EAAA,0BAAA4uD,EAAA7tD,GAAA84B,OAAA,KAAA+0B,EAAA7tD,GAAA6F,KAAA,aAAAsJ,SAAA6+C,GAGA,IAAAC,EAAA,IAAAzrD,QAAA8Y,QAAA3a,KAAAgtD,oBAAA,CACAO,eAAAvtD,KAAAwtD,kBAAAlmC,KAAAtnB,QAEAstD,EAAA10C,UAEA5Y,KAAAgtD,oBAAAjmD,KAAA,aAAAumD,KAGA9jC,kBAAA,SAAAjS,GACA,IAAAkhB,EAAAz4B,KAAAkjB,aAAAsL,sBACAi/B,GAAA,EAEA,GAAAh1B,EAAAn4B,QAAAN,KAAAkU,SAAAg5C,WAAA5sD,OAAA,CACAmtD,GAAA,EAEA,IAAA,IAAApuD,EAAA,EAAAA,EAAAo5B,EAAAn4B,QACAhC,EAAA,0BAAAm6B,EAAAp5B,IAAAiB,OADAjB,MAOA,IAAAsb,EAAA,KAEA3a,KAAAgtD,sBACAryC,EAAA3a,KAAAgtD,oBAAAjmD,KAAA,eAGA0mD,GACA9yC,GACAA,EAAA5B,SAGA/Y,KAAAgtD,oBAAA12C,YAAA,aACAtW,KAAAgtD,sBACAryC,GACAA,EAAA/B,UAGA5Y,KAAAgtD,oBAAAh7C,SAAA,aAGAhS,KAAA6iB,QAGA2qC,kBAAA,SAAAh7B,GACA,IAAAk7B,EAAApvD,EAAAk0B,GAAAzrB,KAAA,aACA/G,KAAA2tD,0BAAAD,IAGAC,0BAAA,SAAAD,QAEA,IAAA7uD,MAAAkuD,mBAAAa,cAAAF,KACA7uD,MAAAkuD,mBAAAa,cAAAF,GAAA,IAMA,IAHA,IAAAj1B,EAAAz4B,KAAAkjB,aAAAsL,sBACAq/B,EAAA,GAEAxuD,EAAA,EAAAA,EAAAo5B,EAAAn4B,OAAAjB,IAAA,CACA,IAAAyuD,EAAAxvD,EAAAm6B,EAAAp5B,IACAqc,EAAA7c,MAAA8W,eAAAm4C,GAAA/3C,QAEA,IAAAlX,MAAAkuD,mBAAAa,cAAAF,GAAAhyC,IACAmyC,EAAAnuD,KAAAgc,GAIAmyC,EAAAvtD,QACAN,KAAA4/B,oBAEA5/B,KAAA+tD,0BAAAF,EAAAH,EAAA,KACA1tD,KAAA6/B,oBACA7/B,KAAA2tD,0BAAAD,OAGA1tD,KAAAitD,mBAAAS,EACA1tD,KAAAy9B,iBACAz9B,KAAAitD,mBAAA,OAIAc,0BAAA,SAAAF,EAAAH,EAAA1mD,GACA,IAAA0U,EAAAmyC,EAAA5mB,MAEAlgC,EAAA,CACA6hC,QAAAltB,EACAyc,OAAAu1B,GAGA7uD,MAAAgI,kBAAA,4BAAAE,EAAA,CAAA2D,EAAA9C,KACA/I,MAAAkuD,mBAAAa,cAAAF,GAAAhyC,IAAA,EAEA,YAAA9T,GACA8C,EAAArF,MACAxG,MAAAkuD,mBAAAa,cAAAF,GAAAhyC,GAAAhR,EAAArF,KAKAwoD,EAAAvtD,OACAN,KAAA+tD,0BAAAF,EAAAH,EAAA1mD,GAEAA,OAKA2O,eAAA,SAAA8iB,GACA,IAAAwH,EAAAjgC,KAAA6iB,KAAA4V,GAEA,GAAAz4B,KAAAitD,mBACA,IAAA,IAAA5tD,EAAA,EAAAA,EAAA4gC,EAAA3/B,OAAAjB,IAAA,CACA,IAAAqc,EAAAukB,EAAA5gC,GAAA0W,QAGA,IAAAlX,MAAAkuD,mBAAAa,cAAA5tD,KAAAitD,oBAAAvxC,KACA,IAAA7c,MAAAkuD,mBAAAa,cAAA5tD,KAAAitD,oBAAAvxC,KAEAukB,EAAA5gC,GAAAgG,IAAAxG,MAAAkuD,mBAAAa,cAAA5tD,KAAAitD,oBAAAvxC,IAKA,OAAAukB,GAGA9C,SAAA,SAAAQ,GACA39B,KAAAkU,SAAAipB,SAAAQ,EAAA39B,KAAAitD,sBAEA,CACAhwC,SAAA,CACA+wC,0BAAA,EACAd,WAAA,IAGAU,cAAA,KAIA/uD,MAAAkV,kCAAA,yBAAAlV,MAAAkuD,oBC/KAluD,MAAAovD,YAAApsD,QAAA4Z,KAAA7c,OAAA,CACAsvD,qBAAA,KACAC,2BAAA,KACAC,oBAAA,KACAC,+BAAA,KAEAC,2BAAA,EACAC,mBAAA,EAEAC,mBAAA,KACAC,WAAA,KAEAC,mBAAA,KACAC,eAAA,KACAC,iBAAA,KACAC,UAAA,KACAC,gBAAA,KAEAC,wBAAA,EAKA/xC,KAAA,WACAhd,KAAAgvD,2BAAAnwD,MAAAqvD,uBAMAe,8BAAA,SAAAv+C,GACA1Q,KAAAmuD,4BACAlmC,aAAAjoB,KAAAmuD,4BAGAnuD,KAAAmuD,2BAAAjmC,WAAAloB,KAAAkvD,0BAAA5nC,KAAAtnB,MAAA,IAAA0Q,IAMAw+C,0BAAA,SAAAC,GACA7wD,EAAAgJ,KAAA,CACAjC,IAAAxG,MAAAuH,aAAA,qBAAA+oD,EAAA,KAAA,uBACA7tD,KAAA,MACAiG,SAAA,OACA+Q,SAAA,CAAAjR,EAAAO,KACA,YAAAA,QACA,IAAAP,EAAA+nD,aAAAxoD,qBAAA,IAAA/H,MAAA+H,iBACA/H,MAAA+H,eAAAS,EAAA+nD,aAAAxoD,gBAGA5G,KAAAgvD,2BAAA3nD,EAAA+nD,aAAA1uB,SACA1gC,KAAA+uD,wBAAA,GAEA/uD,KAAAgvD,4BAAA,OASAA,2BAAA,SAAAd,GACAluD,KAAAkuD,qBAAA/rD,SAAA+rD,IAGA,IAAAluD,KAAAkuD,sBAAAluD,KAAAkuD,qBAAArvD,MAAAovD,YAAAoB,oBAEArvD,KAAAkuD,sBACAluD,KAAAsuD,2BAEAtuD,KAAAsvD,yBAIAtvD,KAAAkuD,qBAAArvD,MAAAovD,YAAAsB,gBACAvvD,KAAAouD,qBACAnmC,aAAAjoB,KAAAouD,qBAGApuD,KAAAouD,oBAAAlmC,WAAAloB,KAAAwvD,eAAAloC,KAAAtnB,MAAA,IAAAA,KAAAkuD,wBAGAluD,KAAAuuD,kBACAvuD,KAAA+uD,wBACA/uD,KAAAyvD,cAIAzvD,KAAAwvD,iBAIAxvD,KAAAivD,8BAAApwD,MAAAovD,YAAAsB,iBAGAvvD,KAAA0vD,yBACA1vD,KAAA2vD,kBAGA,IAAA3vD,KAAAkuD,sBAAAluD,KAAAkuD,qBAAArvD,MAAAovD,YAAAoB,mBAAAxwD,MAAAovD,YAAAsB,cACAvvD,KAAAivD,8BAAAjvD,KAAAkuD,qBAAArvD,MAAAovD,YAAAoB,mBAAA,GAEArvD,KAAAivD,8BAAApwD,MAAAovD,YAAAsB,iBAQAD,uBAAA,WACA,IAAAM,EAWA,GATA5vD,KAAAuuD,mBACAvuD,KAAA2vD,gBAAA,GACAC,GAAA,GAEAA,GAAA,EAGA5vD,KAAAsuD,2BAAA,GAEAtuD,KAAAwuD,mBAAA,CACA,IAAArgD,EAAA7P,EAAA,8DACA4d,EAAA5d,EAAA,uBAAAkQ,SAAAL,GACAg5B,EAAA7oC,EAAA,gCAAAkQ,SAAA0N,GACA2zC,EAAAvxD,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,MACA3X,KAAAzE,MAAAc,EAAA,MAAA,iBACA6O,SAAA24B,GACA2oB,EAAAxxD,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,aACA3X,KAAAzE,MAAAc,EAAA,MAAA,uBACA6O,SAAA24B,GAEAnnC,KAAA0uD,mBAAApwD,EAAA,QAAA6sB,UAAAjP,GAEAlc,KAAAwuD,mBAAA,IAAA3sD,QAAAi9B,MAAA3wB,EAAA,CACA4hD,UAAA,EACAhzB,kBAAA,EACAizB,WAAA,EACAC,kBAAA,EACAC,WAAA,2CACA7wB,SAAA,WACAx9B,QAAAsf,iBAAA,IAEA+G,YAAA,WACA4nC,EAAA34C,QAAA,WACA,QAKAnX,KAAAqd,YAAAwyC,EAAA,WAAA,UACA7vD,KAAAqd,YAAAlP,EAAA,SAAA,gBAGAyhD,EACA5vD,KAAAwuD,mBAAAoB,YAEA5vD,KAAAwuD,mBAAA5xB,OAGA58B,KAAAmwD,6BAEAnwD,KAAAquD,+BAAApW,YAAAj4C,KAAAowD,uBAAA9oC,KAAAtnB,MAAA,MAMAmwD,2BAAA,WACAnwD,KAAA0uD,mBAAAprD,KAAAzE,MAAAc,EAAA,MAAA,sCAAA,CACA0wD,KAAAxxD,MAAA4R,2BAAAzQ,KAAAkuD,yBAGAluD,KAAAwuD,mBAAAjjB,yBAGA6kB,uBAAA,WACApwD,KAAAkuD,qBAAA,IACAluD,KAAAkuD,uBACAluD,KAAAmwD,8BAGA,IAAAnwD,KAAAkuD,sBACArV,cAAA74C,KAAAquD,iCAOAqB,uBAAA,SAAAY,GACAtwD,KAAAsuD,2BAAA,EAEAtuD,KAAAwuD,qBACA8B,EACAtwD,KAAAwuD,mBAAA+B,YAEAvwD,KAAAwuD,mBAAAtnC,OAGAlnB,KAAAquD,gCACAxV,cAAA74C,KAAAquD,kCAQAmB,eAAA,WACA,IAAAI,EAWA,GATA5vD,KAAAsuD,2BACAtuD,KAAA0vD,wBAAA,GACAE,GAAA,GAEAA,GAAA,EAGA5vD,KAAAuuD,mBAAA,GAEAvuD,KAAAyuD,WAAA,CACA,IAAAtgD,EAAA7P,EAAA,sDACA4d,EAAA5d,EAAA,yBAAAO,MAAAc,EAAA,MAAA,2BAAA,WAAAd,MAAAc,EAAA,MAAA,uCAAA,cAAA6O,SAAAL,GACAqiD,EAAAlyD,EAAA,gCAAAkQ,SAAA0N,GACAu0C,EAAAnyD,EAAA,uBAAAkQ,SAAAgiD,GACAE,EAAApyD,EAAA,4BAAAkQ,SAAAiiD,GACAE,EAAAryD,EAAA,UAAAkQ,SAAAiiD,GACAG,EAAAtyD,EAAA,kCAAAkQ,SAAAkiD,GAEA1wD,KAAA2uD,eAAArwD,EAAA,uEAAAO,MAAAc,EAAA,MAAA,YAAA,OAAA6O,SAAAoiD,GACA5wD,KAAA4uD,iBAAAtwD,EAAA,iCAAAkQ,SAAAgiD,GACAxwD,KAAA6uD,UAAAvwD,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,sBACA3X,KAAAzE,MAAAc,EAAA,MAAA,WACA6O,SAAAmiD,GACA3wD,KAAA8uD,gBAAAxwD,EAAA,sBAAAkQ,SAAA0N,GAEAlc,KAAAyuD,WAAA,IAAA5sD,QAAAi9B,MAAA3wB,EAAA,CACA4hD,UAAA,EACAhzB,kBAAA,EACAizB,WAAA,EACAC,kBAAA,EACAC,WAAA,mCACA7wB,SAAA,KACAx9B,QAAAsf,iBAAA,IAEA+G,WAAA,KACAloB,KAAA2uD,eAAAx3C,QAAA,UACA,MAGAkgC,UAAA,KACAr3C,KAAA2uD,eAAApqD,IAAA,OAIA,IAAA1F,MAAAgyD,cAAA7wD,KAAA2uD,eAAA,CACAmC,cAAAC,IACA/wD,KAAA2uD,eAAAoC,KAIA/wD,KAAAqd,YAAArd,KAAA2uD,eAAA,QAAA,oBACA3uD,KAAAqd,YAAAlP,EAAA,SAAA,SAGAyhD,EACA5vD,KAAAyuD,WAAAmB,YAEA5vD,KAAAyuD,WAAA7xB,QAOA+yB,eAAA,SAAAW,GACAtwD,KAAAuuD,mBAAA,EAEAvuD,KAAAyuD,aACA6B,EACAtwD,KAAAyuD,WAAA8B,YAEAvwD,KAAAyuD,WAAAvnC,SAKA8pC,OAAA,WACA1yD,EAAAw0B,IAAA,CACAztB,IAAAxG,MAAAuH,aAAA,gBACAmB,SAAA,OACAG,QAAA,KACA7I,MAAAyH,WAAA,QAKA2qD,aAAA,SAAA15C,GACAA,GACAA,EAAAK,iBAGA5X,KAAA0vD,yBACA1vD,KAAAkvD,2BAAA,IAGAgC,iBAAA,WACA,OAAAlxD,KAAA2uD,eAAApqD,MAAAjE,QAAA,GACAN,KAAA6uD,UAAAv4C,YAAA,aACA,IAEAtW,KAAA6uD,UAAA78C,SAAA,aACA,IAIAm/C,MAAA,SAAA55C,GACAA,GACAA,EAAAK,iBAGA5X,KAAAkxD,qBACAlxD,KAAA4uD,iBAAAt4C,YAAA,UACAtW,KAAAoxD,uBAEA,IAAAvyD,MAAA+H,gBAGA5G,KAAA+uD,wBAAA,EACA/uD,KAAAkvD,6BAEAlvD,KAAAyvD,gBAKAA,YAAA,WACA,IAAA1oD,EAAA,CACAsqD,UAAAxyD,MAAAyyD,SACAC,SAAAvxD,KAAA2uD,eAAApqD,OAGA1F,MAAAgI,kBAAA,cAAAE,EAAA,CAAA2D,EAAA9C,KACA5H,KAAA4uD,iBAAA58C,SAAA,UAEA,YAAApK,EACA8C,EAAAhD,SACA1H,KAAA2vD,iBACA3vD,KAAAkvD,8BAEAlvD,KAAAwxD,eAAA9mD,EAAA/C,OACA9F,QAAA6gB,MAAA1iB,KAAAyuD,WAAA37C,YAEAjR,QAAAsf,iBAAA,IACAnhB,KAAA2uD,eAAAx3C,QAAA,UAIAnX,KAAAwxD,oBAKAA,eAAA,SAAA7pD,GACAA,MAAAA,IACAA,EAAA9I,MAAAc,EAAA,MAAA,6BAGAK,KAAA8uD,gBAAAxrD,KAAAqE,GACA3H,KAAAyuD,WAAAljB,yBAGA6lB,gBAAA,WACApxD,KAAAwxD,eAAA,MAEA,CACAjC,cAAA,GACAF,mBAAA,MCpYAxwD,MAAA4yD,GAAA5vD,QAAA4Z,KAAA7c,OAAA,CACA8yD,YAAA,KAEAC,KAAA,KACAC,eAAA,KACAC,QAAA,KACAC,QAAA,KACAC,uBAAA,KACAruC,MAAA,KACAsuC,aAAA,KACAC,iBAAA,KACAr2C,QAAA,KACAs2C,aAAA,KACAC,SAAA,KACAC,kBAAA,KACAh2C,SAAA,KACAi2C,kBAAA,KACAC,SAAA,KAEAC,oBAAA,KACAC,YAAA,KACAC,mBAAA,KAEAC,aAAA,EAEA71C,WAAA,KAEA81C,aAAA,EACAC,UAAA,EACAC,QAAA,KACAC,iBAAA,KACAC,0BAAA,EACAC,wBAAA,KACAC,gBAAA,KAEAC,oBAAA,EACAC,8BAAA,EACAC,gCAAA,EACAC,yBAAA,KAEAr2C,KAAA,WAEA,IAAAne,MAAAqvD,uBACAluD,KAAA0xD,YAAA,IAAA7yD,MAAAovD,aAIAjuD,KAAA2xD,KAAArzD,EAAA,QACA0B,KAAA4xD,eAAAtzD,EAAA,mBACA0B,KAAA6xD,QAAAvzD,EAAA,WACA0B,KAAA8xD,QAAAxzD,EAAA,WACA0B,KAAA+xD,uBAAAzzD,EAAA,kBACA0B,KAAA0jB,MAAAplB,EAAA,SACA0B,KAAAgyD,aAAA1zD,EAAA,cACA0B,KAAAiyD,iBAAA3zD,EAAA,qBACA0B,KAAA4b,QAAAtd,EAAA,WACA0B,KAAAkyD,aAAA5zD,EAAA,iBACA0B,KAAAmyD,SAAA7zD,EAAA,YACA0B,KAAAoyD,kBAAA9zD,EAAA,sBACA0B,KAAAoc,SAAA9d,EAAA,YACA0B,KAAAqyD,kBAAA/zD,EAAA,sBACA0B,KAAAyyD,mBAAAn0D,EAAA,qBAEA0B,KAAAmvB,yBAGA,IAAAmkC,EAAAtzD,KAAAmyD,SAAAr8C,KAAA,kCAEA,IAAA,IAAAzW,EAAA,EAAAA,EAAAi0D,EAAAhzD,OAAAjB,IAAA,CACA,IAAAk0D,EAAAD,EAAAjhD,GAAAhT,GACA8rD,EAAAoI,EAAA5/B,SAAA,YAAA3Y,SAAA,SACA1c,EAAA,UAAA,CACA2c,MAAA,OACAvc,KAAA60D,EAAAv4C,WAAAtc,SACA8P,SAAA28C,GACAoI,EAAAn4C,SA6CA,GA1CApb,KAAA4b,QAAAtb,SACAN,KAAAqd,YAAAxb,QAAA8e,KAAA,SAAA,qBACA3gB,KAAAwzD,qBAGA3xD,QAAA0Z,KAAAC,MAAA,KAEAxb,KAAAqd,YAAAxb,QAAA8e,KAAA,SAAApJ,IAEAA,EAAA2F,SAAApR,QACA9L,KAAAyzD,uBAGAzzD,KAAAyzD,qBAGA,IAAAC,EAAA1zD,KAAA+xD,uBAAA/2C,SAAA,UACA24C,EAAA3zD,KAAA+xD,uBAAA/2C,SAAA,gBAEA04C,EAAAE,MAAA,EAAA/0D,MAAA4yD,GAAAoC,sBAAAr7C,SAAA,WACAm7C,EAAAC,MAAA/0D,MAAA4yD,GAAAoC,sBAAAr7C,SAAA,WAIA3W,QAAAkf,sBAAA/gB,KAAA8zD,iBAAAxsC,KAAAtnB,SAIAA,KAAA6xD,QAAAvxD,QACAN,KAAA+zD,aAIA/zD,KAAAqd,YAAA/e,EAAA,eAAA,QAAA,aACA0B,KAAAqd,YAAA/e,EAAA,mBAAA,QAAA,iBAGA0B,KAAAgyD,aAAA1xD,SACAN,KAAAgyD,aAAA1zD,EAAA,kCAIA0B,KAAAgyD,aAAA1xD,QAAAuB,QAAAmY,QAAAha,KAAAgyD,aAAA,qBAAA,CACA,IAAAgC,EAAA,GACA/tC,EAAAjmB,KAAAgyD,aAAAjrD,KAAA,WACA,QAAA,IAAAkf,EACA+tC,EAAAt0D,KAAA,CACA,CACA8X,QAAA3V,QAAAuc,MACAC,MAAA,GACA,CACArH,SAAAhX,KAAAgyD,aAAAjrD,KAAA,yBACAkQ,aAAApV,QAAAmY,QAAAha,KAAAgyD,aAAA,+BAIA,IAAA,IAAA3yD,EAAA,EAAAA,EAAA4mB,EAAA3lB,OAAAjB,IAAA,CACA,IAAAyH,EAAAmf,EAAA5mB,GACAyH,EAAAmtD,UAGAD,EAAAt0D,KAAA,CACA,CACA8X,QAAA3V,QAAAuc,MACAC,MAAA,EACApb,QAAA6D,EAAA7D,OACA,CACA6D,OAAAA,EAAAA,OACAkQ,SAAAlQ,EAAAkQ,SACAD,QAAAjQ,EAAAiQ,QACAjX,OAAAgH,EAAAhH,OACAiH,KAAAD,EAAAC,KACAkQ,aAAAnQ,EAAAmQ,gBAKA,IAAA,IAAA5X,EAAA,EAAAA,EAAA20D,EAAA1zD,OAAAjB,IACAwC,QAAAqc,gBAAAC,iBAAA61C,EAAA30D,GAAA,GAAA,KACAW,KAAAk0D,kBAAAF,EAAA30D,GAAA,MAKAW,KAAAm0D,WAGA,IAAAj9C,EAAArY,MAAA4V,gBAAA,WAgBA,QAfA,IAAAyC,IACArY,MAAAkW,mBAAA,WACAlT,QAAA0Z,KAAAC,MAAA,KACA3Z,QAAAkf,sBAAA,KACAjV,OAAAsoD,SAAA,EAAAl9C,QAKA5Y,EAAAg6B,mBACAt4B,KAAA4xD,eAAAt6C,GAAA,QAAA,oCAAAtX,KAAAq0D,kBAAA/sC,KAAAtnB,OACAA,KAAA4xD,eAAAt6C,GAAA,OAAA,oCAAAtX,KAAAs0D,iBAAAhtC,KAAAtnB,QAIAnB,MAAA01D,cAAAj0D,OAAA,CACA,IAAA8Z,EAAA9b,EAAA,sBAAAgY,YAAA,UACA,MAAAk+C,EAAA31D,MAAA01D,cAAAE,KAAA7nD,GAAAA,EAAA8nD,QAIA,IAAAzI,EAHAuI,GACAp6C,EAAApI,SAAA,UAGAhS,KAAAqd,YAAAjD,EAAA,QAAA,KACA,GAAA6xC,EAqCAA,EAAArvB,WArCA,CACA,IAAA+3B,EAAA,GACA91D,MAAA01D,cAAAjN,QAAA16C,IACA+nD,GAAA,4BAAA/nD,EAAA8nD,OAAA,SAAA,gFAEA9nD,EAAAkjB,6CACAljB,EAAAqJ,wBAEArJ,EAAAgoD,kBACAhoD,EAAA7B,mBAGAkhD,EAAA,IAAApqD,QAAAm1B,IAAA5c,EAAA,2BAAAu6C,UAAA,CACAE,OAAA,KACAz6C,EAAApI,SAAA,WAEAigB,OAAA,KACA7X,EAAA9D,YAAA,aAKAhY,EAAA,IAAA2tD,EAAAvoC,OAAAlQ,MAAA,WACAxT,KAAAkQ,SAAA5P,QAAAN,KAAAkQ,WAAA1J,SAAA0J,eAAA,IAAA5R,EAAA0B,MAAAoO,KAAA,WACA9P,EAAA0B,MAAAoO,KAAA,MAAA,YAAAA,KAAA,SAAA,aAIAomD,IACAp6C,EAAA9D,YAAA,UACAzX,MAAAiK,kBAAA,OAAA,mCAAA,CACA/B,KAAA,CACAsqB,IAAAxyB,MAAA01D,cAAAnyD,IAAAwK,GAAAA,EAAAmJ,aAWA+9C,iBAAA,WAKA,GAHA9zD,KAAAuyD,oBAAAj0D,EAAA,6BACA0B,KAAAwyD,YAAAl0D,EAAA,oBAEA0B,KAAAuyD,oBAAAjyD,OAAA,CAOA,IAHA,IACA6N,EAAA2mD,EADAC,EAAA/0D,KAAAuyD,oBAAA70C,IAAA1d,KAAAwyD,aAGAnzD,EAAA,EAAAA,EAAA01D,EAAAz0D,OAAAjB,KACA8O,EAAA4mD,EAAA1iD,GAAAhT,IACA0H,KAAA,4BAEA+tD,EADA,mBAAA3mD,EAAApH,KAAA,cACAoH,EAAApH,KAAA,aAAAoH,GAEAA,EAAA+S,YAEA/S,EAAApH,KAAA,yBAAA+tD,IAEA90D,KAAAqd,YAAAlP,EAAA,UAAA,SAAAoJ,GAIA,GAHA1V,QAAAmY,QAAA7L,EAAA,wBACAnO,KAAA4qB,eAAA/oB,QAAA8e,KAAA,gBAEA9e,QAAAmY,QAAA7L,EAAA,cAAA,CAEA,IAAA2mD,EADAv9C,EAAAK,iBAGAk9C,EADA,mBAAA3mD,EAAApH,KAAA,cACAoH,EAAApH,KAAA,aAAAoH,GAEAA,EAAA+S,YAEA,IAAAna,EAAAlI,MAAAyN,cAAA6B,EAAApH,KAAA,0BAAA+tD,EAAAj2D,MAAA4N,YACA5N,MAAAqP,WAAAnH,GACAyH,SAAA3M,QAAA+Q,MACAoiD,aAKAh1D,KAAAqd,YAAAxb,QAAA8e,KAAA,gBAAA,SAAApJ,GACA,IACApJ,EAAA2mD,EADAG,GAAA,EAEA,QAAA,IAAAp2D,MAAAq2D,aAAAr2D,MAAAq2D,YAAAC,cACAF,GAAA,OAEA,IAAA,IAAA51D,EAAA,EAAAA,EAAAW,KAAAuyD,oBAAAjyD,OAAAjB,IAOA,GAJAy1D,EADA,mBADA3mD,EAAAnO,KAAAuyD,oBAAAlgD,GAAAhT,IACA0H,KAAA,cACAoH,EAAApH,KAAA,aAAAoH,GAEAA,EAAA+S,YAEA/S,EAAApH,KAAA,4BAAA+tD,EAAA,CACAG,GAAA,EACA,MAKA,GAAAA,EAAA,CACA,IAAAp1D,EAAAhB,MAAAc,EAAA,MAAA,oDAQA,OANA4X,EACAA,EAAA69C,cAAAC,YAAAx1D,EAEAiM,OAAA6S,MAAA02C,YAAAx1D,EAGAA,QAKAw0D,kBAAA,WACAr0D,KAAAwzD,qBAGAc,iBAAA,WACAt0D,KAAAwzD,qBAaAU,kBAAA,SAAAjtD,GAEAjH,KAAAmX,QAAA,sBAEA,iBAAAlQ,GAAA3I,EAAA0G,cAAAiC,KACAA,EAAA,IAGAA,EAAA+P,WACA/P,EAAA+P,SAAAhX,KAAAgyD,aAAAjrD,KAAA,0BAGAE,EAAAF,OACAE,EAAAF,KAAA,IAEAE,EAAAF,KAAAuuD,cAAA,EAEAz2D,MAAAiY,WAAA9W,KAAAgyD,aAAA/qD,IAGAkoB,uBAAA,WACA,IAAA2+B,EAAA9tD,KAAAoc,SAAAtG,KAAA,eACAq1C,EAAA2C,EAAA9yC,SAAA,UACA1c,EAAA,gCAAAgF,KAAA6nD,EAAA7qD,OAAA6qD,EAAA7nD,OAAAwqD,EAAAxqD,QACAzB,QAAA+Q,KAAA0D,YAAA,oBAGAi/C,UAAA,WACA1zD,QAAA+Q,KAAA4iD,YAAA,gBAGAC,cAAA,WACA5zD,QAAA+Q,KAAA4iD,YAAA,oBAGArB,SAAA,WACAn0D,KAAA6c,aACA7c,KAAA6c,WAAAoB,UACAje,KAAA6c,WAAA,MAGA,MAAA8kB,EAAArjC,EAAA,SACA,GAAAqjC,EAAArhC,SAIAN,KAAA6c,WAAA,IAAAhe,MAAA4hB,KAAAkhB,GAEA3hC,KAAA6c,WAAAvF,GAAA,YAAAC,IACA,MAAA9Q,EAAA8Q,EAAAmJ,KAAAtS,KAAA,QAcA,GAXA,MAAA3H,EAAAkJ,OAAA,IACArR,EAAAmI,GAAA6P,YAAA,UAIAzU,QAAA8e,KAAAxJ,QAAA,UAGAtV,QAAA0Z,KAAApE,QAAA,UAGA1Q,GAAA,MAAAA,EAAAkJ,OAAA,GAAA,CACA,MAAA+lD,EAAAp3D,EAAA,gBAAAgV,UAAAvM,KAAA,WACA,GAAA2uD,EACA,IAAA,IAAAr2D,EAAA,EAAAA,EAAAq2D,EAAAtuC,KAAAG,SAAAjnB,OAAAjB,IAAA,CACA,IAAAuN,EAAA8oD,EAAAtuC,KAAAG,SAAAloB,GACAuN,EAAAnG,OACAmG,EAAAnG,KAAAmG,EAAAnG,KAAAf,MAAA,UAAA,GAAAe,IAMA,oBAAA0lB,SAEAtqB,QAAAkf,sBAAA,KACAoL,QAAAC,kBAAA9jB,OAAAA,EAAA7B,OAKAzG,KAAA6c,WAAAvF,GAAA,cAAAC,IACA,MAAAA,EAAAmJ,KAAAtS,KAAA,QAAAuB,OAAA,IAEArR,EAAAiZ,EAAAmJ,KAAAtS,KAAA,SAAA4D,SAAA,YAIAlG,OAAAm2B,eAAA,CACA,MAAAvhB,EAAA1gB,KAAA6c,WAAA8kB,MAAAna,OAAA,WAAA1b,OAAAm2B,mBACAvhB,EAAApgB,QACAN,KAAA6c,WAAAklB,UAAArhB,KAQAi1C,qBACA,OAAA31D,KAAA6c,WAAA7c,KAAA6c,WAAA/J,gBAAAxK,GAKAstD,gBACA,OAAA51D,KAAA6c,WAAA7c,KAAA6c,WAAA9K,SAAAzJ,GAKAq5B,YACA,OAAA3hC,KAAA6c,WAAA7c,KAAA6c,WAAA9K,IAAA+D,KAAA,aAAAxN,GAKAs5B,mBACA,OAAA5hC,KAAA6c,WAAA7c,KAAA6c,WAAA+kB,kBAAAt5B,GAKAutD,uBACA,OAAA71D,KAAA6c,WAAA7c,KAAA6c,WAAA8kB,MAAA5iC,MAAAiB,KAAA6c,WAAA+kB,mBAAAt5B,GAKAu5B,oBACA,OAAA7hC,KAAA6c,WAAA7c,KAAA6c,WAAAglB,mBAAAv5B,GAMAy5B,UAAA,SAAAS,GACAxiC,KAAA6c,YACA7c,KAAA6c,WAAAklB,UAAAS,IAMAE,YAAA,WACA1iC,KAAA6c,YACA7c,KAAA6c,WAAA6lB,eAIA+wB,mBAAA,WACAzzD,KAAA81D,0BAGAA,uBAAA,WACA,IAAA91D,KAAA81D,uBAAAC,GAAA,EAAA/1D,KAAA81D,uBAAAC,GAAA/1D,KAAAyyD,mBAAAnyD,OAAAN,KAAA81D,uBAAAC,KACA/1D,KAAA81D,uBAAAE,QAAAh2D,KAAAyyD,mBAAApgD,GAAArS,KAAA81D,uBAAAC,IACA/1D,KAAA81D,uBAAAG,gBAAAj2D,KAAA81D,uBAAAE,QAAA/uC,SAAAykB,QACA1rC,KAAA81D,uBAAAI,QAAA,EAEAl2D,KAAA81D,uBAAAG,gBAAA,SAEA,IAAAj2D,KAAA81D,uBAAAE,QAAAjvD,KAAA,sBACA/G,KAAA81D,uBAAAI,QAAA,GAEAl2D,KAAA81D,uBAAAK,aAAAn2D,KAAA81D,uBAAAE,QAAAngD,SAAA,aAGA7V,KAAA81D,uBAAAG,gBAAAj2D,KAAA81D,uBAAAE,QAAAjvD,KAAA,sBACA/G,KAAA81D,uBAAAK,eACAn2D,KAAA81D,uBAAAE,QAAA1/C,YAAA,aACAtW,KAAA81D,uBAAAI,QAAA,GAEAl2D,KAAA81D,uBAAAK,eACAn2D,KAAA81D,uBAAAI,QAAA,IAKAl2D,KAAA81D,uBAAAI,QACAl2D,KAAA81D,uBAAAE,QAAAtqB,QAAA,GAAA1rC,KAAA81D,uBAAAG,iBACAj2D,KAAA81D,uBAAAE,QAAAhkD,SAAA,aAKAhS,KAAA81D,uBAAAE,QAAAjvD,KAAA,qBAAA/G,KAAA81D,uBAAAG,mBAKAzC,kBAAA,WAEA,GAAAxzD,KAAA0jB,MAAApjB,QAAAN,KAAAiyD,iBAAA,GAAAmE,wBAAAh9B,IAAA,GACA,IAAAp5B,KAAA0yD,YAAA,CACA,IAAA2D,EAAAr2D,KAAAiyD,iBAAA5kC,SAGArtB,KAAAqyD,kBAAA/wC,IAAA,aAAA,iBAAA+0C,EAAA,GAAA,GAAA,GAAA,OAGAr2D,KAAAiyD,iBAAA5kC,OAAAgpC,GACAx0D,QAAA+Q,KAAAZ,SAAA,gBAGAhS,KAAAqyD,kBAAAh5B,cACAr5B,KAAAmyD,SAAA94B,cADA,IAEA/X,EAAA,CACA8X,IAAAi9B,EAAA,KACAC,aAAA,gBAAAD,EAAA,OAEAr2D,KAAAoc,SAAApK,SAAA,SAAAsP,IAAAA,GACAthB,KAAAmyD,SAAAngD,SAAA,SAAAsP,IAAAA,GACAthB,KAAA0yD,aAAA,QAEA1yD,KAAA0yD,cACA1yD,KAAAiyD,iBAAA5kC,OAAA,QACAxrB,QAAA+Q,KAAA0D,YAAA,gBACAtW,KAAAqyD,kBAAA/wC,IAAA,aAAA,IACAthB,KAAAoc,SAAA9F,YAAA,SAAAgL,IAAA,CACA8X,IAAA,GACAk9B,aAAA,KAEAt2D,KAAAmyD,SAAA77C,YAAA,SAAAgL,IAAA,CACA8X,IAAA,GACAk9B,aAAA,KAEAt2D,KAAA0yD,aAAA,IAUA6D,oBAAA,SAAAj1D,EAAAzB,GACA,IAAAg0D,EAAAh1D,MAAA4yD,GAAAoC,qBAEA,CAAA,WAAA,SAAAvkD,SAAAhO,IACAuyD,GAAA,EACA/jC,KAAA,QACA7Z,MAAApX,MAAAc,EAAA,MAAA,WAEAmwB,KAAA,OACA7Z,MAAApX,MAAAc,EAAA,MAAA,WAGA,IAAA62D,EAAAl4D,EAAA,0CACAgD,EAAA3C,QAAA,MAAA,2CACAmxB,qBAAA7Z,mCACApW,uCAGA2O,SAAAxO,KAAA+xD,wBAEA0E,GAAAD,EAAAl6B,aAAA,EAAA,KAEAk6B,EACAtvC,OACA5F,IAAA,CAAA+a,QAAA,EAAAq6B,cAAAD,EAAAE,eAAAF,IACAj+C,SAAA,CAAA6jB,QAAA,EAAAq6B,cAAA,MAAAC,eAAA,OAAA,CAAAC,QAAA,eAAAx+C,SAAA,SACAw7C,MAAAC,GACAr7C,SAAA,CAAA6jB,QAAA,EAAAq6B,cAAAD,EAAAE,eAAAF,GAAA,CACAn+C,SAAA,WACAk+C,EAAAp7C,YAIApb,KAAAmX,QAAA,sBAAA,CACA0/C,iBAAAv1D,EACAzB,QAAAA,KASAyiB,cAAA,SAAAziB,GACAG,KAAAu2D,oBAAA,SAAA12D,IAQAmI,aAAA,SAAAnI,GACAA,IACAA,EAAAhB,MAAAc,EAAA,MAAA,6BAGAK,KAAAu2D,oBAAA,QAAA12D,IAGAi3D,YAAA,WACA,IAAA/vD,EAAA,CACAlC,KAAAhG,MAAAgG,MAGAhG,MAAAwJ,mBAAA,oBAAAtB,EAAA/G,KAAA+2D,cAAAzvC,KAAAtnB,QAGA+2D,cAAA,SAAAC,GAGA,GAFAh3D,KAAA6xD,QAAAz2C,SAEAvZ,QAAA3C,QAAA83D,IAAAA,EAAA12D,OAAA,CACAN,KAAA6xD,QAAAvzD,EAAA,qBAAA6sB,UAAA7sB,EAAA,oBAEA,IAAA,IAAAe,EAAA,EAAAA,EAAA23D,EAAA12D,OAAAjB,IACAf,EAAA,2CAAAO,MAAAc,EAAA,MAAA,qBAAAq3D,EAAA33D,WAAAmP,SAAAxO,KAAA6xD,SAGA,IAAAxkC,EAAArtB,KAAA6xD,QAAAx4B,cACAr5B,KAAA6xD,QAAAvwC,IAAA,cAAA+L,GAAA7U,SAAA,CAAAy+C,aAAA,GAAA,QAEAj3D,KAAA+zD,eAIAA,WAAA,WAIA,IAFA,IAAAmD,EAAAl3D,KAAA6xD,QAAA/7C,KAAA,qBAEAzW,EAAA,EAAAA,EAAA63D,EAAA52D,OAAAjB,IACAW,KAAAqd,YAAA65C,EAAA73D,GAAA,QAAAkY,IACAA,EAAAK,iBAEA,IAAAu/C,EAAA74D,EAAAiZ,EAAA8C,eAEAtT,EAAA,CACAlH,QAAAs3D,EAAA9+B,KAAA,aAAA32B,OAAA,IAGA7C,MAAAwJ,mBAAA,oBAAAtB,EAAA,CAAA2D,EAAA9C,KACA,YAAAA,IACA8C,EAAAhD,QACAyvD,EAAAlwC,SAAA7L,SAEApb,KAAAgI,aAAA0C,EAAA/C,aAQAyvD,gBAAA,SAAAC,EAAAC,EAAAtwD,GASA,GAPA,mBAAAswD,IACAtwD,EAAAswD,EACAA,GAAA,GAKAt3D,KAAAkzD,sBACA,IAAAmE,IAAAr3D,KAAAmzD,+BACA,IAAAmE,IAAAt3D,KAAAozD,gCACA,CACA,IAAAmE,EAAAvwD,EACAA,EAAA,KACAhH,KAAAo3D,gBAAAC,EAAAC,EAAAC,IAKA,mBAAAvwD,IACAnF,QAAA3C,QAAAc,KAAAqzD,4BACArzD,KAAAqzD,yBAAA,IAGArzD,KAAAqzD,yBAAA3zD,KAAAsH,IAGAhH,KAAAkzD,qBACAlzD,KAAAkzD,oBAAA,EACAlzD,KAAAmzD,8BAAA,IAAAkE,EACAr3D,KAAAozD,gCAAA,IAAAkE,EAEAt3D,KAAAw3D,iBAAAH,EAAAC,GACA9tD,KAAAy2B,IAIA,GAHAjgC,KAAAy3D,uBACAz3D,KAAAkzD,oBAAA,EAEArxD,QAAA3C,QAAAc,KAAAqzD,0BAAA,CACA,IAAAqE,EAAA13D,KAAAqzD,yBACArzD,KAAAqzD,yBAAA,KAEA,IAAA,IAAAh0D,EAAA,EAAAA,EAAAq4D,EAAAp3D,OAAAjB,IACAq4D,EAAAr4D,GAAA4gC,GAIAjgC,KAAAmX,QAAA,kBAAA,CACAwgD,WAAA13B,QAMAu3B,iBAAA,SAAAH,EAAAC,GACA,OAAA,IAAAtuD,QAAA,CAAAC,EAAAC,KACAmuD,EAaAr3D,KAAA43D,YAAAN,GACA9tD,KAAAy2B,IACAh3B,EAAAg3B,KAdAjgC,KAAA63D,uBAAAP,GACA9tD,KAAAy2B,KACA,IAAAA,EAAA63B,QACA7uD,EAAAg3B,GAGAjgC,KAAA43D,YAAAN,GACA9tD,KAAAy2B,IACAh3B,EAAAg3B,UAYA43B,uBAAA,SAAAP,GACA,OAAA,IAAAtuD,SAAA,SAAAC,EAAAC,GACA,IAAAnC,EAAA,CACAgxD,cAAA,EACAT,eAAAA,GAEAz4D,MAAAgI,kBAAA,wBAAAE,GAAA,SAAAk5B,EAAAr4B,GAEAqB,EADA,YAAArB,EACAq4B,EAEA,CAAA63B,QAAA,WAMAF,YAAA,SAAAN,GACA,OAAA,IAAAtuD,QAAA,CAAAC,EAAAC,KACArK,MAAA6K,eAAA,MAAA,WACAF,KAAAwuD,IACAh4D,KAAAi4D,cAAAD,EAAAV,GAAA9tD,KAAAP,KAEAQ,MAAAkB,IACA3K,KAAAi4D,cAAA,IAAAzuD,KAAAP,QAKAgvD,cAAA,SAAAD,EAAAV,GACA,OAAA,IAAAtuD,SAAA,SAAAC,EAAAC,GACArK,MAAAgI,kBAAA,oBAAA,CACAmxD,QAAAA,EACAV,eAAAA,IACA,SAAAr3B,EAAAr4B,GACA,YAAAA,EACAqB,EAAAg3B,GAEA/2B,MAEA,CACAhC,YAAA,aAKAuwD,qBAAA,WACA,IAAAS,EAAA55D,EAAA,kBAAAwX,KAAA,iBAGAoiD,EAAA53D,QAIAzB,MAAAwJ,mBAAA,gCAAAqC,IAEA,IAAA6qB,EAAA2iC,EAAAl9C,SAAA,UAEAtQ,EAAAytD,YACA5iC,EAAAj1B,SACAi1B,EAAAj3B,EAAA,yBAAAkQ,SAAA0pD,IAEA3iC,EAAAjyB,KAAAoH,EAAAytD,aACA5iC,EAAAj1B,QACAi1B,EAAAna,YAKAqH,SAAA,WACAziB,KAAA2yD,cAIA9zD,MAAAu5D,sBACAv5D,MAAAwJ,mBAAA,YAAA,CAAAqC,EAAA9C,KACA,YAAAA,GACA5H,KAAAq4D,kBAAA,GAAA,KAIAr4D,KAAAq4D,kBAAA,GAAA,KAIAA,iBAAA,SAAAzE,EAAArjC,GAOA,GANAA,GAAAvwB,KAAAgzD,0BACA/qC,aAAAjoB,KAAAgzD,yBACAhzD,KAAAgzD,wBAAA,OAIAhzD,KAAAgzD,yBAAAhzD,KAAA2yD,YAIA,IAAA,IAAAiB,EAAA,CAEA,IAAAlzB,EAAA7vB,KAAAujB,IAAA,IAAA,IAAAp0B,KAAA+yD,2BACA/yD,KAAAgzD,wBAAA9qC,WAAAloB,KAAAs4D,0BAAAhxC,KAAAtnB,MAAA0gC,QAEA1gC,KAAAs4D,6BAIAA,0BAAA,WACAz5D,MAAAwJ,mBAAA,kDAAA,CAAAqC,EAAA9C,KACA,YAAAA,IACA5H,KAAAgzD,wBAAA,KACAhzD,KAAA4yD,UAAAloD,EAAAupB,MACAj0B,KAAAu4D,WAAA7tD,EAAA8tD,MAEAx4D,KAAA6yD,QAAAvyD,QAEAN,KAAAq4D,kBAAA,OAMAE,WAAA,SAAA1F,GACA,GAAA7yD,KAAA2yD,YAAA,CAIA3yD,KAAA6yD,QAAAA,EAGA,IAAA4F,EAAAz4D,KAAA8yD,iBACA9yD,KAAA8yD,iBAAA9yD,KAAA04D,sBAIAD,GACAz4D,KAAA8yD,kBACA2F,EAAA1iD,KAAA/V,KAAA8yD,iBAAA/8C,IACA0iD,EAAA7Q,WAAA5nD,KAAA8yD,iBAAAlL,UACA6Q,EAAAE,gBAAA34D,KAAA8yD,iBAAA6F,eACAF,EAAArtD,SAAApL,KAAA8yD,iBAAA1nD,OAEApL,KAAA+yD,4BAGA/yD,KAAA+yD,0BAAA,EAGA/yD,KAAA44D,gBAGA54D,KAAAmX,QAAA,gBAMAuhD,oBAAA,WACA,IAAA14D,KAAA2yD,YACA,OAAA,KAUA,IANA,IAAAkG,EAAA,CACAh6D,MAAA4yD,GAAAqH,oBACAj6D,MAAA4yD,GAAAsH,kBACAl6D,MAAA4yD,GAAAuH,oBAGA35D,EAAA,EAAAA,EAAAw5D,EAAAv4D,OAAAjB,IACA,IAAA,IAAA45D,EAAA,EAAAA,EAAAj5D,KAAA6yD,QAAAvyD,OAAA24D,IACA,GACAj5D,KAAA6yD,QAAAoG,GAAA7tD,SAAAytD,EAAAx5D,KACAw5D,EAAAx5D,KAAAR,MAAA4yD,GAAAuH,qBAAAh5D,KAAA6yD,QAAAoG,GAAArF,OAEA,OAAA5zD,KAAA6yD,QAAAoG,GAKA,OAAA,MAGAL,cAAA,WACA54D,KAAA2yD,aAAA3yD,KAAA2xD,KAAArxD,SAIAN,KAAA8yD,kBACA9yD,KAAAizD,kBACAjzD,KAAAizD,gBAAA,IAAAiG,GAGAl5D,KAAA8yD,iBAAA1nD,SAAAvM,MAAA4yD,GAAAqH,qBAAA94D,KAAA8yD,iBAAA1nD,SAAAvM,MAAA4yD,GAAAuH,oBACAh5D,KAAAizD,gBAAAkG,eACAn5D,KAAAizD,gBAAAmG,eAAAp5D,KAAA8yD,iBAAAuG,YAAAr5D,KAAA8yD,iBAAA6F,eACA34D,KAAAizD,gBAAAqG,YAAAt5D,KAAA8yD,iBAAAlL,WACA5nD,KAAA8yD,iBAAA1nD,SAAAvM,MAAA4yD,GAAAsH,mBACA/4D,KAAAizD,gBAAAsG,aAAA16D,MAAAc,EAAA,MAAA,YAGAK,KAAAizD,kBACAjzD,KAAAizD,gBAAAkG,eACAn5D,KAAAizD,gBAAA36C,kBACAtY,KAAAizD,mBAUAprC,UAAA,WAEA,IAAA7R,EAAAnX,MAAA4V,gBAAA,2BACA,YAAA,IAAAuB,GACAnX,MAAAkW,mBAAA,2BACA/U,KAAAkzB,UAAAld,GACAA,GAEAnX,MAAAoW,UAAA,WAOAie,UAAA,SAAAld,GACAnX,MAAAsW,UAAA,SAAAa,EAAA,CACAV,OAAA,YAGA,CAEAu+C,qBAAA,IAEAmF,mBAAA,EACAF,oBAAA,EACAU,gBAAA,EACAT,kBAAA,IAGAl3D,QAAAqrB,iBAAArrB,QAAA8e,KACA9hB,MAAAkJ,GAAA,IAAAlJ,MAAA4yD,GAKA,IAAAyH,EAAAr3D,QAAA4Z,KAAA7c,OAAA,CACAqT,IAAA,KACAiQ,GAAA,KACAipC,OAAA,KACAsO,eAAA,KAEA7R,SAAA,KACA8R,UAAA,EAEAC,WAAA,KACAC,eAAA,KACAC,cAAA,KACAC,aAAA,KAEAC,WAAA,KACAC,UAAA,KACAC,YAAA,KACAC,QAAA,KACAC,WAAA,KACAC,WAAA,KAEAC,aAAA,EACAC,WAAA,EACAC,kBAAA,KACAC,gBAAA,KACAC,SAAA,KACAC,gBAAA,KACAC,oBAAA,KAEAC,aAAA,KAEA59C,KAAA,WACAhd,KAAAiS,IAAA3T,EAAA,SAAAkQ,SAAA3P,MAAAkJ,GAAA4pD,KAAA32C,SAAA,OACAhb,KAAAkiB,GAAA5jB,EAAA,OAAA,CACAyX,GAAA,WACAtP,KAAA5H,MAAAg8D,sBAAAh8D,MAAA+F,OAAA,2BAAA,OACA4J,SAAAxO,KAAAiS,KACAjS,KAAA86D,iBAAAx8D,EAAA,wBAAAkQ,SAAAxO,KAAAkiB,IACA,IAAA64C,EAAAz8D,EAAA,yBAAAkQ,SAAAxO,KAAAkiB,IACAliB,KAAAmrD,OAAA7sD,EAAA,WAAAkQ,SAAAusD,GACA/6D,KAAAy5D,eAAAn7D,EAAA,kCAAAkQ,SAAAusD,GAAA7zC,OAEA,IAAAnZ,EAAAjC,OAAAo/B,iBAAA,EAAA,EAAA,EACAlrC,KAAAi6D,YAAA,GAAAlsD,EACA/N,KAAAk6D,QAAAl6D,KAAAi6D,YAAA,EACAj6D,KAAAm6D,WAAA,EAAApsD,EACA/N,KAAAo6D,WAAA,EAAArsD,EAEA/N,KAAA25D,WAAA35D,KAAAg7D,cAAA,KAAA,WACAh7D,KAAA45D,eAAA55D,KAAAg7D,cAAA,SAAA,WACAh7D,KAAA65D,cAAA75D,KAAAg7D,cAAA,QAAA,QACAh7D,KAAA85D,aAAA95D,KAAAg7D,cAAA,OAAA,WAAA9zC,OAEAlnB,KAAA+5D,WAAA/5D,KAAA45D,eAAA,GAAA9hB,WAAA,MACA93C,KAAAg6D,UAAAh6D,KAAA65D,cAAA,GAAA/hB,WAAA,MAEA93C,KAAAi7D,SAAAj7D,KAAA25D,WAAA,GAAA7hB,WAAA,MAAA,EAAA,GACA93C,KAAAi7D,SAAAj7D,KAAA85D,aAAA,GAAAhiB,WAAA,MAAA,EAAA,IAGAshB,eAAA,SAAAC,EAAAV,GACA34D,KAAAkiB,GAAA9T,KAAA,QAAAirD,GACAr5D,KAAAmrD,OAAA7nD,KAAA+1D,GACAV,EACA34D,KAAAy5D,eAAAn2D,KAAAq1D,GAAA/7B,OAEA58B,KAAAy5D,eAAAvyC,QAIAoyC,YAAA,SAAA1R,GACA,GAAAA,GACA5nD,KAAA45D,eAAA1yC,OACAlnB,KAAA65D,cAAA3yC,SAEAlnB,KAAA45D,eAAAh9B,OACA58B,KAAA65D,cAAAj9B,OACA58B,KAAA4nD,UAAAA,EAAA5nD,KAAA4nD,SACA5nD,KAAAk7D,YAAA,EAAAtT,EAAA,KAEA5nD,KAAAm7D,QAAA,EAAAvT,EAAA,MAIA5nD,KAAA4nD,SAAAA,GAGAtvC,SAAA,WACAtY,KAAAk7D,YAAA,EAAA,EAAA,KACAl7D,KAAA25D,WAAAnhD,SAAA,WAEAxY,KAAAk7D,YAAA,EAAA,EAAA,KACAl7D,KAAAkiB,GAAA9G,SACApb,KAAAie,eAKAs7C,aAAA,SAAA15D,GACAG,KAAA05D,WAIA15D,KAAA05D,UAAA,EACA15D,KAAA4nD,SAAA,KAEA5nD,KAAA25D,WAAAzyC,OACAlnB,KAAA45D,eAAA1yC,OACAlnB,KAAA65D,cAAA3yC,OACAlnB,KAAA85D,aAAAl9B,OAEA58B,KAAAo5D,eAAAv5D,KAGAs5D,aAAA,WACAn5D,KAAA05D,WAIA15D,KAAA05D,UAAA,EAEA15D,KAAA25D,WAAA/8B,OACA58B,KAAA45D,eAAAh9B,OACA58B,KAAA65D,cAAAj9B,OACA58B,KAAA85D,aAAA5yC,SAGA8zC,cAAA,SAAAjlD,EAAAqlD,GACA,IAAAC,EAAA/8D,EAAA,wBAAAyX,EAAA,YAAA/V,KAAAi6D,YAAA,aAAAj6D,KAAAi6D,YAAA,OAAAzrD,SAAAxO,KAAA86D,kBACAQ,EAAAD,EAAA,GAAAvjB,WAAA,MAKA,OAHAwjB,EAAA3iB,YAAAyiB,EACAE,EAAA5iB,UAAA14C,KAAAo6D,WACAkB,EAAAC,QAAA,QACAF,GAGAF,QAAA,SAAAK,EAAAC,GACAz7D,KAAAq6D,aAAAmB,EACAx7D,KAAAs6D,WAAAmB,EAEAz7D,KAAAi7D,SAAAj7D,KAAA+5D,WAAAyB,EAAAC,GACAz7D,KAAAi7D,SAAAj7D,KAAAg6D,UAAAwB,EAAAC,IAGAR,SAAA,SAAAK,EAAAE,EAAAC,GACAH,EAAAljB,UAAA,EAAA,EAAAp4C,KAAAi6D,YAAAj6D,KAAAi6D,aACAqB,EAAA/iB,YACA+iB,EAAAI,IAAA17D,KAAAk6D,QAAAl6D,KAAAk6D,QAAAl6D,KAAAm6D,YAAA,IAAA,EAAAqB,GAAA3qD,KAAAgiC,IAAA,IAAA,EAAA4oB,GAAA5qD,KAAAgiC,IACAyoB,EAAA/rB,SACA+rB,EAAAK,aAGAT,YAAA,SAAAU,EAAAC,EAAA70D,GACAhH,KAAA06D,iBACAzyC,aAAAjoB,KAAA06D,iBAGA16D,KAAAy6D,SAAA,EACAz6D,KAAAu6D,mBAAAqB,EAAA57D,KAAAq6D,cAAA,GACAr6D,KAAAw6D,iBAAAqB,EAAA77D,KAAAs6D,YAAA,GACAt6D,KAAA26D,oBAAA3zD,EACAhH,KAAA87D,oBAGAA,iBAAA,WACA97D,KAAAm7D,QAAAn7D,KAAAq6D,aAAAr6D,KAAAu6D,kBAAAv6D,KAAAs6D,WAAAt6D,KAAAw6D,iBAEAx6D,KAAAy6D,WAEAz6D,KAAAy6D,SAAA,GACAz6D,KAAA06D,gBAAAxyC,WAAAloB,KAAA87D,iBAAAx0C,KAAAtnB,MAAA,IACAA,KAAA26D,qBACA36D,KAAA26D,yBCvpCA97D,MAAAk9D,cAAAl9D,MAAAsV,iBAAAvV,OAAA,CACAo9D,eAAA,KACAC,qBAAA,KACAC,gBAAA,KAEAl/C,KAAA,SAAAnJ,EAAAf,EAAAoB,GACAlU,KAAAsX,GAAA,eAAAtX,KAAAm8D,aAAA70C,KAAAtnB,OACAA,KAAAsX,GAAA,aAAAtX,KAAAm8D,aAAA70C,KAAAtnB,OACAA,KAAA6iB,KAAAhP,EAAAf,EAAAoB,IAGAoU,UAAA,WAEAtoB,KAAAg8D,eAAA,GAEA,IAAA,IAAA38D,EAAA,EAAAA,EAAAR,MAAAu9D,uBAAA97D,OAAAjB,IAAA,CACA,IAAAC,EAAAT,MAAAu9D,uBAAA/8D,GAEAW,KAAA4pB,eAAA,SAAAtqB,EAAA+8D,MACAr8D,KAAAg8D,eAAAt8D,KAAAJ,GAIAU,KAAA6iB,QAGA8G,oBAAA,WAEA,GAAA,UAAA3pB,KAAAkU,SAAA6S,SAAA,oBAAAu1C,mBACA,IAAA,IAAAj9D,EAAA,EAAAA,EAAAW,KAAA+oB,SAAAzoB,OAAAjB,IAAA,CACA,IAAAykB,EAAAxlB,EAAA0B,KAAA+oB,SAAA1pB,IAEA,GAAAykB,EAAA/c,KAAA,YAAAu1D,mBACA,OAAAx4C,EAAA/c,KAAA,OAKA,OAAA/G,KAAA6iB,QAGAs5C,aAAA,WACA,GAAAn8D,KAAA8jB,QAAA,CAKA,IAEAzkB,EAAAoH,EAAAwP,EAFAsmD,EAAAv8D,KAAA8jB,QAAA/c,KAAA,UAOA,GAAA/G,KAAAg8D,eAAA17D,OAAA,CAOA,IAAAk8D,EAYA96B,EAVA,GAPA1hC,KAAAi8D,sBACAj8D,KAAAi8D,qBAAA7gD,SAMAmhD,EACA,IAAAl9D,EAAA,EAAAA,EAAAW,KAAAg8D,eAAA17D,OAAAjB,IACA,GAAAW,KAAAg8D,eAAA38D,GAAA84B,SAAAokC,EAAA,CACAC,EAAAx8D,KAAAg8D,eAAA38D,GACA,MAmCA,GA9BAW,KAAAi8D,qBAAA39D,EAAA,kCAKAk+D,GACA/1D,EAAAzG,KAAAy8D,qBAAAD,GACAvmD,EAAA,UAAAjW,KAAAkU,SAAA6S,QAAAloB,MAAAc,EAAA,MAAA,gBAAAd,MAAAc,EAAA,MAAA,uBAAA,CAAAL,MAAAk9D,EAAAt3D,OACAlF,KAAAk8D,gBAAA59D,EAAA,kCAAAmI,EAAA,IAAA5H,MAAAuE,WAAA6S,GAAA,QAAAzH,SAAAxO,KAAAi8D,sBAEA,UAAAj8D,KAAAkU,SAAA6S,SACA/mB,KAAAqd,YAAArd,KAAAk8D,gBAAA,SAAA,SAAA3kD,GACAvX,KAAA08D,yBAAAnlD,EAAA8C,cAAAsiD,aAAA,eAIA38D,KAAAg8D,eAAA17D,OAAA,IACAohC,EAAApjC,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,uBACAzM,SAAAxO,KAAAi8D,wBAGAj8D,KAAAk8D,gBAAAx6B,EAAApjC,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,8BACA3X,KAAAzE,MAAAc,EAAA,MAAA,kBACA6O,SAAAxO,KAAAi8D,sBAGAv6B,EAAA,CACA,IAAAk7B,EAAA,yBAEA,IAAAv9D,EAAA,EAAAA,EAAAW,KAAAg8D,eAAA17D,OAAAjB,IAAA,CACA,IAAAC,EAAAU,KAAAg8D,eAAA38D,GAEA,UAAAW,KAAAkU,SAAA6S,SAAAznB,IAAAk9D,IACA/1D,EAAAzG,KAAAy8D,qBAAAn9D,GACA2W,EAAA,UAAAjW,KAAAkU,SAAA6S,QAAAznB,EAAA4F,KAAArG,MAAAc,EAAA,MAAA,uBAAA,CAAAL,MAAAA,EAAA4F,OACA03D,GAAA,UAAAn2D,EAAA,IAAA5H,MAAAuE,WAAA6S,GAAA,aAMA3X,EAFAs+D,GAAA,eAEApuD,SAAAxO,KAAAi8D,sBACA,IAAAvG,EAAA,IAAA7zD,QAAA8Y,QAAA+mB,GAEA,UAAA1hC,KAAAkU,SAAA6S,SACA2uC,EAAAp+C,GAAA,eAAAC,IACAvX,KAAA08D,yBAAAnlD,EAAAib,OAAAmqC,aAAA,cAKA38D,KAAAyxB,UAAAzxB,KAAAi8D,sBAMA,GAAA,UAAAj8D,KAAAkU,SAAA6S,SAAA,oBAAAoF,QAAA,CACA,IAAAxiB,EAAA,aAEA4yD,IACA5yD,GAAA,IAAA4yD,GAGApwC,QAAAC,aAAA,GAAA,GAAAvtB,MAAA+F,OAAA+E,OAIA8yD,qBAAA,SAAAn9D,GACA,GAAA,UAAAU,KAAAkU,SAAA6S,QAAA,CACA,MAAApd,EAAA,cAAArK,EAAA64B,aACA0kC,EAAA78D,KAAAipB,UACAnpB,EAAA+8D,EAAA,CAAAA,KAAAA,EAAA1kC,aAAA7vB,EACA,MAAA,SAAAzJ,MAAA+F,OAAA+E,EAAA7J,MAGA,MAAA,YAAAR,EAAAyW,OAGA2mD,yBAAA,SAAAI,GACA,IAAA98D,KAAAk8D,gBAAArmD,SAAA,WAAA,CAOA,IAFA,IAAAvW,EAEAD,EAAA,EAAAA,EAAAW,KAAAg8D,eAAA17D,OAAAjB,IACA,GAAAW,KAAAg8D,eAAA38D,GAAA0W,IAAA+mD,EAAA,CACAx9D,EAAAU,KAAAg8D,eAAA38D,GACA,MAIA,GAAAC,EAAA,CAIAU,KAAAk8D,gBAAAlqD,SAAA,YACA,IAAA+qD,EAAA/8D,KAAAk8D,gBAAA54D,OACAtD,KAAAk8D,gBAAA54D,KAAAzE,MAAAc,EAAA,MAAA,uBAAA,CAAAL,MAAAA,EAAA4F,QAEArG,MAAAyV,oBAAAtU,KAAA6T,YAAA,CACAmpD,WAAAh9D,KAAAi8D,qBACAjmD,OAAAhW,KAAAgW,OACAgJ,WAAA,CACA89C,QAAAA,GAEAl6C,UAAA,KACA5iB,KAAAk8D,gBAAA5lD,YAAA,YAAAhT,KAAAy5D,IAEAv6C,cAAA9X,IAEA,IAAAuyD,EAAA,SAAA39D,EAAA+8D,IAEAr8D,KAAA4jB,YAAAq5C,GACAj9D,KAAAkwB,kBAAA+sC,GAGAj9D,KAAAwxB,yBAAA9mB,EAAAqL,IACA/V,KAAA0oB,yBAOA7pB,MAAA+U,0BAAA,4BAAA/U,MAAAk9D,eC3MAl9D,MAAAq+D,oBAAAr+D,MAAA+6B,uBAAAh7B,OAAA,CACAkb,YAAA,WACA9Z,KAAA6iB,KAAAyhC,MAAAtkD,KAAAo6B,WACAp6B,KAAAkU,SAAAomB,UAAA,GAGAwC,iBAAA,WACA,IAAA5oB,EAAAlU,KAAA6iB,OAEA,OADA3O,EAAA8rB,cAAA,EACA9rB,GAGA2mB,YAAA,WACA,OAAA76B,KAAA+5B,mBAAAjkB,KAAA,aAGAsnB,cAAA,SAAAvmB,GAEA7W,KAAA+xB,MAAAnZ,UACA5Y,KAAA+xB,MAAA4N,mBACA3/B,KAAA+xB,MAAA0N,mBACAz/B,KAAA+xB,MAAA6N,oBAKA,IAFA,IAAAu9B,EAAAn9D,KAAA0tB,wBAEAruB,EAAA,EAAAA,EAAAwX,EAAAvW,OAAAjB,IACA89D,EAAAz9D,KAAAmX,EAAAxX,GAAA0W,IAGA,IAAAhP,EAAA,CACAq2D,YAAAD,EACAnnD,OAAAa,EAAA,GAAAb,OACAD,GAAA/V,KAAAkU,SAAA6B,GACA7Q,KAAAlF,KAAAkU,SAAAhP,KACAm4D,YAAAr9D,KAAAkU,SAAAmpD,YACAC,eAAAt9D,KAAAkU,SAAAopD,gBAGAz+D,MAAAgI,kBAAA,qCAAAE,EAAA,CAAA2D,EAAA9C,KAMA,GALA5H,KAAA+xB,MAAAhZ,SACA/Y,KAAA+xB,MAAA2N,kBACA1/B,KAAA+xB,MAAAyN,kBACAx/B,KAAA+xB,MAAA8N,oBAEA,YAAAj4B,EAAA,CACA,IACA21D,EADAj/D,EAAAoM,EAAAhM,MACAsc,SAAA,aAEAhb,KAAA+5B,mBAAApjB,YAAA4mD,GACAv9D,KAAA+5B,mBAAAwjC,EACAv9D,KAAA46B,gBAIA,IAFA,IAAA4iC,EAAA,GAEAn+D,EAAA,EAAAA,EAAAwX,EAAAvW,OAAAjB,IAAA,CACA,IAAAkV,EAAAsC,EAAAxX,GACAuW,EAAA5V,KAAAmxB,eAAA5c,EAAAwB,IAEAH,IACA5V,KAAA89B,wBAAAvpB,EAAAqB,SAAAA,GACA4nD,EAAA99D,KAAA6U,IAIAvU,KAAA09B,gCACA19B,KAAA+xB,MAAA7K,OACAlnB,KAAA+9B,iBAAAy/B,OAKAvhC,cAAA,SAAArmB,GAEA,IAAA6nD,EAAA7nD,EAAA8H,IAAA9H,EAAAqR,SAAA0M,SAAA,MAAA7d,KAAA,aAGA9V,KAAA67B,eAAA4hC,GAGA,IAAA,IAAAp+D,EAAA,EAAAA,EAAAo+D,EAAAn9D,OAAAjB,IACAW,KAAA09D,qBAAAD,EAAAp+D,IAIAq+D,qBAAA,SAAAD,EAAAp+D,GACA,IAAA2H,EAGA3H,IAAAo+D,EAAAn9D,OAAA,IACA0G,EAAA,KACA,IAAAiL,EAAAwrD,EAAAzlD,QAAAiP,SAAAA,SACAlV,EAAAE,EAAAgV,SAEAlV,EAAA,KAAA/R,KAAA+5B,mBAAA,IAAA9nB,EAAA0hB,WAAArzB,OACA2R,EAAAmJ,SAEArJ,EAAAqJ,WAKA,IAAAtH,EAAA,KACA9T,KAAAm8B,mBAAAshC,EAAAprD,GAAAhT,GAAA2H,IAGA,IAAA3H,EACAyU,IAEAoU,WAAApU,EAAA,IAAAzU,MC5GAR,MAAA8+D,OAAA,GAOA9+D,MAAA8+D,OAAAC,UAAA/7D,QAAA4Z,KAAA7c,OAAA,CACAi/D,QAAA,KACAC,KAAA,KAEA9gD,KAAA,SAAAjW,GACA,IAAA82D,EAAA92D,EAAA82D,QACAC,EAAA/2D,EAAA+2D,KAEAA,EAAAxW,QAAAjN,IACA/7C,EAAAkV,KAAA6mC,GAAA,SAAA0jB,GACA,IAEAC,EAEA,OAJAH,EAAAE,GAIAz8D,MACA,IAAA,OACA08D,EAAAp7D,GAAAq7D,UAAA,YACA5jB,EAAA0jB,GAAAC,EAAA3jB,EAAA0jB,IACA,MAEA,IAAA,WACAC,EAAAp7D,GAAAq7D,UAAA,qBACA5jB,EAAA0jB,GAAAC,EAAA3jB,EAAA0jB,IACA,MAEA,IAAA,UACA1jB,EAAA0jB,GAAA1jB,EAAA0jB,GAAA,IACA,MAEA,IAAA,SACA1jB,EAAA0jB,IAAA1jB,EAAA0jB,SASA/9D,KAAA69D,QAAAA,EACA79D,KAAA89D,KAAAA,KAUAj/D,MAAA8+D,OAAAO,IAAAr8D,QAAA4Z,KAAA7c,OAAA,CACAkU,WAAA,KACAqrD,KAAA,KAEAnhD,KAAA,SAAAlK,GACA9S,KAAA8S,WAAAA,EAEA9S,KAAAm+D,KAAA7/D,EAAA,+BAAAkQ,SAAAxO,KAAA8S,YAEA9S,KAAAknB,QAGAk3C,WAAA,SAAA1/D,GACAsB,KAAAm+D,KAAAz/D,KAAAA,IAGA2/D,YAAA,SAAA7/B,GACAx+B,KAAAm+D,KAAA78C,IAAA,OAAAkd,EAAA/lB,KAAA,MACAzY,KAAAm+D,KAAA78C,IAAA,MAAAkd,EAAApF,IAAA,OAGAwD,KAAA,WACA58B,KAAAm+D,KAAA78C,IAAA,UAAA,UAGA4F,KAAA,WACAlnB,KAAAm+D,KAAA78C,IAAA,UAAA,WASAziB,MAAA8+D,OAAAW,UAAAz8D,QAAA4Z,KAAA7c,OAAA,CACAkU,WAAA,KACAyrD,OAAA,KAEAC,eAAA,WACAC,UAAA,KAEA57D,aAAA,KACA67D,iBAAA,KACAnmD,YAAA,KAEAomD,IAAA,KACAjzB,MAAA,KACAre,OAAA,KAEArQ,KAAA,SAAA3F,EAAAnD,GACAlU,KAAA8S,WAAAuE,EAEArX,KAAA8Z,YAAAjb,MAAA8+D,OAAAW,UAAArhD,UACAjd,KAAA8Z,YAAA5F,GAEA,IAAA0qD,EAAA,CACAC,QAAA/yD,OAAAgzD,UACAC,uBAAAjzD,OAAAhJ,yBACAk8D,2BAAAlzD,OAAAmzD,8BAGAj/D,KAAA8Z,YAAA8kD,GAEAh8D,GAAAjB,OAAAmK,QAAAwL,GAAA,SAAA,KACAtX,KAAAk/D,YAIAplD,YAAA,SAAA5F,EAAA+I,GACA,IAAAkiD,OAAA,IAAAn/D,KAAAkU,SAAA,GAAAlU,KAAAkU,SACAlU,KAAAkU,SAAA5V,EAAAM,QAAA,EAAA,GAAAugE,EAAAliD,EAAA/I,IAGAkrD,KAAA,SAAAX,EAAAvqD,GAGAlU,KAAA8Z,YAAA5F,GAEAlU,KAAAy+D,UAAAA,EACAz+D,KAAA6C,aAAAD,GAAAC,aAAA7C,KAAAkU,SAAA6qD,wBACA/+D,KAAA0+D,iBAAA97D,GAAA87D,iBAAA1+D,KAAAkU,SAAA8qD,4BACAh/D,KAAAuY,YAAAvY,KAAAkU,SAAAqE,YAIAvY,KAAAu+D,QACAv+D,KAAAu+D,OAAAnjD,SAGA,IAAAwU,EAAA5vB,KAAAw+D,eAEAx+D,KAAAkU,SAAAmrD,aACAzvC,GAAA,IAAA5vB,KAAAkU,SAAAmrD,YAGAr/D,KAAAu+D,OAAAjgE,EAAA,eAAAsxB,SAAAphB,SAAAxO,KAAA8S,aAGAosD,OAAA,WACAl/D,KAAAo/D,KAAAp/D,KAAAy+D,UAAAz+D,KAAAkU,WAGAorD,iBAAA,WAEAhhE,EAAA,QAAA0B,KAAAu+D,QAAA/qD,MAAA,SAAA+rD,EAAAC,GACA,IAAAC,EAAAnhE,EAAA,OAAAkhE,GAEAC,EAAAzhC,QACAxvB,SAAAgxD,GAEAC,EAAArxD,KAAA,SAAA,WACAqxD,EAAArxD,KAAA,eAAA,QAGA,CACA6O,SAAA,CACA8hD,uBAAA,KACAC,2BAAA,KACAH,QAAA,CACAa,aAAA,OACAC,cAAA,OACAC,eAAA,QACAC,iBAAA,CACAC,IAAA,UACAC,MAAA,SACAC,KAAA,OAGAnT,OAAA,CAAAzzB,IAAA,EAAA1gB,MAAA,EAAAunD,OAAA,EAAAxnD,KAAA,GACA4mD,WAAA,KACAa,OAAA,CAAA,UAAA,UAAA,UAAA,UAAA,cASArhE,MAAA8+D,OAAAwC,KAAAthE,MAAA8+D,OAAAW,UAAA1/D,OAAA,CACAwhE,IAAA,KACAC,YAAA,KAEArjD,KAAA,SAAA3F,EAAAnD,GACAlU,KAAA6iB,KAAAxL,EAAAxY,MAAA8+D,OAAAwC,KAAAljD,UAEAjd,KAAA8Z,YAAA5F,IAGAkrD,KAAA,SAAAX,EAAAvqD,GACAlU,KAAA6iB,KAAA47C,EAAAvqD,GAEAlU,KAAAogE,MACApgE,KAAAogE,IAAA,MAGA,IAAAvT,EAAA7sD,KAAAsgE,iBAEAtgE,KAAA0rC,MAAA1rC,KAAAu+D,OAAA7yB,QAAAmhB,EAAAp0C,KAAAo0C,EAAAn0C,MACA1Y,KAAAqtB,OAAArtB,KAAAu+D,OAAAlxC,SAAAw/B,EAAAzzB,IAAAyzB,EAAAoT,OAIA,IAAAtB,EAAA,CACAjzB,MAAA1rC,KAAA0rC,OAAAmhB,EAAAp0C,KAAAo0C,EAAAn0C,OACA2U,OAAArtB,KAAAqtB,QAAAw/B,EAAAzzB,IAAAyzB,EAAAoT,QACAM,WAAA,QAAAvgE,KAAAuY,YAAAs0C,EAAAp0C,KAAAo0C,EAAAn0C,MACA8nD,WAAA3T,EAAAzzB,KAGAp5B,KAAA2+D,IAAA/7D,GAAAjB,OAAA3B,KAAAu+D,OAAAzrC,IAAA,IAAAvgB,OAAA,OACAnE,KAAA,QAAAuwD,EAAAjzB,OACAt9B,KAAA,SAAAuwD,EAAAtxC,QAEArtB,KAAAqgE,YAAArgE,KAAA2+D,IAAApsD,OAAA,KACAnE,KAAA,YAAA,aAAAuwD,EAAA4B,cAAA5B,EAAA6B,eAIAxgE,KAAAygE,YACAzgE,KAAA0gE,WACA1gE,KAAA2gE,YACA3gE,KAAA4gE,mBAGAH,UAAA,WAGA,IAAAl2B,EAAAvqC,KAAA6gE,MAAA,GAEAC,EAAAl+D,GAAAm+D,WAAAx2B,GACAy2B,WAAAhhE,KAAAihE,iBACAC,MAHA,GAKAlhE,KAAAqgE,YAAA9tD,OAAA,KACAnE,KAAA,QAAA,gBACAA,KAAA,YAAA,gBAAApO,KAAAqtB,WACArL,KAAA8+C,GAIA,IAEAK,EAFA32B,EAAAxqC,KAAAohE,OAIA,QAAAphE,KAAAuY,aACA4oD,EAAAv+D,GAAAy+D,SAAA72B,GACAw2B,WAAAhhE,KAAAshE,iBACAC,WAAAvhE,KAAAwhE,kBACAN,MAPA,GASAlhE,KAAAqgE,YAAA9tD,OAAA,KACAnE,KAAA,QAAA,gBACA4T,KAAAm/C,KAEAA,EAAAv+D,GAAA6+D,UAAAj3B,GACAw2B,WAAAhhE,KAAAshE,iBACAC,WAAAvhE,KAAAwhE,kBACAN,MAhBA,GAkBAlhE,KAAAqgE,YAAA9tD,OAAA,KACAnE,KAAA,QAAA,gBACAA,KAAA,YAAA,aAAApO,KAAA0rC,YACA1pB,KAAAm/C,IAKAnhE,KAAAs/D,oBAGAoB,SAAA,WACA,GAAA1gE,KAAAkU,SAAA4sD,MAAAY,SAAA,CACA,IAAAn3B,EAAAvqC,KAAA6gE,OACAC,EAAAl+D,GAAAm+D,WAAAx2B,GAAA22B,MAAA,GAAAS,cAAA,GACA3hE,KAAAqgE,YAAA9tD,OAAA,KACAnE,KAAA,QAAA,UACAA,KAAA,YAAA,gBAAApO,KAAAqtB,WACArL,KAAA8+C,GAGA,GAAA9gE,KAAAkU,SAAAitD,MAAAO,SAAA,CACA,IAEAP,EAFA32B,EAAAxqC,KAAAohE,OAIA,QAAAphE,KAAAuY,aACA4oD,EAAAv+D,GAAAy+D,SAAA72B,GAAA02B,MAAA,GACAlhE,KAAAqgE,YAAA9tD,OAAA,KACAnE,KAAA,QAAA,UACAA,KAAA,YAAA,aAAApO,KAAA0rC,MAPA,SAQA1pB,KAAAm/C,KAEAA,EAAAv+D,GAAA6+D,UAAAj3B,GAAA02B,MAAA,GACAlhE,KAAAqgE,YAAA9tD,OAAA,KACAnE,KAAA,QAAA,UACAA,KAAA,YAAA,mBACA4T,KAAAm/C,MAKAR,UAAA,WACA,IAAAp2B,EAAAvqC,KAAA6gE,MAAA,GACAr2B,EAAAxqC,KAAAohE,OAIA,GAAAphE,KAAAkU,SAAA4sD,MAAAc,UAAA,CACA,IAAAC,EAAAj/D,GAAAm+D,WAAAx2B,GAEAvqC,KAAAqgE,YAAA9tD,OAAA,KACAnE,KAAA,QAAA,eACAA,KAAA,YAAA,eAAApO,KAAAqtB,WACArL,KAAA6/C,EACAC,UAAA9hE,KAAAqtB,OAAA,EAAA,GACA2zC,WAAA,KAMA,GAAAhhE,KAAAkU,SAAAitD,MAAAS,UAAA,CACA,IAAAG,EAAAn/D,GAAAy+D,SAAA72B,GAEAxqC,KAAAqgE,YAAA9tD,OAAA,KACAnE,KAAA,QAAA,eACAA,KAAA,YAAA,oBACA4T,KAAA+/C,EACAD,UAAA9hE,KAAA0rC,MAAA,GACAs1B,WAAA,IACAO,WAAAvhE,KAAAwhE,kBACAN,MAZA,IAkBA,IAAAc,EAAAp/D,GAAAo/D,OACAz3B,GAAA,SAAA8P,GACA,OAAA9P,EAAA8P,EAAA,OAEA7P,GAAA,SAAA6P,GACA,OAAA7P,EAAA6P,EAAA,OAGAr6C,KAAAqgE,YACA9tD,OAAA,KACAnE,KAAA,QAAA,cACAmE,OAAA,QACA0vD,MAAAjiE,KAAAy+D,UAAAX,MACAhY,MAAA,OAAA,QACAA,MAAA,SAAA9lD,KAAAkU,SAAAgsD,OAAA,IACApa,MAAA,eAAA,OACA13C,KAAA,IAAA4zD,GAIA,IAAAE,EAAAt/D,GAAAs/D,OACA33B,GAAA,SAAA8P,GACA,OAAA9P,EAAA8P,EAAA,OAEA8nB,GAAAniE,KAAAqtB,QACA+0C,IAAA,SAAA/nB,GACA,OAAA7P,EAAA6P,EAAA,OAGAr6C,KAAAqgE,YACA9tD,OAAA,KACAnE,KAAA,QAAA,cACAmE,OAAA,QACA0vD,MAAAjiE,KAAAy+D,UAAAX,MACAhY,MAAA,OAAA9lD,KAAAkU,SAAAgsD,OAAA,IACApa,MAAA,eAAA,OACA13C,KAAA,IAAA8zD,GAIAliE,KAAAkU,SAAAmuD,OACAriE,KAAAqgE,YAAA9tD,OAAA,KACAnE,KAAA,QAAA,SACAuqB,UAAA,UACA5xB,KAAA/G,KAAAy+D,UAAAX,MACAwE,QACA/vD,OAAA,UACAuzC,MAAA,OAAA9lD,KAAAkU,SAAAgsD,OAAA,IACA9xD,KAAA,QAAA,CAAAisC,EAAAt7C,IAAA,aAAAA,GACAqP,KAAA,IAAA,GACAA,KAAA,KAAAisC,GAAA9P,EAAA8P,EAAA,KACAjsC,KAAA,KAAAisC,GAAA7P,EAAA6P,EAAA,MAIAumB,gBAAA,WACA,GAAA5gE,KAAAkU,SAAAquD,KAAA,CACAviE,KAAAogE,MACApgE,KAAAogE,IAAA,IAAAvhE,MAAA8+D,OAAAO,IAAAl+D,KAAAu+D,SAKA,IAAAiE,EAAAxiE,KAAAsgE,iBAGAmC,GADAziE,KAAAqgE,YAAA1+D,OAAA,kBAAA+gE,OAAAC,iBAAAH,EAAA/pD,KAAA+pD,EAAA9pD,MAAAipD,KACA3hE,KAAAy+D,UAAAX,KAAAx9D,OAAA,GAIAsiE,EAAA/xD,KAAAob,IAAA,EAAAw2C,GAIAl4B,EAAAvqC,KAAA6gE,MAAA,GACAr2B,EAAAxqC,KAAAohE,OAEAphE,KAAAqgE,YAAA9tD,OAAA,KACAnE,KAAA,QAAA,gBACAuqB,UAAA,QACA5xB,KAAA/G,KAAAy+D,UAAAX,MACAwE,QAAA/vD,OAAA,QACAnE,KAAA,QAAA,eACA03C,MAAA,OAAA,eACAA,MAAA,eAAA,KACA13C,KAAA,QAAAw0D,GACAx0D,KAAA,SAAApO,KAAAqtB,QACAjf,KAAA,IAAAisC,GAAA9P,EAAA8P,EAAA,IAAAuoB,EAAA,GACAtrD,GAAA,YAAA,CAAA+iC,EAAAt7C,KAGAiB,KAAAqgE,YAAA1+D,OAAA,SAAA5C,GAAAqP,KAAA,IAAA,GAIA,IAAAy0D,EAAAvkE,EAAA,WACAwkE,EAAAxkE,EAAA,2BAAAkQ,SAAAq0D,GACAE,EAAAzkE,EAAA,2BAAAkQ,SAAAq0D,GAEAC,EAAApkE,KAAAsB,KAAAihE,eAAAjhE,CAAAq6C,EAAA,KACA0oB,EAAArkE,KAAAsB,KAAAshE,eAAAthE,CAAAq6C,EAAA,KAEA,IAAA2oB,EAAAH,EAAA/vC,IAAA,GAEA9yB,KAAAogE,IAAAhC,WAAA4E,GAIA,IAIAvqD,EAJAo0C,EAAA7sD,KAAAsgE,iBAGAlnC,EAAAoR,EAAA6P,EAAA,IADA,GAIA,QAAAr6C,KAAAuY,aACAE,EAAA8xB,EAAA8P,EAAA,IAAAwS,EAAAp0C,KALA,GAOAzY,KAAAu+D,OAAAv8D,SAAAyW,KAAAA,EAAAzY,KAAAogE,IAAAjC,KAAAzyB,QACA1rC,KAAAu+D,OAAAv8D,SAAAyW,KAAAzY,KAAAu+D,OAAA7yB,QARA,KAWAjzB,EAAA8xB,EAAA8P,EAAA,KAAAr6C,KAAAogE,IAAAjC,KAAAzyB,QAXA,MAcAjzB,EAAA8xB,EAAA8P,EAAA,KAAAr6C,KAAAogE,IAAAjC,KAAAzyB,QAAAmhB,EAAAp0C,KAdA,IAiBAA,EAAA,IACAA,EAAA8xB,EAAA8P,EAAA,IAAAwS,EAAAp0C,KAlBA,IAqBA,IAAA+lB,EAAA,CACApF,IAAAA,EACA3gB,KAAAA,GAGAzY,KAAAogE,IAAA/B,YAAA7/B,GAIAx+B,KAAAogE,IAAAxjC,SAEAtlB,GAAA,WAAA,CAAA+iC,EAAAt7C,KAEAiB,KAAAqgE,YAAA1+D,OAAA,SAAA5C,GAAAqP,KAAA,IAAA,GAGApO,KAAAogE,IAAAl5C,WAKAo5C,eAAA,WACA,IAAAzT,EAAA7sD,KAAAkU,SAAA24C,OAIAt+C,EAAAvO,KAAAwhE,iBACAyB,EAAA,EAmBA,OAjBA3kE,EAAAkV,KAAAjF,EAAA,CAAAtP,EAAAkG,KACA,IAKA+9D,EALA,EAEAljE,KAAAshE,eAEAv+D,CAAAoC,GACA7E,OAEA4iE,EAAAD,IACAA,EAAAC,KAIAD,GAAA,GAEApW,EAAAp0C,KAAAwqD,EAEApW,GAGAgU,KAAA,SAAAsC,GACA,IAAAC,EAAAxgE,GAAAwxB,IAAAp0B,KAAAy+D,UAAAX,MAAA,SAAAzjB,GACA,OAAAA,EAAA,MAGAgpB,EAAAzgE,GAAAqpB,IAAAjsB,KAAAy+D,UAAAX,MAAA,SAAAzjB,GACA,OAAAA,EAAA,MAGAipB,EAAA,CAAAF,EAAAC,GAEA,QAAArjE,KAAAuY,cACA+qD,EAAA,CAAAD,EAAAD,IAGA,IAAA3qD,EAAA,EACAC,EAAA,EAEAyqD,IACA1qD,EAAA,EACAC,EAAA,GAGA,IAAA6xB,EAAA3nC,GAAA2gE,YAAAC,MAAA,CAAA/qD,EAAAzY,KAAA0rC,MAAAhzB,IAIA,OAFA6xB,EAAAl1B,OAAAiuD,GAEA/4B,GAGA62B,KAAA,WACA,IAAAqC,EAAA,CAAA,EAAAzjE,KAAA0jE,gBAEAl5B,EAAA5nC,GAAA+gE,cAAAH,MAAA,CAAAxjE,KAAAqtB,OAAA,IAIA,OAFAmd,EAAAn1B,OAAAouD,GAEAj5B,GAGAy2B,cAAA,WASA,OANAjhE,KAAAkU,SAAA4sD,MAAA/9D,YAAAzE,EAAA6kB,KACAnjB,KAAAkU,SAAA4sD,MAAA/9D,UAAA/C,MAEAnB,MAAA8+D,OAAAiG,MAAAC,iBAAA7jE,KAAA0+D,iBAAA1+D,KAAAkU,WAMAotD,cAAA,WASA,OANAthE,KAAAkU,SAAAitD,MAAAp+D,YAAAzE,EAAA6kB,KACAnjB,KAAAkU,SAAAitD,MAAAp+D,UAAA/C,MAEAnB,MAAA8+D,OAAAiG,MAAAE,mBAAA9jE,KAAA6C,aAAA7C,KAAAy+D,UAAAZ,QAAA,GAAAv8D,KAAAtB,KAAAkU,WAMAwvD,aAAA,WACA,OAAA9gE,GAAAqpB,IAAAjsB,KAAAy+D,UAAAX,MAAA,SAAAzjB,GACA,OAAAA,EAAA,OAIAmnB,eAAA,WACA,IAAAuC,EAAA/jE,KAAA0jE,eAEA,OAAAK,EAAA,EACA,CAAAA,EAAA,EAAAA,GAEA,CAAA,EAAAA,KAGA,CACA9mD,SAAA,CACAoiD,WAAA,OACAxS,OAAA,CAAAzzB,IAAA,GAAA1gB,MAAA,EAAAunD,OAAA,GAAAxnD,KAAA,GACA4pD,OAAA,EACAE,MAAA,EACAzB,MAAA,CACAc,WAAA,EACAF,UAAA,EACA3+D,UAAAzE,EAAA6kB,MAEAg+C,MAAA,CACAS,WAAA,EACAF,UAAA,EACA3+D,UAAAzE,EAAA6kB,SAUAtkB,MAAA8+D,OAAAiG,MAAA,CACAI,YAAA,SAAAtzD,GACA,IAAAuzD,EAAA9hE,SAAAuO,EAAA,IAEA0H,EAAA,CACAnH,MAAAJ,KAAAC,MAAAmzD,EAAA,MACAjzD,QAAAH,KAAAC,OAAAmzD,EAAA,KAAA7rD,EAAAnH,OAAA,IACAP,QAAAuzD,EAAA,KAAA7rD,EAAAnH,MAAA,GAAAmH,EAAApH,SAeA,OAZAoH,EAAAnH,MAAA,KACAmH,EAAAnH,MAAA,IAAAmH,EAAAnH,OAGAmH,EAAApH,QAAA,KACAoH,EAAApH,QAAA,IAAAoH,EAAApH,SAGAoH,EAAA1H,QAAA,KACA0H,EAAA1H,QAAA,IAAA0H,EAAA1H,SAGA,GAAA0H,EAAAnH,SAAAmH,EAAApH,WAAAoH,EAAA1H,WAGAmzD,iBAAA,SAAAnF,EAAAwF,GACA,OAAAA,EAAAC,WACA,IAAA,OACA,OAAAzF,EAAAn9D,OAAA,MAEA,IAAA,QACA,OAAAm9D,EAAAn9D,OAAA2iE,EAAArF,QAAAgB,iBAAAE,OAEA,IAAA,OACA,OAAArB,EAAAn9D,OAAA2iE,EAAArF,QAAAgB,iBAAAC,IAAA,aAEA,QACA,OAAApB,EAAAn9D,OAAA2iE,EAAArF,QAAAgB,iBAAAC,OAIAgE,mBAAA,SAAAjhE,EAAAvB,EAAA4iE,GACA,OAAA5iE,GACA,IAAA,WACA,OAAAuB,EAAAtB,OAAA2iE,EAAArF,QAAAe,gBAEA,IAAA,UACA,OAAA/8D,EAAAtB,OAAA2iE,EAAArF,QAAAc,eAEA,IAAA,OACA,OAAA9gE,MAAA8+D,OAAAiG,MAAAI,YAEA,IAAA,SACA,OAAAnhE,EAAAtB,OAAA2iE,EAAArF,QAAAa,iBCrrBA7gE,MAAAulE,WAAAviE,QAAA4Z,KAAA7c,OAAA,CACAkU,WAAA,KACAxO,OAAA,KACA+/D,gBAAA,KACAC,cAAA,KACAC,YAAA,KAEAvnD,KAAA,SAAA3F,GACArX,KAAA8S,WAAAxU,EAAA+Y,GACArX,KAAAsE,OAAAtE,KAAA8S,WAAAgD,KAAA,gBACA9V,KAAAqkE,gBAAArkE,KAAA8S,WAAAkI,SAAA,UACAhb,KAAAskE,cAAAtkE,KAAAqkE,gBAAArpD,SAAA,kBAEAhb,KAAAwkE,mBACAxkE,KAAAykE,mBAEAzkE,KAAAqd,YAAArd,KAAAsE,OAAA,QAAA,qBAGAkgE,iBAAA,WACA,IAAAngE,EAAAkC,SAAAsF,cAAA,SACAxH,EAAAqgE,aAAA,OAAA,SAEA,UAAArgE,EAAA/C,OAKAtB,KAAAqkE,gBAAA/tD,YAAA,UACAtW,KAAAukE,YAAAjmE,EAAA+F,GACA2N,SAAA,uBACA5D,KAAA,CACAu2D,gBAAA3kE,KAAAsE,OAAA8J,KAAA,MACA+M,aAAAtc,MAAAc,EAAA,MAAA,kBAEA6O,SAAAxO,KAAAskE,eAEAtkE,KAAAqd,YAAArd,KAAAukE,YAAA,SAAA,SAAAhtD,GACAA,EAAAM,qBAGA7X,KAAAqd,YAAArd,KAAAqkE,gBAAA,SAAA,WACArkE,KAAAukE,YAAAptD,QAAA,YAGAnX,KAAAqd,YAAArd,KAAAukE,YAAA,QAAA,iBAGAK,YAAA,WACA5kE,KAAAsE,OAAAC,IAAAvE,KAAAukE,YAAAhgE,OACAvE,KAAAykE,oBAGAA,iBAAA,WACA,IAAAlgE,EAAAvE,KAAAsE,OAAAC,MAEAA,KAAAA,EAAA1F,MAAAuC,KAAAmD,KACAvE,KAAAsE,OAAAC,IAAAA,GAIAA,EAAAjE,QAAA,MAAAiE,EAAA,KACAA,EAAAA,EAAA7C,OAAA,GACA1B,KAAAsE,OAAAC,IAAAA,IAIAA,EAAAjE,QAMA,IAAAiE,EAAAjE,SACAiE,EAAAA,EAAA,GAAAsgE,OAAA,GAAAtgE,EAAA,GAAAsgE,OAAA,GAAAtgE,EAAA,GAAAsgE,OAAA,IAGAtgE,EAAAmB,MAAA,mBACA1F,KAAAskE,cAAAhjD,IAAA,mBAAA,IAAA/c,GACAvE,KAAAukE,aACAvkE,KAAAukE,YAAAhgE,IAAA,IAAAA,IAGAvE,KAAAskE,cAAAhjD,IAAA,mBAAA,KAfAthB,KAAAskE,cAAAhjD,IAAA,mBAAA,MAkBA,CACAwjD,4BAAA,KAEAC,8BAAA,WAIA,OAHAlmE,MAAAulE,WAAAU,4BAGAjmE,MAAAulE,WAAAU,+BC7FAjmE,MAAAmzB,sBAAAnwB,QAAAi9B,MAAAlgC,OAAA,CACAskB,aAAA,KACA8hD,8BAAA,KAEA5oD,SAAA,KACA6oD,kBAAA,KACAC,yBAAA,KACAC,eAAA,KACA9oD,QAAA,KACA+oD,oBAAA,KACA1oD,SAAA,KACAD,WAAA,KACAE,aAAA,KACA0oD,gBAAA,KAEAC,WAAA,KACAtoC,QAAA,KACAlS,eAAA,KACAy6C,qBAAA,EAEAC,yBAAA,KAEAxoD,KAAA,SAAAkG,EAAAhP,GACAlU,KAAA6iB,OAEA7iB,KAAA8Z,YAAA5F,EAAA,CACAosB,WAAA,IAGAtgC,KAAAkjB,aAAAA,EACAljB,KAAAglE,8BAAAhlE,KAAAkjB,aAAA9G,SAAApB,SAAA,OAAAA,SAAA,MAEA,IAAAlI,EAAAxU,EAAA,iDAAAkQ,SAAA3M,QAAA+Q,MAEA5S,KAAAoc,SAAA9d,EAAA,yCAAAkQ,SAAAsE,GACA9S,KAAAilE,kBAAA3mE,EAAA,yBAAAkQ,SAAAxO,KAAAoc,UACApc,KAAAklE,yBAAA5mE,EAAA,iCAAAkQ,SAAAsE,GAEA9S,KAAAqc,QAAA/d,EAAA,yBAAAkQ,SAAAsE,GACA9S,KAAAolE,oBAAA9mE,EAAA,gCAAAkQ,SAAAxO,KAAAqc,SACArc,KAAAyc,WAAAne,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,MACA3X,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAxO,KAAAolE,qBACAplE,KAAA0c,SAAApe,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,sBACA3X,KAAAzE,MAAAc,EAAA,MAAA,UACA6O,SAAAxO,KAAAolE,qBACAplE,KAAA2c,aAAAre,EAAA,iCAAAkQ,SAAAxO,KAAAolE,qBACAplE,KAAAmlE,eAAA7mE,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,sBACA3X,KAAAzE,MAAAc,EAAA,MAAA,iBACA6O,SAAAlQ,EAAA,iDAAAkQ,SAAAxO,KAAAqc,UAEArc,KAAAqlE,gBAAA/mE,EAAA,0BAAAkQ,SAAAsE,GAEA9S,KAAAylE,aAAA3yD,GACA9S,KAAA48B,OAEA,IAAA71B,EAAA,CACA8M,YAAA7T,KAAAkjB,aAAArP,aAGAhV,MAAAgI,kBAAA,0DAAAE,EAAA,CAAA2D,EAAA9C,KACA5H,KAAAqlE,gBAAAjqD,SAEA,YAAAxT,IACA5H,KAAA0c,SAAApG,YAAA,YACAtW,KAAA0lE,WAAAh7D,MAIA1K,KAAAqd,YAAArd,KAAAmlE,eAAA,QAAA,4BACAnlE,KAAAqd,YAAArd,KAAAyc,WAAA,QAAA,QACAzc,KAAAqd,YAAArd,KAAA0c,SAAA,QAAA,QACA1c,KAAAqd,YAAArd,KAAA8S,WAAA,SAAA,SAGA4yD,WAAA,SAAAh7D,GAEA1K,KAAAwlE,yBAAA96D,EAAA86D,yBAGAxlE,KAAAslE,WAAA,IAAAzjE,QAAAi5B,SAAA,CACA3C,OAAA,QACA+C,KAAA,IACAK,aAAA,KACAv7B,KAAAulE,qBAAA,KAKAvlE,KAAAg9B,QAAA,GAEA,IAAA,IAAA39B,EAAA,EAAAA,EAAAqL,EAAAsyB,QAAA18B,OAAAjB,IAAA,CACA,IAAAkgB,EAAAvf,KAAA2lE,UAAAj7D,EAAAsyB,QAAA39B,IACAW,KAAAg9B,QAAAt9B,KAAA6f,GAGAvf,KAAA8qB,qBAAA,IAAA9qB,KAAAg9B,QAAA,IACAh9B,KAAAg9B,QAAA,GAAAr7B,UAIAgkE,UAAA,SAAAC,GACA,IAKArmD,EALAuuC,EAAAxvD,EAAA,yCAAAkQ,SAAAxO,KAAAilE,mBACAY,EAAAvnE,EAAA,wBAAAkQ,SAAAs/C,GACAgY,EAAAxnE,EAAA,0BAAAkQ,SAAAs/C,GAwBA,OAvBAxvD,EAAA,+BAAAO,MAAAc,EAAA,MAAA,WAAA,wBAAA6O,SAAAs/C,QAKA,IAAA8X,EAAAhR,SACA9G,EAAA97C,SAAA,WACA8zD,EAAA13D,KAAA,OAAA,2BACAmR,EAAA,IAAA1gB,MAAAmzB,sBAAA+zC,QAAA/lE,KAAA8tD,EAAA+X,EAAAC,EAAAF,IACAI,gBAAAJ,EAAAhR,WAEAkR,EAAA13D,KAAA,OAAA,sBAAA7J,IAAAqhE,EAAA3mE,MACAsgB,EAAA,IAAA1gB,MAAAmzB,sBAAAi0C,OAAAjmE,KAAA8tD,EAAA+X,EAAAC,EAAAF,IACAI,gBAAAJ,EAAA3vD,QAGAjW,KAAAkjB,aAAAU,UAAA,KAAAliB,OAAA,EAAAkkE,EAAA3mE,IAAAqB,OAAA,KAAAslE,EAAA3mE,IAAA,KACAsgB,EAAA5d,UAIA3B,KAAAslE,WAAAn7C,SAAA2jC,GAEAvuC,GAGA2mD,yBAAA,WACA,IAAA3mD,EAAAvf,KAAA2lE,UAAA,CACA/Q,QAAA,KAGA/yD,QAAAskE,yBAAAnmE,KAAAoc,SAAAmD,EAAAuuC,OAEAvuC,EAAA5d,SACA3B,KAAAulE,qBAAA,GAGAptB,KAAA,SAAA5gC,GAKA,GAJAA,GACAA,EAAAK,kBAGA5X,KAAA0c,SAAA7G,SAAA,aAAA7V,KAAA2c,aAAA9G,SAAA,UAAA,CAIA7V,KAAA2c,aAAArG,YAAA,UACA,IAAAvP,EAAA/G,KAAA8S,WAAAoO,YAAA,gBAAAlhB,KAAAkjB,aAAArP,YAEAhV,MAAAgI,kBAAA,+DAAAE,EAAA,CAAA2D,EAAA9C,KAGA,GAFA5H,KAAA2c,aAAA3K,SAAA,UAEA,YAAApK,GAAA8C,EAAAhD,QAAA,CAEA,GAAA1H,KAAAulE,qBACAvlE,KAAAglE,8BAAA1kE,OAAA,CAIA,IAHA,IACA8lE,EADAC,EAAA,KAGAhnE,EAAA,EAAAA,EAAAW,KAAAslE,WAAAt8C,OAAA1oB,OAAAjB,IAAA,CACA,IACAkgB,EADAvf,KAAAslE,WAAAt8C,OAAA3W,GAAAhT,GACA0H,KAAA,UACAu/D,EAAA/mD,EAAAgnD,iBAEAD,IAIA/mD,EAAAinD,YACAJ,EAAAE,GAEAF,IACApmE,KAAAymE,aAAAL,EAAAC,GACAA,EAAAD,EACAA,EAAA,MAGApmE,KAAAymE,aAAAH,EAAAD,GACAA,EAAAC,IAKA,GAAAD,EAAA,CACA,IAAAK,EAAAL,EAAAM,UACA3mE,KAAAkjB,aAAAO,aAAAkH,YAAA+7C,GACAA,EAAAtrD,UAMApb,KAAA8qB,gBAAA9qB,KAAA8qB,eAAA86C,WAAA3mE,MACAe,KAAAkjB,aAAAgN,kBAAAlwB,KAAA8qB,eAAA86C,WAAA3mE,KACAe,KAAAkjB,aAAAwF,kBAGA7pB,MAAAkJ,GAAAua,cAAAzjB,MAAAc,EAAA,MAAA,0BACAK,KAAAknB,WACA,CACA,IAAAvf,EAAA,YAAAC,GAAA8C,EAAA/C,MAAA+C,EAAA/C,MAAA9I,MAAAc,EAAA,MAAA,4BACAd,MAAAkJ,GAAAC,aAAAL,QAKA8+D,aAAA,SAAA3iD,EAAAuiD,GACAA,EAGAviD,EAAAgU,YAAAuuC,GAFAviD,EAAAqH,UAAAnrB,KAAAglE,gCAMA/mD,QAAA,WACA,IAAA,IAAA5e,EAAA,EAAAA,EAAAW,KAAAg9B,QAAA18B,OAAAjB,IACAW,KAAAg9B,QAAA39B,GAAA4e,iBAGAje,KAAAg9B,QACAh9B,KAAA6iB,UAIAhkB,MAAAmzB,sBAAA40C,WAAA/kE,QAAA4Z,KAAA7c,OAAA,CACAmzB,MAAA,KAEA+7B,MAAA,KACA+X,WAAA,KACAC,WAAA,KACAe,mBAAA,KAEAjB,WAAA,KAEA5oD,KAAA,SAAA+U,EAAA+7B,EAAA+X,EAAAC,EAAAF,GACA5lE,KAAA+xB,MAAAA,EACA/xB,KAAA8tD,MAAAA,EACA9tD,KAAA6lE,WAAAA,EACA7lE,KAAA8lE,WAAAA,EACA9lE,KAAA4lE,WAAAA,EAEA5lE,KAAA8tD,MAAA/mD,KAAA,SAAA/G,MAEAA,KAAAqd,YAAArd,KAAA8tD,MAAA,QAAA,WAGA0Y,UAAA,WACA,OAAA,GAGAM,WAAA,WACA,OAAA9mE,KAAA+xB,MAAAjH,iBAAA9qB,MAGA2B,OAAA,WACA3B,KAAA8mE,eAIA9mE,KAAA+xB,MAAAjH,gBACA9qB,KAAA+xB,MAAAjH,eAAAi8C,WAGA/mE,KAAA8tD,MAAA97C,SAAA,OACAhS,KAAA+xB,MAAAjH,eAAA9qB,KAEAA,KAAA6mE,mBAIA7mE,KAAA6mE,mBAAAvwD,YAAA,UAHAtW,KAAA6mE,mBAAA7mE,KAAAgnE,iBACAx4D,SAAAxO,KAAA+xB,MAAAmzC,0BAKAllE,KAAA+xB,MAAAmzC,yBAAA9jD,UAAA,KAGA4lD,eAAA,WACA,OAAA1oE,EAAA,WAGAioE,eAAA,aAGAQ,SAAA,WACA/mE,KAAA8tD,MAAAx3C,YAAA,OACAtW,KAAA+xB,MAAAjH,eAAA,KACA9qB,KAAA6mE,mBAAA70D,SAAA,WAGAg0D,gBAAA,SAAAzhE,GACAvE,KAAA6lE,WAAAviE,KAAAiB,IAGA0Z,QAAA,WACAje,KAAA8tD,MAAA/mD,KAAA,SAAA,MACA/G,KAAA6iB,UAIAhkB,MAAAmzB,sBAAAi0C,OAAApnE,MAAAmzB,sBAAA40C,WAAAhoE,OAAA,CACAooE,eAAA,WACA,IAAAC,EAAA3oE,EAAA,UAMA,OAJA0B,KAAA4lE,WAAAsB,gBAAA5mE,QACA2mE,EAAA10D,OAAAvS,KAAAmnE,2BAGAF,GAGAE,wBAAA,WACA,IAAAC,EAAA9oE,EAAA,UACA+oE,EAAA,GAEA/oE,EAAA,sCAAA0B,KAAA4lE,WAAA3mE,IAAA,oCAAAuP,SAAA44D,GAGA,IAAA,IAAA/nE,EAAA,EAAAA,EAAAW,KAAA4lE,WAAAsB,gBAAA5mE,OAAAjB,IAAA,CACA,IAAAJ,EAAAgX,GAAAjW,KAAA4lE,WAAAsB,gBAAA7nE,GACA+nE,EAAA70D,OAAAvS,KAAAsnE,wBAAAroE,EAAAgX,GAAA,IACAoxD,EAAA3nE,KAAAT,GAIA,IAAAumE,EAAAxlE,KAAA+xB,MAAAyzC,yBAAAzkE,MAAA,GACAykE,EAAA9lE,QAAAM,KAAA4lE,WAAAJ,0BAEA,IAAA,IAAAnmE,EAAA,EAAAA,EAAAmmE,EAAAllE,OAAAjB,IAAA,CACA,IAAAJ,EAAAgX,GAAAuvD,EAAAnmE,GACAR,MAAAsO,QAAAlO,EAAAooE,IACAD,EAAA70D,OAAAvS,KAAAsnE,wBAAAroE,EAAAgX,GAAA,IASA,OALA,IAAApU,QAAAi5B,SAAAssC,EAAApsD,WAAA,CACAmd,OAAA,QACA+C,KAAA,MAGAr8B,MAAA03B,GAAAgxC,YAAAH,EAAA,CACAnxD,MAAApX,MAAAc,EAAA,MAAA,iBACA6nE,aAAA3oE,MAAAc,EAAA,MAAA,wFAIA2nE,wBAAA,SAAAroE,EAAAgX,EAAAwxC,GACA,OAAAnpD,EAAA,iDACAiU,OAAA,4BACAA,OACA1T,MAAA03B,GAAAkxC,eAAA,CACAxxD,MAAApX,MAAAuE,WAAA6S,GACA/Q,KAAA,WAAAlF,KAAA4lE,WAAA3mE,IAAA,uBACAkG,MAAAlG,EACAwoD,QAAAA,MAKA8e,eAAA,WACA,IAAAziD,EAAA9jB,KAAA+xB,MAAA7O,aAAA0G,eAAA5pB,KAAA4lE,WAAA3mE,KAEA,GAAA6kB,EACA,OAAAA,EAAAvJ,QAAA,SAKA1b,MAAAmzB,sBAAA+zC,QAAAlnE,MAAAmzB,sBAAA40C,WAAAhoE,OAAA,CACA8oE,YAAA,KACAC,YAAA,KACAzjC,WAAA,KAEAsiC,UAAA,WACA,OAAA,GAGA7kE,OAAA,WACA3B,KAAA6iB,OACA7iB,KAAA2nE,YAAAxwD,QAAA,UAGA6vD,eAAA,WACA,IAAAC,EAAA3oE,EAAA,UAkBA,OAhBA0B,KAAA0nE,YAAA7oE,MAAA03B,GAAAM,gBAAA,CACA5gB,MAAApX,MAAAc,EAAA,MAAA,WACA6nE,aAAA3oE,MAAAc,EAAA,MAAA,mEACAwF,MAAAnF,KAAA4lE,WAAAhR,UACApmD,SAAAy4D,GAEAjnE,KAAA2nE,YAAA3nE,KAAA0nE,YAAA5xD,KAAA,SAEAmxD,EAAA10D,OAAA,SAEAvS,KAAAkkC,WAAA5lC,EAAA,6BAAAgF,KAAAzE,MAAAc,EAAA,MAAA,mBACA6O,SAAAy4D,GAEAjnE,KAAAqd,YAAArd,KAAA2nE,YAAA,QAAA,0BACA3nE,KAAAqd,YAAArd,KAAAkkC,WAAA,QAAA,iBAEA+iC,GAGAW,uBAAA,WACA5nE,KAAAgmE,gBAAAhmE,KAAA2nE,YAAApjE,OACAvE,KAAA+xB,MAAAwzC,qBAAA,GAGAS,gBAAA,SAAAzhE,GACAvE,KAAA6lE,WAAAnnE,MAAA6F,EAAA1F,MAAAuE,WAAAmB,GAAA,qBAAA1F,MAAAc,EAAA,MAAA,WAAA,SAAA,UACAK,KAAA8lE,WAAAvhE,IAAAA,IAGAsjE,cAAA,WACA7nE,KAAA+xB,MAAAuzC,WAAA36C,YAAA3qB,KAAA8tD,OACA9tD,KAAA+xB,MAAAiL,QAAAxtB,OAAAlR,EAAA6O,QAAAnN,KAAAA,KAAA+xB,MAAAiL,SAAA,GACAh9B,KAAA+xB,MAAAwzC,qBAAA,EAEAvlE,KAAA8mE,eACA9mE,KAAA+mE,WAEA/mE,KAAA+xB,MAAAiL,QAAA18B,QACAN,KAAA+xB,MAAAiL,QAAA,GAAAr7B,UAIA3B,KAAA8tD,MAAA1yC,SACApb,KAAA6mE,mBAAAzrD,SACApb,KAAAie,WAGAsoD,eAAA,WACA,IAAAtwD,EAAAjW,KAAA2nE,YAAA3nE,KAAA2nE,YAAApjE,MAAAvE,KAAA4lE,WAAAhR,QACA,OAAAt2D,EAAA,yBAAAiU,OAAAjU,EAAA,WAAAgF,KAAA2S,OC5bApX,MAAA8kC,gBAAA9hC,QAAAi5B,SAAAl8B,OAAA,CACAykC,OAAA,KAEArmB,KAAA,SAAA8qD,EAAA5zD,GACAlU,KAAAqjC,OAAA/kC,EAAAwpE,GACA,IAAAC,EAAA/nE,KAAAqjC,OAAAroB,SAAA,SAAAA,SAAA,kBAEA9G,EAAA5V,EAAAM,OAAA,GAAAC,MAAA8kC,gBAAA1mB,SAAA/I,IAEAmD,UAAArX,KAAAqjC,OAAAroB,SAAA,SACA9G,EAAAgtC,OAAAlhD,KAAAgoE,UAAA1gD,KAAAtnB,MACAkU,EAAA+zD,QAAA,QACA/zD,EAAAgnB,KAAAr5B,QAAAqmE,OACAh0D,EAAAmnB,eAAA,EACAnnB,EAAAonB,cAAA,IAEAt7B,KAAA6iB,KAAAklD,EAAA7zD,IAGA8zD,UAAA,SAAAG,GACA,IAAA5pC,EAAAjgC,EAAA,eAAA0B,KAAAkU,SAAAk0D,YAAA,OAAA55D,SAAA3M,QAAA+Q,MACAywB,EAAA/kC,EAAA,YAAAkQ,SAAA+vB,GACAU,EAAA3gC,EAAA,YAAAkQ,SAAA60B,GAEA8kC,EAAA35D,SAAAywB,GAGAoE,EAAAqI,MAAA1rC,KAAAqjC,OAAAqI,SACArI,EAAAhL,KAAA,YAAAr4B,KAAAqjC,OAAAhL,KAAA,cAOA,IAJA,IACAgwC,EADAroE,KAAAqjC,OAAAvtB,KAAA,YACAkF,WACAuuC,EAAA4e,EAAAntD,WAEA3b,EAAA,EAAAA,EAAAkqD,EAAAjpD,OAAAjB,IACAf,EAAAirD,EAAAlqD,IAAAqsC,MAAAptC,EAAA+pE,EAAAhpE,IAAAqsC,SAGA,OAAAnN,IAEA,CACAthB,SAAA,CACAkb,OAAA,QACAiwC,YAAA,yBC5CAvpE,MAAAypE,gBAAAzmE,QAAAi9B,MAAAlgC,OAAA,CACAmX,GAAA,KACAwyD,OAAA,KAEAC,oBAAA,KACAC,eAAA,KAEAC,WAAA,KACAC,WAAA,EAEA3rD,KAAA,SAAAurD,EAAAr0D,GACAlU,KAAA+V,GAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UACA5R,KAAAuoE,OAAAA,EACAr0D,EAAA5V,EAAAM,OAAAC,MAAAypE,gBAAArrD,SAAA/I,GAEA,IAAA/F,EAAA7P,EACA,mFACAO,MAAA6H,eACA,kEACA7E,QAAA3C,QAAAc,KAAAuoE,QAAA,GAAA,6CAAAvoE,KAAAuoE,OAAA,QACAr0D,EAAA8C,SAAA,+CAAA9C,EAAA8C,SAAA,MAAA,IACA,WACAxI,SAAA3M,QAAA+Q,MACAsJ,EAAA5d,EACA,qDAEAO,MAAAc,EAAA,MAAA,8CAFA,8HAMAd,MAAAc,EAAA,MAAA,mBANA,kCAOAK,KAAA+V,GAPA,yGASAlX,MAAAc,EAAA,MAAA,iBATA,4GAaAd,MAAAc,EAAA,MAAA,wBAbA,wBAgBA6O,SAAAL,GACAg5B,EAAA7oC,EAAA,gCAAAkQ,SAAA0N,GACAO,EAAAne,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,MACA3X,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAA24B,GAEA,GAAAjzB,EAAA00D,eAAAtoE,OACA,IAAA,IAAAjB,EAAA,EAAAA,EAAA6U,EAAA00D,eAAAtoE,OAAAjB,IACA6c,EAAApG,KAAA,MAAAvD,OAAAjU,EAAA,QAAA,CAAAgF,KAAA4Q,EAAA00D,eAAAvpE,WAGA6c,EAAApG,KAAA,MAAAsF,SAWA,IAAAytD,EAEA,GAVA7oE,KAAAwoE,oBAAAtsD,EAAApG,KAAA,qBACA9V,KAAA8oE,iBAAAxqE,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,sBACA3X,KAAAtD,KAAA+oE,iBAAA,KACAv6D,SAAA24B,GACAnnC,KAAAyoE,eAAAnqE,EAAA,iCAAAkQ,SAAA24B,GAIAtlC,QAAA3C,QAAAc,KAAAuoE,QAAA,CACAM,EAAA,CAAA,OAEA,IAAA,IAAAxpE,EAAA,EAAAA,EAAAW,KAAAuoE,OAAAjoE,OAAAjB,IACAwpE,EAAAnpE,KAAA,OAAAM,KAAAuoE,OAAAlpE,SAGAwpE,EAAA,OAAA7oE,KAAAuoE,OAGAvoE,KAAA0oE,WAAA,IAAA7pE,MAAA+6B,uBAAA,CACA7jB,GAAA,iBAAA/V,KAAA+V,GACA7Q,KAAA,oBACA2O,YAAA,wBACA6T,SAAA,CACA3R,GAAA8yD,GAEAr8C,MAAA,EACA6Q,cAAA,CACAN,kBAAA,GAEAgB,iBAAA,KACA/9B,KAAAurC,wBAEAvrC,KAAAwoE,oBAAAxwD,QAAAqgB,KAAA,WAGAr4B,KAAAgpE,uBAFAhpE,KAAAwoE,oBAAAxwD,QAAAb,QAAA,UAKA+kB,iBAAAl8B,KAAAgpE,qBAAA1hD,KAAAtnB,MACAm1B,YAAA,EACA4G,UAAA,IAGA/7B,KAAAqd,YAAAZ,EAAA,QAAA,QAEAzc,KAAAqd,YAAArd,KAAAwoE,oBAAA,SAAA,wBACAxoE,KAAAqd,YAAAlP,EAAA,SAAA,gBAEAnO,KAAA6iB,KAAA1U,EAAA+F,IAGA60D,gBAAA,SAAAE,GACA,IAAAppE,EAAAopE,EACA,0DACA,8CAEA,OAAApqE,MAAAc,EAAA,MAAAE,EAAA,CACAqpE,IAAArnE,QAAA3C,QAAAc,KAAAuoE,QAAAvoE,KAAAuoE,OAAAjoE,OAAA,KAIA0oE,qBAAA,WACA,IAAAG,GAAA,EAoBA,OAlBAnpE,KAAAwoE,oBAAAn2D,GAAA,GAAAgmB,KAAA,YACA8wC,GAAA,EACAnpE,KAAA8oE,iBAAAxlE,KAAAtD,KAAA+oE,iBAAA,MAEA/oE,KAAA8oE,iBAAAxlE,KAAAtD,KAAA+oE,iBAAA,IACA/oE,KAAAwoE,oBAAAn2D,GAAA,GAAAgmB,KAAA,aACA8wC,IAAAnpE,KAAA0oE,WAAAn6C,gBAIAvuB,KAAAurC,wBAEA49B,EACAnpE,KAAA8oE,iBAAAxyD,YAAA,YAEAtW,KAAA8oE,iBAAA92D,SAAA,YAGAm3D,GAGAC,aAAA,SAAA7xD,GACA,IAAAvX,KAAA2oE,WAAA3oE,KAAAgpE,uBAAA,CAKAhpE,KAAA8oE,iBAAA92D,SAAA,UACAhS,KAAAyoE,eAAAnyD,YAAA,UACAtW,KAAA4Y,UACA5Y,KAAA0oE,WAAA9vD,UACA5Y,KAAA2oE,WAAA,EAGA,KACA,IAAA3oE,KAAAkU,SAAAm1D,YACA9xD,EAAAK,iBAEA,MAAAjN,GAGA,MAFA4M,EAAAK,iBACA5X,KAAAyoE,eAAAz2D,SAAA,UACArH,QAlBA4M,EAAAK,kBAsBAynB,SAAA,WAEAx9B,QAAAsf,iBAAA,IACAnhB,KAAAwoE,oBAAAxwD,QAAAb,QAAA,SAGAnX,KAAA6iB,SAEA,CACA5F,SAAA,CACA2rD,eAAA,GACAS,SAAA/qE,EAAA6kB,KACAnM,SAAA,QCnLAnY,MAAAyqE,YAAAznE,QAAA4Z,KAAA7c,OAAA,CACA2qE,aAAA,KACAC,eAAA,KACAzyC,SAAA,KACA0yC,uBAAA,KACAC,YAAA,KAEAC,aAAA,KACAC,QAAA,KACAC,eAAA,KACAC,aAAA,KAEAC,gBAAA,KACAC,mBAAA,KACAC,mBAAA,KACAC,eAAA,KAEAC,QAAA,KACAC,WAAA,KAEAC,eAAA,KACAC,oBAAA,KACAC,qBAAA,EACAC,WAAA,EACA9pC,QAAA,KACA+pC,QAAA,EACA7gE,YAAA,KACAmT,qBAAA,EACA2tD,MAAA,KACAC,gBAAA,EAEAC,mBAAA,KACA94D,OAAA,KACA+4D,WAAA,KACAC,UAAA,KAEAC,gBAAA,EACAC,QAAA,KACAC,aAAA,KACA/zD,QAAA,KACAg0D,yBAAA,EAEA1tB,GAAA,KAEAxgC,KAAA,SAAA9I,GAqBA,GApBAlU,KAAA8Z,YAAA5F,EAAArV,MAAAyqE,YAAArsD,UAEAjd,KAAA0qE,MAAA,GACA1qE,KAAA4qE,mBAAA,GACA5qE,KAAAqqE,eAAAxrE,MAAAssE,eAEAnrE,KAAAmqE,QAAA1hE,OAAAC,KAAA1I,KAAAkU,SAAAk3D,cAAAhpE,IAAA4T,GACA7T,SAAA6T,IAGAhW,KAAAupE,aAAAjrE,EAAA,gBACA0B,KAAAwpE,eAAAlrE,EAAA,mBACA0B,KAAA+2B,SAAAz4B,EAAA,qBACA0B,KAAAypE,uBAAAnrE,EAAA,sBACA0B,KAAA0pE,YAAAprE,EAAA,oBAEA0B,KAAAkU,SAAAm3D,sBACArrE,KAAAqd,YAAArd,KAAAypE,uBAAA,QAAA,sBAGAzpE,KAAAkU,SAAAo3D,eAAAhrE,OAAA,CACAN,KAAAkU,SAAAq3D,eACAvrE,KAAAqd,YAAA/e,EAAA,gBAAA,QAAA,eAGA,MAAAktE,EAAAltE,EAAA,cAEA,IAAA0B,KAAAkU,SAAAo3D,eAAAhrE,OACAN,KAAAqd,YAAAmuD,EAAA,SAAA,WACAxrE,KAAAyrE,cAAAzrE,KAAAkU,SAAAo3D,eAAA,GAAAjmE,QAGArF,KAAA0rE,gBAAAF,GAKAxrE,KAAAkU,SAAAy3D,aAKA9sE,MAAAkJ,GAAAiqD,aAAAjrD,KAAA,aAAA,IAAA/G,KAAA4rE,eAAA,IAEA5rE,KAAAqd,YAAAxe,MAAAkJ,GAAAiqD,aAAA,SAAA,oBAEAhyD,KAAAkU,SAAA23D,mBACA7rE,KAAA8rE,0BACA9rE,KAAAkU,SAAA63D,UAAA/rE,KAAAkU,SAAA83D,mBACAhsE,KAAAisE,eACAjsE,KAAAkU,SAAAg4D,iBAEAlsE,KAAAqd,YAAAxe,MAAAkJ,GAAAiqD,aAAA,sBAAAz6C,IACAA,EAAA+9C,eACA/9C,EAAAK,iBACA5X,KAAAmsE,cACAnsE,KAAA4qB,eAAA/rB,MAAAkJ,GAAAiqD,aAAA,0BAKAhyD,KAAAosE,mBAEApsE,KAAAqd,YAAArd,KAAA0pE,YAAA,QAAA,KACA1pE,KAAAqsE,cAAArsE,KAAA0pE,eAGA4C,mBAAAtsE,KAAAkU,SAAAy3D,aACA3rE,KAAAw9C,GAAA,IAAA8uB,iBAAA,eACAtsE,KAAAw9C,GAAA+uB,UAAAh1D,IAEA,cAAAA,EAAAxQ,KAAA4X,OACApH,EAAAxQ,KAAAylE,cAAAxsE,KAAAkU,SAAAu4D,WAEAl1D,EAAAxQ,KAAAglE,UAAA/rE,KAAAkU,SAAA63D,SACAx0D,EAAAxQ,KAAA8kE,qBAAA7rE,KAAAkU,SAAA63D,UAGAjgE,OAAAtF,SAAAkmE,aAMAN,iBAAA,WACApsE,KAAAuqE,qBAAAvqE,KAAAwqE,WAAA,IAAAxqE,KAAAqqE,iBAAArqE,KAAAkU,SAAAy4D,kBAIA3sE,KAAAuqE,qBAAA,EAEAvqE,KAAAqd,YAAAxb,QAAA+Q,KAAA,4DAAA,SAAA2E,GACAjZ,EAAAiZ,EAAA2F,QAAAiW,GAAAnzB,KAAA4sE,iBAGA3kD,aAAAjoB,KAAA0gC,SAEA,CAAA,WAAA,QAAA,UAAApxB,SAAAiI,EAAAjW,MACAtB,KAAA0gC,QAAAxY,WAAAloB,KAAA2+B,UAAArX,KAAAtnB,MAAA,KAEAA,KAAA2+B,kBAKAkuC,wBAAA,WACA7sE,KAAAuqE,sBAIAvqE,KAAA4qB,eAAA/oB,QAAA+Q,KAAA,4DACAqV,aAAAjoB,KAAA0gC,SACA1gC,KAAAuqE,qBAAA,IAGA/tC,MAAA,WACAx8B,KAAAwqE,aACAxqE,KAAA6sE,2BAGAnwC,OAAA,WACA,GAAA,IAAA18B,KAAAwqE,WACA,KAAA,mEAKAxqE,KAAAwqE,aACA,IAAAxqE,KAAAwqE,YACAxqE,KAAAqqE,iBACArqE,KAAA2+B,YACA3+B,KAAAosE,qBAKAN,wBAAA,WACA,IAAAp6C,EAAApzB,EAAA,oBACAozB,EAAApxB,SACAoxB,EAAA1xB,KAAAupE,aAAAxiE,KAAA,WAAA/G,KAAAupE,aAAAxiE,KAAA,WAAAqgB,KAAAtU,WAAAgD,KAAA,oBAAA,MAEA4b,GAAAA,EAAApxB,QACAN,KAAAqd,YAAAqU,EAAA,QAAA,KACA3a,QAAAlY,MAAAc,EAAA,MAAA,oDACAd,MAAAiY,WAAAjY,MAAAkJ,GAAAiqD,aAAA,CACAlrD,OAAA9G,KAAAkU,SAAA44D,kBACA91D,SAAAhX,KAAAkU,SAAA64D,gBACAjtE,OAAA,CACAisE,QAAA/rE,KAAAkU,SAAA63D,QACAiB,YAAAhtE,KAAAkU,SAAA23D,yBAQAI,aAAA,WAEAjsE,KAAAitE,oBAEAjtE,KAAAkU,SAAAg4D,iBACArqE,QAAAqc,gBAAAC,iBAAA,CACA3G,QAAA3V,QAAAuc,MACAC,MAAA,EACAnb,KAAA,GACA,KACArE,MAAAiY,WAAAjY,MAAAkJ,GAAAiqD,aAAA,CACAlrD,OAAA9G,KAAAkU,SAAAg5D,mBACAl2D,SAAAhX,KAAAkU,SAAA64D,mBAEA,IAIAI,mBAAA,WACAntE,KAAA4qB,eAAA5qB,KAAAypE,uBAAA,SACAzpE,KAAAypE,uBAAAjxD,SAAA,CAAA6jB,QAAA,GAAA,OAAA,KACAr8B,KAAAypE,uBAAAruD,WAGA,MAAAgyD,EAAA9uE,EAAA,mBAAA0B,KAAAkU,SAAA8B,gBAIA,GAHAhW,KAAA+pE,gBAAAqD,EAAAnmD,SAGAjnB,KAAAkU,SAAAy3D,WAEA,YADA3rE,KAAAqtE,0BAAA/lB,QAAAp+B,GAAAlpB,KAAAstE,uBAAApkD,IAIAkkD,EAAAp7D,SAAA,UACA,MAAAu7D,EAAA1uE,MAAA03B,GAAAi3C,uBAAA,CACAz3D,GAAA,UACAE,MAAApX,MAAAc,EAAA,MAAA,WACAuF,KAAA,YACA6gD,aAAAqnB,GACAG,EAAAz3D,KAAA,SAAAwL,IAAA,cAAA,QACAthB,KAAAgqE,mBAAAuD,EAAAz3D,KAAA,gBAEA9V,KAAAkU,SAAAy3D,YACA3rE,KAAAytE,WAAAF,GAIA,MAAAG,EAAAjlE,OAAA8F,OAAAvO,KAAAkU,SAAAk3D,cACAuC,EAAAD,EAAAp+D,UAAA,GACAs+D,EAAAF,EAAAp+D,UAAA,GACAu+D,EAAAF,GAAAC,EAAA,IAAAD,EAAA,IAAA,GACAG,EAAApqE,mBAAA,kBAAA1D,KAAAkU,SAAA8B,WACA,KAAAhW,KAAAkU,SAAA65D,eAAA,IAAA,IAEA/tE,KAAAiqE,mBAAAmD,EAAAt3D,KAAA,gBACAwB,GAAA,SAAAtX,KAAAguE,oBAAA1mD,KAAAtnB,OAEAA,KAAAqtE,0BAAA/lB,QAAAp+B,GAAAlpB,KAAAstE,uBAAApkD,IAEA,IAAA+kD,EAAA,WAAAJ,EACA,IAAA,IAAAxuE,EAAA,EAAAA,EAAAW,KAAAiqE,mBAAA3pE,OAAAjB,IAAA,CACA,MAAAiF,EAAAtE,KAAAiqE,mBAAA53D,GAAAhT,GAAA0H,KAAA,eAAAzC,OACA2pE,GAAA,IAAAvqE,mBAAAY,EAAA8J,KAAA,SAAA,IAAA9J,EAAAC,MAGA1F,MAAAkJ,GAAAiqD,aAAAjrD,KAAA,yBACAlI,MAAAkJ,GAAAiqD,aAAAjrD,KAAA,0BAAApI,QAAAmvE,EAAAG,IAEAjuE,KAAAsqE,sBACAtqE,KAAAsqE,oBAAAtqE,KAAAsqE,oBAAA3rE,QAAAmvE,EAAAG,IAIAjuE,KAAAkU,SAAAg6D,WAAAluE,KAAAkU,SAAAg6D,UAAA5tE,QACAN,KAAAmuE,uBAGAnuE,KAAAgqE,mBAAA1yD,GAAA,SAAAtX,KAAAouE,oBAAA9mD,KAAAtnB,OACAA,KAAAguE,uBAMAX,wBAAA,WACA,OAAAxuE,MAAAwhB,MAAAmH,OAAA0B,GAAAA,EAAAnT,IAAA/V,KAAAkU,SAAA8B,QAAAhW,KAAAmqE,QAAA76D,SAAA4Z,EAAAnT,MAGA03D,WAAA,SAAAY,GACA,MAAAhhD,EAAAghD,EAAAhhD,SACAghD,EACA/sD,IAAA,WAAA,UACA+L,OAAA,GACA7U,SAAA,CAAA6U,OAAAA,GAAA,OAAA,KACAghD,EAAA/sD,IAAA,CACAgtD,SAAA,GACAjhD,OAAA,QAKAkhD,aAAA,SAAAF,GACAA,EAAAhhD,SACAghD,EACA/sD,IAAA,WAAA,UACA9I,SAAA,CAAA6U,OAAA,GAAA,OAAA,KACAghD,EAAAjzD,YAIA4yD,oBAAA,WACA,IAAAQ,GAAA,EAAAC,GAAA,EACAzuE,KAAAiqE,mBAAAz2D,MAAA,WAOA,GANAlV,EAAA0B,MAAA+G,KAAA,eAAAuQ,GAEAm3D,GAAA,EAEAD,GAAA,GAEAA,IAAAC,EACA,OAAA,KAGAD,EACAxuE,KAAAgqE,mBAAAjjE,KAAA,eAAA2nE,QAAA,GACAD,EACAzuE,KAAAgqE,mBAAAjjE,KAAA,eAAA4nE,SAAA,GAEA3uE,KAAAgqE,mBAAAjjE,KAAA,eAAA6nE,mBAAA,IAIAR,oBAAA,WACA,MAAAS,EAAA7uE,KAAAgqE,mBAAAjjE,KAAA,eAAAuQ,GACAtX,KAAAiqE,mBAAAz2D,MAAA,WACAq7D,EACAvwE,EAAA0B,MAAA+G,KAAA,eAAA2nE,QAAA,GAEApwE,EAAA0B,MAAA+G,KAAA,eAAA4nE,SAAA,OAKArB,uBAAA,SAAAzQ,EAAAzxD,GACA,MAAAijE,EAAAxvE,MAAA03B,GAAAi3C,uBAAA,CACAz3D,GAAA,kBAAA8mD,EAAA9mD,GACAE,MAAApX,MAAAc,EAAA,MAAA,qBAAA,CAAAk9D,KAAAA,EAAA33D,OACAA,KAAA,kBAAA23D,EAAA9mD,MACAuB,QAAA,IAAAlM,EACAA,GACApL,KAAAkU,SAAAk3D,aAAA3rE,eAAAo9D,EAAA9mD,KAAA/V,KAAAkU,SAAAk3D,aAAAvO,EAAA9mD,IACA+4D,WAAA9uE,KAAAkU,SAAAy3D,aASA,GANA3rE,KAAAkqE,eACAmE,EAAAtoB,aAAA/lD,KAAAkqE,gBAEAmE,EAAA7/D,SAAAxO,KAAA+pE,kBAGA/pE,KAAAkU,SAAAy3D,WAAA,CACA0C,EAAAr8D,SAAA,UACA,MAAA+8D,EAAAV,EAAAv4D,KAAA,gBACAwB,GAAA,SAAAtX,KAAAguE,oBAAA1mD,KAAAtnB,OACAA,KAAAiqE,mBAAAjqE,KAAAiqE,mBAAAvsD,IAAAqxD,GAKA,OAFA/uE,KAAAytE,WAAAY,GAEAA,GAGAF,qBAAA,WACA,MAAAD,EAAArvE,MAAAwhB,MAAAmH,OAAAq1C,IACA78D,KAAAmqE,QAAA76D,SAAAutD,EAAA9mD,KAAA/V,KAAAkU,SAAAg6D,UAAAzZ,KAAAvrC,GAAAA,EAAAlT,QAAA6mD,EAAA9mD,KAGA,IAAAm4D,EAAA5tE,OACA,OAGA,MAAA0uE,EAAAnwE,MAAA03B,GAAA04C,aAAA,CACAhoE,QAAA,CACA,CAAAgP,MAAApX,MAAAc,EAAA,MAAA,mBACAuuE,EAAA9rE,IAAA8mB,IACA,CAAAjT,MAAAiT,EAAAhkB,KAAAC,MAAA+jB,EAAAnT,SAGA/D,SAAA,aAEAhS,KAAAkqE,eAAArrE,MAAA03B,GAAAgxC,YAAAyH,EAAA,IACAh9D,SAAA,cACAxD,SAAAxO,KAAA+pE,iBAEA,MAAAmF,EAAAF,EAAAl5D,KAAA,UAEAo5D,EAAA53D,GAAA,SAAA,KACA,MAAAtB,EAAA7T,SAAA+sE,EAAA3qE,OACAs4D,EAAAh+D,MAAAwhB,MAAAvK,KAAAoT,GAAAA,EAAAnT,KAAAC,GAEA,IAAA6mD,EACA,OAGA,MAAAsS,EAAAnvE,KAAAkU,SAAAg6D,UAAAp4D,KAAAoT,GAAAA,EAAAlT,QAAA6mD,EAAA9mD,IACA/V,KAAAstE,uBAAAzQ,EAAAsS,EAAAC,kBAEAF,EACA3qE,IAAA,IACAuR,KAAA,iBAAAE,OAAAoF,SAEA,OAAApb,KAAAoqE,aACApqE,KAAAoqE,WAAA,IAGApqE,KAAAmqE,QAAAzqE,KAAAsW,GACAhW,KAAAoqE,WAAA1qE,KAAAsW,GAGA,IAAAk5D,EAAAp5D,KAAA,UAAAxV,QACAN,KAAAuuE,aAAAvuE,KAAAkqE,kBAIAlqE,KAAAytE,WAAAztE,KAAAkqE,iBAGAmC,cAAA,SAAAnvD,GACA,IAAAmyD,EAEA,OAAArvE,KAAA8R,OACAu9D,EAAA,MAAArvE,KAAAsvE,6BAEAD,EAAA,4BAAArvE,KAAAuvE,kCAEAvvE,KAAA8R,OAAAxR,SACA+uE,GAAA,sBACArvE,KAAA8R,OAAA1P,IAAAuI,GAAA,OAAA9L,MAAAuE,WAAAuH,WAAAlK,KAAA,IACA,SAGAT,KAAA8qE,YACAuE,GAAA,8BAAAxwE,MAAAuE,WAAApD,KAAA8qE,kBAGA,MAAA9qE,KAAA6qE,aACAwE,GAAA,mCAAAxwE,MAAAc,EAAA,MAAA,wBAIA,MAAAssD,EAAA,IAAApqD,QAAAm1B,IAAA9Z,EAAAmyD,EAAA,CACAG,SAAA,0BACAv9C,OAAA,WACAg6B,EAAAhuC,aAIAguC,EAAA2F,eAAA97C,KAAA,gBAAAwB,GAAA,QAAA,KACAxL,OAAAtF,SAAAkmE,YAOA4C,oBAAA,WACA,OAAAtvE,KAAAkU,SAAA23D,oBAAA7rE,KAAAkU,SAAA83D,mBACAntE,MAAAc,EAAA,MAAA,kCACAd,MAAAc,EAAA,MAAA,8BAMA4vE,iBAAA,WACA,OAAAvvE,KAAAkU,SAAA23D,oBAAA7rE,KAAAkU,SAAA83D,mBACAntE,MAAAc,EAAA,MAAA,qCACAd,MAAAc,EAAA,MAAA,kCAGA8vE,SAAA,WACA,OAAAzvE,KAAAgrE,QACAhrE,KAAA+2B,SAAArZ,IAAA1d,KAAAgrE,QAAAj0C,UACA/2B,KAAA+2B,UAGA61C,YAAA,WACA,OAAA5sE,KAAAgrE,QACAhrE,KAAA0pE,YAAAhsD,IAAA1d,KAAAgrE,QAAAtB,aACA1pE,KAAA0pE,aAGAuD,kBAAA,WACAjtE,KAAA2pE,aAAArrE,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,gBACAC,MAAArc,MAAAc,EAAA,MAAA,yBACA6O,SAAAlQ,EAAA,sBACA0B,KAAAqd,YAAArd,KAAA2pE,aAAA,QAAA,gBAGA+B,gBAAA,SAAAF,GACAA,EAAAx5D,SAAA,WAEA,MAAA+jB,EAAAz3B,EAAA,SAAA,CAAA2c,MAAA,SAAA6c,YAAA0zC,GACAz5D,EAAAzT,EAAA,SAAAkQ,SAAAunB,GAEA/1B,KAAAkU,SAAAo3D,eAAAhkB,QAAApqC,IACA,MAAAjL,EAAA3T,EAAA,SAAAkQ,SAAAuD,GACAmQ,EAAA5jB,EAAA,OAAA,CACAgF,KAAA4Z,EAAAjH,QACAzH,SAAAyD,GACAjS,KAAAqd,YAAA6E,EAAA,QAAA,KACAliB,KAAAyrE,cAAAvuD,EAAA7X,UAKAqqE,gBAAA,WACA,OAAA,IAAA1mE,QAAA,CAAAC,EAAAC,KACAlJ,KAAAirE,aACAhiE,EAAAjJ,KAAAirE,cAIApsE,MAAAiK,kBAAA,OAAA,uBAAA,CACA/B,KAAA,CACA8M,YAAA7T,KAAAkU,SAAAL,YACA44D,SAAAzsE,KAAAkU,SAAAu4D,SACAz2D,OAAAhW,KAAAkU,SAAA8B,OACA+1D,QAAA/rE,KAAAkU,SAAA63D,QACAJ,WAAA3rE,KAAAkU,SAAAy3D,WACAqB,YAAAhtE,KAAAkU,SAAA23D,sBAEAriE,KAAAkB,IACA1K,KAAAirE,aAAAvgE,EAAA3D,KAAAxG,MACA0I,EAAAjJ,KAAAirE,gBACAxhE,MAAAP,MAIAymE,uBAAA,SAAAtqE,EAAAuqE,GACA,OAAA,IAAA5mE,QAAA,CAAAC,EAAAC,KACA,MAAApJ,EAAA,IAEA8vE,GAAA5vE,KAAAkU,SAAA27D,SAEA/vE,EAAA8vE,GAAA,mBAAA/wE,MAAA6S,aAAA,KAGA1R,KAAAkU,SAAA47D,YACAhwE,EAAAjB,MAAAixE,WAAA9vE,KAAAkU,SAAA47D,WAIA9vE,KAAAkU,SAAA27D,OACA5mE,EAAApK,MAAA+F,OAAAS,EAAAvF,IAIAE,KAAA0vE,kBAAAlmE,MAAA,SAAAjJ,GACAT,EAAAjB,MAAAkxE,YAAAxvE,EACA0I,EAAApK,MAAA+F,OAAAS,EAAAvF,OACA2J,MAAAP,MAIAuiE,cAAA,SAAApmE,GACArF,KAAA2vE,uBAAAtqE,GAAAmE,MAAA,SAAAnE,GACAyG,OAAA9K,KAAAqE,OAIA2qE,WAAA,WA0BA,OAzBAhwE,KAAAgrE,UACAhrE,KAAAgrE,QAAA,IAAAnsE,MAAAoxE,QAAAjwE,MACAA,KAAAqqE,iBACArqE,KAAAgrE,QAAA1zD,GAAA,OAAA,KACAtX,KAAAqqE,gBAAA,EACArqE,KAAAosE,qBAEApsE,KAAAgrE,QAAA1zD,GAAA,QAAA,KACAtX,KAAAqqE,gBAAA,EACArqE,KAAA6sE,0BAGA,MAAAqD,EAAAlwE,KAAA4sE,cACAsD,EAAAr6D,SAAA,mBACAq6D,EAAAl+D,SAAA,aAIAhS,KAAAgrE,QAAA1zD,GAAA,QAAA,KACAtX,KAAAkX,UACApL,OAAAsoD,SAAA,EAAAp0D,KAAAkX,SACAlX,KAAAkX,QAAA,SAIAlX,KAAAgrE,SAGAmF,YAAA,WACA,OAAA,IAAAnnE,QAAA,CAAAC,EAAAC,KACAlJ,KAAA+qE,gBAAA,EACA/qE,KAAAowE,yBAAA,GACA5mE,KAAA,KACAxJ,KAAAkX,QAAApL,OAAAoL,QACAlX,KAAAgwE,aAAAhvE,OACAhB,KAAA+qE,gBAAA,EACA9hE,MAEAQ,MAAAP,MAIAknE,wBAAA,SAAAC,GACA,OAAA,IAAArnE,QAAA,CAAAC,EAAAC,KACA,GAAAlJ,KAAAkU,SAAA63D,SAAA/rE,KAAAkU,SAAAy3D,WAaA1iE,QAbA,CACA,GACAonE,GACArwE,KAAA4rE,eAAA,KAAA/sE,MAAAkJ,GAAAiqD,aAAAjrD,KAAA,0BAGA,YADAkC,IAIAjJ,KAAAmsE,cACA3iE,KAAAP,GACAQ,MAAAP,OAOA0iE,cAAA,SAAA0E,GACA,IAAAvpE,EAAAlI,MAAAkJ,GAAAiqD,aAAA9wC,YAaA,OAXAlhB,KAAAuwE,oBAEAxpE,EAAAA,EAAApI,QAAA,uBAAAqB,KAAAgrE,QAAAwF,QAAAtvD,cAGAovD,IAAAtwE,KAAAkU,SAAA83D,qBAEAjlE,EAAAA,EAAApI,QAAA,gBAAA,IACAoI,EAAAA,EAAApI,QAAA,kBAAA,KAGAoI,GAGA43B,UAAA,SAAApO,GAEA,GAAAvwB,KAAAkU,SAAAy3D,YAAA3rE,KAAAwqE,WAAA,IAAAxqE,KAAAqqE,iBAAArqE,KAAAkU,SAAAy4D,gBACA,OAGA1kD,aAAAjoB,KAAA0gC,SACA1gC,KAAA0gC,QAAA,KAGA,MAAA35B,EAAA/G,KAAA4rE,eAAA,GACA,GAAAr7C,GAAAxpB,KAAA/G,KAAAsqE,qBAAAzrE,MAAAkJ,GAAAiqD,aAAAjrD,KAAA,2BAAA,CACA,MAAAimE,IAAAhtE,KAAAkU,SAAA63D,SAAA/rE,KAAAkU,SAAA23D,sBAAA7rE,KAAAkU,SAAAy3D,WACA3rE,KAAAywE,UAAA1pE,EAAAimE,GACAvjE,MAAAkB,IACA+lE,QAAAC,KAAA,uBAAAhmE,OAKA4lE,gBAAA,WACA,OAAAvwE,KAAAgrE,SAAAhrE,KAAAgrE,QAAA4F,UAGAzE,YAAA,WACA,OAAA,IAAAnjE,QAAA,CAAAC,EAAAC,KACAlJ,KAAAywE,UAAAzwE,KAAA4rE,eAAA,IACApiE,KAAAP,GACAQ,MAAAP,MAQAunE,UAAA,SAAA1pE,GACA,OAAA,IAAAiC,QAAA,CAAAC,EAAAC,KAEA,GAAAlJ,KAAA2qE,eAEA,YADAzhE,EAAA,iCAIA,GAAAlJ,KAAAyqE,OAIA,YAHAzqE,KAAA0qE,MAAAhrE,KAAA,KACAM,KAAA2+B,cAKA3+B,KAAAsqE,oBAAAvjE,EACA/G,KAAAyqE,QAAA,EACAzqE,KAAA8R,OAAA,KACA9R,KAAA6qE,WAAA,KACA7qE,KAAA8qE,UAAA,KACA9qE,KAAA4J,YAAAN,MAAAgW,YAAAC,SACAvf,KAAAyvE,WAAAn5D,YAAA,UAEAtW,KAAA4sE,cACAp0D,SAAA,QACA8I,IAAA,UAAA,IACAhL,YAAA,gDACAtE,SAAA,UAEAhS,KAAA8pE,cACA9pE,KAAA8pE,aAAA93D,SAAA,UAIA,IAAA6+D,EAAA,GACAC,EAAA9wE,KAAA+wE,YAAAhqE,EAAA/G,KAAAkU,SAAA83D,wBAIA1jE,EAJA,CAAA0oE,EAAAlxE,KACAA,EAAAQ,QACAuwE,EAAAnxE,KAAAgO,mBAAA5N,EAAA,GAAAoB,MAAA,KAAA,QAKAlB,KAAAkU,SAAA23D,oBAAA7rE,KAAAkU,SAAA63D,UACA+E,GAAA,kBAGAjyE,MAAAiK,kBAAA,OAAA9I,KAAAkU,SAAAy4D,gBAAA,CACA/iE,YAAA5J,KAAA4J,YAAArJ,MACAiH,QAAA,CACAypE,eAAA,qCAEAlqE,KAAA+pE,IACAtnE,KAAAkB,IACA1K,KAAAkxE,oBAEAxmE,EAAA3D,KAAA+K,SACA9R,KAAA8R,OAAApH,EAAA3D,KAAA+K,OACA9R,KAAAmxE,kBACAjoE,EAAAwB,EAAA3D,KAAA+K,SAGA,MAAAo5D,GAAAlrE,KAAAkU,SAAA63D,QAEAb,IACAlrE,KAAAkU,SAAA23D,oBAAA,EACA7rE,KAAAkrE,yBAAA,GAGAxgE,EAAA3D,KAAAmU,OACA5c,EAAA,cAAAgF,KAAAoH,EAAA3D,KAAAmU,OAGAxQ,EAAA3D,KAAAqqE,WACA7qE,SAAA2U,MAAAxQ,EAAA3D,KAAAqqE,UAGApxE,KAAAkU,SAAA23D,mBACAX,GACAlrE,KAAAwpE,eAAAj3D,OACAjU,EAAA,UAAA,CACAgF,KAAA,MAAAzE,MAAAc,EAAA,MAAA,cAKAK,KAAAwpE,eAAAlmE,KAAAoH,EAAA3D,KAAAsqE,WACArxE,KAAAkU,SAAAm9D,UAAA3mE,EAAA3D,KAAAsqE,WAGA,IAAAC,EAAAtxE,KAAAupE,aAAAxiE,KAAA,WAAA/G,KAAAupE,aAAAxiE,KAAA,WAAAqgB,KAAA,KAqBA,GAlBApnB,KAAAoqE,aAEAkH,IACAtxE,KAAAupE,aAAAjzD,YAAA,YAAAtE,SAAA,WACA,IAAAnQ,QAAA8Y,QAAA3a,KAAAupE,cACA+H,EAAAtxE,KAAAupE,aAAAxiE,KAAA,WAAAqgB,KACAkqD,EAAAx+D,WAAAwD,YAAA,WAEAtW,KAAAoqE,WAAA9iB,QAAAtxC,IACA,MAAAuK,EAAA+wD,EAAA/pD,SAAAC,OAAA,iBAAAxR,MACAuK,EAAAzK,KAAA,WAAAQ,YAAA,YAAAtE,SAAA,WACAuO,EAAA0G,SAAA3Q,YAAA,UACAiE,QAAA,eAAAjE,YAAA,YAEAg7D,EAAAx+D,WAAAgD,KAAA,gBAAAQ,YAAA,UACAtW,KAAAoqE,WAAA,MAGApqE,KAAAkU,SAAA23D,oBACA,GAAAX,EAAA,CAEA5sE,EAAA,WAAA8P,KAAA,QAAApO,KAAAkU,SAAAg5D,oBAGAltE,KAAAkU,SAAA63D,QAAArhE,EAAA3D,KAAAglE,QACA/rE,KAAAkU,SAAA27D,QAAA,EACA7vE,KAAAirE,aAAA,KAEAqG,GAEAA,EAAAx+D,WAAAgD,KAAA,qBAAAvD,OACAjU,EAAA,SAAA,CACA2c,MAAA,gBACA1I,OACAjU,EAAA,OAAA,CACAgF,KAAAzE,MAAAc,EAAA,MAAA,oCAEA4S,OACAjU,EAAA,YAAA,CACAyX,GAAA,kBACAkF,MAAA,MACA3X,KAAAzE,MAAAc,EAAA,MAAA,uBAMAK,KAAA8rE,gCAEAwF,IACAA,EAAA/pD,SAAAC,OAAA,QAAA1R,KAAA,eAAAxS,KAAAoH,EAAA3D,KAAAsqE,WACAC,EAAA/pD,SAAAC,OAAA,QAAA1R,KAAA,eAAAxS,KAAAoH,EAAA3D,KAAAwqE,QACA1yE,MAAAc,EAAA,MAAA,iCAAA,CACA6xE,UAAA9mE,EAAA3D,KAAAyqE,UACAD,QAAA7mE,EAAA3D,KAAAwqE,UAEA1yE,MAAAc,EAAA,MAAA,oBAAA,CACA6xE,UAAA9mE,EAAA3D,KAAAyqE,cAOA9mE,EAAA3D,KAAAukE,gBACAnkE,KAAAC,UAAAsD,EAAA3D,KAAAukE,kBAAAnkE,KAAAC,UAAApH,KAAAkU,SAAAo3D,iBAEAtrE,KAAAyxE,qBAAA/mE,EAAA3D,KAAAukE,gBAGAJ,GACAlrE,KAAAmX,QAAA,0BAGAnX,KAAA6pE,gBACA7pE,KAAA0xE,kBAGA,IAAA,MAAAC,KAAAjnE,EAAA3D,KAAA6jE,mBACA+G,GAAA3xE,KAAAkU,SAAAu4D,UAAA/hE,EAAA3D,KAAA6jE,mBAAAnrE,eAAAkyE,KACA3xE,KAAA4qE,mBAAA+G,GAAAjnE,EAAA3D,KAAA6jE,mBAAA+G,IAKA,MAAAC,EAAAlnE,EAAA3D,KAAA8qE,mBAAAzvE,IAAAgM,GAAA,UAAAA,eAAAA,QACAf,OAAAwjE,EAAAzuE,IAAA8C,GAAA,UAAAA,QAEA4sE,EAAAxzE,EAAAszE,EAAAnxE,KAAA,MAAAswB,UAAAvJ,OAAA,qCACA,IAAA,IAAAnoB,EAAA,EAAAA,EAAAyyE,EAAAxxE,OAAAjB,IACAyyE,EAAAz/D,GAAAhT,GAAA4+B,QACA3/B,EAAA,SAAA,CACA2c,MAAA,wBACAC,MAAArc,MAAAc,EAAA,MAAA,iCACAwb,aAAAtc,MAAAc,EAAA,MAAA,oCAKAK,KAAA+xE,YAAAhrE,GAEA/G,KAAAw9C,IACAx9C,KAAAw9C,GAAAw0B,YAAA,CACArzD,MAAA,YACA6tD,YAAAxsE,KAAAkU,SAAAu4D,SACAV,QAAA/rE,KAAAkU,SAAA63D,QACAF,mBAAA7rE,KAAAkU,SAAA23D,qBAIA5iE,MACAQ,MAAAkB,IACA3K,KAAAkxE,oBAEAlxE,KAAA+c,sBACA/c,KAAA8R,OAAA,GACAnH,GAAAA,EAAAD,WACA1K,KAAA6qE,WAAAlgE,EAAAD,SAAAU,OACApL,KAAA8qE,UAAAngE,EAAAD,SAAA3D,KAAA4D,EAAAD,SAAA3D,KAAAY,MAAA,MAEA3H,KAAAmxE,kBACAjoE,EAAAyB,IAGA3K,KAAA+c,qBAAA,OAKAm0D,kBAAA,WACAlxE,KAAAyvE,WAAAz9D,SAAA,UACAhS,KAAA8pE,cACA9pE,KAAA8pE,aAAAxzD,YAAA,UAEAtW,KAAAyqE,QAAA,GAGA0G,gBAAA,WACAnxE,KAAA4sE,cACAp0D,SAAA,QACA8I,IAAA,UAAA,IACAhL,YAAA,yBACAtE,SAAA,cACA5D,KAAA,QAAApO,KAAAuvE,qBAQAwB,YAAA,SAAAhqE,EAAAkrE,GAmBA,OAjBAlrE,EAAAlI,MAAAyN,cAAAzN,MAAAkJ,GAAAiqD,aAAAjrD,KAAA,0BAAAA,EAAAlI,MAAA4N,WAAAwlE,GAGAlrE,EAAA/G,KAAAkyE,yBAAAnrE,GAGA/G,KAAAkU,SAAA63D,UACAhlE,GAAA,YAAA/G,KAAAkU,SAAA63D,QACA/rE,KAAAkU,SAAA23D,qBACA9kE,GAAA,mBAIA,OAAA/G,KAAAkU,SAAAm9D,YACAtqE,GAAA,cAAA/G,KAAAkU,SAAAm9D,WAGAtqE,GAOAmrE,yBAAA,SAAAnrE,GACA,MAAAorE,EAAA1pE,OAAAC,KAAA1I,KAAA4qE,oBAAAnqE,KAAA,KACA,GAAA,KAAA0xE,EACA,OAAAprE,EAEA,MAAAo1C,EAAAz4C,mBAAA,KACA04C,EAAA14C,mBAAA,KAEA,KACAqD,KACAA,EAAAA,EAEApI,QAAA,IAAAwF,OAAA,WAAAg4C,SAAAC,IAAAD,MAAAg2B,MAAA/1B,KAAA,KAAA,CAAAruC,EAAAqkE,EAAAr8D,EAAAs8D,IACAD,EAAApyE,KAAA4qE,mBAAA70D,GAAAs8D,GAGA1zE,QAAA,IAAAwF,OAAA,WAAAg4C,YAAAg2B,QAAA,KAAA,CAAApkE,EAAAqkE,EAAAr8D,IACAq8D,EAAApyE,KAAA4qE,mBAAA70D,OAMA,OAAAhP,GAGA0qE,qBAAA,SAAAnG,GACAA,EAAAhkB,QAAAgrB,IACA,MAAAj4D,EAAAra,KAAAkU,SAAAo3D,eAAAx1D,KAAAnW,GAAAA,EAAAsW,QAAAq8D,EAAAr8D,OACAoE,IACAA,EAAAhV,IAAAitE,EAAAjtE,QAKA0sE,YAAA,SAAAhrE,GACAlI,MAAAkJ,GAAAiqD,aAAAjrD,KAAA,yBAAAA,GACAlI,MAAA6N,mBAAA,GAEA,MAAAwjE,EAAAlwE,KAAA4sE,cACAp0D,SAAA,QACA8I,IAAA,UAAA,IACAhL,YAAA,UACAtE,SAAA,kBACA5D,KAAA,QAAApO,KAAAsvE,uBAEAzwE,MAAAssE,gBAEA+E,EACA13D,SAAA,QACAA,SAAA,CACA6jB,QAAA,GACA,CACAu3B,MAAA,IACAt7C,SAAA,KACA43D,EAAAl+D,SAAA,aAKAhS,KAAAmX,QAAA,UAEAnX,KAAAuyE,eAGAA,YAAA,WACAvyE,KAAA0qE,MAAApqE,QACAN,KAAA0qE,MAAAznE,OAAAjD,IAIAwyE,YAAA,WACAxyE,KAAA4pE,QAIA5pE,KAAA4pE,QAAAhtC,QAHA58B,KAAAyyE,gBACAzyE,KAAA0yE,iBAKA7wE,QAAAsf,iBAAA,IACAnhB,KAAA6pE,eAAA1yD,QAAA,UAIAs7D,cAAA,WACA,MAAAE,EAAAr0E,EAAA,UAGAs0E,EAAAt0E,EAAA,mEAAAO,MAAAc,EAAA,MAAA,cAAA,wBAAA6O,SAAAmkE,GACAE,EAAAv0E,EAAA,wBAAAkQ,SAAAokE,GACA5yE,KAAA6pE,eAAAvrE,EAAA,+DAAAkQ,SAAAqkE,GAAAtuE,IAAAvE,KAAAkU,SAAAm9D,WAGA,MAAAh1D,EAAA/d,EAAA,8CAAAkQ,SAAAmkE,GAEAr0E,EAAA,iCAAAkQ,SAAA6N,GACArc,KAAA8pE,aAAAxrE,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,sBACA3X,KAAAzE,MAAAc,EAAA,MAAA,UACA6O,SAAA6N,GAEArc,KAAA4pE,QAAA,IAAA/nE,QAAAm1B,IAAAh3B,KAAA2pE,aAAAgJ,EAAA,CACAtJ,SAAArpE,KAAA8yE,SAAAxrD,KAAAtnB,QAGAA,KAAAqd,YAAArd,KAAA6pE,eAAA,QAAA,mBAEA7pE,KAAA4pE,QAAAtyD,GAAA,OAAAtX,KAAA0yE,cAAAprD,KAAAtnB,OACAA,KAAA4pE,QAAAtyD,GAAA,OAAAtX,KAAA+yE,cAAAzrD,KAAAtnB,OACAA,KAAA4pE,QAAAtyD,GAAA,SAAAtX,KAAAgzE,gBAAA1rD,KAAAtnB,QAGA0yE,cAAA,WACA1yE,KAAA2pE,aAAA33D,SAAA,WAGA+gE,cAAA,WACA/yE,KAAA2pE,aAAArzD,YAAA,WAGA08D,gBAAA,WACAhzE,KAAA6pE,eAAAtlE,IAAAvE,KAAAkU,SAAAm9D,YAGAK,gBAAA,WACA,OACA1xE,KAAA6pE,eAAAtlE,OACAvE,KAAA6pE,eAAAtlE,QAAAvE,KAAAkU,SAAAm9D,WAEArxE,KAAA8pE,aAAAxzD,YAAA,aACA,IAGAtW,KAAA8pE,aAAA93D,SAAA,aACA,IAGAihE,aAAA,WACApxE,QAAA6gB,MAAA1iB,KAAA4pE,QAAAsJ,OAGAJ,SAAA,WACA9yE,KAAA0xE,mBAKA1xE,KAAAkU,SAAAm9D,UAAArxE,KAAA6pE,eAAAtlE,MAEAvE,KAAA4pE,QAAA1iD,OACAlnB,KAAA2+B,WAAA,IAPA3+B,KAAAizE,gBAUAE,iBAAA,SAAA57D,GAIA,GAHAA,EAAAK,iBAGA5X,KAAA2qE,eACA,OAKA,GACA3qE,KAAAkU,SAAA63D,UACA/rE,KAAAkU,SAAA83D,qBACAhsE,KAAAkU,SAAA23D,0BACA,IAAAt0D,EAAA67D,UAAA77D,EAAA67D,YACA77D,EAAA+9C,cAAA/9C,EAAAiD,eAAAjD,EAAAiD,cAAAzT,KAAA,YAAA/G,KAAAkU,SAAAy4D,iBAGA,YADA3sE,KAAA2+B,WAAA,GAKA9/B,MAAAkJ,GAAAwqD,oBAAA1zD,MAAAkJ,GAAAwqD,oBAAAx+B,IAAAl1B,MAAAkJ,GAAAiqD,cAGAhyD,KAAA4J,cACA5J,KAAA+c,qBAAA,EACA/c,KAAA4J,YAAAyV,UAIA,MAAAtY,EAAA/G,KAAA+wE,YAAA/wE,KAAA4rE,eAAA,IACAz9D,EAAAtP,MAAAqP,WAAAnH,GAEAoH,EAAAK,SAAA3M,QAAA+Q,MACAzE,EAAA6mD,SACAh1D,KAAA2qE,gBAAA,IAEA,CACA1tD,SAAA,CACApJ,YAAA,KACA44D,SAAA,KACAz2D,OAAA,KACAg2D,oBAAA,EACA6C,SAAA,EACAd,gBAAA,EACA8B,QAAA,EACAhE,oBAAA,EACAT,aAAA,KACA8C,UAAA,GACA/rD,UAAA,KACA4pD,QAAA,KACAJ,WAAA,KACA0F,UAAA,KACAhG,sBAAA,EACAa,iBAAA,EACAS,gBAAA,KACAG,kBAAA,KACAI,mBAAA,KACAH,gBAAA,KACAsG,4BAAA,KACA9H,eAAA,EACAD,eAAA,GACAwE,UAAA,QCzpCAjxE,MAAAy0E,iBAAAz0E,MAAA2hC,mBAAA5hC,OAAA,CACAoI,SAAA1I,EAAA6kB,KAEAnG,KAAA,SAAAuC,EAAArC,EAAAlW,GACAhH,KAAAgH,SAAAA,EACAhH,KAAA6iB,KAAAtD,EAAArC,IAGAmkB,oBAAA,SAAAF,GACA,OAAAnhC,KAAAgH,SAAAm6B,MCTAtiC,MAAA00E,cAAA1xE,QAAA4Z,KAAA7c,OAAA,CACAwkB,aAAA,EAEArN,GAAA,KACAy9D,SAAA,KACA3V,QAAA,KACA16B,OAAA,KACAswC,WAAA,EAEApwC,OAAA,KACApE,OAAA,KACAy0C,WAAA,KAEAC,SAAA,EACAC,YAAA,EACAC,YAAA,EAEAC,gBAAA,KAEA92D,KAAA,SAAAjH,EAAAy9D,EAAA3V,EAAA3pD,GA+BA,GA9BAlU,KAAA+V,GAAAA,EACA/V,KAAAwzE,SAAAA,EACAxzE,KAAA69D,QAAAA,EACA79D,KAAA8Z,YAAA5F,EAAArV,MAAA00E,cAAAt2D,UACAjd,KAAA8zE,gBAAA,GAEA9zE,KAAAqjC,OAAA/kC,EAAA,IAAAyX,GACA/V,KAAAi/B,OAAAj/B,KAAAqjC,OAAAroB,SAAA,SACAhb,KAAA2zE,SAAA3zE,KAAAi/B,OAAAnpB,KAAA,MAAAxV,OAGAN,KAAAqjC,OAAAt8B,KAAA,oBACAlF,QAAAigC,IAAA,wDACA9hC,KAAAqjC,OAAAt8B,KAAA,kBAAAkX,WAGAje,KAAAqjC,OAAAt8B,KAAA,iBAAA/G,MAEAA,KAAAmjC,OAAA,IAAAtkC,MAAA8kC,gBAAA3jC,KAAAqjC,OAAA,CACA+kC,YAAA,0BACA2L,gCAAA,IAGA/zE,KAAAg0E,YACAh0E,KAAAi0E,aAGA/rD,WAAAloB,KAAAk0E,oBAAA5sD,KAAAtnB,MAAA,KAGAA,KAAAkU,SAAAigE,SAAAn0E,KAAA2zE,SAAA3zE,KAAAkU,SAAAigE,QACA,IAAA,IAAA90E,EAAAW,KAAA2zE,SAAAt0E,EAAAW,KAAAkU,SAAAigE,QAAA90E,IACAW,KAAA8jC,UAKAkwC,UAAA,WACA,OAAAh0E,KAAAqjC,OAAApc,SAAAoG,SAAA,GAGA4mD,WAAA,WACA,GAAAj0E,KAAAojB,YACA,OAAA,EAGApjB,KAAAojB,aAAA,EACApjB,KAAA4qB,eAAA/oB,QAAA8e,KAAA,UAIA,IAFA,IAAAonD,EAAA/nE,KAAAi/B,OAAAjkB,WAEA3b,EAAA,EAAAA,EAAA0oE,EAAAznE,OAAAjB,IACAW,KAAAo0E,aAAArM,EAAA1oE,IAMA,OAHAW,KAAA0zE,WAAA1zE,KAAAqjC,OAAA5oB,KAAA,QACAza,KAAAq0E,qBACAr0E,KAAAqd,YAAArd,KAAA0zE,WAAA,WAAA,WACA,GAEAQ,oBAAA,WACAl0E,KAAA4qB,eAAA/oB,QAAA8e,KAAA,UAEA3gB,KAAAg0E,YACAh0E,KAAAi0E,aAEAj0E,KAAAqd,YAAAxb,QAAA8e,KAAA,SAAA,wBAGA0zD,mBAAA,WACAr0E,KAAAs0E,aAIAt0E,KAAA0zE,WAAApyD,IAAA,UAAA,KACAthB,KAAA0zE,WAAApyD,IAAA,iBAAA,UAJAthB,KAAA0zE,WAAApyD,IAAA,UAAA,OACAthB,KAAA0zE,WAAApyD,IAAA,iBAAA,UAMAizD,aAAA,WACA,OAAAv0E,KAAA2zE,SAAA3zE,KAAAkU,SAAAigE,SAEAK,UAAA,SAAAzwC,GACA/jC,KAAAu0E,iBAIAv0E,KAAAmjC,OAAAxY,YAAAoZ,EAAA0wC,KACA1wC,EAAA0wC,IAAAr5D,SAEApb,KAAA2zE,WAEA3zE,KAAAq0E,qBACA,IAAAr0E,KAAA2zE,UACA3zE,KAAAqjC,OAAArxB,SAAA,UAIAhS,KAAAkU,SAAAwgE,YAAA3wC,EAAA0wC,KAEA1wC,EAAA9lB,YAEAq2D,UAAA,WACA,OAAAt0E,KAAAkU,SAAAygE,cAIA30E,KAAAkU,SAAA0gE,SACA50E,KAAA2zE,SAAA3zE,KAAAkU,SAAA0gE,UAKA9wC,OAAA,SAAA/rB,EAAAkmB,GACA,GAAAj+B,KAAAs0E,YAAA,CAIA,IAAAO,EAAA70E,KAAAkU,SAAA4gE,aAAA90E,KAAAyzE,UAAA,GACAgB,EAAAz0E,KAAA+0E,UAAAF,EAAA70E,KAAA69D,QAAA79D,KAAAwzE,SAAAl1E,EAAAM,OAAA,GAAAoB,KAAAkU,SAAA8gE,gBAEA/2C,EACAw2C,EAAAtpD,UAAAnrB,KAAAi/B,QAEAw1C,EAAAjmE,SAAAxO,KAAAi/B,QAGA,IAAA8E,EAAA/jC,KAAAo0E,aAAAK,GAeA,OAdAz0E,KAAAmjC,OAAAhZ,SAAAsqD,IAGA,IAAA18D,GACA08D,EAAA3+D,KAAA,iDAAAkC,QAAAb,QAAA,SAGAnX,KAAA2zE,WACA3zE,KAAAq0E,qBACAr0E,KAAAqjC,OAAA/sB,YAAA,UAGAtW,KAAAkU,SAAA+gE,SAAAR,GAEA1wC,IAGAgxC,UAAA,SAAAF,EAAAhX,EAAA2V,EAAAjlE,GACA,OAAA1P,MAAA00E,cAAAwB,UAAAF,EAAAhX,EAAA2V,EAAAjlE,IAGA6lE,aAAA,SAAAK,GACA,OAAA,IAAA51E,MAAA00E,cAAA2B,IAAAl1E,KAAAy0E,IAGAU,eAAA,SAAAV,EAAAW,EAAAC,GACA,IACAC,EADAC,EAAAd,EAAAjhD,KAAA,MAUA,IANA8hD,EADAC,EAAAj1E,OACAi1E,EAAAxuE,KAAA,sBAEA/G,KAAA8jC,QAAA,GAAA,KAQAwxC,EAAAE,KAAAJ,GAIA,GAAA92E,EAAAg3E,EAAAE,KAAAJ,IAAAv/D,SAAA,YACA0/D,GACAv1E,KAAAm1E,eAAAI,EAAAH,EAAAC,OAFA,CAOA,IAAA/wE,EAAAhG,EAAA,sBAAAg3E,EAAAE,KAAAJ,IACA9wE,EAAAhE,SACAhC,EAAA+2E,GAAAl+D,QAAA,QACA7S,EAAA6S,QAAA,YAIAs+D,eAAA,SAAAhB,EAAAW,EAAAC,GACA,IACAK,EADAC,EAAAlB,EAAAh6D,KAAA,MAUA,IANAi7D,EADAC,EAAAr1E,OACAq1E,EAAA5uE,KAAA,sBAEA/G,KAAA8jC,QAAA,KAQA4xC,EAAAF,KAAAJ,GAIA,GAAA92E,EAAAo3E,EAAAF,KAAAJ,IAAAv/D,SAAA,YACA8/D,GACA31E,KAAAy1E,eAAAE,EAAAP,EAAAC,OAFA,CAOA,IAAA/wE,EAAAhG,EAAA,sBAAAo3E,EAAAF,KAAAJ,IACA9wE,EAAAhE,SACAhC,EAAA+2E,GAAAl+D,QAAA,QACA7S,EAAA6S,QAAA,YAIAy+D,WAAA,SAAA7uE,EAAAg9B,EAAAqxC,GACA,IAAAS,EAAA9uE,EAAA7F,MAAA,YACA,IAAA,IAAA7B,EAAA,EAAAA,EAAAw2E,EAAAv1E,OAAAjB,IAAA,CACA,IAAAkP,EAAAsnE,EAAAx2E,GAAA6B,MAAA,MACA,IAAA,IAAA+3D,EAAA,EAAAA,EAAA1qD,EAAAjO,OAAA24D,IAAA,CACA,IAAA9zD,EAAAoJ,EAAA0qD,GACAl1B,EAAAyxC,KAAAnjE,GAAA+iE,EAAAnc,GAAAnjD,KAAA,gCACAvR,IAAAY,GACAgS,QAAA,SAIA,IAAAw+D,EAAA5xC,EAAA0wC,IAAAh6D,KAAA,MAEAspB,EADA4xC,EAAAr1E,OACAq1E,EAAA5uE,KAAA,sBAEA/G,KAAA8jC,QAAA,MAIA,CACAgyC,gBAAA,CAAA,QAAA,OAAA,QAAA,YAAA,SAAA,aAAA,WAAA,OAAA,OACA74D,SAAA,CACA63D,YAAA,GACAE,cAAA,GACAL,YAAA,EACAR,QAAA,KACAS,QAAA,KACAK,SAAA32E,EAAA6kB,KACAuxD,YAAAp2E,EAAA6kB,MAGA4xD,UAAA,SAAAF,EAAAhX,EAAA2V,EAAAjlE,GACA,IAAAkmE,EAAAn2E,EAAA,QAAA,CACAy3E,UAAAlB,IAGA,IAAA,IAAAmB,KAAAnY,EACA,GAAAA,EAAAp+D,eAAAu2E,GAAA,CAIA,IAEAC,EAFAC,EAAArY,EAAAmY,GACA7wE,OAAA,IAAAoJ,EAAAynE,GAAAznE,EAAAynE,GAAA,GAGA,GAAA,YAAAE,EAAA50E,KACA20E,EAAA33E,EAAA,QAAA,CACA63E,MAAA,MACAl7D,MAAAi7D,EAAA,MACAx3E,KAAAyG,QAEA,CACA,IAAAD,EAAAsuE,EAAA,IAAAqB,EAAA,KAAAmB,EAAA,IAeA,OAbAC,EAAA33E,EAAA,QAAA,CACA2c,MAAA,GAAAi7D,EAAAj7D,SAAAi7D,EAAA50E,YACAoqC,MAAAwqC,EAAAxqC,QAGA7sC,MAAAsO,QAAA+oE,EAAA50E,KAAAzC,MAAA00E,cAAAuC,kBACAG,EAAAjkE,SAAA,WAGAkkE,EAAAE,MACAH,EAAAjkE,SAAA,QAGAkkE,EAAA50E,MACA,IAAA,WACAhD,EAAA,mCACAiU,OAAA1T,MAAA03B,GAAAkxC,eAAA,CACAviE,KAAAA,EACAC,MAAA+wE,EAAA/wE,OAAA,IACAsiD,UAAAtiD,KAGAqJ,SAAAynE,GACA,MAEA,IAAA,QACAp3E,MAAA03B,GAAAiuC,iBAAA,CACAt/D,KAAAA,EACAC,MAAAA,EACAkxE,OAAA,IACA7nE,SAAAynE,GACA,MAEA,IAAA,OACAp3E,MAAA03B,GAAA+/C,gBAAA,CACApxE,KAAAA,EACAC,MAAAA,IACAqJ,SAAAynE,GACA,MAEA,IAAA,cACAp3E,MAAA03B,GAAAggD,kBAAA,CACArxE,KAAAA,EACAC,MAAA+wE,EAAA/wE,OAAA,IACAmS,KAAAnS,EACAkxE,OAAA,IACA7nE,SAAAynE,GACA,MAEA,IAAA,SACAp3E,MAAA03B,GAAA04C,aAAA,CACA/pE,KAAAA,EACA+B,QAAAivE,EAAAjvE,QACA9B,MAAAA,GAAA,WACA,IAAA,IAAAlG,KAAAi3E,EAAAjvE,QACA,GAAAivE,EAAAjvE,QAAAxH,eAAAR,IAAAi3E,EAAAjvE,QAAAhI,GAAAu3E,QACA,YAAA,IAAAN,EAAAjvE,QAAAhI,GAAAkG,MAAA+wE,EAAAjvE,QAAAhI,GAAAkG,MAAAlG,EAGA,OAAA,KANA,GAQAgc,MAAA,UACAzM,SAAAynE,GACA,MAEA,IAAA,OACAp3E,MAAA03B,GAAAkgD,gBAAA,CACAvxE,KAAAA,EACAC,MAAAA,IACAqJ,SAAAynE,GACA,MAEA,IAAA,QACA,IAAA,MACAp3E,MAAA03B,GAAAmgD,gBAAA,CACAxxE,KAAAA,EACAC,MAAAA,EACA7D,KAAA40E,EAAA50E,KACAw1B,YAAAo/C,EAAAp/C,aAAA,OACAtoB,SAAAynE,GACA,MAEA,QACA33E,EAAA,cAAA,CACA4G,KAAAA,EACA44D,KAAAoY,EAAApY,MAAA,EACAv5D,IAAAY,EACA2xB,YAAAo/C,EAAAp/C,cACAtoB,SAAAynE,IAIAA,EAAAznE,SAAAimE,GAqBA,OAlBAn2E,EAAA,QAAA,CACA2c,MAAA,gBACA1I,OACAjU,EAAA,OAAA,CACA2c,MAAA,YACAC,MAAArc,MAAAc,EAAA,MAAA,cAEA6O,SAAAimE,GAEAn2E,EAAA,QAAA,CACA2c,MAAA,gBACA1I,OACAjU,EAAA,OAAA,CACA2c,MAAA,cACAC,MAAArc,MAAAc,EAAA,MAAA,aAEA6O,SAAAimE,GAEAA,KAOA51E,MAAA00E,cAAA2B,IAAArzE,QAAA4Z,KAAA7c,OAAA,CACAkpE,MAAA,KACA/xD,GAAA,KACA4gE,UAAA,KAEAlC,IAAA,KACAe,KAAA,KACAoB,IAAA,KACAC,WAAA,KACA3yC,WAAA,KAEAlnB,KAAA,SAAA8qD,EAAAgP,GACA92E,KAAA8nE,MAAAA,EACA9nE,KAAAy0E,IAAAn2E,EAAAw4E,GACA92E,KAAAw1E,KAAAx1E,KAAAy0E,IAAAz5D,WACAhb,KAAA42E,IAAA,GACA52E,KAAA+V,GAAA/V,KAAAy0E,IAAArmE,KAAA,WAEApO,KAAAy0E,IAAA1tE,KAAA,qBAAA/G,MAGA,IAAA+V,EAAA5T,SAAAnC,KAAA+V,GAAArU,OAAA1B,KAAA8nE,MAAA5zD,SAAA4gE,YAAAx0E,SAEAyV,EAAA/V,KAAA8nE,MAAA2L,YACAzzE,KAAA8nE,MAAA2L,UAAA19D,GAGA/V,KAAA62E,WAAAv4E,IACA0B,KAAA22E,UAAA,GACA,IAGAX,EAAAE,EAAAa,EAAAC,EAAAC,EAHAC,EAAA,GAEA73E,EAAA,EAGA,IAAA22E,KAAAh2E,KAAA8nE,MAAAjK,QACA79D,KAAA8nE,MAAAjK,QAAAp+D,eAAAu2E,KAIAE,EAAAl2E,KAAA8nE,MAAAjK,QAAAmY,GACAe,EAAA/2E,KAAA42E,IAAAZ,GAAAh2E,KAAAw1E,KAAAn2E,GAEAR,MAAAsO,QAAA+oE,EAAA50E,KAAAzC,MAAA00E,cAAAuC,kBACAkB,EAAA14E,EAAA,WAAAy4E,GACA/2E,KAAA62E,WAAA72E,KAAA62E,WAAAn5D,IAAAs5D,GAEAh3E,KAAAqd,YAAA25D,EAAA,QAAA,mBACAh3E,KAAAqd,YAAA25D,EAAA,YAAA,2BAEAh3E,KAAA22E,UAAAj3E,KAAA,IAAAmC,QAAAsY,SAAA68D,EAAA,CACAG,eAAAn3E,KAAAo3E,uBAAA9vD,KAAAtnB,SAGAA,KAAAqd,YAAA25D,EAAA,WAAA,CAAA5B,QAAA/1E,EAAAiC,KAAA40E,EAAA50E,MAAA,kBACAtB,KAAAqd,YAAA25D,EAAA,QAAA,CAAA11E,KAAA40E,EAAA50E,MAAA,iBACA01E,EAAA7/D,QAAA,SAEA,cAAA++D,EAAA50E,MACAtB,KAAAqd,YAAA25D,EAAA,QAAA,CAAA5B,QAAA/1E,EAAAiC,KAAA40E,EAAA50E,MAAA,eAGA41E,EAAAlB,GAAAgB,GACA,aAAAd,EAAA50E,OACA21E,EAAA34E,EAAA,yBAAAy4E,GAEAb,EAAAmB,iBACA,IAAAr3E,KAAA8nE,MAAAgM,gBAAAkC,KACAh2E,KAAA8nE,MAAAgM,gBAAAkC,GAAA,IAEAh2E,KAAA8nE,MAAAgM,gBAAAkC,GAAAt2E,KAAAu3E,EAAA,IACAj3E,KAAAqd,YAAA45D,EAAA,SAAA,CAAAjB,MAAAA,GAAA,0BAGAE,EAAAoB,QACAt3E,KAAAqd,YAAA45D,EAAA,SAAA,CAAAjB,MAAAA,IAAA,SAAAz+D,GACAvX,KAAAu3E,oBAAAhgE,EAAAxQ,KAAAivE,WAKA13E,EAAAy4E,GAAAlhE,SAAA,aACA7V,KAAAqd,YAAA05D,EAAA,QAAA,CAAAA,GAAAA,IAAA,SAAAx/D,GACAA,EAAA2F,SAAA3F,EAAAxQ,KAAAgwE,IACAz4E,EAAAiZ,EAAAxQ,KAAAgwE,IAAAjhE,KAAA,sCAAAiC,WAKA1Y,KAOA,IAAA22E,KAHAh2E,KAAAo3E,yBAGAp3E,KAAA8nE,MAAAjK,QACA79D,KAAA8nE,MAAAjK,QAAAp+D,eAAAu2E,IAIA,cADAE,EAAAl2E,KAAA8nE,MAAAjK,QAAAmY,IACA10E,MAAA40E,EAAAoB,QACAt3E,KAAAu3E,oBAAAvB,GAKA,IAAAA,KAAAh2E,KAAA8nE,MAAAjK,QACA79D,KAAA8nE,MAAAjK,QAAAp+D,eAAAu2E,KAIAE,EAAAl2E,KAAA8nE,MAAAjK,QAAAmY,IAEAwB,mBAAA,IAAAN,EAAAhB,EAAAsB,gBAAAN,EAAAlB,GAAAzxE,OACA,IAAA1F,MAAA44E,gBAAAP,EAAAlB,GAAAkB,EAAAhB,EAAAsB,cAAA,CACAE,oBAAA,IAKA,IAAAxzC,EAAAlkC,KAAAy0E,IAAAz5D,WAAAlD,OAAAhC,KAAA,WACA9V,KAAAqd,YAAA6mB,EAAA,QAAA,aAEA,IAAArpB,EAAA7a,KAAAy0E,IAAA3+D,KAAA,sCACA9V,KAAAqd,YAAAxC,EAAA,SAAA,SAAAtD,GACAjZ,EAAAiZ,EAAA8C,eAAAE,QAAA,qBAAAvI,SAAA,YAEAhS,KAAAqd,YAAAxC,EAAA,QAAA,SAAAtD,GACAjZ,EAAAiZ,EAAA8C,eAAAE,QAAA,MAAAjE,YAAA,aAIAqhE,gBAAA,SAAApgE,GACAvX,KAAAo3E,yBAEA,IAAAJ,EAAA14E,EAAAiZ,EAAA8C,eAEA28D,EAAAjwE,KAAA,mBACAiwE,EAAAjwE,KAAA,mBAAA,GAIAmhB,YAAA,WACArpB,MAAAuF,gBAAA4yE,KACA,IAGAY,sBAAA,SAAArgE,GACA,GAAAA,EAAA8C,cAAAotC,QACA,IAAA,IAAApoD,EAAA,EAAAA,EAAAW,KAAA8nE,MAAAgM,gBAAAv8D,EAAAxQ,KAAAivE,OAAA11E,OAAAjB,IAAA,CACA,IAAAw4E,EAAA73E,KAAA8nE,MAAAgM,gBAAAv8D,EAAAxQ,KAAAivE,OAAA32E,GACAw4E,EAAApwB,QAAAowB,IAAAtgE,EAAA8C,gBAKAk9D,oBAAA,SAAAO,GAIA,IAHA,IAEA9B,EAAA+B,EAFAC,EAAAh4E,KAAA8nE,MAAAjK,QAAAia,GACArwB,EAAAnpD,EAAA,yBAAA0B,KAAA42E,IAAAkB,IAAAz/C,KAAA,WAEAh5B,EAAA,EAAAA,EAAA24E,EAAAV,OAAAh3E,OAAAjB,IACA22E,EAAAgC,EAAAV,OAAAj4E,GACAW,KAAA8nE,MAAAmQ,OACAF,EAAA,MAAA/B,EAAA,MAEAA,EAAAA,EAAAt0E,OAAA,IAEA+lD,IAAAswB,IAAAtwB,GAAAswB,EACAz5E,EAAA0B,KAAA42E,IAAAZ,IACA1/D,YAAA,YACAR,KAAA,mBAAAuiB,KAAA,YAAA,GAEA/5B,EAAA0B,KAAA42E,IAAAZ,IACAhkE,SAAA,YACA8D,KAAA,mBAAAuiB,KAAA,YAAA,IAKA6/C,wBAAA,SAAA3gE,GACAjZ,EAAAyI,KAAAwQ,EAAA8C,cAAA,mBAAA,IAGA89D,eAAA,SAAA5gE,GACA,IAAAC,EAAAD,EAAAC,QAAAD,EAAAC,QAAAD,EAAA6gE,SACA/5D,EAAAxc,QAAAw2E,iBAAA9gE,GAGA,GAAAC,IAAA3V,QAAAumB,aAAA,cAAA7Q,EAAAxQ,KAAAzF,MAAA+c,GAOA,OANA9G,EAAAK,sBACAL,EAAAI,SACA3X,KAAA8nE,MAAAqN,eAAAn1E,KAAAy0E,IAAAl9D,EAAAxQ,KAAAquE,QAAA79D,EAAA8C,eAEAra,KAAA8nE,MAAA2N,eAAAz1E,KAAAy0E,IAAAl9D,EAAAxQ,KAAAquE,QAAA79D,EAAA8C,gBAMA,WAAA9C,EAAAxQ,KAAAzF,MAAA+c,GAAAxf,MAAAsO,QAAAqK,EAAA3Y,MAAA00E,cAAA2B,IAAAoD,kBACA/gE,EAAAK,kBAIA2gE,YAAA,SAAAhhE,GACA,IAAAxQ,EAAAlI,MAAAuC,KAAAmW,EAAA69C,cAAAojB,cAAAC,QAAA,QAAA,SACA1xE,EAAArB,MAAA,cAGA6R,EAAAK,iBACA5X,KAAA8nE,MAAA8N,WAAA7uE,EAAA/G,KAAAuX,EAAAxQ,KAAAquE,WAGAsD,cAAA,SAAAnhE,GACA,GAAA,cAAAA,EAAAxQ,KAAAzF,KAAA,CAIA,IAAAq3E,EAEA,GAAA,WAAAphE,EAAAxQ,KAAAzF,KAAA,CAEA,IAAAoE,EAAA6R,EAAA8C,cAAAlV,MAAAO,MAAA,oBAGAizE,EADA,OAAAjzE,EACAA,EAAA,GAEA,QAIAizE,EAAAphE,EAAA8C,cAAAlV,MAAAxG,QAAA,UAAA,IAGAg6E,IAAAphE,EAAA8C,cAAAlV,QACAoS,EAAA8C,cAAAlV,MAAAwzE,KAIAvB,uBAAA,WAIA,IAFA,IAAAwB,GAAA,EAEAv5E,EAAA,EAAAA,EAAAW,KAAA22E,UAAAr2E,OAAAjB,IACAW,KAAA22E,UAAAt3E,GAAAguB,OAAAurD,IACAA,EAAA54E,KAAA22E,UAAAt3E,GAAAguB,QAIArtB,KAAA62E,WAAAv1D,IAAA,aAAAs3D,GAGA,IAAAC,EAAA74E,KAAA62E,WAAArvD,OAAA,YAAAxP,QAAAiP,SAAAoG,SAEAwrD,EAAAD,GACA54E,KAAA62E,WAAAv1D,IAAA,aAAAu3D,IAIArE,UAAA,WACAx0E,KAAA8nE,MAAA0M,UAAAx0E,QAEA,CACAs4E,gBAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,MCpqBAz5E,MAAAi6E,qBAAAj3E,QAAA4Z,KAAA7c,OAAA,CACAm6E,UAAA,KACAC,YAAA,KACAC,SAAA,KACA7mD,eAAA,KACA8mD,gBAAA,EAEAl8D,KAAA,SAAA9I,GACAlU,KAAA8Z,YAAA5F,EAAArV,MAAAi6E,qBAAA77D,UAEAjd,KAAAi5E,SAAA36E,EAAA,IAAA4V,EAAA5S,KAAA3C,QAAA,aAAA,KAAA,kBAGAqB,KAAAkU,SAAAilE,WAEAn5E,KAAAi5E,SAAAlyE,KAAA,kBAAA,GAGA,SAAA/G,KAAAi5E,SAAA5gD,KAAA,YACAr4B,KAAAqd,YAAArd,KAAAi5E,SAAA,SAAA,2BAEAj5E,KAAAqd,YAAArd,KAAAi5E,SAAA,QAAA,4BAIAj5E,KAAAo5E,gBACAv6E,MAAAqkB,aAAA5L,GAAA,kBAAAtX,KAAAo5E,cAAA9xD,KAAAtnB,QAGAo5E,cAAA,WAEA,IAAAv6E,MAAAqkB,aAAAsL,sBAAAluB,SAIAN,KAAAq5E,oBACAr5E,KAAAs5E,gBAEAt5E,KAAAu5E,mBASAF,kBAAA,WACA,IAAAG,GAAA,EASA,OARAx5E,KAAAoyB,eAAAvzB,MAAAqkB,aAAAsL,uBAEAxuB,KAAAkU,SAAAulE,OAAAz5E,KAAAoyB,eAAA9xB,OAAA,EACAk5E,GAAA,EACA,mBAAAx5E,KAAAkU,SAAAmlE,oBACAG,EAAAx5E,KAAAkU,SAAAmlE,kBAAAr5E,KAAAoyB,iBAGAonD,GAGAF,cAAA,WACAt5E,KAAAk5E,iBAIAl5E,KAAAi5E,SAAA3iE,YAAA,YACAtW,KAAAk5E,gBAAA,IAGAK,eAAA,WACAv5E,KAAAk5E,iBAIAl5E,KAAAi5E,SAAAjnE,SAAA,YACAhS,KAAAk5E,gBAAA,IAGAQ,wBAAA,SAAAniE,GACAA,EAAAK,iBACAL,EAAAM,kBAEA7X,KAAAk5E,gBACAl5E,KAAAkU,SAAAilE,SAAAn5E,KAAAoyB,kBAGA,CACAnV,SAAA,CACA3b,KAAA,KACAm4E,OAAA,EACAJ,kBAAA,KACAF,SAAA,QC3FAt6E,MAAAiiB,mBAAAjf,QAAA4Z,KAAA7c,OAAA,CACA8rE,MAAA,KACAiP,QAAA,GAEA38D,KAAA,WACAhd,KAAA0qE,MAAA,GAEA,IAAA,IAAArrE,EAAA,EAAAA,EAAA,EAAAA,IACAW,KAAA25E,QAAAj6E,KAAA,IAAAb,MAAAiiB,mBAAA84D,OAAA55E,QAIA4e,KAAA,SAAAyG,GAEA,IAAAw0D,EAAAx0D,EAAAvP,KAAA,iBACA,IAAA,IAAAzW,EAAA,EAAAA,EAAAw6E,EAAAv5E,OAAAjB,IAAA,CACA,IAAAy6E,EAAAD,EAAAxnE,GAAAhT,GACA06E,EAAAD,EAAAE,eAIA,GAHAD,EAAA,KAAAxzE,SAAAwE,OACAgvE,EAAAl4E,QAAA0Z,MAEAvb,KAAAg0E,UAAA8F,EAAAC,GACA/5E,KAAAi6E,WAAAH,EAAA,QACA,CACA,IAAA76E,EAAA,QAAA4R,KAAAC,MAAA,IAAAD,KAAAe,UACA/S,MAAAiiB,mBAAAo5D,gBAAAj7E,GAAA,CAAAe,KAAA85E,EAAAC,GACAA,EAAAziE,GAAA,UAAArY,EAAA,CACA66E,OAAAA,EACAC,cAAAA,EACA96E,IAAAA,GACAsY,IACAvX,KAAAg0E,UAAAz8D,EAAAxQ,KAAA+yE,OAAAviE,EAAAxQ,KAAAgzE,wBACAl7E,MAAAiiB,mBAAAo5D,gBAAA3iE,EAAAxQ,KAAA9H,KACA86E,EAAA14D,IAAA,UAAA9J,EAAAxQ,KAAA9H,KACAe,KAAAi6E,WAAA1iE,EAAAxQ,KAAA+yE,OAAA,UAOAG,WAAA,SAAAE,GACAn6E,KAAA0qE,MAAAhrE,KAAAy6E,GAGA,IAAA,IAAA96E,EAAA,EAAAA,EAAAW,KAAA25E,QAAAr5E,OAAAjB,IACAW,KAAA25E,QAAAt6E,GAAA+6E,QACAp6E,KAAA25E,QAAAt6E,GAAAg7E,YAKArG,UAAA,SAAA8F,EAAAC,GACA,IACAO,EAAAC,EADAC,EAAAV,EAAA93E,SAAAo3B,IASA,OAPA2gD,EAAA,KAAAxzE,UACA+zE,EAAAP,EAAA34D,YACAm5D,EAAA14E,QAAA8e,KAAA0M,WAEAitD,EAAAP,EAAA/3E,SAAAo3B,IACAmhD,EAAAR,EAAA1sD,UAEAmtD,EAAAF,GAAAE,EAAAF,EAAAC,EAAA,KAGAt8D,QAAA,WACA,IAAA,IAAA5e,EAAA,EAAAA,EAAAW,KAAA25E,QAAAr5E,OAAAjB,IACAW,KAAA25E,QAAAt6E,GAAA4e,UAGAje,KAAA6iB,SAEA,CACAq3D,gBAAA,GACAO,SAAA,WACA,IAAA,IAAAx7E,KAAAJ,MAAAiiB,mBAAAo5D,gBAAA,CACA,IAAAxP,EAAAoP,EAAAC,GAAAl7E,MAAAiiB,mBAAAo5D,gBAAAj7E,UACAJ,MAAAiiB,mBAAAo5D,gBAAAj7E,GACA86E,EAAA14D,IAAA,UAAApiB,GACAyrE,EAAA9rD,KAAAk7D,EAAA7yD,cAKApoB,MAAAiiB,mBAAA84D,OAAA/3E,QAAA4Z,KAAA7c,OAAA,CACA87E,OAAA,KACAN,QAAA,EAEAp9D,KAAA,SAAA09D,GACA16E,KAAA06E,OAAAA,GAGAL,SAAA,WACA,IAAAhjE,EAAArX,KAAA06E,OAAAhQ,MAAAznE,QACA,QAAA,IAAAoU,EAAA,CAKArX,KAAAo6E,QAAA,EACA,IAAAtnE,EAAAxU,EAAA+Y,GACA,GAAAvE,EAAAgD,KAAA,OAAAxV,OACAN,KAAAq6E,eADA,CAIA,IAAAM,EAAAr8E,EAAA,SAAA,CACAmY,MAAA3D,EAAA1E,KAAA,cACAsI,OAAA5D,EAAA1E,KAAA,eACAlL,IAAA,KAEAlD,KAAAqd,YAAAs9D,EAAA,aAAA,YACAA,EAAAnsE,SAAAsE,GACA8D,YAAA,CACAC,SAAA,CAAA8jE,EAAA,YAlBA36E,KAAAo6E,QAAA,KC/FAv7E,MAAA+7E,oBAAA/4E,QAAA4Z,KAAA7c,OAAA,CACAuP,MAAA,KACA0sE,OAAA,KAEA79D,KAAA,SAAA89D,EAAAD,GAIA,GAHA76E,KAAAmO,MAAA7P,EAAAw8E,QAGA,IAAAD,EAAA,CACA76E,KAAA66E,OAAA,GACAA,EAAAv8E,EAAAgzB,UAAAupD,GAEA,IAAA,IAAAx7E,EAAA,EAAAA,EAAAw7E,EAAAv6E,OAAAjB,IAGA,IAFA,IAAAwb,EAAAvc,EAAAu8E,EAAAx7E,IAEA45D,EAAA,EAAAA,EAAAp+C,EAAAva,OAAA24D,IAAA,CACA,IAAA30D,EAAAuW,EAAAxI,GAAA4mD,GAEAj5D,KAAA66E,OAAAn7E,KAAA,CACA2E,MAAAC,EACAC,IAAA1C,QAAAk5E,gBAAAz2E,MAMAtE,KAAAqd,YAAArd,KAAAmO,MAAA,SAAA,qBAGAglE,iBAAA,SAAA57D,GAEA,GAAA1Y,MAAAm8E,uBAAAC,gBAGA,OAFA1jE,EAAAK,sBACAL,EAAA2jE,2BAKA,GAAAl7E,KAAA66E,OAAA,CAIA,IAHA,IACAv2E,EADA62E,GAAA,EAGA97E,EAAA,EAAAA,EAAAW,KAAA66E,OAAAv6E,OAAAjB,IAQA,IAPAiF,EAAAtE,KAAA66E,OAAAx7E,GAAAgF,OAEA0C,KAAA,mBACAzC,EAAAA,EAAAyC,KAAA,iBAAAq0E,eAIAv5E,QAAAk5E,gBAAAz2E,KAAAtE,KAAA66E,OAAAx7E,GAAAkF,IAAA,CACA42E,GAAA,EACA,MAIA,IAAAA,EAEA,OAKA5jE,EAAAK,iBACAL,EAAA2jE,2BACAr8E,MAAAm8E,uBAAAK,uBAAAr7E,KAAA8W,WAAAwQ,KAAAtnB,QAGA8W,WAAA,WAEA9W,KAAA4Y,UACA5Y,KAAAmO,MAAAgJ,QAAA,UACAnX,KAAA+Y,YCxEAla,MAAAy8E,uBAAAz5E,QAAA4Z,KAAA7c,OAAA,CACAq8E,iBAAA,EAEAM,cAAA,KACA5sB,eAAA,KACAC,iBAAA,KACA4sB,WAAA,KACAC,WAAA,KAEAz0E,SAAA,KAOAq0E,uBAAA,SAAAr0E,GACAhH,KAAAgH,SAAAA,EAGAhH,KAAAi7E,iBAAA,EAEAp8E,MAAAgI,kBAAA,qCAAA,CAAA6D,EAAA9C,KACA5H,KAAAi7E,iBAAA,EAEA,YAAArzE,KAEA,IAAA8C,EAAAg2B,SAAAh2B,EAAAg2B,SAAA7hC,MAAAy8E,uBAAAI,8BACA17E,KAAAgH,WAGAhH,KAAA27E,wBAMAA,kBAAA,WACA,GAAA37E,KAAAu7E,cAqCAv7E,KAAAu7E,cAAA3+C,WArCA,CACA,IAAAg/C,EAAAt9E,EAAA,iEACA4d,EAAA5d,EAAA,wBAAAO,MAAAc,EAAA,MAAA,oCAAA,cAAA6O,SAAAotE,GACAprB,EAAAlyD,EAAA,gCAAAkQ,SAAA0N,GACAu0C,EAAAnyD,EAAA,uBAAAkQ,SAAAgiD,GACAE,EAAApyD,EAAA,4BAAAkQ,SAAAiiD,GACAE,EAAAryD,EAAA,SAAAkQ,SAAAiiD,GACAG,EAAAtyD,EAAA,kCAAAkQ,SAAAkiD,GAEA1wD,KAAA2uD,eAAArwD,EAAA,uEAAAO,MAAAc,EAAA,MAAA,YAAA,uCAAA6O,SAAAoiD,GACA5wD,KAAA4uD,iBAAAtwD,EAAA,iCAAAkQ,SAAAgiD,GACAxwD,KAAAw7E,WAAAl9E,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,sBACA3X,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAmiD,GACA3wD,KAAAy7E,WAAAn9E,EAAA,sBAAAkQ,SAAA0N,GAEAlc,KAAAu7E,cAAA,IAAA15E,QAAAi9B,MAAA88C,EAAA,CACA7+C,kBAAA,EACAsC,SAAA,KACAnX,WAAAloB,KAAA67E,mBAAAv0D,KAAAtnB,MAAA,MAEAq3C,UAAA,KACAr3C,KAAA2uD,eAAApqD,IAAA,OAIA,IAAA1F,MAAAgyD,cAAA7wD,KAAA2uD,eAAA,CACAmC,cAAAC,IACA/wD,KAAA2uD,eAAAoC,KAIA/wD,KAAAqd,YAAArd,KAAA2uD,eAAA,QAAA,oBACA3uD,KAAAqd,YAAAu+D,EAAA,SAAA,oBAMAC,mBAAA,WACAh6E,QAAAsf,iBAAA,IACAnhB,KAAA2uD,eAAAx3C,QAAA,UAIA+5C,iBAAA,WACA,OAAAlxD,KAAA2uD,eAAApqD,MAAAjE,QAAA,GACAN,KAAAw7E,WAAAllE,YAAA,aACA,IAEAtW,KAAAw7E,WAAAxpE,SAAA,aACA,IAIA8pE,eAAA,SAAAvkE,GAKA,GAJAA,GACAA,EAAAK,iBAGA5X,KAAAkxD,mBAAA,CAIAlxD,KAAA4uD,iBAAAt4C,YAAA,UACAtW,KAAAoxD,kBAEA,IAAArqD,EAAA,CACAg1E,gBAAA/7E,KAAA2uD,eAAApqD,OAGA1F,MAAAgI,kBAAA,+BAAAE,EAAA,CAAA2D,EAAA9C,KACA5H,KAAA4uD,iBAAA58C,SAAA,UAEA,YAAApK,EACA8C,EAAAhD,SACA1H,KAAAu7E,cAAAr0D,OACAlnB,KAAAgH,aAEAhH,KAAAg8E,kBAAAtxE,EAAA7K,SAAAhB,MAAAc,EAAA,MAAA,wBACAkC,QAAA6gB,MAAA1iB,KAAAu7E,cAAAzoE,YACA9S,KAAA67E,sBAGA77E,KAAAg8E,wBAKAA,kBAAA,SAAAr0E,GACAA,MAAAA,IACAA,EAAA9I,MAAAc,EAAA,MAAA,6BAGAK,KAAAy7E,WAAAn4E,KAAAqE,GACA3H,KAAAu7E,cAAAhwC,yBAGA6lB,gBAAA,WACApxD,KAAAg8E,kBAAA,MAEA,CACAN,8BAAA,IAIA78E,MAAAm8E,uBAAA,IAAAn8E,MAAAy8E,uBClJAz8E,MAAAo9E,WAAAp9E,MAAAsV,iBAAAvV,OAAA,CACAs9E,oBAAA,KACAC,kBAAA,KACAC,aAAA,KAEAp/D,KAAA,SAAAnJ,EAAAf,EAAAoB,GACAlU,KAAAsX,GAAA,eAAAtX,KAAAm8D,aAAA70C,KAAAtnB,OACAA,KAAAsX,GAAA,aAAAtX,KAAAm8D,aAAA70C,KAAAtnB,OACAA,KAAA6iB,KAAAhP,EAAAf,EAAAoB,IAGAoU,UAAA,WAEAtoB,KAAAk8E,oBAAA,GAEA,IAAA,IAAA78E,EAAA,EAAAA,EAAAR,MAAAq9E,oBAAA57E,OAAAjB,IAAA,CACA,IAAAg9E,EAAAx9E,MAAAq9E,oBAAA78E,GAEAW,KAAA4pB,eAAA,WAAAyyD,EAAAhgB,MACAr8D,KAAAk8E,oBAAAx8E,KAAA28E,GAIAr8E,KAAA6iB,QAGA8G,oBAAA,WAEA,GAAA,UAAA3pB,KAAAkU,SAAA6S,SAAA,oBAAAu1D,qBAAA,CACA,GAAA,YAAAA,qBACA,MAAA,UAEA,IAAA,IAAAj9E,EAAA,EAAAA,EAAAW,KAAA+oB,SAAAzoB,OAAAjB,IAAA,CACA,IAAAykB,EAAAxlB,EAAA0B,KAAA+oB,SAAA1pB,IAEA,GAAAykB,EAAA/c,KAAA,YAAAu1E,qBACA,OAAAx4D,EAAA/c,KAAA,QAMA,OAAA/G,KAAA6iB,QAGAs5C,aAAA,WACA,GAAAn8D,KAAA8jB,QAAA,CAIA,IAAAqU,EAYA94B,EAAAoH,EAAAwP,EAEA,GAVAkiB,EADA,YAAAn4B,KAAA8jB,QAAA/c,KAAA,OACA,UAEA/G,KAAA8jB,QAAA/c,KAAA,UAQA/G,KAAAk8E,oBAAA57E,OAAA,CAOA,IAAAi8E,EAYA76C,EAVA,GAPA1hC,KAAAm8E,mBACAn8E,KAAAm8E,kBAAA/gE,SAMA+c,EACA,IAAA94B,EAAA,EAAAA,EAAAW,KAAAk8E,oBAAA57E,OAAAjB,IACA,GAAAW,KAAAk8E,oBAAA78E,GAAA84B,SAAAA,EAAA,CACAokD,EAAAv8E,KAAAk8E,oBAAA78E,GACA,MAmCA,GA9BAW,KAAAm8E,kBAAA79E,EAAA,kCAKAi+E,GACA91E,EAAAzG,KAAAw8E,uBAAAD,GACAtmE,EAAA,UAAAjW,KAAAkU,SAAA6S,QAAAloB,MAAAc,EAAA,MAAA,aAAAd,MAAAc,EAAA,MAAA,sBAAA,CAAA08E,QAAAE,EAAAr3E,OACAlF,KAAAo8E,aAAA99E,EAAA,kCAAAmI,EAAA,+BAAA5H,MAAAuE,WAAA6S,GAAA,QAAAzH,SAAAxO,KAAAm8E,mBAEA,UAAAn8E,KAAAkU,SAAA6S,SACA/mB,KAAAqd,YAAArd,KAAAo8E,aAAA,SAAA,SAAA7kE,GACAvX,KAAAy8E,sBAAAllE,EAAA8C,cAAAsiD,aAAA,eAIA38D,KAAAk8E,oBAAA57E,OAAA,IACAohC,EAAApjC,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,uBACAzM,SAAAxO,KAAAm8E,qBAGAn8E,KAAAo8E,aAAA16C,EAAApjC,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,8BACA3X,KAAAzE,MAAAc,EAAA,MAAA,eACA6O,SAAAxO,KAAAm8E,mBAGAz6C,EAAA,CACA,IAAAk7B,EAAA,yBAEA,IAAAv9D,EAAA,EAAAA,EAAAW,KAAAk8E,oBAAA57E,OAAAjB,IAAA,CACA,IAAAg9E,EAAAr8E,KAAAk8E,oBAAA78E,IAGA,UAAAW,KAAAkU,SAAA6S,UAAA,IAAAzoB,EAAA6O,QAAAnN,KAAAgW,OAAAqmE,EAAAh8D,QACA,UAAArgB,KAAAkU,SAAA6S,SAAAs1D,IAAAE,KAEA91E,EAAAzG,KAAAw8E,uBAAAH,GACApmE,EAAA,UAAAjW,KAAAkU,SAAA6S,QAAAs1D,EAAAn3E,KAAArG,MAAAc,EAAA,MAAA,sBAAA,CAAA08E,QAAAA,EAAAn3E,OACA03D,GAAA,UAAAn2D,EAAA,IAAA5H,MAAAuE,WAAA6S,GAAA,aAMA3X,EAFAs+D,GAAA,eAEApuD,SAAAxO,KAAAm8E,mBACA,IAAAzmB,EAAA,IAAA7zD,QAAA8Y,QAAA+mB,GAEA,UAAA1hC,KAAAkU,SAAA6S,SACA2uC,EAAAp+C,GAAA,eAAAC,IACAvX,KAAAy8E,sBAAAllE,EAAAib,OAAAmqC,aAAA,cAKA38D,KAAAyxB,UAAAzxB,KAAAm8E,mBAMA,GAAA,UAAAn8E,KAAAkU,SAAA6S,SAAA,oBAAAoF,QAAA,CACA,IAAAxiB,EAAA,UAEAwuB,IACAxuB,GAAA,IAAAwuB,GAGAhM,QAAAC,aAAA,GAAA,GAAAvtB,MAAA+F,OAAA+E,OAIA6yE,uBAAA,SAAAH,GACA,GAAA,UAAAr8E,KAAAkU,SAAA6S,QAAA,CACA,MAAApd,EAAA,WAAA0yE,EAAAlkD,aACA0kC,EAAA78D,KAAAipB,UACAnpB,EAAA+8D,EAAA,CAAAA,KAAAA,EAAA1kC,aAAA7vB,EACA,MAAA,SAAAzJ,MAAA+F,OAAA+E,EAAA7J,MAGA,MAAA,YAAAu8E,EAAAtmE,OAGA0mE,sBAAA,SAAAC,GACA,IAAA18E,KAAAo8E,aAAAvmE,SAAA,WAAA,CAOA,IAFA,IAAAwmE,EAEAh9E,EAAA,EAAAA,EAAAW,KAAAk8E,oBAAA57E,OAAAjB,IACA,GAAAW,KAAAk8E,oBAAA78E,GAAA0W,IAAA2mE,EAAA,CACAL,EAAAr8E,KAAAk8E,oBAAA78E,GACA,MAIA,GAAAg9E,EAAA,CAIAr8E,KAAAo8E,aAAApqE,SAAA,YACA,IAAA2qE,EAAA38E,KAAAo8E,aAAA94E,OACAtD,KAAAo8E,aAAA94E,KAAAzE,MAAAc,EAAA,MAAA,sBAAA,CAAA08E,QAAAA,EAAAn3E,QAEArG,MAAAyV,oBAAAtU,KAAA6T,YAAA,CACAmpD,WAAAh9D,KAAAm8E,kBACAnmE,OAAAhW,KAAAgW,OACAgJ,WAAA,CACA09D,UAAAA,EACAE,OAAAP,EAAAQ,WAAA,GAAA9mE,GACA84D,QAAAwN,EAAAS,WAAA,EAAA,GAEAl6D,UAAA,KACA5iB,KAAAo8E,aAAA9lE,YAAA,YAAAhT,KAAAq5E,IAEAn6D,cAAA9X,IAEA,IAAAqyE,EAAA,WAAAV,EAAAhgB,IAEAr8D,KAAA4jB,YAAAm5D,GACA/8E,KAAAkwB,kBAAA6sD,GAGA/8E,KAAAwxB,yBAAA9mB,EAAAqL,IACA/V,KAAA0oB,yBAOA7pB,MAAA+U,0BAAA,yBAAA/U,MAAAo9E,YC7NAp9E,MAAAm+E,oBAAAn7E,QAAA4Z,KAAA7c,OAAA,CACAkU,WAAA,KACAgJ,cAAA,KACAmhE,WAAA,KACA7gE,SAAA,KACA8gE,eAAA,KACAC,iBAAA,KACAC,cAAA,KACAC,WAAA,KACAC,mBAAA,KACAC,aAAA,KACAC,qBAAA,KACAC,aAAA,KACA3L,QAAA,KAEA4L,QAAA,KACAC,YAAA,KAEA3gE,KAAA,SAAA3F,EAAAnD,GACAlU,KAAA8S,WAAAxU,EAAA+Y,GACArX,KAAA8Z,YAAA5F,EAAArV,MAAAm+E,oBAAA//D,UAEA,IAAA2gE,EAAA59E,KAAA8S,WAAAkI,SAAA,kBACAhb,KAAA8b,cAAA8hE,EAAA5iE,SAAA,aACAhb,KAAAi9E,WAAAW,EAAA5iE,SAAA,oBACAhb,KAAAoc,SAAApc,KAAA8S,WAAAkI,SAAA,gBAEAhb,KAAAo9E,cAAAp9E,KAAAm9E,iBAAAn9E,KAAAoc,SAAApB,SAAA,sBACA,IAAA6iE,EAAA79E,KAAAo9E,cAAApiE,SAAA,WACAhb,KAAAu9E,aAAAM,EAAA7iE,SAAA,SACAhb,KAAAw9E,qBAAAK,EAAA7iE,SAAA,UACAhb,KAAAy9E,aAAAz9E,KAAAoc,SAAAtG,KAAA,oBACA9V,KAAA8xE,QAAA9xE,KAAAy9E,aAAAziE,SAAA,gBACAhb,KAAAq9E,WAAAr9E,KAAAoc,SAAApB,SAAA,mBACAhb,KAAAs9E,mBAAAt9E,KAAAq9E,WAAAriE,WAGAhb,KAAA09E,QAAA,IAAA7+E,MAAA2a,KAAAxZ,KAAA8b,cAAA,CACA9C,aAAA,WACAG,YAAA,IACAE,SAAA,OACAE,WAAA,KAGA,IAAAooB,EAAA3hC,KAAA8b,cAAAd,WACA,IAAA,IAAA3b,EAAA,EAAAA,EAAAsiC,EAAArhC,OAAAjB,IACAW,KAAA89E,QAAAx/E,EAAAqjC,EAAAtiC,KAmBA,GAfAf,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAlF,KAAAkU,SAAA6pE,0BAAAp/E,QAAA,mBAAA,IACAwG,MAAA,KACA4gD,aAAA/lD,KAAA8S,YAEA9S,KAAA29E,YAAA,IAAA9+E,MAAAm+E,oBAAAgB,YAAAh+E,MAEAA,KAAAkU,SAAA+pE,mBACAj+E,KAAAk+E,QAAA,IAAAr/E,MAAAm+E,oBAAAmB,QAAAn+E,MAEAA,KAAAqd,YAAArd,KAAAi9E,WAAA,WAAA,WAIAj9E,KAAAkU,SAAAkqE,eAAA,CACA,IAAAC,EAAAr+E,KAAAoc,SAAApB,SAAA,aACA,IAAAnc,MAAAy/E,QAAAD,EAAA,CACA7tC,SAAA+tC,IACAv+E,KAAAm9E,iBAAAnrE,SAAA,UACAhS,KAAAm9E,iBAAAn9E,KAAA,IAAAu+E,EAAAx3E,KAAA,qBACAuP,YAAA,aAKAtW,KAAAqd,YAAArd,KAAAu9E,aAAA,QAAA,KACA,IAAAh5E,EAAAvE,KAAAu9E,aAAAh5E,MAAAuL,cAAAnR,QAAA,QAAA,IACA,IAAA4F,EAGA,OAFAvE,KAAAo9E,cAAAtnE,KAAA,aAAAQ,YAAA,iBACAtW,KAAAw9E,qBAAAxrE,SAAA,UAIAhS,KAAAw9E,qBAAAlnE,YAAA,UACA,IAAAkoE,EAAAx+E,KAAA8xE,QAAAtqD,OAAA,oBAAAjjB,OACAmZ,IAAA1d,KAAAy9E,aAAAj2D,OAAA,gBAAAjjB,OAAAyW,SAAA,iBACA1E,YAAA,YACAtW,KAAA8xE,QAAA/9C,IAAAyqD,GAAAxsE,SAAA,YAGA,IAAA,IAAA3S,EAAA,EAAAA,EAAAW,KAAAy9E,aAAAn9E,OAAAjB,IAAA,CACA,IAAAo/E,EAAAz+E,KAAAy9E,aAAAprE,GAAAhT,GACAo/E,EAAA3oE,KAAA,4CAAAxV,OACAm+E,EAAAnoE,YAAA,YAEAmoE,EAAAzsE,SAAA,eAKAhS,KAAAqd,YAAArd,KAAAu9E,aAAA,UAAAhmE,IACAA,EAAAC,UAAA3V,QAAA0c,SACAve,KAAAu9E,aAAAh5E,IAAA,IAAA4S,QAAA,WAKAnX,KAAAqd,YAAArd,KAAAw9E,qBAAA,QAAA,KACAx9E,KAAAu9E,aAAAh5E,IAAA,IAAA4S,QAAA,YAIA2mE,QAAA,SAAAp9D,GACA,GAAA1gB,KAAAkU,SAAA+pE,iBAAA,CACA,IAAAS,EAAAh+D,EAAA5K,KAAA,mBACAxX,EAAA,2CACAw5B,YAAA4mD,GACAnsE,OACAjU,EAAA,SACAiU,OAAAjU,EAAA,SACAiU,OAAAjU,EAAA,OAAA,CACAqgF,cAAA,SACAr7E,KAAAzE,MAAAc,EAAA,MAAA,cAEA4S,OAAAjU,EAAA,SACAiU,OAAAjU,EAAA,OAAA,CACAqgF,cAAA,SACAr7E,KAAAzE,MAAAc,EAAA,MAAA,eAGA4S,OAAAjU,EAAA,UACAiU,OACAjU,EAAA,SACAiU,OAAAjU,EAAA,SACAiU,OAAAjU,EAAA,OAAA,CACAqgF,cAAA,WACAr7E,KAAAzE,MAAAc,EAAA,MAAA,wBAEA4S,OAAAjU,EAAA,SACAiU,OAAAjU,EAAA,OAAA,CACAqgF,cAAA,YACAr7E,KAAAzE,MAAAc,EAAA,MAAA,0BAIA,IAAA+1D,EAAA,IAAA7zD,QAAA8Y,QAAA+jE,EAAA,CACAnxB,eAAAvtD,KAAA4+E,kBAAAt3D,KAAAtnB,QAEA01D,EAAAtuC,KAAA9P,GAAA,OAAA,KACAoJ,EAAA8S,KAAA,YAAAlzB,OACAo1D,EAAAtuC,KAAAtU,WAAAgD,KAAA,0BAAAQ,YAAA,YAEAo/C,EAAAtuC,KAAAtU,WAAAgD,KAAA,0BAAA9D,SAAA,YAGA0O,EAAAjG,KAAA,YAAAna,OACAo1D,EAAAtuC,KAAAtU,WAAAgD,KAAA,2BAAAQ,YAAA,YAEAo/C,EAAAtuC,KAAAtU,WAAAgD,KAAA,2BAAA9D,SAAA,cAMA,IAAAqT,EAAA3E,EAAA1F,SAAA,mBAAAA,WAEA,IAAA,IAAA3b,EAAA,EAAAA,EAAAgmB,EAAA/kB,OAAAjB,IACAW,KAAA6+E,YAAAvgF,EAAA+mB,EAAAhmB,MAIAw/E,YAAA,SAAAjpE,GACA,IAAA/W,MAAAm+E,oBAAA8B,QAAA9+E,KAAA4V,IAGAgpE,kBAAA,SAAApsD,GACA,IAAAxyB,KAAAkU,SAAA+pE,iBACA,OAGA,IAAA19D,EAAAjiB,EAAAk0B,GACA9R,EAAAH,EAAAxZ,KAAA,QAAAuT,QAAA2M,SAAAA,SAAAA,SAGA,OAFA1G,EAAAxZ,KAAA,WAGA,IAAA,SACA/G,KAAA++E,UAAAr+D,GACA,MACA,IAAA,SACA1gB,KAAAg/E,UAAAt+D,GACA,MACA,IAAA,WACA,IAAAu+D,EAAAv+D,EAAA8S,KAAA,YACAyrD,EAAA3+E,QACAogB,EAAAqlC,aAAAk5B,GAEA,MACA,IAAA,YACA,IAAAC,EAAAx+D,EAAAjG,KAAA,YACAykE,EAAA5+E,QACAogB,EAAAoX,YAAAonD,KAMAH,UAAA,SAAAr+D,GACA,IAAA1gB,KAAAkU,SAAA+pE,iBACA,OAGA,MAAAkB,EAAAz+D,EAAA5K,KAAA,mBACAs1C,EAAA+zB,EAAA77E,OACA+nD,EAAArrD,KAAAo/E,iBAAAh0B,GAEAC,GAAAA,IAAAD,IACA+zB,EAAA77E,KAAA+nD,GACA3qC,EAAA5K,KAAA,oBAAA1H,KAAA,OAAApO,KAAAq/E,6BAAAh0B,MAIA+zB,iBAAA,SAAAh0B,GACA,OAAAvsD,MAAAuE,WAAAwgD,OAAA/kD,MAAAc,EAAA,MAAA,yBAAAyrD,KAGA4zB,UAAA,SAAAt+D,GACA,IAAA1gB,KAAAkU,SAAA+pE,iBACA,OAIA,IAAAnM,EAAApxD,EAAA5K,KAAA,gBAEA,IAAA,IAAAzW,EAAA,EAAAA,EAAAyyE,EAAAxxE,OAAAjB,IAAA,CACA,IAAAwvB,EAAAvwB,EAAAwzE,EAAAzyE,IAAA+O,KAAA,kBACApO,KAAAs/E,oBAAAzwD,GAGA7uB,KAAA09E,QAAA/yD,YAAAjK,GACA1gB,KAAAk+E,QAAAvzD,YAAAjK,GAEAA,EAAAtF,UAGAmkE,YAAA,SAAAlR,GACA,IAAAx/C,EAAAw/C,EAAAjgE,KAAA,kBAEAigE,EAAAjzD,SAEApb,KAAAs/E,oBAAAzwD,GACA7uB,KAAA09E,QAAA8B,aAAA,IAGAF,oBAAA,SAAAzwD,GACA7uB,KAAA8xE,QAAAtqD,OAAA,oBAAAqH,aACAvY,YAAA,UACAiE,QAAA,oBAAAjE,YAAA,WAGAmpE,OAAA,WACA,IAAAz/E,KAAAkU,SAAA+pE,iBACA,OAGA,MAAA/4E,EAAAlF,KAAAo/E,mBACA,IAAAl6E,EACA,OAGA,MAAAwb,EAAApiB,EAAA,mGAIA4G,mDACArG,MAAAc,EAAA,MAAA,yFAMA6O,SAAAxO,KAAA8b,eAEA9b,KAAA09E,QAAAvzD,SAAAzJ,GACA1gB,KAAAk+E,QAAA/zD,SAAAzJ,GAEA1gB,KAAA89E,QAAAp9D,IAGA2+D,6BAAA,SAAAK,GACA,OAAA1/E,KAAAkU,SAAA6pE,0BAAAp/E,QAAA,gBAAAE,MAAA4E,mBAAAi8E,MAEA,CACAziE,SAAA,CACAghE,kBAAA,EACAG,gBAAA,EACAL,0BAAA,oCACA4B,uBAAA,qCAIA9gF,MAAAm+E,oBAAA8B,QAAAj9E,QAAA4Z,KAAA7c,OAAA,CACAghF,SAAA,KACA9sE,WAAA,KACA+sE,gBAAA,KACAC,aAAA,KACAjZ,mBAAA,KACA6X,SAAA,KAEAqB,OAAA,KACAC,SAAA,EACAnxD,UAAA,KACAoxD,YAAA,EACAhhF,IAAA,KACAihF,gBAAA,EACAC,aAAA,EACAl0B,IAAA,KAEAjvC,KAAA,SAAA4iE,EAAA9sE,GACA9S,KAAA4/E,SAAAA,EACA5/E,KAAA8S,WAAAA,EACA9S,KAAA8S,WAAA/L,KAAA,cAAA/G,MAEAA,KAAA+/E,OAAA//E,KAAA8S,WAAA/L,KAAA,UACAzI,EAAA0G,cAAAhF,KAAA+/E,UACA//E,KAAA+/E,OAAA,IAEA//E,KAAA+/E,OAAAz+E,KAAAtB,KAAA8S,WAAA/L,KAAA,QAEA/G,KAAAggF,QAAAhgF,KAAA8S,WAAA+C,SAAA,aACA7V,KAAAigF,WAAAjgF,KAAAggF,SAAAn+E,QAAAmY,QAAAha,KAAA8S,WAAA,mBACA9S,KAAAf,IAAAJ,MAAA6S,aAAA,IAEA1R,KAAAggF,UACAhgF,KAAA6uB,UAAA7uB,KAAA8S,WAAA/L,KAAA,cAGA,IAAAq5E,EAAApgF,KAAA8S,WAAA/L,KAAA,iBACAs5E,EAAArgF,KAAAigF,YAAAjgF,KAAA8S,WAAA+C,SAAA,gBACA7V,KAAAkgF,eAAAlgF,KAAA4/E,SAAA1rE,SAAAkqE,gBAAAv8E,QAAAmY,QAAAha,KAAA8S,WAAA,yBACA9S,KAAAmgF,YAAAC,GAAApgF,KAAAigF,WAEAjgF,KAAAmgF,cAEAC,EAAAA,EAAAA,EAAAzhF,QAAA,uBAAAqB,KAAAf,KAAA,GAGAe,KAAA6mE,mBAAAvoE,EAAA,SAAA,CACA2c,MAAA,WAIAjb,KAAA0+E,SAAApgF,EAAA,OAAA,CACAu2B,KAAA,SACAC,SAAA,EACA7Z,MAAA,gBACAC,MAAArc,MAAAc,EAAA,MAAA,UAGAK,KAAA0+E,SAAApnE,GAAA,QAAA,KACAtX,KAAAisD,KAGAjsD,KAAAisD,IAAArvB,OACA58B,KAAAisD,IAAA1gB,uBAAA,IAHAvrC,KAAAsgF,kBAAAF,EAAAC,MAQArgF,KAAAugF,SAGAvgF,KAAA8S,WAAA1E,KAAA,cAAA,MACApO,KAAA8S,WAAA1E,KAAA,gBAAA,MACApO,KAAA8S,WAAA1E,KAAA,qBAAA,OAGAmyE,OAAA,WAeA,GAdAvgF,KAAA6/E,gBAAAvhF,EAAA,WAAA,CACA2c,MAAA,kBACA3Z,KAAA,SACA4D,KAAA,GACAC,MAAAnF,KAAAf,MACAuP,SAAAxO,KAAA8S,YACA9S,KAAAwgF,uBAEAxgF,KAAA8/E,aAAAxhF,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAlF,KAAA4/E,SAAA1rE,SAAAyrE,uBAAAhhF,QAAA,uBAAAqB,KAAAf,OACAuP,SAAAxO,KAAA8S,YACA9S,KAAAygF,oBAEAzgF,KAAAkgF,eAAA,CACA,IAAArhF,MAAA6hF,YAAA1gF,KAAA+/E,OAAAr0C,OAAA,IAAA,CACAtX,IAAA,GACAnI,IAAA,IACA00D,KAAA,GACAC,WAAAl1C,GACA7sC,MAAAc,EAAA,MAAA,cAAA,CAAAkhF,IAAAn1C,EAAA,MAEA8E,SAAA9E,IACA1rC,KAAA+/E,OAAAr0C,MAAAA,EACA1rC,KAAAygF,uBAGA3tE,WAAAtE,SAAAxO,KAAA8S,YAGA9S,KAAAmgF,aACAngF,KAAA0+E,SAAAlwE,SAAAxO,KAAA8S,aAIAwtE,kBAAA,SAAAF,EAAAC,GACA,IAAAhR,EAAA,2CAEA+Q,kHAGAvhF,MAAAc,EAAA,MAAA,8FAqBA,GAfAK,KAAAisD,IAAA,IAAApqD,QAAAm1B,IAAAh3B,KAAA8S,WAAAu8D,EAAA,CACAxa,OAAAlqD,IAEA9I,QAAAkf,sBAAA,KAEA/gB,KAAAisD,IAAAvoC,MAAA5N,KAAA,eAAAqB,QAAA,YAGAkyD,SAAA,KACArpE,KAAA8gF,sBAIAjiF,MAAAgU,eAAA7S,KAAAisD,IAAAvoC,OAEA1jB,KAAAigF,WAAA,CACAphF,MAAA03B,GAAAi3C,uBAAA,CACAv3D,MAAApX,MAAAc,EAAA,MAAA,YACAoW,GAAA/V,KAAAf,IAAA,YACAiG,KAAA,WACAoS,GAAA+oE,IACAl1D,UAAAnrB,KAAAisD,IAAAvoC,OAGA1jB,KAAAmX,QAAA,sBAGA2pE,iBAAA,WACA9gF,KAAAisD,IAAA/vC,MAAA6kE,iBAAAz5B,QAAA,EAAApiD,KAAAA,EAAAC,MAAAA,MACAnF,KAAA+/E,OAAA76E,GAAAC,IAEAnF,KAAAygF,oBAGA,IAAA1pD,EAAA/2B,KAAAisD,IAAA/vC,MAAApG,KAAA,YAAAQ,YAAA,UAEAzX,MAAAiK,kBAAA,OAAA,wCAAA,CACA/B,KAAA,CACAg5E,OAAA//E,KAAA+/E,UAEAv2E,KAAAkB,IACAqsB,EAAA/kB,SAAA,UACAhS,KAAA0+E,SAAApzD,SACAtrB,KAAA8S,WAAApU,KAAAJ,EAAAoM,EAAA3D,KAAArI,MAAAA,QACAsB,KAAAugF,SACAvgF,KAAAghF,sBACAhhF,KAAAisD,IAAA/kC,SACAzd,MAAAkB,IAEA+lE,QAAA/oE,MAAAgD,GACAosB,EAAA/kB,SAAA,UACAhS,KAAAghF,sBACAhhF,KAAAisD,IAAA/kC,UAIAs5D,qBAAA,WACA,IAAA9/D,EAAA1gB,KAAA8S,WAAAyH,QAAA,YAAAzE,KAAA,aACA,IAAA4K,EAAApgB,OACA,OAEA,IAAAoE,EAAA1E,KAAA4/E,SAAAP,6BAAA3+D,EAAApd,QACAtD,KAAA6/E,gBAAAzxE,KAAA,OAAA1J,IAGA+7E,kBAAA,WACAzgF,KAAA8/E,aAAAv7E,IAAA4C,KAAAC,UAAApH,KAAA+/E,UAGAiB,oBAAA,WACAhhF,KAAAigF,aAIAjgF,KAAA+/E,OAAAkB,SACAjhF,KAAA8S,WAAAd,SAAA,gBAEAhS,KAAA8S,WAAAwD,YAAA,oBAKAzX,MAAAm+E,oBAAAkE,SAAAr/E,QAAAs/E,KAAAviF,OAAA,CACAghF,SAAA,KACAwB,WAAA,KACAC,kBAAA,EACAC,SAAA,KAKAtkE,KAAA,SAAA4iE,EAAA1rE,GACAlU,KAAA4/E,SAAAA,EACA5/E,KAAA6iB,KAAA7iB,KAAAuhF,YAAArtE,IAMAstC,YAAA,WACAxhD,KAAA6iB,OAGA7iB,KAAAohF,WAAAphF,KAAAwhF,kBAGAxhF,KAAAshF,SAAAthF,KAAAyhF,gBACAzhF,KAAAgpB,OAAA1qB,IAAAof,IAAA1d,KAAAgpB,OAAAtL,IAAA1d,KAAAshF,WAEAz/E,QAAA+Q,KAAAZ,SAAA,aAGA0vE,cAAA,WACA1hF,KAAAgpB,OAAAhpB,KAAAgpB,OAAA+K,IAAA/zB,KAAAshF,UACAthF,KAAAshF,SAAAlmE,UAGAumE,yBAAA,WACA3hF,KAAAohF,WAAAr7B,aAAA/lD,KAAAshD,UACAthD,KAAAshD,SAAAh2B,SACAtrB,KAAAgpB,OAAA1qB,IAAAof,IAAA1d,KAAAgpB,OAAA+K,IAAA/zB,KAAAshD,UAAA5jC,IAAA1d,KAAAohF,aACAphF,KAAAqhF,kBAAA,GAGAO,yBAAA,WACA5hF,KAAAohF,WAAAzqE,YAAA3W,KAAAshD,UACAthD,KAAAgpB,OAAA1qB,IAAAof,IAAA1d,KAAAgpB,OAAA+K,IAAA/zB,KAAAohF,YAAA1jE,IAAA1d,KAAAshD,WACAthD,KAAAqhF,kBAAA,GAMAQ,aAAA,WACA,IAAA,IAAAxiF,EAAA,EAAAA,EAAAW,KAAAgpB,OAAA1oB,OAAAjB,IAAA,CACA,IAAAyuD,EAAAxvD,EAAA0B,KAAAgpB,OAAA3pB,IACA2C,EAAA8rD,EAAA9rD,SAGA8rD,EAAAj4C,SAAA,WAIAi4C,EAAA/mD,KAAA,WAAA,CACA0R,KAAAzW,EAAAyW,KAAAq1C,EAAAxxB,aAAA,EACAlD,IAAAp3B,EAAAo3B,IAAA00B,EAAAz0B,cAAA,MAQAyoD,eAAA,WAIA,IAHA9hF,KAAA8hF,eAAAC,aAAA,KACA/hF,KAAA8hF,eAAAE,sBAAA,KAEAhiF,KAAA8hF,eAAA/rB,GAAA,EAAA/1D,KAAA8hF,eAAA/rB,GAAA/1D,KAAAgpB,OAAA1oB,OAAAN,KAAA8hF,eAAA/rB,KACA/1D,KAAA8hF,eAAAG,OAAA3jF,EAAA0B,KAAAgpB,OAAAhpB,KAAA8hF,eAAA/rB,KAEA/1D,KAAA8hF,eAAAI,UAAAliF,KAAA8hF,eAAAG,OAAAl7E,KAAA,YACA/G,KAAA8hF,eAAAI,YAIAliF,KAAA8hF,eAAAK,WAAAtgF,QAAAugF,QAAApiF,KAAA8hF,eAAAI,UAAAzpE,KAAAzY,KAAA8hF,eAAAI,UAAA9oD,IAAAp5B,KAAAi8C,OAAAj8C,KAAAk8C,SAEA,OAAAl8C,KAAA8hF,eAAAC,cAAA/hF,KAAA8hF,eAAAK,WAAAniF,KAAA8hF,eAAAE,yBACAhiF,KAAA8hF,eAAAC,aAAA/hF,KAAA8hF,eAAAG,OAAA,GACAjiF,KAAA8hF,eAAAE,sBAAAhiF,KAAA8hF,eAAAK,aAIA,OAAAniF,KAAA8hF,eAAAC,cAGAM,uBAAA,WAEAriF,KAAAqiF,uBAAAN,aAAA/hF,KAAA8hF,iBAEA9hF,KAAAqiF,uBAAAN,eAAA/hF,KAAAohF,WAAA,KAIAphF,KAAAqhF,kBACA/iF,EAAA6O,QAAAnN,KAAAohF,WAAA,GAAAphF,KAAAgpB,QAAA1qB,EAAA6O,QAAAnN,KAAAqiF,uBAAAN,aAAA/hF,KAAAgpB,UACA,IAAA1qB,EAAA6O,QAAAnN,KAAAqiF,uBAAAN,aAAA/hF,KAAAshF,UAEAthF,KAAAohF,WAAAtpD,YAAA93B,KAAAqiF,uBAAAN,cAEA/hF,KAAAohF,WAAAr7B,aAAA/lD,KAAAqiF,uBAAAN,cAGA/hF,KAAAgpB,OAAA1qB,IAAAof,IAAA1d,KAAAgpB,OAAAtL,IAAA1d,KAAAohF,aACAphF,KAAAqhF,kBAAA,EACArhF,KAAA4/E,SAAAlC,QAAA8B,aAAA,GACAx/E,KAAA6hF,iBAMAjgC,WAAA,WACA5hD,KAAAqhF,kBACArhF,KAAA4hF,2BAGA5hF,KAAA0hF,gBAEA1hF,KAAA4/E,SAAAlC,QAAA8B,aAAA,GAGA,IAAAx9E,EAAAhC,KAAAshD,SAAAt/C,UACAA,GAAA,IAAAA,EAAAo3B,KAAA,IAAAp3B,EAAAyW,MACAzY,KAAAshD,SACAhgC,IAAA,CACAs1C,QAAA52D,KAAAsiF,eACAC,WAAA,UACAlmD,QAAA,IAEA7jB,SAAA,CAAA6jB,QAAA,GAAAx6B,QAAA2gF,aACAxiF,KAAAyiF,QAAA,GACAjqE,SAAA,CAAA6jB,QAAA,GAAAx6B,QAAA2gF,YAAA,KACAxiF,KAAA0iF,kBAGA1iF,KAAAwkD,0BAGAxkD,KAAA6iB,OAEAhhB,QAAA+Q,KAAA0D,YAAA,eAIAzX,MAAAm+E,oBAAAmB,QAAAt/E,MAAAm+E,oBAAAkE,SAAAtiF,OAAA,CAIAoe,KAAA,SAAA4iE,GAKA5/E,KAAA6iB,KAAA+8D,EAJA,CACAznD,OAAA,UAMAopD,UAAA,WACA,OAAAvhF,KAAA4/E,SAAA9jE,cAAAhG,KAAA,kBAMA0rC,YAAA,WACAxhD,KAAA6iB,OACA7iB,KAAA2hF,2BACA3hF,KAAA6hF,gBAGAF,yBAAA,WACA3hF,KAAA6iB,OACA7iB,KAAA4/E,SAAAlC,QAAA/yD,YAAA3qB,KAAAshD,UACAthD,KAAA4/E,SAAAlC,QAAAvzD,SAAAnqB,KAAAohF,aAGAQ,yBAAA,WACA5hF,KAAA6iB,OACA7iB,KAAA4/E,SAAAlC,QAAA/yD,YAAA3qB,KAAAohF,YACAphF,KAAA4/E,SAAAlC,QAAAvzD,SAAAnqB,KAAAshD,WAMAqhC,OAAA,WACA3iF,KAAAqiF,yBACAriF,KAAA6iB,QAMA++B,WAAA,WACA5hD,KAAA6iB,OAGA7iB,KAAAshD,SAAAhgC,IAAA,CACAs1C,QAAA52D,KAAAsiF,eACAC,WAAA,YAOAd,cAAA,WACA,IAAAH,EAAAhjF,EAAA,0CAAAkQ,SAAAxO,KAAA4/E,SAAA9jE,eAEA,OADA9b,KAAA4/E,SAAAlC,QAAAvzD,SAAAm3D,GACAA,GAMAI,cAAA,WACA1hF,KAAA6iB,OACA7iB,KAAA4/E,SAAAlC,QAAA/yD,YAAA3qB,KAAAshF,WAMAE,gBAAA,WACA,IAAA9gE,EAAA1gB,KAAAshD,SAAAxrC,KAAA,QAEA,OAAAxX,EAAA,uDACA0B,KAAAshD,SAAAj0B,mFACA3M,EAAAgrB,sBAAAhrB,EAAA2M,2EACArtB,KAAAshD,SAAAxrC,KAAA,mBAAAuX,oCAMAxuB,MAAAm+E,oBAAAgB,YAAAn/E,MAAAm+E,oBAAAkE,SAAAtiF,OAAA,CACAgkF,wBAAA,EACAC,eAAA,EAKArhC,YAAA,WACAxhD,KAAA6iB,OAGA7iB,KAAA4iF,uBAAA5iF,KAAAshD,SAAAzrC,SAAA,UAGA7V,KAAA6iF,cAAA7iF,KAAAshD,SAAAzrC,SAAA,aAGA7V,KAAA4iF,yBAAA5iF,KAAA6iF,eACA7iF,KAAAshD,SAAAhgC,IAAA,CACAs1C,QAAA52D,KAAAsiF,eACAC,WAAA,YAKAviF,KAAA4iF,wBACA5iF,KAAA2hF,2BAGA3hF,KAAA6hF,gBAMAc,OAAA,WACA3iF,KAAA8iF,sBAAA9iF,KAAA+iF,oBACA/iF,KAAAqiF,yBACAriF,KAAAqhF,mBACArhF,KAAAohF,WAAAhmE,SACApb,KAAAgpB,OAAA1qB,IAAAof,IAAA1d,KAAAgpB,OAAA+K,IAAA/zB,KAAAohF,aACAphF,KAAAqhF,kBAAA,EACArhF,KAAA4/E,SAAAlC,QAAA8B,aAAA,GACAx/E,KAAA6hF,gBAGA7hF,KAAA6iB,QAGAigE,mBAAA,WACA,OAAAjhF,QAAAmY,QAAAha,KAAAshD,SAAA,mBAGAyhC,kBAAA,WACA,IAAA,IAAA1jF,EAAA,EAAAA,EAAAW,KAAA4/E,SAAAlC,QAAA10D,OAAA1oB,OAAAjB,IACA,GAAAwC,QAAAmhF,QAAAhjF,KAAAi8C,OAAAj8C,KAAAk8C,OAAAl8C,KAAA4/E,SAAAlC,QAAA10D,OAAA3W,GAAAhT,IACA,OAAA,EAIA,OAAA,GAGAkiF,UAAA,WAEA,OAAAvhF,KAAA4/E,SAAA9jE,cAAAhG,KAAA,gBACA4H,IAAA1d,KAAA4/E,SAAAxjE,SAAAtG,KAAA,kBAMA2rE,cAAA,WACA,IAAAH,EAAAhjF,IACA2kF,EAAAjjF,KAAA4/E,SAAA9jE,cAAAhG,KAAA,gCAEA,IAAA,IAAAzW,EAAA,EAAAA,EAAA4jF,EAAA3iF,OAAAjB,IACAiiF,EAAAA,EAAA5jE,IAAApf,EAAA,UAAAkQ,SAAAy0E,EAAA5jF,KAGA,OAAAiiF,GAMAE,gBAAA,WACA,OAAAljF,EAAA,yDAAA0B,KAAAshD,SAAAjoB,wBAMAuoB,WAAA,WACA,IAAAy/B,EAAArhF,KAAAqhF,iBACA,GAAAA,GACA,GAAArhF,KAAA4iF,uBAAA,CAEA,IAAAhtE,EAAA5V,KAAAshD,SAAAtjB,QAAA1nB,YAAA,UACAtW,KAAA4/E,SAAAf,YAAAjpE,GAEA5V,KAAA6iF,gBAEA7iF,KAAAshD,SAAAhgC,IAAA,CAAAihE,WAAA,UAAA3rB,QAAA,UAAA5kD,SAAA,UAGA,IAAAhS,KAAAshD,SAAA3tB,SAAA,2BAAArzB,QACAN,KAAAshD,SAAA/mC,QAAA,oBAAAvI,SAAA,WAKAhS,KAAAshD,SAAA1rC,EAGA5V,KAAAmqB,SAAAvU,SAEA,IAAA5V,KAAA4iF,uBAAA,CACA,IAAAM,EAAAljF,KAAA6iF,cACA7iF,KAAA4/E,SAAA9N,QAAAtqD,OAAA,oBAAAxnB,KAAAshD,SAAAv6C,KAAA,wBACA/G,KAAA4/E,SAAAtC,mBAAA91D,OAAA,eAAAxnB,KAAAshD,SAAAv6C,KAAA,QAAApI,QAAA,MAAA,mBAEAqB,KAAA6iF,gBAEAK,EAAA5sE,YAAA,UACA4sE,EAAA3oE,QAAA,oBAAAjE,YAAA,WAIAtW,KAAA2qB,YAAA3qB,KAAAshD,UAGAthD,KAAAshD,SAAA4hC,EAGAljF,KAAA6iB,OAEA7iB,KAAAshD,SAAAhgC,IAAA,CACAs1C,QAAA52D,KAAAsiF,eACAC,WAAAviF,KAAA6iF,eAAAxB,EAAA,SAAA,YAGAA,GACArhF,KAAAshD,SAAAv6C,KAAA,eAAAy5E,0BC13BA3hF,MAAA8a,YAAA9X,QAAA4Z,KAAA7c,OAAA,CACA4rB,QAAA,KACA24D,aAAA,KACAC,eAAA,KACAC,sBAAA,KAEAC,SAAA,KACAC,gBAAA,KACAjiF,KAAA,KAEA0b,KAAA,SAAAs6D,GAsBA,OArBAt3E,KAAAwqB,QAAAlsB,EAAAg5E,GAGAt3E,KAAAwqB,QAAAzjB,KAAA,iBACAlF,QAAAigC,IAAA,qDACA9hC,KAAAwqB,QAAAzjB,KAAA,eAAAkX,WAGAje,KAAAwqB,QAAAzjB,KAAA,cAAA/G,MAEAA,KAAAsB,KAAAtB,KAAAwjF,UAEA,WAAAxjF,KAAAsB,MAAA,aAAAtB,KAAAsB,KACAtB,KAAAmjF,aAAAnjF,KAAAwqB,QAAApc,KAAA,uBAAA,IAEApO,KAAAojF,eAAApjF,KAAAyjF,wBAAAzjF,KAAAwqB,QAAAzjB,KAAA,WACA/G,KAAAqjF,sBAAArjF,KAAAyjF,wBAAAzjF,KAAAwqB,QAAAzjB,KAAA,oBAGA/G,KAAA0jF,cAEA1jF,KAAAsB,MACA,IAAA,OACAtB,KAAAqd,YAAArd,KAAAwqB,QAAA,QAAA,kBACA,MACA,IAAA,WACAxqB,KAAAqd,YAAArd,KAAAwqB,QAAA1U,KAAA,SAAA,SAAA,kBACA,MACA,QACA9V,KAAAqd,YAAArd,KAAAwqB,QAAA,SAAA,kBACAxqB,KAAA2jF,mBAIAF,wBAAA,SAAA3hF,GAKA,OAJAA,IAAAA,EAAA4D,MAAA,YACA5D,EAAA,IAAAA,GAGAA,GAGA0hF,QAAA,WACA,IAAAI,EAAA5jF,KAAAwqB,QAAA6N,KAAA,YACA,GACA,UAAAurD,GAAA,aAAA5jF,KAAAwqB,QAAApc,KAAA,SACA,aAAApO,KAAAwqB,QAAApc,KAAA,SACA,WAAApO,KAAAwqB,QAAApc,KAAA,QAEA,MAAA,WAGA,OAAAw1E,GACA,IAAA,SACA,MAAA,SACA,IAAA,IACA,MAAA,OACA,IAAA,WACA,MAAA,WAGAlT,QAAAC,KAAA,2BAAA3wE,KAAAwqB,QAAA,KAGAk5D,YAAA,WACA,GAAA,WAAA1jF,KAAAsB,MAAA,aAAAtB,KAAAsB,KAAA,CACAtB,KAAA6jF,eACA7jF,KAAAsjF,SAAAhlF,EAAA0B,KAAAyjF,wBAAAzjF,KAAAmjF,aAAAnjF,KAAA6jF,sBAEA7jF,KAAAojF,iBACApjF,KAAAsjF,SAAAhlF,EAAA0B,KAAAojF,iBAGApjF,KAAAqjF,wBACArjF,KAAAujF,gBAAAjlF,EAAA0B,KAAAqjF,yBAKAQ,aAAA,WACA,GAAA,aAAA7jF,KAAAsB,KACA,YAAA,IAAAtB,KAAAwqB,QAAA6N,KAAA,WACAr4B,KAAAwqB,QAAA6N,KAAA,WAEA,SAAAr4B,KAAAwqB,QAAApc,KAAA,gBAGA,IAAA01E,EAQA,OANAA,EADA,aAAA9jF,KAAAsB,KACAtB,KAAAwqB,QAAA1U,KAAA,uBAAAvR,MAEA1C,QAAAk5E,gBAAA/6E,KAAAwqB,SAIA,MAAAs5D,EAAA,KAAAA,EAAAnlF,QAAA,UAAA,MAGAglF,eAAA,WACA,WAAA3jF,KAAAsB,MAAA,aAAAtB,KAAAsB,MACAtB,KAAA+jF,WAAA/jF,KAAAsjF,UACAtjF,KAAA0jF,cACA1jF,KAAAgkF,WAAAhkF,KAAAsjF,YAEAtjF,KAAA0jF,cAEA,SAAA1jF,KAAAsB,KACAtB,KAAA2jF,eAAAM,MAAAjkF,KAAAwqB,QAAA3U,SAAA,eAAA7V,KAAAwqB,QAAA3U,SAAA,YAEA7V,KAAA2jF,eAAAM,QAAAjkF,KAAA6jF,eAGA7jF,KAAA2jF,eAAAM,OACAjkF,KAAAgkF,WAAAhkF,KAAAsjF,UACAtjF,KAAA+jF,WAAA/jF,KAAAujF,mBAEAvjF,KAAA+jF,WAAA/jF,KAAAsjF,UACAtjF,KAAAgkF,WAAAhkF,KAAAujF,yBAGAvjF,KAAA2jF,eAAAM,QAIAD,WAAA,SAAAtlE,GACA,GAAAA,GAAAA,EAAApe,OAAA,CAKA,GAJAN,KAAAgkF,WAAAE,eAAAxlE,EAAA2O,SAEA3O,EAAApI,YAAA,UAEA,WAAAtW,KAAAsB,MAAA,aAAAtB,KAAAsB,KAAA,CACA,SAAAtB,KAAAsB,OACAtB,KAAAwqB,QAAAlU,YAAA,aACAtW,KAAAwqB,QAAAxY,SAAA,aAGA,IAAA,IAAA3S,EAAA,EAAAA,EAAAqf,EAAApe,OAAAjB,IACA,CAAA8kF,IACA,SAAAA,EAAA9rD,KAAA,cACA8rD,EAAA92D,OAAA,QACArtB,KAAAgkF,WAAAI,cAAAD,EAAA92D,SACA82D,EAAA7iE,IAAA,CACA+L,OAAArtB,KAAAgkF,WAAAE,eACA5V,SAAA,WAGA6V,EAAA3rE,SAAA,QAEA2rE,EAAA3rE,SAAA,CAAA6U,OAAArtB,KAAAgkF,WAAAI,eAAA,QAAA,WACAD,EAAA7iE,IAAA,CACA+L,OAAA,GACAihD,SAAA,UAdA,CAkBA5vD,EAAArM,GAAAhT,WAGAW,KAAAgkF,WAAAI,qBAGApkF,KAAAgkF,WAAAE,eAGAriF,QAAA8e,KAAAxJ,QAAA,YAIA4sE,WAAA,SAAArlE,GACA,GAAAA,GAAAA,EAAApe,OACA,GAAA,WAAAN,KAAAsB,MAAA,aAAAtB,KAAAsB,KACAod,EAAA1M,SAAA,cACA,CACA,SAAAhS,KAAAsB,OACAtB,KAAAwqB,QAAAlU,YAAA,YACAtW,KAAAwqB,QAAAxY,SAAA,cAGA,IAAA,IAAA3S,EAAA,EAAAA,EAAAqf,EAAApe,OAAAjB,IACA,CAAA8kF,IACAA,EAAAtuE,SAAA,YAGA,SAAAsuE,EAAA9rD,KAAA,YACA8rD,EAAAnyE,SAAA,WAEAmyE,EAAA7iE,IAAA,WAAA,UACA6iE,EAAA3rE,SAAA,QACA2rE,EAAA3rE,SAAA,CAAA6U,OAAA,GAAA,QAAA,WACA82D,EAAAnyE,SAAA,gBAVA,CAaA0M,EAAArM,GAAAhT,QC9MAR,MAAA2a,KAAA3X,QAAA4Z,KAAA7c,OAAA,CACAkU,WAAA,KAEAkW,OAAA,KACAuL,MAAA,KACA8vD,UAAA,KACAC,cAAA,KACAC,YAAA,KAEAC,qBAAA,KACAC,+BAAA,KAEAC,cAAA,KACAC,uBAAA,KAEAC,QAAA,KACAC,OAAA,KACAC,YAAA,KACAC,YAAA,KAEAC,iBAAA,EACAC,0BAAA,EACAC,+BAAA,EAEAloE,KAAA,SAAA3F,EAAAnD,GACAlU,KAAA8S,WAAAxU,EAAA+Y,GAGArX,KAAA8S,WAAA/L,KAAA,UACAlF,QAAAigC,IAAA,6CACA9hC,KAAA8S,WAAA/L,KAAA,QAAAkX,WAGAje,KAAA8S,WAAA/L,KAAA,OAAA/G,MAEAA,KAAA8Z,YAAA5F,EAAArV,MAAA2a,KAAAyD,UAGAjd,KAAAmlF,2BAAA,KACAnlF,KAAAw/E,aAAA,GAAA,IAGAx/E,KAAAgpB,OAAAhpB,KAAA8S,WAAAkI,SAAAhb,KAAAkU,SAAA8E,cACAhZ,KAAAolF,WACAplF,KAAAw/E,aAAA,GAAA,GAEA39E,QAAA0Z,KAAAC,MAAA,KACAxb,KAAAw/E,aAAA,GAAA,MAIAr1D,SAAA,SAAAoK,GACAv0B,KAAAgpB,OAAA1qB,IAAAof,IAAA1d,KAAAgpB,OAAAtL,IAAA6W,IACAv0B,KAAAolF,WACAplF,KAAAw/E,aAAA,GAAA,IAGA70D,YAAA,SAAA4J,GACAv0B,KAAAgpB,OAAA1qB,IAAAof,IAAA1d,KAAAgpB,OAAA+K,IAAAQ,IACAv0B,KAAAolF,WACAplF,KAAAw/E,aAAA,GAAA,IAGAhkD,eAAA,WACAx7B,KAAAgpB,OAAA1qB,IAAAof,IAAA1d,KAAAgpB,QACAhpB,KAAAolF,WACAplF,KAAAw/E,aAAA,GAAA,IAGA4F,SAAA,WAKA,IAJAplF,KAAAolF,SAAAt1C,EAAA,GAEA9vC,KAAAu0B,MAAA,GAEAv0B,KAAAolF,SAAAt1C,EAAAzwC,EAAA,EAAAW,KAAAolF,SAAAt1C,EAAAzwC,EAAAW,KAAAgpB,OAAA1oB,OAAAN,KAAAolF,SAAAt1C,EAAAzwC,IACAW,KAAAu0B,MAAA70B,KAAApB,EAAA0B,KAAAgpB,OAAAhpB,KAAAolF,SAAAt1C,EAAAzwC,YAGAW,KAAAolF,SAAAt1C,GAGA0vC,YAAA,SAAAjvD,GACA,GAAAvwB,KAAAglF,gBAKA,OAJAhlF,KAAAilF,0BAAA,OACA10D,IACAvwB,KAAAklF,+BAAA,IAOA,GAFAllF,KAAAglF,iBAAA,EAEAhlF,KAAAu0B,MAAAj0B,OAaA,GARAN,KAAAw/E,YAAA1vC,EAAA,GAGA9vC,KAAAw/E,YAAA1vC,EAAAu1C,UAAArlF,KAAA8S,WAAA,GAAAgzC,MAAAz4B,OACArtB,KAAA8S,WAAA,GAAAgzC,MAAAz4B,OAAA,EACArtB,KAAAw/E,YAAA1vC,EAAAw1C,aAAAtlF,KAAA8S,WAAA,GAAAwyE,aACAtlF,KAAA8S,WAAA,GAAAgzC,MAAAz4B,OAAArtB,KAAAw/E,YAAA1vC,EAAAu1C,UAEA,IAAArlF,KAAAw/E,YAAA1vC,EAAAw1C,aAyBA,GApBAtlF,KAAAkU,SAAA+E,KACAjZ,KAAAw/E,YAAA1vC,EAAAu0C,UAAArkF,KAAAkU,SAAA+E,MAEAjZ,KAAAw/E,YAAA1vC,EAAAu0C,UAAAxzE,KAAAC,MAAA9Q,KAAA8S,WAAA44B,QAAA1rC,KAAAkU,SAAAiF,aAGA,OAAAnZ,KAAAqkF,WAAArkF,KAAAw/E,YAAA1vC,EAAAu0C,UAAArkF,KAAAqkF,YACArkF,KAAAw/E,YAAA1vC,EAAAu0C,UAAAxzE,KAAAC,OAAA9Q,KAAA8S,WAAA44B,QAAA,IAAA1rC,KAAAkU,SAAAiF,cAGAnZ,KAAAkU,SAAAgF,SAAAlZ,KAAAw/E,YAAA1vC,EAAAu0C,UAAArkF,KAAAkU,SAAAgF,UACAlZ,KAAAw/E,YAAA1vC,EAAAu0C,UAAArkF,KAAAkU,SAAAgF,UAIA,IAAAlZ,KAAAw/E,YAAA1vC,EAAAu0C,YACArkF,KAAAw/E,YAAA1vC,EAAAu0C,UAAA,IAIA,IAAA9zD,GAAAvwB,KAAAqkF,YAAArkF,KAAAw/E,YAAA1vC,EAAAu0C,UAAA,CAWA,GANArkF,KAAAqkF,UAAArkF,KAAAw/E,YAAA1vC,EAAAu0C,UACArkF,KAAAskF,cAAAtkF,KAAAkU,SAAAqxE,QAAAvlF,KAAAqkF,UAAA,GAAArkF,KAAAqkF,UAGArkF,KAAA4qB,eAAA5qB,KAAA8S,WAAA,UAEA,SAAA9S,KAAAkU,SAAAmF,SAGA,IAFArZ,KAAAw/E,YAAA1vC,EAAA01C,UAAA,EAEAxlF,KAAAw/E,YAAA1vC,EAAA01C,UAAAxlF,KAAAu0B,MAAAj0B,QAAA,CAKA,IAHAN,KAAAw/E,YAAA1vC,EAAA21C,mBAAA,EACAzlF,KAAAw/E,YAAA1vC,EAAA41C,SAAA,EAEA1lF,KAAAw/E,YAAA1vC,EAAAzwC,EAAAW,KAAAw/E,YAAA1vC,EAAA01C,UAAAxlF,KAAAw/E,YAAA1vC,EAAAzwC,EAAAW,KAAAw/E,YAAA1vC,EAAA01C,UAAAxlF,KAAAqkF,WAAArkF,KAAAw/E,YAAA1vC,EAAAzwC,EAAAW,KAAAu0B,MAAAj0B,OAAAN,KAAAw/E,YAAA1vC,EAAAzwC,IACAW,KAAAw/E,YAAA1vC,EAAA61C,WAAA3lF,KAAAu0B,MAAAv0B,KAAAw/E,YAAA1vC,EAAAzwC,GAAAguB,OAAA,QAAAA,SAEArtB,KAAAw/E,YAAA1vC,EAAA61C,WAAA3lF,KAAAw/E,YAAA1vC,EAAA21C,oBACAzlF,KAAAw/E,YAAA1vC,EAAA21C,kBAAAzlF,KAAAw/E,YAAA1vC,EAAA61C,YAGA3lF,KAAAw/E,YAAA1vC,EAAA41C,WAYA,IATA1lF,KAAAkU,SAAAqF,aACAvZ,KAAAw/E,YAAA1vC,EAAA81C,UAAA5lF,KAAAw/E,YAAA1vC,EAAA21C,kBAAAzlF,KAAAkU,SAAAqF,WAEAvZ,KAAAw/E,YAAA1vC,EAAA81C,YACA5lF,KAAAw/E,YAAA1vC,EAAA21C,mBAAAzlF,KAAAkU,SAAAqF,WAAAvZ,KAAAw/E,YAAA1vC,EAAA81C,YAKA5lF,KAAAw/E,YAAA1vC,EAAAzwC,EAAAW,KAAAw/E,YAAA1vC,EAAA01C,UAAAxlF,KAAAw/E,YAAA1vC,EAAAzwC,EAAAW,KAAAw/E,YAAA1vC,EAAA01C,UAAAxlF,KAAAqkF,WAAArkF,KAAAw/E,YAAA1vC,EAAAzwC,EAAAW,KAAAu0B,MAAAj0B,OAAAN,KAAAw/E,YAAA1vC,EAAAzwC,IACAW,KAAAu0B,MAAAv0B,KAAAw/E,YAAA1vC,EAAAzwC,GAAAguB,OAAArtB,KAAAw/E,YAAA1vC,EAAA21C,mBAIAzlF,KAAAw/E,YAAA1vC,EAAA01C,WAAAxlF,KAAAqkF,eAMA,GAHArkF,KAAA4qB,eAAA5qB,KAAAgpB,OAAA,UAGA,IAAAhpB,KAAAqkF,UACArkF,KAAA8S,WAAAua,OAAA,QACArtB,KAAAgpB,OACA4T,OACAtb,IAAA,CACAkd,SAAA,WACAkN,MAAA,OACAtS,IAAA,IAEA9X,IAAAziB,MAAA4Z,KAAA,OACA,CAkBA,IAjBAzY,KAAAgpB,OAAA1H,IAAA,WAAA,YACAthB,KAAAukF,YAAA,IAAAvkF,KAAAqkF,UAIArkF,KAAA4kF,QAAA,GAEA5kF,KAAA0kF,cAAA,GACA1kF,KAAA2kF,uBAAA,GAKA3kF,KAAAwkF,qBAAA,GACAxkF,KAAAykF,+BAAA,GACAzkF,KAAA6lF,qBAAA,GAEA7lF,KAAAw/E,YAAA1vC,EAAAxb,KAAA,EAAAt0B,KAAAw/E,YAAA1vC,EAAAxb,KAAAt0B,KAAAu0B,MAAAj0B,OAAAN,KAAAw/E,YAAA1vC,EAAAxb,OAkBA,IAjBAt0B,KAAAwkF,qBAAAxkF,KAAAw/E,YAAA1vC,EAAAxb,MAAA,GACAt0B,KAAAykF,+BAAAzkF,KAAAw/E,YAAA1vC,EAAAxb,MAAA,GACAt0B,KAAA6lF,qBAAA7lF,KAAAw/E,YAAA1vC,EAAAxb,MAAA,GAEAt0B,KAAAw/E,YAAA1vC,EAAAge,MAAA9tD,KAAAu0B,MAAAv0B,KAAAw/E,YAAA1vC,EAAAxb,MAAAsI,OACA58B,KAAAw/E,YAAA1vC,EAAAg2C,cAAA,UAAA9lF,KAAAw/E,YAAA1vC,EAAAge,MAAA/mD,KAAA,YACA/G,KAAAw/E,YAAA1vC,EAAAi2C,aAAA,SAAA/lF,KAAAw/E,YAAA1vC,EAAAge,MAAA/mD,KAAA,YACA/G,KAAAw/E,YAAA1vC,EAAAk2C,WAAAhmF,KAAAw/E,YAAA1vC,EAAAge,MAAA/mD,KAAA,WAAA/G,KAAAw/E,YAAA1vC,EAAAge,MAAA/mD,KAAA,WAAA/G,KAAAw/E,YAAA1vC,EAAAge,MAAA/mD,KAAA,eAAA/G,KAAAw/E,YAAA1vC,EAAAge,MAAA/mD,KAAA,eAAA,EACA/G,KAAAw/E,YAAA1vC,EAAAm2C,WAAAjmF,KAAAw/E,YAAA1vC,EAAAge,MAAA/mD,KAAA,WAAA/G,KAAAw/E,YAAA1vC,EAAAge,MAAA/mD,KAAA,WAAA/G,KAAAw/E,YAAA1vC,EAAAge,MAAA/mD,KAAA,eAAA/G,KAAAw/E,YAAA1vC,EAAAge,MAAA/mD,KAAA,eAAA/G,KAAAqkF,UAEArkF,KAAAw/E,YAAA1vC,EAAAk2C,WAAAhmF,KAAAqkF,YACArkF,KAAAw/E,YAAA1vC,EAAAk2C,WAAAhmF,KAAAqkF,WAEArkF,KAAAw/E,YAAA1vC,EAAAm2C,WAAAjmF,KAAAqkF,YACArkF,KAAAw/E,YAAA1vC,EAAAm2C,WAAAjmF,KAAAqkF,WAGArkF,KAAAw/E,YAAA1vC,EAAAo2C,QAAAlmF,KAAAw/E,YAAA1vC,EAAAk2C,WAAAhmF,KAAAw/E,YAAA1vC,EAAAo2C,SAAAlmF,KAAAw/E,YAAA1vC,EAAAm2C,WAAAjmF,KAAAw/E,YAAA1vC,EAAAo2C,UAmBA,IAjBAlmF,KAAAw/E,YAAA1vC,EAAAge,MAAAxsC,IAAA,QAAAthB,KAAAmmF,gBAAAnmF,KAAAw/E,YAAA1vC,EAAAo2C,UACAlmF,KAAA6lF,qBAAA7lF,KAAAw/E,YAAA1vC,EAAAxb,MAAAt0B,KAAAw/E,YAAA1vC,EAAAo2C,SAAAlmF,KAAAw/E,YAAA1vC,EAAAge,MAAAz0B,cAEAr5B,KAAAwkF,qBAAAxkF,KAAAw/E,YAAA1vC,EAAAxb,MAAA50B,KAAAM,KAAAw/E,YAAA1vC,EAAAo2C,SACAlmF,KAAAykF,+BAAAzkF,KAAAw/E,YAAA1vC,EAAAxb,MAAAt0B,KAAAw/E,YAAA1vC,EAAAo2C,SAAA,GAEAlmF,KAAAw/E,YAAA1vC,EAAAi2C,cACA/lF,KAAAw/E,YAAA1vC,EAAAs2C,YAAA,EACApmF,KAAAw/E,YAAA1vC,EAAAu2C,YAAA,GACArmF,KAAAw/E,YAAA1vC,EAAAg2C,eACA9lF,KAAAw/E,YAAA1vC,EAAAs2C,YAAApmF,KAAAqkF,UAAArkF,KAAAw/E,YAAA1vC,EAAAo2C,QACAlmF,KAAAw/E,YAAA1vC,EAAAu2C,YAAArmF,KAAAw/E,YAAA1vC,EAAAs2C,cAEApmF,KAAAw/E,YAAA1vC,EAAAs2C,YAAA,EACApmF,KAAAw/E,YAAA1vC,EAAAu2C,YAAArmF,KAAAqkF,UAAArkF,KAAAw/E,YAAA1vC,EAAAo2C,SAGAlmF,KAAAw/E,YAAA1vC,EAAAtR,SAAAx+B,KAAAw/E,YAAA1vC,EAAAs2C,YAAApmF,KAAAw/E,YAAA1vC,EAAAtR,UAAAx+B,KAAAw/E,YAAA1vC,EAAAu2C,YAAArmF,KAAAw/E,YAAA1vC,EAAAtR,WACAx+B,KAAAykF,+BAAAzkF,KAAAw/E,YAAA1vC,EAAAxb,MAAAt0B,KAAAw/E,YAAA1vC,EAAAo2C,SAAAxmF,KAAAM,KAAAw/E,YAAA1vC,EAAAtR,UASA,IAFAx+B,KAAAw/E,YAAA1vC,EAAAw2C,WAAA,GAEAtmF,KAAAw/E,YAAA1vC,EAAAzwC,EAAA,EAAAW,KAAAw/E,YAAA1vC,EAAAzwC,EAAAW,KAAAqkF,UAAArkF,KAAAw/E,YAAA1vC,EAAAzwC,IACAW,KAAAw/E,YAAA1vC,EAAAw2C,WAAA5mF,KAAA,GAUA,IAPAM,KAAAumF,cAAA,EAAA,GAAA,GAAAvmF,KAAAw/E,YAAA1vC,EAAAw2C,WAAA,GAKAtmF,KAAAw/E,YAAA1vC,EAAA02C,gBAAA,GAEAxmF,KAAAw/E,YAAA1vC,EAAAzwC,EAAA,EAAAW,KAAAw/E,YAAA1vC,EAAAzwC,EAAAW,KAAA4kF,QAAAtkF,OAAAN,KAAAw/E,YAAA1vC,EAAAzwC,IAGA,IAFAW,KAAAw/E,YAAA1vC,EAAA02C,gBAAAxmF,KAAAw/E,YAAA1vC,EAAAzwC,GAAA,EAEAW,KAAAw/E,YAAA1vC,EAAAmpB,EAAA,EAAAj5D,KAAAw/E,YAAA1vC,EAAAmpB,EAAAj5D,KAAAqkF,UAAArkF,KAAAw/E,YAAA1vC,EAAAmpB,IACAj5D,KAAA4kF,QAAA5kF,KAAAw/E,YAAA1vC,EAAAzwC,GAAAinF,WAAAtmF,KAAAw/E,YAAA1vC,EAAAmpB,IACAj5D,KAAAw/E,YAAA1vC,EAAA02C,gBAAAxmF,KAAAw/E,YAAA1vC,EAAAzwC,KAQA,IAHAW,KAAAw/E,YAAA1vC,EAAA22C,iBAAA51E,KAAAob,IAAAq4B,MAAA,KAAAtkD,KAAAw/E,YAAA1vC,EAAA02C,iBAGAxmF,KAAAw/E,YAAA1vC,EAAAzwC,EAAAW,KAAA4kF,QAAAtkF,OAAA,EAAAN,KAAAw/E,YAAA1vC,EAAAzwC,GAAA,EAAAW,KAAAw/E,YAAA1vC,EAAAzwC,IACAW,KAAAw/E,YAAA1vC,EAAA02C,gBAAAxmF,KAAAw/E,YAAA1vC,EAAAzwC,KAAAW,KAAAw/E,YAAA1vC,EAAA22C,kBACAzmF,KAAA4kF,QAAAp1E,OAAAxP,KAAAw/E,YAAA1vC,EAAAzwC,EAAA,GAOA,IAFAW,KAAAw/E,YAAA1vC,EAAA42C,cAAA,GAEA1mF,KAAAw/E,YAAA1vC,EAAAzwC,EAAA,EAAAW,KAAAw/E,YAAA1vC,EAAAzwC,EAAAW,KAAA4kF,QAAAtkF,OAAAN,KAAAw/E,YAAA1vC,EAAAzwC,IACAW,KAAAw/E,YAAA1vC,EAAA42C,cAAAhnF,KAAAmR,KAAAob,IAAAq4B,MAAA,KAAAtkD,KAAA4kF,QAAA5kF,KAAAw/E,YAAA1vC,EAAAzwC,GAAAinF,aAOA,IAJAtmF,KAAAw/E,YAAA1vC,EAAA62C,eAAA91E,KAAAujB,IAAAkwB,MAAA,KAAAtkD,KAAAw/E,YAAA1vC,EAAA42C,eACA1mF,KAAAw/E,YAAA1vC,EAAA82C,gBAAA,GACA5mF,KAAAw/E,YAAA1vC,EAAA+2C,YAAA,GAEA7mF,KAAAw/E,YAAA1vC,EAAAzwC,EAAA,EAAAW,KAAAw/E,YAAA1vC,EAAAzwC,EAAAW,KAAAw/E,YAAA1vC,EAAA42C,cAAApmF,OAAAN,KAAAw/E,YAAA1vC,EAAAzwC,IACA,GAAAW,KAAAw/E,YAAA1vC,EAAA42C,cAAA1mF,KAAAw/E,YAAA1vC,EAAAzwC,KAAAW,KAAAw/E,YAAA1vC,EAAA62C,eAAA,CAMA,IALA3mF,KAAAw/E,YAAA1vC,EAAA82C,gBAAAlnF,KAAAM,KAAA4kF,QAAA5kF,KAAAw/E,YAAA1vC,EAAAzwC,IAGAW,KAAAw/E,YAAA1vC,EAAAg3C,WAAA9mF,KAAA4kF,QAAA5kF,KAAAw/E,YAAA1vC,EAAAzwC,GAAAynF,WAEA9mF,KAAAw/E,YAAA1vC,EAAAmpB,EAAA,EAAAj5D,KAAAw/E,YAAA1vC,EAAAmpB,EAAAj5D,KAAAqkF,UAAArkF,KAAAw/E,YAAA1vC,EAAAmpB,IACAj5D,KAAAw/E,YAAA1vC,EAAAg3C,YAAA9mF,KAAAw/E,YAAA1vC,EAAA62C,eAAA3mF,KAAA4kF,QAAA5kF,KAAAw/E,YAAA1vC,EAAAzwC,GAAAinF,WAAAtmF,KAAAw/E,YAAA1vC,EAAAmpB,GAGAj5D,KAAAw/E,YAAA1vC,EAAA+2C,YAAAnnF,KAAAM,KAAAw/E,YAAA1vC,EAAAg3C,YAQA,IAHA9mF,KAAA6kF,OAAA7kF,KAAAw/E,YAAA1vC,EAAA82C,gBAAAtoF,EAAA6O,QAAA0D,KAAAujB,IAAAkwB,MAAA,KAAAtkD,KAAAw/E,YAAA1vC,EAAA+2C,aAAA7mF,KAAAw/E,YAAA1vC,EAAA+2C,cAGA7mF,KAAAw/E,YAAA1vC,EAAAzwC,EAAA,EAAAW,KAAAw/E,YAAA1vC,EAAAzwC,EAAAW,KAAAu0B,MAAAj0B,OAAAN,KAAAw/E,YAAA1vC,EAAAzwC,IACAW,KAAAw/E,YAAA1vC,EAAAxuB,IAAA,CACAoqB,MAAA1rC,KAAAmmF,gBAAAnmF,KAAA6kF,OAAAkC,SAAA/mF,KAAAw/E,YAAA1vC,EAAAzwC,KAEAW,KAAAw/E,YAAA1vC,EAAAxuB,IAAAziB,MAAA4Z,MAAAzY,KAAAgnF,kBAAAhnF,KAAA6kF,OAAAoC,UAAAjnF,KAAAw/E,YAAA1vC,EAAAzwC,IACAW,KAAAu0B,MAAAv0B,KAAAw/E,YAAA1vC,EAAAzwC,GAAAiiB,IAAAthB,KAAAw/E,YAAA1vC,EAAAxuB,KAIAthB,KAAAknF,kBACAlnF,KAAA8S,WAAAua,OAAA,QACArtB,KAAAgpB,OAAA1H,IAAA,CACAkd,SAAA,WACApF,IAAA,EACA+tD,gBAAAnnF,KAAAkU,SAAAqxE,OAAA,SAGAvlF,KAAAgpB,OAAA1H,IAAA,WAAA,YAGAthB,KAAAonF,gBAGApnF,KAAAqd,YAAArd,KAAAgpB,OAAA,SAAA,iBAKAhpB,KAAAqnF,sBAGArnF,KAAAqd,YAAArd,KAAA8S,WAAA,SAAA9S,KAAAmlF,4BAEAnlF,KAAAsnF,qBAxNAtnF,KAAAqnF,2BAzBArnF,KAAAqnF,2BAbArnF,KAAAqnF,uBAiQAA,oBAAA,WAQA,QANA,IAAArnF,KAAAw/E,YAAA1vC,UACA9vC,KAAAw/E,YAAA1vC,EAGA9vC,KAAAglF,iBAAA,EAEAhlF,KAAAilF,yBAAA,CACA,IAAA10D,EAAAvwB,KAAAklF,8BACAllF,KAAAilF,0BAAA,EACAjlF,KAAAklF,+BAAA,EAEArjF,QAAAkf,sBAAA,KACA/gB,KAAAw/E,YAAAjvD,OAKAg3D,aAAA,SAAArB,GACA,OAAAlmF,KAAAukF,YAAA2B,GAGAC,gBAAA,SAAAD,GACA,MAAA,QAAAlmF,KAAAunF,aAAArB,GAAA,OAAAlmF,KAAAskF,cAAA,OAGAkD,iBAAA,SAAAtB,GACA,OAAAlmF,KAAAunF,aAAArB,GAAA,IAAAlmF,KAAA8S,WAAA44B,QAAA1rC,KAAAskF,eAGA0C,kBAAA,SAAAxoD,GACA,MAAA,SAAAx+B,KAAAunF,aAAA,GAAA,QAAAvnF,KAAAkU,SAAAqxE,OAAAvlF,KAAAskF,eAAA,SAAA9lD,EAAA,KAGAipD,mBAAA,SAAAjpD,GACA,OAAAx+B,KAAAunF,aAAA,GAAA,IAAAvnF,KAAA8S,WAAA44B,SAAA1rC,KAAAkU,SAAAqxE,OAAAvlF,KAAAskF,gBAAA9lD,GAGA+nD,cAAA,SAAAjyD,EAAAozD,EAAAC,EAAAC,EAAAC,GACA,IAAAhpF,MAAA2a,KAAAsuE,gBAAA9nF,MAAAumF,cAAAjyD,EAAAozD,EAAAC,EAAAC,EAAAC,IAGAX,eAAA,WAGA,IAFAlnF,KAAAknF,eAAAp3C,EAAA,GAEA9vC,KAAAknF,eAAAp3C,EAAAzwC,EAAA,EAAAW,KAAAknF,eAAAp3C,EAAAzwC,EAAAW,KAAA6kF,OAAAoC,UAAA3mF,OAAAN,KAAAknF,eAAAp3C,EAAAzwC,IACA,GAAA,IAAAW,KAAA6kF,OAAAoC,UAAAjnF,KAAAknF,eAAAp3C,EAAAzwC,GAEA,cADAW,KAAAknF,eAAAp3C,GACA,EAKA,cADA9vC,KAAAknF,eAAAp3C,GACA,GAGAs3C,cAAA,WAKA,IAJApnF,KAAAonF,cAAAt3C,EAAA,GAEA9vC,KAAAonF,cAAAt3C,EAAAw2C,WAAA,GAEAtmF,KAAAonF,cAAAt3C,EAAAzwC,EAAA,EAAAW,KAAAonF,cAAAt3C,EAAAzwC,EAAAW,KAAAqkF,UAAArkF,KAAAonF,cAAAt3C,EAAAzwC,IACAW,KAAAonF,cAAAt3C,EAAAw2C,WAAA5mF,KAAA,GAGA,IAAAM,KAAAonF,cAAAt3C,EAAAzwC,EAAA,EAAAW,KAAAonF,cAAAt3C,EAAAzwC,EAAAW,KAAAu0B,MAAAj0B,OAAAN,KAAAonF,cAAAt3C,EAAAzwC,IAAA,CAIA,IAHAW,KAAAonF,cAAAt3C,EAAAi4C,UAAA/nF,KAAA6kF,OAAAoC,UAAAjnF,KAAAonF,cAAAt3C,EAAAzwC,GAAAW,KAAA6kF,OAAAkC,SAAA/mF,KAAAonF,cAAAt3C,EAAAzwC,GAAA,EACAW,KAAAonF,cAAAt3C,EAAAk4C,mBAAA,GAEAhoF,KAAAonF,cAAAt3C,EAAAomC,IAAAl2E,KAAA6kF,OAAAoC,UAAAjnF,KAAAonF,cAAAt3C,EAAAzwC,GAAAW,KAAAonF,cAAAt3C,EAAAomC,KAAAl2E,KAAAonF,cAAAt3C,EAAAi4C,UAAA/nF,KAAAonF,cAAAt3C,EAAAomC,MACAl2E,KAAAonF,cAAAt3C,EAAAk4C,mBAAAtoF,KAAAM,KAAAonF,cAAAt3C,EAAAw2C,WAAAtmF,KAAAonF,cAAAt3C,EAAAomC,MAWA,IARAl2E,KAAAonF,cAAAt3C,EAAA1W,IAAAvoB,KAAAob,IAAAq4B,MAAA,KAAAtkD,KAAAonF,cAAAt3C,EAAAk4C,oBACAhoF,KAAAonF,cAAAt3C,EAAA1W,IAAA,IACAp5B,KAAAonF,cAAAt3C,EAAA1W,KAAAp5B,KAAAkU,SAAAqxE,QAGAvlF,KAAAu0B,MAAAv0B,KAAAonF,cAAAt3C,EAAAzwC,GAAAiiB,IAAA,MAAAthB,KAAAonF,cAAAt3C,EAAA1W,KAGAp5B,KAAAonF,cAAAt3C,EAAAomC,IAAAl2E,KAAA6kF,OAAAoC,UAAAjnF,KAAAonF,cAAAt3C,EAAAzwC,GAAAW,KAAAonF,cAAAt3C,EAAAomC,KAAAl2E,KAAAonF,cAAAt3C,EAAAi4C,UAAA/nF,KAAAonF,cAAAt3C,EAAAomC,MACAl2E,KAAAonF,cAAAt3C,EAAAw2C,WAAAtmF,KAAAonF,cAAAt3C,EAAAomC,KAAAl2E,KAAAonF,cAAAt3C,EAAA1W,IAAAp5B,KAAA6lF,qBAAA7lF,KAAAonF,cAAAt3C,EAAAzwC,GAAAW,KAAA6kF,OAAAkC,SAAA/mF,KAAAonF,cAAAt3C,EAAAzwC,IAKAW,KAAA8S,WAAAua,OAAAxc,KAAAob,IAAAq4B,MAAA,KAAAtkD,KAAAonF,cAAAt3C,EAAAw2C,oBAEAtmF,KAAAonF,cAAAt3C,GAGAm4C,aAAA,SAAA1wE,GACAvX,KAAAioF,aAAAn4C,EAAA,GAGAv4B,EAAAM,kBAEA7X,KAAAioF,aAAAn4C,EAAAxb,KAAAh2B,EAAA6O,QAAAoK,EAAA8C,cAAAra,KAAAgpB,SAEA,IAAAhpB,KAAAioF,aAAAn4C,EAAAxb,OAEAt0B,KAAAioF,aAAAn4C,EAAAo4C,UAAAloF,KAAAu0B,MAAAv0B,KAAAioF,aAAAn4C,EAAAxb,MAAA+E,cAEAr5B,KAAAioF,aAAAn4C,EAAAo4C,YAAAloF,KAAA6lF,qBAAA7lF,KAAAioF,aAAAn4C,EAAAxb,MAAAt0B,KAAA6kF,OAAAkC,SAAA/mF,KAAAioF,aAAAn4C,EAAAxb,SACAt0B,KAAA6lF,qBAAA7lF,KAAAioF,aAAAn4C,EAAAxb,MAAAt0B,KAAA6kF,OAAAkC,SAAA/mF,KAAAioF,aAAAn4C,EAAAxb,OAAAt0B,KAAAioF,aAAAn4C,EAAAo4C,UACAloF,KAAAonF,eAAA,YAIApnF,KAAAioF,aAAAn4C,GAGAw3C,cAAA,WACAtnF,KAAAmX,QAAA,eACAnX,KAAAkU,SAAAozE,kBAEA,CACArqE,SAAA,CACAjE,aAAA,QACAC,KAAA,KACAC,QAAA,KACAC,YAAA,IACAosE,OAAA,GACAlsE,SAAA,MACAC,SAAA,MACAC,WAAA,KAEA+tE,cAAAhpF,EAAA6kB,QAIAtkB,MAAA2a,KAAAsuE,gBAAAjmF,QAAA4Z,KAAA7c,OAAA,CACAmU,KAAA,KACA+8B,EAAA,KAEA9yB,KAAA,SAAAjK,GACA/S,KAAA+S,KAAAA,GAGAwzE,cAAA,SAAAjyD,EAAAozD,EAAAC,EAAAC,EAAAC,GAIA,IAHA7nF,KAAA8vC,EAAA,GAGA9vC,KAAA8vC,EAAAluC,EAAA,EAAA5B,KAAA8vC,EAAAluC,EAAA5B,KAAA+S,KAAAyxE,qBAAAlwD,GAAAh0B,OAAAN,KAAA8vC,EAAAluC,IAAA,CAQA,IAPA5B,KAAA8vC,EAAAo2C,QAAAlmF,KAAA+S,KAAAyxE,qBAAAlwD,GAAAt0B,KAAA8vC,EAAAluC,GAKA5B,KAAA8vC,EAAAq4C,4BAAA,GAEAnoF,KAAA8vC,EAAAztC,EAAA,EAAArC,KAAA8vC,EAAAztC,EAAArC,KAAA+S,KAAA0xE,+BAAAnwD,GAAAt0B,KAAA8vC,EAAAo2C,SAAA5lF,OAAAN,KAAA8vC,EAAAztC,IAAA,CAMA,IALArC,KAAA8vC,EAAAtR,SAAAx+B,KAAA+S,KAAA0xE,+BAAAnwD,GAAAt0B,KAAA8vC,EAAAo2C,SAAAlmF,KAAA8vC,EAAAztC,GAEArC,KAAA8vC,EAAAs4C,sBAAA,GACApoF,KAAA8vC,EAAAi4C,UAAA/nF,KAAA8vC,EAAAtR,SAAAx+B,KAAA8vC,EAAAo2C,QAAA,EAEAlmF,KAAA8vC,EAAAomC,IAAAl2E,KAAA8vC,EAAAtR,SAAAx+B,KAAA8vC,EAAAomC,KAAAl2E,KAAA8vC,EAAAi4C,UAAA/nF,KAAA8vC,EAAAomC,MACAl2E,KAAA8vC,EAAAs4C,sBAAA1oF,KAAAkoF,EAAA5nF,KAAA8vC,EAAAomC,MAGAl2E,KAAA8vC,EAAAq4C,4BAAAnoF,KAAA8vC,EAAAztC,GAAAwO,KAAAob,IAAAq4B,MAAA,KAAAtkD,KAAA8vC,EAAAs4C,uBAoBA,IAhBApoF,KAAA8vC,EAAAztC,EAAA/D,EAAA6O,QAAA0D,KAAAujB,IAAAkwB,MAAA,KAAAtkD,KAAA8vC,EAAAq4C,6BAAAnoF,KAAA8vC,EAAAq4C,6BACAnoF,KAAA8vC,EAAAtR,SAAAx+B,KAAA+S,KAAA0xE,+BAAAnwD,GAAAt0B,KAAA8vC,EAAAo2C,SAAAlmF,KAAA8vC,EAAAztC,GAGArC,KAAA8vC,EAAAm3C,UAAAS,EAAA3mF,MAAA,GACAf,KAAA8vC,EAAAi3C,SAAAY,EAAA5mF,MAAA,GACAf,KAAA8vC,EAAAw2C,WAAAsB,EAAA7mF,MAAA,GACAf,KAAA8vC,EAAAg3C,WAAAe,EAEA7nF,KAAA8vC,EAAAm3C,UAAAvnF,KAAAM,KAAA8vC,EAAAtR,UACAx+B,KAAA8vC,EAAAi3C,SAAArnF,KAAAM,KAAA8vC,EAAAo2C,SAGAlmF,KAAA8vC,EAAAu4C,iBAAAroF,KAAA8vC,EAAAq4C,4BAAAnoF,KAAA8vC,EAAAztC,GACArC,KAAA8vC,EAAAi4C,UAAA/nF,KAAA8vC,EAAAtR,SAAAx+B,KAAA8vC,EAAAo2C,QAAA,EAEAlmF,KAAA8vC,EAAAomC,IAAAl2E,KAAA8vC,EAAAtR,SAAAx+B,KAAA8vC,EAAAomC,KAAAl2E,KAAA8vC,EAAAi4C,UAAA/nF,KAAA8vC,EAAAomC,MACAl2E,KAAA8vC,EAAAg3C,YAAA9mF,KAAA8vC,EAAAu4C,iBAAAroF,KAAA8vC,EAAAw2C,WAAAtmF,KAAA8vC,EAAAomC,KACAl2E,KAAA8vC,EAAAw2C,WAAAtmF,KAAA8vC,EAAAomC,KAAAl2E,KAAA8vC,EAAAu4C,iBAAAroF,KAAA+S,KAAA8yE,qBAAAvxD,GAAAt0B,KAAA8vC,EAAAo2C,SAIA5xD,IAAAt0B,KAAA+S,KAAAwhB,MAAAj0B,OAAA,EACAN,KAAA+S,KAAA6xE,QAAAllF,KAAA,CACAunF,UAAAjnF,KAAA8vC,EAAAm3C,UACAF,SAAA/mF,KAAA8vC,EAAAi3C,SACAT,WAAAtmF,KAAA8vC,EAAAw2C,WACAQ,WAAA9mF,KAAA8vC,EAAAg3C,aAIA9mF,KAAA+S,KAAAwzE,cAAAjyD,EAAA,EAAAt0B,KAAA8vC,EAAAm3C,UAAAjnF,KAAA8vC,EAAAi3C,SAAA/mF,KAAA8vC,EAAAw2C,WAAAtmF,KAAA8vC,EAAAg3C,mBAIA9mF,KAAA8vC,KCriBAjxC,MAAA44E,gBAAA54E,MAAA2hC,mBAAA5hC,OAAA,CACAyiC,oBAAA,SAAAF,GAEA,IAAAhJ,EAAAgJ,EAAAxiC,QAAA,aAAA,IAMAw5B,GAHAA,EAAAA,EAAAx5B,QAAA,yBAAA,KAGAmR,cAGAqoB,EAAAt5B,MAAAuS,YAAA+mB,GAEAn4B,KAAAkU,SAAAwjE,qBAEAv/C,EAAAA,EAAAx5B,QAAA,WAAA,KAIA,IAAA2pF,EAAAzpF,MAAAsQ,YAAAgpB,EAAAj3B,MAAA,eAGA,GAFAi3B,EAAA,GAEA,UAAAt5B,MAAA0pF,aACA,OAAAD,EAAA7nF,KAAA,KAIA,IAAA,IAAApB,EAAA,EAAAA,EAAAipF,EAAAhoF,OAAAjB,IACA,WAAAR,MAAA0pF,cAAA,IAAAlpF,EACA84B,GAAAmwD,EAAAjpF,GAEA84B,GAAAmwD,EAAAjpF,GAAAsQ,OAAA,GAAAC,cAAA04E,EAAAjpF,GAAAqC,OAAA,GAIA,OAAAy2B,KCnCAt5B,MAAA2pF,YAAA3mF,QAAA4Z,KAAA7c,OAAA,CACAkU,WAAA,KACA8sC,YAAA,KACAF,SAAA,KAEA1iC,KAAA,SAAA9I,GACAlU,KAAA8Z,YAAA5F,EAAArV,MAAA2pF,YAAAvrE,UACAjd,KAAAyoF,mBAGAA,gBAAA,WACAzoF,KAAA8S,WAAAxU,EAAA0B,KAAAkU,SAAAw0E,mBACA1oF,KAAA4/C,YAAA,IAAA/gD,MAAAonD,YAAA3nD,EAAA,sCAAAkQ,SAAAxO,KAAA8S,aAEA,IAAA7L,EAAA,CACA5B,IAAAxG,MAAAuH,aAAApG,KAAAkU,SAAAy0E,cACAr8B,SAAAtsD,KAAAkU,SAAA00E,eACA1iC,UAAAlmD,KAAA8S,WAAAgD,KAAA9V,KAAAkU,SAAA20E,mBACAj7E,UAAA5N,KAAAkU,SAAA40E,sBAIA,IAAAjqF,MAAA8H,oBAAA,IAAA9H,MAAA+H,iBAEAK,EAAAqlD,SAAAztD,MAAA8H,eAAA9H,MAAA+H,gBAGAK,EAAAm/C,OAAA,GACAn/C,EAAAm/C,OAAAC,gBAAArmD,KAAAsmD,eAAAh/B,KAAAtnB,MACAiH,EAAAm/C,OAAAG,sBAAAvmD,KAAAwmD,kBAAAl/B,KAAAtnB,MACAiH,EAAAm/C,OAAAK,eAAAzmD,KAAA0mD,kBAAAp/B,KAAAtnB,MACAiH,EAAAm/C,OAAA2iC,eAAA/oF,KAAAgpF,eAAA1hE,KAAAtnB,MAEAA,KAAA0/C,SAAA,IAAA7gD,MAAAgoD,SAAA7mD,KAAA8S,WAAA7L,GAEAjH,KAAAipF,eAGAA,YAAA,WACAjpF,KAAA8S,WAAAgD,KAAA9V,KAAAkU,SAAAg1E,sBAAA5xE,GAAA,QAAAC,IACAvX,KAAA8S,WAAAgD,KAAA9V,KAAAkU,SAAA20E,mBAAA1xE,QAAA,WAGAnX,KAAA8S,WAAAgD,KAAA9V,KAAAkU,SAAAi1E,sBAAA7xE,GAAA,QAAAC,IACAR,QAAAlY,MAAAc,EAAA,MAAA,kDACArB,EAAAiZ,EAAA8C,eAAA4M,SAAA1U,OAAA,sCACA1T,MAAAgI,kBAAA7G,KAAAkU,SAAA4wB,aAAA9kC,KAAAkU,SAAA00E,eAAA,CAAAl+E,EAAA9C,KACA,YAAAA,GACA5H,KAAAopF,aAAA1+E,SAOA0+E,aAAA,SAAA1+E,GACApM,EAAA0B,KAAAkU,SAAAw0E,mBAAA/xE,YAAAjM,EAAAhM,MACAsB,KAAAkU,SAAAm1E,oBAAA3+E,GACA1K,KAAAyoF,mBAMAniC,eAAA,SAAA3nC,GACA3e,KAAA4/C,YAAAJ,aAAAl+B,IAAA,CACA8X,IAAAvoB,KAAAK,MAAAlR,KAAA8S,WAAAumB,cAAA,GAAA,IAGAr5B,KAAA8S,WAAAd,SAAA,aACAhS,KAAA4/C,YAAAqD,mBACAjjD,KAAA4/C,YAAAuD,mBAMAqD,kBAAA,SAAA7nC,EAAA5X,GACA,IAAA6gD,EAAAzlD,SAAA4E,EAAA8gD,OAAA9gD,EAAAktB,MAAA,IAAA,IACAj0B,KAAA4/C,YAAAkI,sBAAAF,IAMAlB,kBAAA,SAAA/nC,EAAA5X,GACA,GAAAA,EAAA4K,OAAAhK,MACAM,MAAAlB,EAAA4K,OAAAhK,WACA,CACArJ,EAAAyI,EAAA4K,OAAAjT,MACAsB,KAAAopF,aAAAriF,EAAA4K,QAIA3R,KAAA0/C,SAAAwI,iBACAloD,KAAA4/C,YAAAiE,kBACA7jD,KAAA8S,WAAAwD,YAAA,eAOA0yE,eAAA,SAAArqE,EAAA5X,GACAA,EAAAM,MAAA+nD,aAAAznD,QACAM,MAAAlB,EAAAM,MAAA+nD,aAAAznD,OACA3H,KAAA8S,WAAAwD,YAAA,aACAtW,KAAA4/C,YAAAiE,kBACA7jD,KAAA4/C,YAAAqD,sBAGA,CACAhmC,SAAA,CACA2rE,eAAA,GACAD,aAAA,GACA7jD,aAAA,GACA+jD,kBAAA,GAEAQ,oBAAA/qF,EAAA6kB,KACAulE,kBAAA,KAEAQ,qBAAA,KACAC,qBAAA,KAEAL,gBAAA,WC7HAjqF,MAAA4a,SAAA5X,QAAA4Z,KAAA7c,OAAA,CACA0qF,MAAA,KACAtmB,QAAA,KACA/W,IAAA,KAEAjvC,KAAA,SAAA8S,GAoBA,GAnBA9vB,KAAAspF,MAAAhrF,EAAAwxB,GAEA9vB,KAAAspF,MAAAviF,KAAA,aACAlF,QAAAigC,IAAA,mDACA9hC,KAAAgjE,QAAAhjE,KAAAspF,MAAAviF,KAAA,YAAAi8D,QACAhjE,KAAAspF,MAAAviF,KAAA,YAAAkX,YAEAje,KAAAgjE,QAAAhjE,KAAAspF,MAAA5qF,OACAsB,KAAAspF,MACA5qF,KAAA,IACA0P,KAAA,CACA0mB,SAAA,EACAD,KAAA,SACA1Z,aAAAtc,MAAAc,EAAA,MAAA,kBAIAK,KAAAspF,MAAAviF,KAAA,WAAA/G,MAEAA,KAAAspF,MAAA,GAAAC,iBAAAvpF,KAAAspF,MAAA,GAAAC,gBAAAC,WAAAC,KAAAC,UAAA,CAGA,IADA1pF,KAAAspF,MAAAriE,SACApR,SAAA,UAAA,CAEA,MAAA9H,EAAA/N,KAAAspF,MAAA,GAAAC,gBAAAI,UAAAjkF,MAAA,gBACAqI,IACA/N,KAAAspF,MAAA,GAAAC,gBAAAI,UAAA3pF,KAAAspF,MAAA,GAAAC,gBAAAI,UAAAjoF,OAAA,EAAAqM,EAAAhP,OACAT,EAAA,UAAA,CACA2c,MAAA,SACAvc,KAAAqP,EAAA,GAAApP,QAAA,OAAA,IAAA,MAEAm5B,YAAA93B,KAAAspF,MAAA,GAAAC,iBACAh3E,OAAAvS,KAAAspF,SAKAtpF,KAAAqd,YAAArd,KAAAspF,MAAA,QAAA/xE,IACAA,EAAAK,iBACAL,EAAAM,kBACA7X,KAAA4pF,YAGA5pF,KAAAqd,YAAArd,KAAAspF,MAAA,UAAA/xE,IACAvX,KAAAisD,KAAAjsD,KAAAisD,IAAA49B,UAAA,CAAAhoF,QAAAqzB,UAAArzB,QAAAumB,YAAA9Y,SAAAiI,EAAAC,WACAD,EAAAK,iBACAL,EAAAM,kBACA7X,KAAA4pF,cAKAA,QAAA,SAAAryE,GACAvX,KAAAisD,IAYAjsD,KAAAisD,IAAArvB,QAXA58B,KAAAisD,IAAA,IAAApqD,QAAAm1B,IAAAh3B,KAAAspF,MAAAtpF,KAAAgjE,QAAA,CACAwM,SAAA,eACAsa,gBAAA,EACAj1B,OAAA,KACAhzD,QAAAqc,gBAAAC,iBAAAtc,QAAAqzB,UAAA,KACAl1B,KAAAisD,IAAA/kC,YAIAroB,MAAAgU,eAAA7S,KAAAisD,IAAA/vC,WCrEArd,MAAAqb,YAAArY,QAAA4Z,KAAA7c,OAAA,CACAsV,SAAA,KACAk1C,gBAAA,KACAC,gBAAA,KACA/kD,OAAA,KACA+xE,OAAA,EACA/+D,IAAA,EACAyyE,eAAA,EACAC,QAAA,KAEAC,gBAAA,KAEAjtE,KAAA,SAAAktE,EAAAh2E,GAmBA,GAlBAlU,KAAAopD,gBAAA9qD,EAAA4rF,GAGAlqF,KAAAopD,gBAAAriD,KAAA,iBACAlF,QAAAigC,IAAA,oDACA9hC,KAAAopD,gBAAAriD,KAAA,eAAAkX,WAGAje,KAAAopD,gBAAAriD,KAAA,cAAA/G,MAEAA,KAAAq2E,MAAAr2E,KAAAopD,gBAAAvzC,SAAA,SAEA7V,KAAA8Z,YAAA5F,EAAArV,MAAAqb,YAAA+C,UAEAjd,KAAAqpD,gBAAArpD,KAAAopD,gBAAAtzC,KAAA,gCACA9V,KAAAsE,OAAAtE,KAAAopD,gBAAAtzC,KAAA,eAGA9V,KAAAsE,OAAA+zB,KAAA,YACA,OAGAr4B,KAAAsX,GAAAtX,KAAAopD,gBAAAvzC,SAAA,MACA7V,KAAA+pF,cAAA/pF,KAAAopD,gBAAAvzC,SAAA,iBAEA7V,KAAAqd,YAAArd,KAAAopD,gBAAA,YAAA,gBACAppD,KAAAqd,YAAArd,KAAAopD,gBAAA,UAAA,cAEAppD,KAAAgqF,QAAA,IAAAnoF,QAAAq/E,SAAAlhF,KAAAopD,gBAAA,CACAluB,KAAAr5B,QAAAsoF,OACAlvD,qBAAA,KACAumB,YAAAxhD,KAAAyhD,aAAAn6B,KAAAtnB,MACA2iF,OAAA3iF,KAAAoqF,QAAA9iE,KAAAtnB,MACA4hD,WAAA5hD,KAAAqqF,YAAA/iE,KAAAtnB,QAIA,IAAA4a,EAAA5a,KAAAopD,gBAAAniC,OAAA,gCACArM,EAAAta,SACAN,KAAAqd,YAAAzC,EAAAI,SAAA,2BAAA,QAAAhb,KAAA2uE,SACA3uE,KAAAqd,YAAAzC,EAAAI,SAAA,0BAAA,QAAAhb,KAAA0uE,UAIAA,OAAA,SAAA4b,GACA,IAAAC,GAAAvqF,KAAAsX,GAEAtX,KAAAsX,IAAA,EACAtX,KAAA+pF,eAAA,EAEA/pF,KAAAopD,gBAAAp3C,SAAA,YACA,IAAAoqB,EAAA,GACAA,EAAA,UAAAv9B,MAAA4Z,MAAA,EACAzY,KAAAqpD,gBAAA7wC,SAAA,QAAAA,SAAA4jB,EAAAv9B,MAAAqb,YAAAo5B,kBAAAtzC,KAAAwqF,UAAAljE,KAAAtnB,OAEAA,KAAAsE,OAAAC,IAAAvE,KAAAkU,SAAA/O,OACAnF,KAAAopD,gBAAAp3C,SAAA,MACAhS,KAAAopD,gBAAA9yC,YAAA,iBACAtW,KAAAopD,gBAAAh7C,KAAA,eAAA,QAEAm8E,IAAA,IAAAD,GACAtqF,KAAAwwC,YAIAm+B,QAAA,SAAA2b,GACA,IAAAC,EAAAvqF,KAAAsX,IAAAtX,KAAA+pF,cAEA/pF,KAAAsX,IAAA,EACAtX,KAAA+pF,eAAA,EAEA/pF,KAAAopD,gBAAAp3C,SAAA,YACA,IAAAoqB,EAAA,GACAA,EAAA,UAAAv9B,MAAA4Z,MAAAzY,KAAAyqF,gBACAzqF,KAAAqpD,gBAAA7wC,SAAA,QAAAA,SAAA4jB,EAAAv9B,MAAAqb,YAAAo5B,kBAAAtzC,KAAAwqF,UAAAljE,KAAAtnB,OAEAA,KAAAsE,OAAAC,IAAA,IACAvE,KAAAopD,gBAAA9yC,YAAA,MACAtW,KAAAopD,gBAAA9yC,YAAA,iBACAtW,KAAAopD,gBAAAh7C,KAAA,eAAA,SAEAm8E,IAAA,IAAAD,GACAtqF,KAAAwwC,YAIAo+B,kBAAA,SAAA0b,GACA,IAAAC,GAAAvqF,KAAA+pF,cAEA/pF,KAAAsX,IAAA,EACAtX,KAAA+pF,eAAA,EAEA/pF,KAAAopD,gBAAAp3C,SAAA,YACA,IAAAoqB,EAAA,GACAA,EAAA,UAAAv9B,MAAA4Z,MAAAzY,KAAAyqF,gBAAA,EACAzqF,KAAAqpD,gBAAA7wC,SAAA,QAAAA,SAAA4jB,EAAAv9B,MAAAqb,YAAAo5B,kBAAAtzC,KAAAwqF,UAAAljE,KAAAtnB,OAEAA,KAAAsE,OAAAC,IAAAvE,KAAAkU,SAAA+F,oBACAja,KAAAopD,gBAAA9yC,YAAA,MACAtW,KAAAopD,gBAAAp3C,SAAA,iBACAhS,KAAAopD,gBAAAh7C,KAAA,eAAA,SAEAm8E,IAAA,IAAAD,GACAtqF,KAAAwwC,YAIA8mC,OAAA,WACAt3E,KAAA+pF,gBAAA/pF,KAAAsX,GACAtX,KAAA0uE,SAEA1uE,KAAA2uE,WAIAn+B,SAAA,WACAxwC,KAAAmX,QAAA,UACAnX,KAAAkU,SAAAs8B,SAAAxwC,KAAAsX,IACAtX,KAAAopD,gBAAAjyC,QAAA,WAGAuzE,aAAA,WACA1qF,KAAAqd,YAAAxb,QAAA0Z,KAAA,UAAA,eAGAovE,WAAA,WACA3qF,KAAA4qB,eAAA/oB,QAAA0Z,KAAA,WAGAvb,KAAAgqF,QAAAY,UACA5qF,KAAAs3E,UAIAxuB,WAAA,SAAAnqC,GACA,OAAAA,EAAAnH,SACA,KAAA3V,QAAAqzB,UACAl1B,KAAAs3E,SACA34D,EAAA/G,iBACA,MAEA,KAAA/V,QAAAugC,UACA,QAAAvjC,MAAA0Z,YACAvY,KAAA0uE,SAEA1uE,KAAA2uE,UAGAhwD,EAAA/G,iBACA,MAEA,KAAA/V,QAAAsgC,SACA,QAAAtjC,MAAA0Z,YACAvY,KAAA2uE,UAEA3uE,KAAA0uE,SAGA/vD,EAAA/G,mBAMAizE,WAAA,WACA,OAAA1oF,SAAAnC,KAAAqpD,gBAAA/nC,IAAA,UAAAziB,MAAA4Z,QAGAgpC,aAAA,WACAzhD,KAAAopD,gBAAAp3C,SAAA,YACAhS,KAAAiqF,gBAAAjqF,KAAA6qF,cAGAT,QAAA,WACA,IAAAv9B,GAGAA,EADA,QAAAhuD,MAAA0Z,YACAvY,KAAAiqF,gBAAAjqF,KAAAgqF,QAAAc,WAEA9qF,KAAAiqF,gBAAAjqF,KAAAgqF,QAAAc,YAGA9qF,KAAAyqF,gBACA59B,EAAA7sD,KAAAyqF,gBACA59B,EAAA,IACAA,EAAA,GAGA7sD,KAAAqpD,gBAAA/nC,IAAA,UAAAziB,MAAA4Z,KAAAo0C,IAGAw9B,YAAA,WACA,IAAAx9B,EAAA7sD,KAAA6qF,aACAna,QAAA5uC,IAAA+qB,GAEAA,EAAA7sD,KAAAyqF,gBAAA,EACAzqF,KAAA0uE,SAEA1uE,KAAA2uE,WAIA6b,UAAA,WACAxqF,KAAAopD,gBAAA9yC,YAAA,aAGA2H,QAAA,WACAje,KAAA6iB,OACA7iB,KAAAgqF,QAAA/rE,WAGAwsE,cAAA,WACA,OAAAzqF,KAAAq2E,OAAA,IAAA,KAEA,CACA/iC,kBAAA,IACAr2B,SAAA,CACA9X,MAAA,IACA8U,mBAAA,IACAu2B,SAAAlyC,EAAA6kB,QCxOAtkB,MAAAy/E,QAAAz8E,QAAA4Z,KAAA7c,OAAA,CACAkU,WAAA,KACAyU,SAAA,KACAg3D,gBAAA,KACAwM,oBAAA,KAEA/tE,KAAA,SAAA3F,EAAAnD,GACAlU,KAAA8S,WAAAxU,EAAA+Y,GACArX,KAAA8Z,YAAA5F,EAAArV,MAAAy/E,QAAArhE,UAGAjd,KAAA8S,WAAA/L,KAAA,aACAlF,QAAAigC,IAAA,gDACA9hC,KAAA8S,WAAA/L,KAAA,WAAAkX,WAGAje,KAAA8S,WAAA/L,KAAA,UAAA/G,MACAA,KAAAunB,SAAAvnB,KAAA8S,WAAAgD,KAAA,iBAGA9V,KAAAu+E,gBAAAv+E,KAAAunB,SAAAC,OAAA,wBACAxnB,KAAAu+E,gBAAAj+E,OACAN,KAAA+qF,oBAAA/qF,KAAAunB,SAAAxoB,MAAAiB,KAAAu+E,iBAEAv+E,KAAAu+E,gBAAA,KAGAv+E,KAAAqd,YAAArd,KAAA8S,WAAA,UAAAyE,IACA,OAAAA,EAAAC,SACA,KAAA3V,QAAAmpF,OACAhrF,KAAAirF,aACA1zE,EAAAK,iBACA,MACA,KAAA/V,QAAAqpF,SACAlrF,KAAAmrF,aACA5zE,EAAAK,iBACA,MACA,KAAA/V,QAAAsgC,SACA,QAAAtjC,MAAA0Z,YACAvY,KAAAirF,aAEAjrF,KAAAmrF,aAEA5zE,EAAAK,iBACA,MACA,KAAA/V,QAAAugC,UACA,QAAAvjC,MAAA0Z,YACAvY,KAAAmrF,aAEAnrF,KAAAirF,aAEA1zE,EAAAK,oBAKA5X,KAAAqd,YAAArd,KAAAunB,SAAA,QAAAhQ,IACAvX,KAAA2B,OAAA3B,KAAAunB,SAAAxoB,MAAAT,EAAAiZ,EAAA8C,iBACA9C,EAAAK,oBAIAjW,OAAA,SAAA5C,GACAA,EAAA,GAAAA,GAAAiB,KAAAunB,SAAAjnB,QAAAvB,IAAAiB,KAAA+qF,sBAIA/qF,KAAAu+E,gBACAjoE,YAAAtW,KAAAkU,SAAAk3E,eACAh9E,KAAA,gBAAA,SAEApO,KAAAu+E,gBAAAv+E,KAAAunB,SAAAlV,GAAAtT,GACAiT,SAAAhS,KAAAkU,SAAAk3E,eACAh9E,KAAA,gBAAA,QAEApO,KAAA+qF,oBAAAhsF,EAEAiB,KAAAkU,SAAAs8B,SAAAxwC,KAAAu+E,gBAAAx/E,GACAiB,KAAAmX,QAAA,SAAA,CACAonE,gBAAAv+E,KAAAu+E,gBACAwM,oBAAAhsF,MAIAksF,WAAA,WACA,OAAAjrF,KAAA+qF,oBACA/qF,KAAA2B,OAAA,GAEA3B,KAAA2B,OAAA3B,KAAA+qF,oBAAA,IAIAI,WAAA,WACA,OAAAnrF,KAAA+qF,oBACA/qF,KAAA2B,OAAA,GAEA3B,KAAA2B,OAAA3B,KAAA+qF,oBAAA,KAGA,CACA9tE,SAAA,CACAmuE,cAAA,SACAC,WAAA,QACA76C,SAAAlyC,EAAA6kB,QCvGAtkB,MAAAysF,YAAAzpF,QAAA4Z,KAAA7c,OAAA,CACA2sF,aAAA,KACAtS,SAAA,KACAx6D,OAAA,KACA4oB,iBAAA,KACAmpC,QAAA,KACAgb,YAAA,KACAC,kBAAA,KACAC,iBAAA,KACAC,QAAA,KACAC,kBAAA,KAEAC,WAAA,KACAtrF,MAAA,KACAurF,aAAA,KACA32B,eAAA,EACA42B,OAAA,KACAC,aAAA,KACAC,qBAAA,KACAC,SAAA,EACAC,YAAA,EAEAnC,QAAA,KACAoC,qBAAA,KAEAC,sBAAA,EACAC,wBAAA,KAEAC,SAAA,KACAC,SAAA,KAEAC,aAAA,KACAC,iBAAA,KAEA1vE,KAAA,SAAA9I,GACAlU,KAAA8Z,YAAA5F,EAAArV,MAAAysF,YAAAruE,UAKAjd,KAAAkU,SAAA23E,WACA7rF,KAAA6rF,WAAA7rF,KAAAkU,SAAA23E,WAEA7rF,KAAA6rF,WAAAhtF,MAAAsH,YAAAxH,QAAA,OAAA,IAAA,IAIA,WAAA4H,SAAAC,SAAAmmF,WACA3sF,KAAA6rF,WAAA7rF,KAAA6rF,WAAAltF,QAAA,SAAA,WAIAqB,KAAA8rF,aAAAxtF,EAAAM,OAAA,GAAAoB,KAAAkU,SAAA04E,eAEA5sF,KAAAssF,wBAAAtsF,KAAA6sF,kBAAAvlE,KAAAtnB,MAGAA,KAAAurF,aAAAjtF,EAAA0B,KAAAkU,SAAA44E,aACA9sF,KAAAi5E,SAAA36E,EAAA0B,KAAAkU,SAAAiD,SACAnX,KAAA4rF,kBAAAttF,EAAA,UAGA0B,KAAAqpC,YAAAxqC,MAAA4V,gBAAA,0BAAA5V,MAAAysF,YAAAyB,oBAGA/sF,KAAAqd,YAAArd,KAAAi5E,SAAA,WAAA,UAEAp6E,MAAAkJ,GAAAuP,GAAA,qBAAA,KACAtX,KAAAm1D,eACAn1D,KAAAgtF,oBAKA3jD,kBACA,OAAArpC,KAAAysF,cAGAQ,sBACA,OAAAjtF,KAAA0sF,kBAGArjD,gBAAAqC,GACA,IAAAwhD,EAGAxhD,GAAA,GACAwhD,EAAAxhD,EACAA,GAAA7pC,QAAA8e,KAAA+qB,SAEAwhD,EAAAr8E,KAAAK,MAAAw6B,EAAA7pC,QAAA8e,KAAA+qB,SAIAwhD,EAAAruF,MAAAysF,YAAA6B,qBAEAzhD,GADAwhD,EAAAruF,MAAAysF,YAAA6B,oBACAtrF,QAAA8e,KAAA+qB,SAGA1rC,KAAAysF,aAAA/gD,EACA1rC,KAAA0sF,iBAAAQ,GAGA5V,OAAA,WACAt3E,KAAAm1D,cACAn1D,KAAAotF,OAEAptF,KAAAsiE,SAIAA,MAAA,WACA,IAAAtiE,KAAAm1D,cAIA,GAAAn1D,KAAAO,MAAA,CASA,GAJAP,KAAAmX,QAAA,eAEA7Y,EAAAiI,SAAAmR,eAAAP,QAAA,SAEAnX,KAAAwwE,QAAA,CACAxwE,KAAAye,OAAAngB,EAAA,SAAA,CAAA2c,MAAA,qBAAAzM,SAAA3M,QAAA+Q,MACA5S,KAAAyrF,kBAAAntF,EAAA,SAAA,CAAA2c,MAAA,yBAAAzM,SAAA3M,QAAA+Q,MACA5S,KAAA0rF,iBAAAptF,EAAA,SAAA,CAAA2c,MAAA,wBAAAzM,SAAAxO,KAAAyrF,mBACAzrF,KAAAqnC,iBAAA/oC,EAAA,SAAA,CAAA2c,MAAA,wBAAAzM,SAAA3M,QAAA+Q,MAEA,IAAAy6E,EAAA/uF,EAAA,YAAA,CAAA2c,MAAA,SAAAzM,SAAAxO,KAAAqnC,kBACArnC,KAAAwwE,QAAAlyE,EAAA,UAAA,CAAA2c,MAAA,cAAAzM,SAAAxO,KAAAqnC,kBACArnC,KAAAwrF,YAAAltF,EAAA,SAAA,CAAA2c,MAAA,kBAAAzM,SAAAxO,KAAAqnC,kBACA,IAAAimD,EAAAhvF,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,MACA3X,KAAAzE,MAAAc,EAAA,MAAA,mBACA6O,SAAA6+E,GACA/uF,EAAA,SAAA,CAAA2c,MAAA,cAAAzM,SAAA6+E,GACA,IAAA3wE,EAAApe,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,aACA3X,KAAAzE,MAAAc,EAAA,MAAA,UACA6O,SAAA6+E,GAEArtF,KAAAgqF,QAAA,IAAAnoF,QAAAq/E,SAAAlhF,KAAAwrF,YAAA,CACAtwD,KAAAr5B,QAAAsoF,OACA3oC,YAAAxhD,KAAAyhD,aAAAn6B,KAAAtnB,MACA2iF,OAAA3iF,KAAAoqF,QAAA9iE,KAAAtnB,MACA4hD,WAAA5hD,KAAAqqF,YAAA/iE,KAAAtnB,QAGAA,KAAAqd,YAAAiwE,EAAA,QAAA,QACAttF,KAAAqd,YAAAX,EAAA,QAAA,QAIA1c,KAAAyzD,qBACAzzD,KAAAqd,YAAAxb,QAAA8e,KAAA,SAAA,sBAEA3gB,KAAAqnC,iBAAA/lB,IAAAziB,MAAA4Z,MAAAzY,KAAAitF,gBAAA,MACAjtF,KAAAyrF,kBAAAnqE,IAAAziB,MAAA6Z,OAAA1Y,KAAAutF,kBAIAvtF,KAAA+rF,OAAA,GAGA,IAFA,IAAAja,EAAAxzE,EAAA0B,KAAAkU,SAAA63E,QAEA1sF,EAAA,EAAAA,EAAAyyE,EAAAxxE,OAAAjB,IAAA,CACA,IAAAgvE,EAAA/vE,EAAAwzE,EAAAzyE,IACAmuF,EAAAxtF,KAAAytF,UAAApf,GAIAruE,KAAA4rF,kBAAA9zD,YAAAu2C,GACAA,EAAA/iD,SACAtrB,KAAA4rF,kBAAAj1E,YAAA62E,GACAnf,EAAA7/D,SAAAxO,KAAAwwE,SAEAxwE,KAAA+rF,OAAArsF,KAAA,CACA2uE,OAAAA,EACAmf,OAAAA,IAIAxtF,KAAA0tF,eACA1tF,KAAAqsF,sBAAA,EAEArsF,KAAA2tF,UAGA9rF,QAAAyV,GAAAzY,MAAA2V,kBAAA,cAAAxU,KAAAssF,yBACAzqF,QAAAyV,GAAAzY,MAAAmnC,iBAAA,OAAAhmC,KAAAssF,yBAEAztF,MAAAiiB,mBAAA25D,WAEAz6E,KAAAm1D,eAAA,EACAn1D,KAAAmX,QAAA,cAjFAnX,KAAA4tF,eAoFAA,YAAA,WACA/uF,MAAAgI,kBAAA,4BAAA,CACAgnF,cAAA7tF,KAAAkU,SAAA25E,eACA,CAAAnjF,EAAA9C,KACA,YAAAA,IACA5H,KAAAO,MAAAmK,EAAAnK,MACAP,KAAAsiE,YAKAnqB,KAAA,WACAt5C,MAAAkJ,GAAAmsD,qBAGAT,mBAAA,WAEAzzD,KAAAqpC,YAAArpC,KAAAqpC,YAGArpC,KAAA8tF,gBAGAH,QAAA,WACArvF,EAAA,QAAA0T,SAAA,YACAhS,KAAAye,OAAAjG,SAAA,UAEAxY,KAAAqnC,iBAAAzK,OAAApkB,SAAA,QAAAL,YAAA,EAAA,OAAA,KACAnY,KAAAmX,QAAA,WACAtV,QAAA8e,KAAAxJ,QAAA,YAGAnX,KAAAyrF,kBAAA7uD,OAAApkB,SAAA,QAAAG,aAAA,EAAA,OAAA,KACA3Y,KAAAisF,qBAAAh0C,YAAAj4C,KAAA0tF,aAAApmE,KAAAtnB,MAAA,KAEAA,KAAAqd,YAAAxb,QAAA+Q,KAAA,SAAA,SAAA2E,GACAA,EAAAC,UAAA3V,QAAA0c,SACAve,KAAAotF,aAMAA,KAAA,WACAptF,KAAAm1D,gBAIAn1D,KAAAmX,QAAA,cAEA7Y,EAAA,QAAAgY,YAAA,YAEAtW,KAAA4qB,eAAA/oB,QAAA8e,KAAA,UACA3gB,KAAA4qB,eAAA/oB,QAAA+Q,KAAA,SAEA5S,KAAAisF,sBACApzC,cAAA74C,KAAAisF,sBAGAjsF,KAAAgtF,iBAEAhtF,KAAAye,OAAAm1C,MAAA,KAAAp7C,SAAA,WAEAxY,KAAAqnC,iBAAA7uB,SAAA,QAAAL,aAAAnY,KAAAitF,gBAAA,OAAA,KACA,IAAA,IAAA5tF,EAAA,EAAAA,EAAAW,KAAA+rF,OAAAzrF,OAAAjB,IACAW,KAAA+rF,OAAA1sF,GAAA0uF,UAAA3yE,SAEApb,KAAAqnC,iBAAAngB,OACAlnB,KAAAmX,QAAA,cAGAnX,KAAAyrF,kBAAAjzE,SAAA,QAAAG,cAAA3Y,KAAAutF,iBAAA,OAAA,KACAvtF,KAAAyrF,kBAAAvkE,SAGArlB,QAAAwf,IAAAxiB,MAAA2V,kBAAA,cAAAxU,KAAAssF,yBAEAztF,MAAAiiB,mBAAA25D,WAEAz6E,KAAAm1D,eAAA,EACAn1D,KAAAmX,QAAA,UAGA61E,eAAA,WACA,IAAA,IAAA3tF,EAAA,EAAAA,EAAAW,KAAA+rF,OAAAzrF,OAAAjB,IAAA,CACA,IAAA2uF,EAAAhuF,KAAA+rF,OAAA1sF,GACA2uF,EAAAD,UAAA/tF,KAAAytF,UAAAO,EAAA3f,QAIAruE,KAAA4rF,kBAAA9zD,YAAAk2D,EAAA3f,QACA2f,EAAA3f,OAAA/iD,SACAtrB,KAAA4rF,kBAAAj1E,YAAAq3E,EAAAD,WACAC,EAAAR,OAAA72E,YAAAq3E,EAAA3f,QAGAxsE,QAAA8e,KAAAxJ,QAAA,WAGAo2E,eAAA,WACA,OAAA1rF,QAAA8e,KAAA+qB,QAAA1rC,KAAAitF,iBAGAa,aAAA,WACA9tF,KAAAqnC,iBAAA/lB,IAAA,QAAAthB,KAAAitF,gBAAA,MACAjtF,KAAAyrF,kBAAA//C,MAAA1rC,KAAAutF,mBAGAG,aAAA,SAAAn9D,GAKA,GAJAA,IACAvwB,KAAAgsF,aAAA,OAGAhsF,KAAAm1D,cACA,OAAA,EAGA,GAAAn1D,KAAAksF,QAEA,OADAlsF,KAAAmsF,YAAA,GACA,EAIA,IAAAj2C,EAAA53C,EAAAM,OAAAiD,QAAAywB,YAAAtyB,KAAAwwE,SAAA3uE,QAAAywB,YAAAtyB,KAAAurF,eAEA,GAAAvrF,KAAAgsF,cAAAntF,MAAA4P,QAAAynC,EAAAl2C,KAAAgsF,cAAA,GA0BA,OAAA,EAzBAhsF,KAAAgsF,aAAA91C,EACAl2C,KAAAksF,SAAA,EAEA,IAAA3wE,EAAAvb,KAAA2rF,QAAArtF,EAAA0B,KAAA2rF,QAAA,GAAAsC,cAAA1nF,UAAA,KAoBA,OAlBAvG,KAAAusF,SAAAhxE,EAAAA,EAAAonB,aAAA,EACA3iC,KAAAwsF,SAAAjxE,EAAAA,EAAA6F,YAAA,EAEA9iB,EAAAgJ,KAAA,CACAjC,IAAArF,KAAA6rF,aAAA,IAAA7rF,KAAA6rF,WAAA/qF,QAAA,KAAA,IAAA,KAAAjC,MAAAkxE,WAAA,IAAA/vE,KAAAO,MACAwI,OAAA,OACAhC,KAAAzI,EAAAM,OAAA,GAAAs3C,EAAAl2C,KAAA8rF,cACAtkF,QAAA,CACA0mF,gBAAAluF,KAAAO,OAEA4tF,UAAA,CACAC,iBAAA,GAEAC,aAAA,EACA3mF,QAAA1H,KAAAsuF,cAAAhnE,KAAAtnB,MACA2H,MAAA3H,KAAAuuF,YAAAjnE,KAAAtnB,SAGA,GAMA6sF,kBAAA,WACA,OAAA7sF,KAAA0tF,cAAA,IAGAY,cAAA,SAAAvnF,GACA,IAAArI,EAAAqI,EACA,kDAAA/G,KAAAusF,SAAA,KAAAvsF,KAAAwsF,SAAA,eAGAb,EAAArtF,EAAA,gDACA0B,KAAA2rF,QACAA,EAAA5lC,aAAA/lD,KAAA2rF,SAEAA,EAAAn9E,SAAAxO,KAAA0rF,kBAGA1rF,KAAAqd,YAAAsuE,EAAA,QAAA,WACA3rF,KAAA2rF,SACA3rF,KAAA2rF,QAAAvwE,SAEApb,KAAA2rF,QAAAA,EAEA3rF,KAAAqsF,uBACArsF,KAAA2tF,UACA3tF,KAAAqsF,sBAAA,GAGArsF,KAAA4qB,eAAA+gE,EAAA,WAGA9pF,QAAAkf,sBAAA,KACA4qE,EAAA,GAAAsC,cAAA1nF,SAAAvF,OACA2qF,EAAA,GAAAsC,cAAA1nF,SAAAioF,MAAA9vF,GACAitF,EAAA,GAAAsC,cAAA1nF,SAAAtF,QACAjB,KAAAyuF,gBAIAF,YAAA,WACAvuF,KAAAyuF,cAGAA,WAAA,WACAzuF,KAAAksF,SAAA,EAEAlsF,KAAAmsF,aACAnsF,KAAAmsF,YAAA,EACAnsF,KAAA0tF,iBAIAD,UAAA,SAAApf,GACA,IAAAmf,EAAAnf,EAAArwC,QASA,OANAn8B,QAAA6sF,gBAAArgB,EAAAmf,GAGAA,EAAAp/E,KAAA,KAAA,IACAo/E,EAAA13E,KAAA,QAAA1H,KAAA,KAAA,IAEAo/E,GAGA/rC,aAAA,WACAzhD,KAAAosF,qBAAApsF,KAAAitF,gBACAjtF,KAAAyrF,kBAAAz5E,SAAA,aAGAo4E,QAAA,WACA,QAAAvrF,MAAA0Z,YACAvY,KAAAqpC,YAAArpC,KAAAosF,qBAAApsF,KAAAgqF,QAAAc,WAEA9qF,KAAAqpC,YAAArpC,KAAAosF,qBAAApsF,KAAAgqF,QAAAc,WAGA9qF,KAAA8tF,gBAGAzD,YAAA,WACArqF,KAAAyrF,kBAAAn1E,YAAA,YACAzX,MAAAiW,gBAAA,0BAAA9U,KAAAqpC,eAEA,CACA0jD,mBAAA,IACAI,mBAAA,IAEAlwE,SAAA,CACA9F,QAAA,kBACA40E,OAAA,KACAe,YAAA,KACAjB,WAAA,KACAgC,cAAA,KACAjB,cAAA,MAIA/tF,MAAAysF,YAAAtuE,KAAA,SAAA9I,GACArV,MAAAq2D,YAAA,IAAAr2D,MAAAysF,YAAAp3E,ICtcArV,MAAAgyD,cAAAhvD,QAAA4Z,KAAA7c,OAAA,CACAgyD,iBAAA,KACAjC,eAAA,KACAggC,WAAA,KACAvT,cAAA,KAEAwT,oBAAA,KACAC,gBAAA,KAEA7xE,KAAA,SAAA8xE,EAAA56E,GACAlU,KAAA2uD,eAAArwD,EAAAwwF,GACA9uF,KAAA4wD,iBAAA5wD,KAAA2uD,eAAA1nC,OAAA,oBACAjnB,KAAAkU,SAAA5V,EAAAM,OAAA,GAAAC,MAAAgyD,cAAA5zC,SAAA/I,GAGAlU,KAAA2uD,eAAA5nD,KAAA,mBACAlF,QAAAigC,IAAA,uDACA9hC,KAAA2uD,eAAA5nD,KAAA,iBAAAkX,WAGAje,KAAA2uD,eAAA5nD,KAAA,gBAAA/G,MAEAA,KAAA4uF,oBAAAtwF,EAAA,8CACA0B,KAAA4uF,oBAAA58E,SAAA,mBACAhS,KAAA4uF,oBAAA92D,YAAA93B,KAAA2uD,gBAEA3uD,KAAA+uF,qBAAA/uF,KAAA2uD,gBACA3uD,KAAAqd,YAAArd,KAAA4uF,oBAAA,QAAA,WACA5uF,KAAAgvF,gBAGAC,gBAAA,SAAA3qF,GACAtE,KAAAo7E,gBAEA92E,EAAAwzB,YAAA93B,KAAAo7E,eACAp7E,KAAAo7E,cAAA9vD,SACAhnB,EAAA6S,QAAA,SAGA7S,EAAAC,IAAAvE,KAAAo7E,cAAA72E,QAGAvE,KAAAo7E,cAAA92E,EAEAtE,KAAAqd,YAAArd,KAAAo7E,cAAA,6BAAA,kBAGA8T,kBAAA,SAAAj5E,GACAjW,KAAA4uF,oBAAAtrF,KAAA2S,IAGA84E,qBAAA,SAAAzqF,GACAtE,KAAAqd,YAAA/Y,EAAA,SAAA,WACAtE,KAAA4wD,iBAAA5+C,SAAA,YAEAhS,KAAAqd,YAAA/Y,EAAA,QAAA,WACAtE,KAAA4wD,iBAAAt6C,YAAA,aAIA64E,aAAA,WACAnvF,KAAA6uF,kBAIA7uF,KAAA2uF,aACA3uF,KAAA2uF,WAAA3uF,KAAA2uD,eAAA3wB,OAAA,GACAh+B,KAAA2uF,WAAAvgF,KAAA,CACA9M,KAAA,OACA8tF,eAAA,QAEApvF,KAAA+uF,qBAAA/uF,KAAA2uF,aAGA3uF,KAAAivF,gBAAAjvF,KAAA2uF,YACA3uF,KAAAkvF,kBAAArwF,MAAAc,EAAA,MAAA,SACAK,KAAA6uF,iBAAA,IAGAG,aAAA,YAEA,IAAAhvF,KAAA6uF,kBAIA7uF,KAAAivF,gBAAAjvF,KAAA2uD,gBACA3uD,KAAAkvF,kBAAArwF,MAAAc,EAAA,MAAA,SACAK,KAAA6uF,iBAAA,EAGA7uF,KAAAqd,YAAArd,KAAA2uD,eAAA,UAAA,eAGA0gC,eAAA,WACArvF,KAAA6uF,gBACA7uF,KAAAgvF,eAEAhvF,KAAAmvF,eAGAnvF,KAAAkU,SAAA48C,cAAA9wD,KAAAo7E,gBAGAkU,UAAA,SAAA/3E,GACAA,EAAAC,UAAA3V,QAAA0tF,SAAAvvF,KAAAo7E,cAAA72E,QACAvE,KAAAmvF,eACAnvF,KAAA4uF,oBAAA58E,SAAA,aACAhS,KAAAqd,YAAArd,KAAA2uF,WAAA,QAAA,aAIAa,QAAA,SAAAj4E,GACAA,EAAAK,iBAEAL,EAAAC,UAAA3V,QAAA0tF,UACAvvF,KAAAgvF,eACAhvF,KAAA4uF,oBAAAt4E,YAAA,eAIAm5E,cAAA,WACAzvF,KAAAo7E,cAAA72E,MACAvE,KAAA4uF,oBAAAt4E,YAAA,aAEAtW,KAAA4uF,oBAAA58E,SAAA,cAIAm4C,QAAA,SAAA5yC,GACA,GAAAvX,KAAAo7E,cAAA,GAAA52E,kBAAA,CACA,IAAA+hC,EAAAvmC,KAAAo7E,cAAA,GAAA70C,eACAI,EAAA3mC,KAAAo7E,cAAA,GAAAz0C,aAEA3mC,KAAAqvF,iBACArvF,KAAAo7E,cAAA,GAAA52E,kBAAA+hC,EAAAI,QAEA3mC,KAAAqvF,mBAGA,CACApyE,SAAA,CACA6zC,cAAAxyD,EAAA6kB,QC7IAtkB,MAAAoxE,QAAApuE,QAAA4Z,KAAA7c,OAAA,CACA29B,YAAA,KAEA9d,OAAA,KACA4oB,iBAAA,KACAmpC,QAAA,KACAz5C,SAAA,KACA2yC,YAAA,KACA8hB,YAAA,KACAC,kBAAA,KACAC,iBAAA,KACAgE,eAAA,KACAC,WAAA,KACAC,YAAA,KACAC,qBAAA,KACAC,gBAAA,KACAC,YAAA,KACAC,YAAA,KACAC,wBAAA,KACAtE,QAAA,KACAuE,cAAA,EACAC,WAAA,KACAvE,kBAAA,KAEAhb,UAAA,EACAoD,WAAA,EACAoc,aAAA,EAEAC,kBAAA,EACAC,uBAAA,KACAC,kBAAA,UACAC,kBAAA,KACAC,YAAA,GACAC,aAAA,GACAC,qBAAA,CACAC,MAAA,CACAllD,MAAA,IACAre,OAAA,KAEAwjE,OAAA,CACAnlD,MAAA,IACAre,OAAA,OAIA0+C,QAAA,KACA1mE,IAAA,KACA0mF,OAAA,KAEA+E,aAAA,KACA1vE,UAAA,KAEA4oE,QAAA,KACAoC,qBAAA,KAEA2E,mBAAA,KAEAtE,aAAA,KACAC,iBAAA,KAEA1vE,KAAA,SAAAuf,GACAv8B,KAAAu8B,YAAAA,EAEAv8B,KAAA+wF,mBAAA/wF,KAAA0tF,aAAApmE,KAAAtnB,MAEAA,KAAAmwF,WAAA7xF,EAAA,WAAA,CAAAgD,KAAA,SAAA4D,KAAA,qBAAAC,MAAA,MACAnF,KAAA4rF,kBAAAttF,EAAA,UAGA0B,KAAAqpC,YAAAxqC,MAAA4V,gBAAA,0BAAA5V,MAAAoxE,QAAA8c,qBAGA1jD,kBACA,OAAArpC,KAAAysF,cAGAQ,sBACA,OAAAjtF,KAAA0sF,kBAGArjD,gBAAAqC,GACA,IAAAwhD,EAGAxhD,GAAA,GACAwhD,EAAAxhD,EACAA,GAAA7pC,QAAA8e,KAAA+qB,SAEAwhD,EAAAr8E,KAAAK,MAAAw6B,EAAA7pC,QAAA8e,KAAA+qB,SAIAwhD,EAAAruF,MAAAoxE,QAAAkd,qBAEAzhD,GADAwhD,EAAAruF,MAAAoxE,QAAAkd,oBACAtrF,QAAA8e,KAAA+qB,SAGA1rC,KAAAysF,aAAA/gD,EACA1rC,KAAA0sF,iBAAAQ,GAGAlsF,KAAA,WACA,IAAAhB,KAAA4wE,SAAA,CASA,GALA5wE,KAAA4wE,UAAA,EACA5wE,KAAAmX,QAAA,cAEA7Y,EAAAiI,SAAAmR,eAAAP,QAAA,SAEAnX,KAAAwwE,QAAA,CACAxwE,KAAAye,OAAAngB,EAAA,SAAA,CAAA2c,MAAA,qBAAAzM,SAAA3M,QAAA+Q,MACA5S,KAAAyrF,kBAAAntF,EAAA,SAAA,CAAA2c,MAAA,yBAAAzM,SAAA3M,QAAA+Q,MACA5S,KAAAqnC,iBAAA/oC,EAAA,SAAA,CAAA2c,MAAA,wBAAAzM,SAAA3M,QAAA+Q,MAEA,IAAAy6E,EAAA/uF,EAAA,YAAA,CAAA2c,MAAA,SAAAzM,SAAAxO,KAAAqnC,kBACArnC,KAAAwwE,QAAAlyE,EAAA,UAAA,CAAA2c,MAAA,cAAAzM,SAAAxO,KAAAqnC,kBACArnC,KAAAwrF,YAAAltF,EAAA,SAAA,CAAA2c,MAAA,kBAAAzM,SAAAxO,KAAAqnC,kBACA,IAAAimD,EAAAhvF,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,MACA3X,KAAAzE,MAAAc,EAAA,MAAA,mBACA6O,SAAA6+E,GAKA,GAJA/uF,EAAA,SAAA,CAAA2c,MAAA,cAAAzM,SAAA6+E,GACArtF,KAAA+2B,SAAAz4B,EAAA,SAAA,CAAA2c,MAAA,iBAAAC,MAAArc,MAAAc,EAAA,MAAA,YAAA6O,SAAA6+E,GACArtF,KAAA0pE,YAAAprE,EAAA,SAAA,CAAA2c,MAAA,cAAAzM,SAAA6+E,GAEAxuF,MAAAmyF,IAAA,CAIA,GAHAhxF,KAAA0vF,eAAApxF,EAAA,YAAA,CAAA2c,MAAA,sBAAAzM,SAAAxO,KAAAyrF,mBAGAzrF,KAAAu8B,YAAAroB,SAAAo3D,eAAAhrE,OAAA,EAAA,CACAN,KAAA2vF,WAAArxF,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,cACA3X,KAAAtD,KAAAu8B,YAAAroB,SAAAo3D,eAAA,GAAAr1D,QACAzH,SAAAxO,KAAA0vF,gBACA1vF,KAAA4vF,YAAAtxF,EAAA,SAAA,CAAA2c,MAAA,wBAAA6c,YAAA93B,KAAA2vF,YACA,MAAA59E,EAAAzT,EAAA,QAAA,CAAA2c,MAAA,WAAAzM,SAAAxO,KAAA4vF,aACA,IAAA39E,EAAAiQ,EACA,IAAA,IAAA7iB,EAAA,EAAAA,EAAAW,KAAAu8B,YAAAroB,SAAAo3D,eAAAhrE,OAAAjB,IACA4S,EAAA3T,EAAA,SAAAkQ,SAAAuD,GACAmQ,EAAA5jB,EAAA,OAAA,CACAyI,KAAA,CAAAmW,OAAA7d,GACAiE,KAAAtD,KAAAu8B,YAAAroB,SAAAo3D,eAAAjsE,GAAA4W,MACAgF,MAAA,IAAA5b,EAAA,MAAA,OACAmP,SAAAyD,GAEA,IAAApQ,QAAA8Y,QAAA3a,KAAA2vF,WAAA,CACApiC,eAAA/6B,IACAxyB,KAAAixF,aAAA3yF,EAAAk0B,GAAAzrB,KAAA,cAIAzI,EAAA,4BAAAkQ,SAAAxO,KAAA0vF,gBAIA1vF,KAAA6vF,qBAAAvxF,EAAA,SAAA,CACA2c,MAAA,0BACA4Z,KAAA,UACA1Z,aAAAtc,MAAAc,EAAA,MAAA,eACAm1B,SAAA,MACAtmB,SAAAxO,KAAA0vF,gBACApxF,EAAA,YAAA,CACAgD,KAAA,SACAuzB,KAAA,SACA5Z,MAAA,yCACAC,MAAArc,MAAAc,EAAA,MAAA,WACAwb,aAAAtc,MAAAc,EAAA,MAAA,WACAuxF,gBAAA,OACAp8D,SAAA,KACA/tB,KAAA,CACA2kC,MAAA,GACAre,OAAA,GACA8jE,WAAA,aAEA3iF,SAAAxO,KAAA6vF,sBACAvxF,EAAA,YAAA,CACAgD,KAAA,SACAuzB,KAAA,SACA5Z,MAAA,iCACAC,MAAArc,MAAAc,EAAA,MAAA,UACAwb,aAAAtc,MAAAc,EAAA,MAAA,UACAuxF,gBAAA,QACAp8D,SAAA,KACA/tB,KAAA,CACA2kC,MAAA,IACAre,OAAA,KACA8jE,WAAA,YAEA3iF,SAAAxO,KAAA6vF,sBACAvxF,EAAA,YAAA,CACAgD,KAAA,SACAuzB,KAAA,SACA5Z,MAAA,gCACAC,MAAArc,MAAAc,EAAA,MAAA,UACAwb,aAAAtc,MAAAc,EAAA,MAAA,UACAuxF,gBAAA,QACAp8D,SAAA,KACA/tB,KAAA,CACA2kC,MAAA,IACAre,OAAA,IACA8jE,WAAA,WAEA3iF,SAAAxO,KAAA6vF,sBAEAvxF,EAAA,4BAAAkQ,SAAAxO,KAAA0vF,gBACA,MAAA/+B,EAAAryD,EAAA,0BAAAkQ,SAAAxO,KAAA0vF,gBAGA1vF,KAAA8vF,gBAAAxxF,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,eACAkC,YAAA,SACA2xD,SAAA,GACAsiB,cAAA,GACA9tF,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAmiD,GACA3wD,KAAAqd,YAAArd,KAAA8vF,gBAAA,QAAA,qBAGA9vF,KAAA+vF,YAAAzxF,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,aACA3X,KAAAzE,MAAAc,EAAA,MAAA,WACAwd,YAAA,YACA3O,SAAAmiD,GACA3wD,KAAAqxF,oBACArxF,KAAAqd,YAAArd,KAAA+vF,YAAA,QAAA,KACA/vF,KAAA0tF,cAAA,GAAA,KAIA1tF,KAAAwwF,kBAAA3xF,MAAA4V,gBAAA,2BAGAzU,KAAAqd,YAAA/e,EAAA,OAAA0B,KAAA6vF,sBAAA,QAAA,oBAGA7vF,KAAAgwF,YAAA1xF,EAAA,SAAA,CACA2c,MAAA,mBAIAjb,KAAA0rF,iBAAAptF,EAAA,SAAA,CAAA2c,MAAA,wBAAAzM,SAAAxO,KAAAyrF,mBAEAzrF,KAAAgwF,aACAhwF,KAAA0rF,iBAAAn5E,OAAAvS,KAAAgwF,aAGAhwF,KAAAgqF,QAAA,IAAAnoF,QAAAq/E,SAAAlhF,KAAAwrF,YAAA,CACAtwD,KAAAr5B,QAAAsoF,OACA3oC,YAAAxhD,KAAAyhD,aAAAn6B,KAAAtnB,MACA2iF,OAAA3iF,KAAAoqF,QAAA9iE,KAAAtnB,MACA4hD,WAAA5hD,KAAAqqF,YAAA/iE,KAAAtnB,QAGAA,KAAAqd,YAAAiwE,EAAA,QAAA,SACAttF,KAAAqd,YAAArd,KAAA0pE,YAAA,QAAA,KACA1pE,KAAAu8B,YAAA8vC,cAAArsE,KAAA0pE,eAKA1pE,KAAAyzD,qBACAzzD,KAAAqd,YAAAxb,QAAA8e,KAAA,SAAA,sBAEA3gB,KAAAqnC,iBAAA/lB,IAAAziB,MAAA4Z,MAAAzY,KAAAitF,gBAAA,MACAjtF,KAAAyrF,kBAAAnqE,IAAAziB,MAAA6Z,OAAA1Y,KAAAutF,kBAGAvtF,KAAA+rF,OAAA,GACA,IAAAja,EAAAxzE,EAAA,mBAAAy1B,IAAAz1B,EAAA,2BAEA,GAAAwzE,EAAAxxE,OAAA,CAEAN,KAAAmwF,WAAApqC,aAAA+rB,EAAAh/C,IAAA,IAIA,IAAA,IAAAzzB,EAAA,EAAAA,EAAAyyE,EAAAxxE,OAAAjB,IAAA,CACA,IAAAgvE,EAAA/vE,EAAAwzE,EAAAzyE,IACAmuF,EAAAxtF,KAAAytF,UAAApf,GAIAruE,KAAA4rF,kBAAA9zD,YAAAu2C,GACAA,EAAA/iD,SACAtrB,KAAA4rF,kBAAAj1E,YAAA62E,GACAnf,EAAA7/D,SAAAxO,KAAAwwE,SAEAxwE,KAAA+rF,OAAArsF,KAAA,CACA2uE,OAAAA,EACAmf,OAAAA,KAKAxtF,KAAA0tF,eAEA1tF,KAAAu8B,YAAAjlB,GAAA,SAAAtX,KAAA+wF,oBACAlvF,QAAAyV,GAAAzY,MAAA2V,kBAAA,cAAAxU,KAAA+wF,oBACAlvF,QAAAyV,GAAAzY,MAAAmnC,iBAAA,OAAAhmC,KAAA+wF,oBAEAlyF,MAAAiiB,mBAAA25D,WAEAz6E,KAAAmX,QAAA,UAGAm6E,cAAA,WACA,OAAAtxF,KAAAu8B,YAAAroB,SAAAo3D,eAAAtrE,KAAAowF,eAGAiB,kBAAA,WACA,MAAAn0E,EAAAld,KAAAsxF,gBACA,cAAAp0E,EAAAq0E,SAAAr0E,EAAAq0E,QAGAvxF,KAAA+vF,YAAA/9E,SAAA,UAFAhS,KAAA+vF,YAAAz5E,YAAA,WAMA26E,aAAA,SAAA5xF,GACAW,KAAAowF,aAAA/wF,EACAW,KAAA2vF,WAAArsF,KAAAtD,KAAAu8B,YAAAroB,SAAAo3D,eAAAjsE,GAAA4W,OACAjW,KAAA4vF,YAAA95E,KAAA,SAAAQ,YAAA,OACAtW,KAAA4vF,YAAA95E,KAAA,KAAAzD,GAAAhT,GAAA2S,SAAA,OACAhS,KAAA0tF,cAAA,GACA1tF,KAAAqxF,oBACArxF,KAAAmX,QAAA,eAAA,CACAq6E,cAAAxxF,KAAAu8B,YAAAroB,SAAAo3D,eAAAjsE,MAIAo0D,mBAAA,WAEAzzD,KAAAqpC,YAAArpC,KAAAqpC,YAGArpC,KAAA8tF,gBAGAH,QAAA,WACA3tF,KAAA4wE,WAAA5wE,KAAAg0E,YAIA11E,EAAA,QAAA0T,SAAA,YACAhS,KAAAye,OAAAjG,SAAA,UAEAxY,KAAAqnC,iBAAAzK,OAAApkB,SAAA,QAAAL,YAAA,EAAA,OAAA,KACAnY,KAAAmX,QAAA,WACAtV,QAAA8e,KAAAxJ,QAAA,YAGAnX,KAAAyrF,kBAAA7uD,OAAApkB,SAAA,QAAAG,aAAA,EAAA,OAAA,KACA3Y,KAAAqd,YAAAxb,QAAA+Q,KAAA,SAAA,SAAA2E,GACAA,EAAAC,UAAA3V,QAAA0c,SACAve,KAAAiB,aAKAjB,KAAAg0E,WAAA,IAGA/yE,MAAA,WACAjB,KAAA4wE,UAAA5wE,KAAAg0E,YAIAh0E,KAAAmX,QAAA,eAEA7Y,EAAA,QAAAgY,YAAA,YAEAtW,KAAA4qB,eAAA/oB,QAAA8e,KAAA,UACA3gB,KAAA4qB,eAAA/oB,QAAA+Q,KAAA,SAGA5S,KAAAmwF,WAAA7kE,SACAtrB,KAAAgtF,iBAEAhtF,KAAAye,OAAAm1C,MAAA,KAAAp7C,SAAA,WAEAxY,KAAAqnC,iBAAA7uB,SAAA,QAAAL,aAAAnY,KAAAitF,gBAAA,OAAA,KACA,IAAA,IAAA5tF,EAAA,EAAAA,EAAAW,KAAA+rF,OAAAzrF,OAAAjB,IACAW,KAAA+rF,OAAA1sF,GAAA0uF,UAAA3yE,SAEApb,KAAAqnC,iBAAAngB,OACAlnB,KAAAmX,QAAA,cAGAnX,KAAAyrF,kBAAAjzE,SAAA,QAAAG,cAAA3Y,KAAAutF,iBAAA,OAAA,KACAvtF,KAAAyrF,kBAAAvkE,OACAlnB,KAAAyxF,uBAGAzxF,KAAAu8B,YAAAlb,IAAA,SAAArhB,KAAA+wF,oBACAlvF,QAAAwf,IAAAxiB,MAAA2V,kBAAA,cAAAxU,KAAA+wF,oBACAlvF,QAAAwf,IAAAxiB,MAAAmnC,iBAAA,OAAAhmC,KAAA+wF,oBAEAlyF,MAAAiiB,mBAAA25D,WAEAz6E,KAAA4wE,UAAA,EACA5wE,KAAAg0E,WAAA,EACAh0E,KAAAmX,QAAA,WAGA61E,eAAA,WACA,IAAA,IAAA3tF,EAAA,EAAAA,EAAAW,KAAA+rF,OAAAzrF,OAAAjB,IAAA,CACA,IAAA2uF,EAAAhuF,KAAA+rF,OAAA1sF,GACA2uF,EAAAD,UAAA/tF,KAAAytF,UAAAO,EAAA3f,QAIAruE,KAAA4rF,kBAAA9zD,YAAAk2D,EAAA3f,QACA2f,EAAA3f,OAAA/iD,SACAtrB,KAAA4rF,kBAAAj1E,YAAAq3E,EAAAD,WACAC,EAAAR,OAAA72E,YAAAq3E,EAAA3f,QAGAxsE,QAAA8e,KAAAxJ,QAAA,UACAtV,QAAA0Z,KAAApE,QAAA,WAGAo2E,eAAA,WACA,OAAA1rF,QAAA8e,KAAA+qB,QAAA1rC,KAAAitF,iBAGAa,aAAA,WACA9tF,KAAAqnC,iBAAA/lB,IAAA,QAAAthB,KAAAitF,gBAAA,MACAjtF,KAAAyrF,kBAAA//C,MAAA1rC,KAAAutF,kBACAvtF,KAAA0xF,0BACA1xF,KAAA2xF,uBAIAC,kBAAA,WACA,OAAA,IAAA/yF,MAAAgzF,6BAGAnE,aAAA,SAAAoE,EAAAz6B,GACA,IAAAr3D,KAAA4wE,SACA,OAAA,EAIAkhB,GAAA,IAAAA,EAEA,MAAA50E,EAAAld,KAAAsxF,gBACAC,KACAl6B,GACAr3D,KAAA+rE,WAAA/rE,KAAA+rE,QAAA/rE,KAAAu8B,YAAAroB,SAAA63D,UACA/rE,KAAA2rF,UACAmG,QACA,IAAA50E,EAAAq0E,UACAr0E,EAAAq0E,SAGAvxF,KAAAmX,QAAA,qBAAA,CACAq6E,cAAAt0E,EACA40E,YAAAA,EACAP,QAAAA,IAIAA,EAKAvxF,KAAAu8B,YAAAozC,uBAAAzyD,EAAA7X,IAAA,wBAAAmE,KAAAnE,IAEA,IAAA0sF,EACAD,EACA9xF,KAAAohB,UAAA,KACAphB,KAAAkwF,cAAAlwF,KAAA2rF,UACA3rF,KAAA4xF,qBACA5xF,KAAA8wF,aAAA9wF,KAAA2rF,QAAAt+D,SACArtB,KAAAohB,UAAAphB,KAAA0rF,iBAAAtqE,cAEA2wE,EAAAlzF,MAAAyR,WAAAjL,GACA0sF,GAAA/xF,KAAA2rF,QAAA,GAAAsC,gBACAjuF,KAAAohB,UAAA9iB,EAAA0B,KAAA2rF,QAAA,GAAAsC,cAAA1nF,UAAA6a,eAKAphB,KAAAkwF,cAAA,EAEA,IAAAvE,EAAArtF,EAAA,YAAA,CACA2c,MAAA,aACA+2E,YAAA,EACAt/E,IAAArN,IAGArF,KAAA2rF,QACA3rF,KAAA2rF,QAAAh1E,YAAAg1E,GAEAA,EAAAn9E,SAAAxO,KAAA0rF,kBAKA1rF,KAAA0xF,2BACA1xF,KAAAiwF,0BACAjwF,KAAAiwF,wBAAA3xF,EAAA,SAAA,CACA2c,MAAA,gCAEA0wE,EAAAsG,KAAA,mDACAjyF,KAAAiwF,wBAAAjwF,KAAA0rF,iBAAA51E,KAAA,kCAKA9V,KAAA4xF,qBACAE,GAAA,OAAA9xF,KAAA8wF,eACAnF,EAAAt+D,OAAArtB,KAAA8wF,cACA9wF,KAAA0rF,iBAAAtqE,UAAAphB,KAAAohB,YAGA8wE,aAAA5zF,EAAAM,OAAA,CACAuzF,aAAA,EAEAC,WAAA,EACAC,OAAAC,IACAtyF,KAAAkwF,cAAA,EACAlwF,KAAA8wF,aAAA,KACA9wF,KAAAohB,UAAA,KACAkxE,EAAAF,UAAA,OAEAvzF,MAAAgzF,6BAAA,IAAAlG,EAAA,KAEAA,EAAAr0E,GAAA,OAAA,KACAtX,KAAAkwF,cAAA,GACA4B,GAAAC,GAAA,OAAA/xF,KAAAohB,WACA9iB,EAAAqtF,EAAA,GAAAsC,cAAA1nF,UAAA6a,UAAAphB,KAAAohB,aAKAphB,KAAAqF,IAAAA,EACArF,KAAA2rF,QAAAA,EAEA3rF,KAAA0xF,0BACA1xF,KAAA2xF,sBAGA3xF,KAAAmX,QAAA,oBAAA,CACAq6E,cAAAxxF,KAAAu8B,YAAAroB,SAAAo3D,eAAAtrE,KAAAowF,cACAzE,QAAA3rF,KAAA2rF,UAGA3rF,KAAA2tF,YAtFA3tF,KAAA2tF,WA0FA+D,uBAAA,WACA,MAAA,YAAA1xF,KAAAuwF,mBAGAgC,iBAAA,SAAAh7E,GACA,GAAAvX,KAAAqwF,iBACA,OAAA,EAGArwF,KAAA0rF,iBAAAp1E,YAAA,kCAEA,MAAA8D,EAAA9b,EAAAiZ,EAAA2F,QACAs1E,EAAAp4E,EAAArT,KAAA,cAGA,GAAAyrF,IAAAxyF,KAAAuwF,kBACA,OAAA,EAIAvwF,KAAAuwF,kBAAAiC,EACAxyF,KAAAywF,YAAAr2E,EAAArT,KAAA,SACA/G,KAAA0wF,aAAAt2E,EAAArT,KAAA,UAGA/G,KAAA6vF,qBAAA/5E,KAAA,QACAQ,YAAA,UACAlI,KAAA,gBAAA,SAEAgM,EACApI,SAAA,UACA5D,KAAA,gBAAA,QAGA,YAAApO,KAAAuwF,kBACAvwF,KAAAyxF,sBAEAzxF,KAAA0rF,iBAAA15E,SAAA,iCACAhS,KAAA0tF,cAAA,GAAA,GACA1tF,KAAA2xF,wBAIAc,kBAAA,WAEA,GAAAzyF,KAAAqwF,mBAAArwF,KAAA0xF,yBACA,OAAA,EAIA1xF,KAAAwwF,mBAAA,aAAAxwF,KAAAwwF,kBAGAxwF,KAAAwwF,kBAAA,WAFAxwF,KAAAwwF,kBAAA,YAMA3xF,MAAAiW,gBAAA,0BAAA9U,KAAAwwF,mBAGAxwF,KAAA0rF,iBAAA15E,SAAA,kCAGAhS,KAAA2xF,uBAGAA,oBAAA,WAEA,GAAA3xF,KAAAqwF,iBACA,OAAA,EAGArwF,KAAAqwF,kBAAA,EAGArwF,KAAA8vF,gBACAx5E,YAAA,YACAwC,WAAA,YACAA,WAAA,eAGA9Y,KAAA0rF,iBAAA15E,SAAA,2CAGA,WAAAhS,KAAAuwF,kBACAvwF,KAAA0rF,iBAAA15E,SAAA,+BAEAhS,KAAA0rF,iBAAAp1E,YAAA,+BAIA,IAAAo8E,EAAA,EACAC,EAAA,EACAt8C,EAAA,EACAu8C,EAAA5yF,KAAAyrF,kBAAAp+D,SAAA,GAAA,GACAwlE,EAAA7yF,KAAAyrF,kBAAA//C,QAAA,GACAonD,EAAA9yF,KAAA2wF,qBAAA3wF,KAAAuwF,mBAAAljE,OACA0lE,EAAA/yF,KAAA2wF,qBAAA3wF,KAAAuwF,mBAAA7kD,MAEA,cAAA1rC,KAAAwwF,mBACAqC,EAAAC,IACAJ,EAAAG,EAAAC,GAEAF,EAAAG,IACAJ,EAAAC,EAAAG,KAGAH,EAAAE,IACAJ,EAAAE,EAAAE,GAEAD,EAAAE,IACAJ,EAAAE,EAAAE,IAIA18C,EAAAq8C,EACAC,EAAAD,IACAr8C,EAAAs8C,GAIA,MAAAt6C,GAAA,IAAAhC,EAAA,EACA28C,EAAA,cAAAhzF,KAAAwwF,kBAAA,SAAA,OAGAxwF,KAAAgwF,YAAA1uE,IAAA,CACAoqB,MAAA1rC,KAAA2wF,qBAAA3wF,KAAAuwF,mBAAA7kD,MAAA,KACAre,OAAArtB,KAAA2wF,qBAAA3wF,KAAAuwF,mBAAAljE,OAAA,KACAqgC,UAAA,SAAArX,EAAA,eAAAgC,EAAA,MAAAA,EAAA,aAAA26C,EAAA,MAIAhzF,KAAAswF,wBACAroE,aAAAjoB,KAAAswF,wBAEAtwF,KAAAswF,uBAAApoE,WAAA,KAEA,cAAAloB,KAAAwwF,kBACAxwF,KAAAiwF,wBAAA3uE,IAAA,CACAoqB,MAAA1rC,KAAA0wF,aAAA,KACArjE,OAAArtB,KAAAywF,YAAA,KACA/iC,UAAA,SAAArX,EAAA,eAAAgC,EAAA,MAAAA,EAAA,KACA46C,UAAA,EACAC,WAAA,IAAA,GAAA78C,EAAA,OAGAr2C,KAAAiwF,wBAAA3uE,IAAA,CACAoqB,MAAA1rC,KAAAywF,YAAA,KACApjE,OAAArtB,KAAA0wF,aAAA,KACAhjC,UAAA,SAAArX,EAAA,eAAAgC,EAAA,MAAAA,EAAA,KACA46C,UAAA,IAAA,GAAA58C,EAAA,KACA68C,WAAA,IAKAlzF,KAAA0rF,iBAAAp1E,YAAA,kCACAtW,KAAA0rF,iBAAAp1E,YAAA,iCACAtW,KAAAqwF,kBAAA,GAEA,MAGAoB,mBAAA,WAEAzxF,KAAAswF,wBACAroE,aAAAjoB,KAAAswF,wBAEAtwF,KAAAuwF,kBAAA,UACAvwF,KAAA6vF,qBAAA/5E,KAAA,QACAQ,YAAA,UACAlI,KAAA,gBAAA,SACApO,KAAA6vF,qBAAA/5E,KAAA,gCACA9D,SAAA,UACA5D,KAAA,gBAAA,QACApO,KAAA8vF,gBACA99E,SAAA,YACA5D,KAAA,WAAA,IACAA,KAAA,cAAA,IACApO,KAAA0rF,iBAAAp1E,YAAA,kCACAtW,KAAA0rF,iBAAAp1E,YAAA,2CACAtW,KAAA0rF,iBAAAp1E,YAAA,+BAGAtW,KAAAiwF,0BAEAjwF,KAAA4xF,qBACA5xF,KAAA2rF,QAAA,GAAAwH,cAAAC,kBAEApzF,KAAAiwF,wBAAA3kE,SACAtrB,KAAAiwF,wBAAA,KACAjwF,KAAA2rF,QAAA,KACA3rF,KAAA0tF,cAAA,GAAA,IAGA1tF,KAAAqwF,kBAAA,GAGA5C,UAAA,SAAApf,GACA,IAAAmf,EAAAnf,EAAArwC,QAYA,OATAn8B,QAAA6sF,gBAAArgB,EAAAmf,GAGAA,EAAAp/E,KAAA,KAAA,IACAo/E,EAAA13E,KAAA,QAAA1H,KAAA,KAAA,IAGAo/E,EAAA13E,KAAA,UAAAuiB,KAAA,YAAA,GAEAm1D,GAGA/rC,aAAA,WACAzhD,KAAAosF,qBAAApsF,KAAAitF,gBACAjtF,KAAAyrF,kBAAAz5E,SAAA,aAGAo4E,QAAA,WACA,QAAAvrF,MAAA0Z,YACAvY,KAAAqpC,YAAArpC,KAAAosF,qBAAApsF,KAAAgqF,QAAAc,WAEA9qF,KAAAqpC,YAAArpC,KAAAosF,qBAAApsF,KAAAgqF,QAAAc,WAGA9qF,KAAA8tF,gBAGAzD,YAAA,WACArqF,KAAAyrF,kBAAAn1E,YAAA,YACAzX,MAAAiW,gBAAA,0BAAA9U,KAAAqpC,eAEA,CACA0jD,mBAAA,IACAI,mBAAA,MC1xBAtuF,MAAAwnC,iBAAAxkC,QAAAi9B,MAAAlgC,OAAA,CACAgqC,QAAA,KACA7R,SAAA,KACAS,cAAA,KACAl2B,KAAA,KACAumD,OAAA,KACAlD,UAAA,EAMA3nC,KAAA,SAAA4rB,EAAApR,EAAAtjB,GAKA,IAJAA,EAAA5V,EAAAM,OAAAoB,KAAAqzF,gBAAAn/E,IAEA+d,OAAAjyB,KAAAszF,QAAAhsE,KAAAtnB,MAEAnB,MAAAwnC,iBAAA2iB,aAAA,CACA,IAAAuqC,EAAA10F,MAAAwnC,iBAAA2iB,aAOA,OALAuqC,EAAA3qD,UAAAA,IACA2qD,EAAAC,UAAA5qD,EAAA10B,EAAAiyB,cAAAjyB,EAAAkyB,gBACAmtD,EAAA/7D,cAAAA,GAGAx3B,KAAAie,UAGApf,MAAAwnC,iBAAA2iB,aAAAhpD,KACAA,KAAAw3B,cAAAA,EAEAx3B,KAAA8S,WAAAxU,EAAA,6CAAAkQ,SAAA3M,QAAA+Q,MAEA5S,KAAA6iB,KAAA7iB,KAAA8S,WAAAxU,EAAAM,OAAA,CACA0hC,WAAA,GACApsB,IAGAlU,KAAA8S,aACA9S,KAAA8S,WAAA0F,SAAA,QACAxY,KAAA8S,WAAA8pB,OAAAtb,IAAA,UAAA,GAEAthB,KAAAye,OAAAjG,SAAA,QACAxY,KAAAye,OAAAme,OAAAtb,IAAA,UAAA,IAGAthB,KAAAwzF,UAAA5qD,EAAA10B,EAAAiyB,cAAAjyB,EAAAkyB,iBAOAktD,QAAA,WAQA,OAPAz0F,MAAAwnC,iBAAA2iB,aAAA,KACAhpD,KAAAw3B,eACAx3B,KAAAw3B,cAAAi8D,UAAAzzF,KAAAw3B,cAAA0xB,cAGAlpD,KAAAye,OAAArD,SAEApb,KAAAie,WAOAgrC,aAAA,WACA,IAAAsqC,EAAA10F,MAAAwnC,iBAAA2iB,aAQA,OANAuqC,EAAArsE,OACAqsE,EAAA90E,OAAArD,SACAm4E,EAAAt1E,UAEApf,MAAAwnC,iBAAA2iB,aAAA,MAEA,GASAwqC,UAAA,SAAA5qD,EAAAzC,EAAAC,GACApmC,KAAA4oC,QAAAA,EAEA5oC,KAAA8S,WAAA4gF,QACA1zF,KAAA6nD,QAAA,EAEA7nD,KAAA2zF,cAAA,KACA3zF,KAAA4zF,aAAA,KAEA,IAAAC,EAAA,IAAAhyF,QAAA8e,KAAA0M,SACAymE,EAAAjjF,KAAAujB,IAAAy/D,EAAA,EAAA,EAAAhyF,QAAA8e,KAAA+qB,QAAA,EAAA1rC,KAAAkU,SAAA6/E,WAGA,GAFAF,EAAAC,EAAA,EAAA,EAEA3tD,GAAAC,EAAA,CACA,IAAAwJ,EAAAzJ,EAAAC,EACA0tD,EAAAjjF,KAAAujB,IAAA+R,EAAAtkC,QAAA8e,KAAA+qB,QAAA,EAAA1rC,KAAAkU,SAAA6/E,YAEAD,GADAD,EAAAhjF,KAAAujB,IAAA0/D,EAAAlkD,EAAA/tC,QAAA8e,KAAA0M,SAAA,EAAArtB,KAAAkU,SAAA6/E,YACAnkD,GAGA/+B,KAAAujB,IAAA+R,EAAAtkC,QAAA8e,KAAA+qB,QAAA,EAAA1rC,KAAAkU,SAAA6/E,aAEAF,GADAC,EAAAjjF,KAAAujB,IAAA+R,EAAAtkC,QAAA8e,KAAA+qB,QAAA,EAAA1rC,KAAAkU,SAAA6/E,YACAnkD,GAIA5vC,KAAAg0F,iBAAAF,EAAAD,GAEA7zF,KAAA+2B,SAAAz4B,EAAA,2CAAAkQ,SAAAxO,KAAA8S,YACA,IAAAsmB,EAAAp5B,KAAA8S,WAAAua,SAAA,EAAArtB,KAAA+2B,SAAA1J,SAAA,EAAA,KACA5U,EAAAzY,KAAA8S,WAAA44B,QAAA,EAAA1rC,KAAA+2B,SAAA2U,QAAA,EAAA,KAEA1rC,KAAA+2B,SAAAzV,IAAA,CAAA7I,KAAAA,EAAA2gB,IAAAA,EAAAoF,SAAA,aACAx+B,KAAA2kD,YAEA9lD,MAAAgI,kBAAA,sBAAA,CAAA+hC,QAAAA,EAAA+b,UAAA3kD,KAAA2kD,WAAA,CAAAj6C,EAAA9C,KAKA,GAJA5H,KAAA8S,WAAAwD,YAAA,WACAtW,KAAA+2B,SAAA3b,SACApb,KAAA6nD,QAAA,EAEA,YAAAjgD,EACA,GAAA8C,EAAAhD,QAAA,CACA,GAAAgD,EAAAi6C,WAAA3kD,KAAA2kD,UACA,OAGA,IAAAj6C,EAAAupF,YAGA,OAFAj0F,KAAA8S,WAAAd,SAAA,cACAhS,KAAA8S,WAAAP,OAAAjU,EAAA,OAAA,CAAAgF,KAAAzE,MAAAc,EAAA,MAAA,4BAIAK,KAAA8S,WAAAwD,YAAA,SACAtW,KAAA8S,WAAAP,OAAA7H,EAAAupF,aACAp1F,MAAAqT,eAAAxH,EAAAsW,UACAniB,MAAA2T,eAAA9H,EAAAuW,eAEAhZ,MAAAyC,EAAA/C,OAEA3H,KAAAknB,UAYA8sE,iBAAA,SAAAF,EAAAD,GACA7zF,KAAA8S,WAAAwO,IAAA,CACAoqB,MAAAooD,EACAjmD,YAAAimD,EACAI,YAAAJ,EACAzmE,OAAAwmE,EACA/lD,aAAA+lD,EACAv9B,aAAAu9B,EACAz6D,KAAAv3B,QAAA8e,KAAA0M,SAAAwmE,GAAA,EACAp7E,MAAA5W,QAAA8e,KAAA+qB,QAAAooD,GAAA,MAGA,CACAT,gBAAA,CACAltD,cAAA,KACAC,eAAA,QC5KAvnC,MAAAonD,YAAApkD,QAAA4Z,KAAA7c,OAAA,CACA4gD,aAAA,KACA20C,kBAAA,KACAC,mBAAA,KAEAC,WAAA,EACAC,oBAAA,EACAC,eAAA,EAEAv3E,KAAA,SAAApH,EAAA4+E,GACAA,IACAx0F,KAAAu0F,eAAA,GAGAv0F,KAAAw/C,aAAAlhD,EAAA,6CAAAkQ,SAAAoH,GACA5V,KAAAm0F,kBAAA71F,EAAA,oCAAAkQ,SAAAxO,KAAAw/C,cACAx/C,KAAAo0F,mBAAA91F,EAAA,6CAAAw5B,YAAA93B,KAAAw/C,cAEAx/C,KAAAijD,oBAMAA,iBAAA,WAGAjjD,KAAA8nD,sBAAA,KACA9nD,KAAAw/C,aAAAxtC,SAAA,WAGAhS,KAAAkjD,aAAA,GACAljD,KAAAy0F,sBAAA,GACAz0F,KAAAo0F,mBAAA11F,KAAA,IAEAsB,KAAAu0F,eACAv0F,KAAAw/C,aAAAxtC,SAAA,eAOA6xC,gBAAA,WACA7jD,KAAAw/C,aAAAk1C,OAAA,OAAA,IAAA,KACA10F,KAAAw/C,aAAAxtC,SAAA,UAAA0iF,OAAA,EAAA,EAAAp2F,EAAA6kB,QAEAnjB,KAAAo0F,mBAAAM,OAAA,OAAA,IAAA,KACA10F,KAAAo0F,mBAAApiF,SAAA,UAAA0iF,OAAA,EAAA,EAAAp2F,EAAA6kB,SAIAggC,gBAAA,WACAnjD,KAAAw/C,aAAAlpC,YAAA,UACAtW,KAAAo0F,mBAAA99E,YAAA,WAGA4sC,aAAA,SAAAztB,GACAz1B,KAAAq0F,WAAA5+D,GAGAk/D,mBAAA,SAAAl/D,GACAz1B,KAAAq0F,YAAA5+D,GAGAg/D,sBAAA,SAAAh/D,GACAz1B,KAAAs0F,oBAAA7+D,GAGA+yB,4BAAA,SAAA/yB,GACAz1B,KAAAs0F,qBAAA7+D,GAGAgzB,kBAAA,WAEAzoD,KAAAq0F,WAAAxjF,KAAAob,IAAAjsB,KAAAq0F,WAAA,GAEA,IAAA3oD,EAAA76B,KAAAujB,IAAA,IAAAvjB,KAAAK,MAAA,IAAAlR,KAAAs0F,oBAAAt0F,KAAAq0F,aAEAr0F,KAAA8nD,sBAAApc,GAEA1rC,KAAAu0F,eACAv0F,KAAAo0F,mBAAA11F,KAAAsB,KAAAs0F,oBAAA,MAAAt0F,KAAAq0F,aAIAvsC,sBAAA,SAAA8sC,EAAAvhD,GACA,IAAAuhD,EACA50F,KAAAw/C,aAAAxtC,SAAA,YAEAhS,KAAAw/C,aAAAlpC,YAAA,WAEA+8B,EACArzC,KAAAm0F,kBAAA37E,SAAA,QAAAA,SAAA,CAAAkzB,MAAAkpD,EAAA,KAAA,QAEA50F,KAAAm0F,kBAAA37E,SAAA,QAAAkzB,MAAAkpD,EAAA,SC/FA/1F,MAAAmnD,cAAAnkD,QAAA4Z,KAAA7c,OAAA,CACAmzB,MAAA,KACA8iE,mBAAA,KACAC,QAAA,KACAC,iCAAA,KACAC,gCAAA,KACAC,6BAAA,KACAC,cAAA,KAEAC,SAAA,GACAC,qBAAA92F,EAAA6kB,KACAkyE,uBAAA,GACAC,gBAAA,EAEA9xC,aAAA,WACAxjD,KAAAm1F,SAAA,GACAn1F,KAAAo1F,qBAAA92F,EAAA6kB,KACAnjB,KAAAq1F,uBAAA,GACAr1F,KAAAs1F,gBAAA,GAGA5xC,UAAA,SAAAE,GACA5jD,KAAAm1F,SAAAz1F,KAAAkkD,IAGAI,eAAA,WACA,OAAAhkD,KAAAm1F,SAAA70F,QAGA4jD,iBAAA,SAAAl9C,GACAhH,KAAAo1F,qBAAApuF,EACAhH,KAAAq1F,uBAAA,GACAr1F,KAAAs1F,gBAAA,EAEAt1F,KAAAu1F,0BAGAA,uBAAA,WACA,IAAA3xC,EAAA5jD,KAAAm1F,SAAAn1F,KAAAs1F,iBAAA1xC,OACA4xC,EAAAx1F,KAAAm1F,SAAA70F,QAAAN,KAAAs1F,gBAAA,GAEAt1F,KAAAy1F,YAAA7xC,EAAA/jD,QAAA+jD,EAAAtD,QAAAtgD,KAAA01F,4BAAApuE,KAAAtnB,MAAAw1F,IAUAE,4BAAA,SAAArxC,EAAAsxC,GACA,IAAA/xC,EAAA5jD,KAAAm1F,SAAAn1F,KAAAs1F,iBACAE,EAAAx1F,KAAAm1F,SAAA70F,QAAAN,KAAAs1F,gBAAA,GAGAM,EAAAt3F,EAAAM,OAAAglD,EAAA,CAAAS,OAAAA,IACArkD,KAAAq1F,uBAAA31F,KAAAk2F,GAGAJ,GAEAx1F,KAAAs1F,kBAGAK,EACA31F,KAAA01F,4BAAArxC,GAAA,GAGArkD,KAAAu1F,0BAIA,mBAAAv1F,KAAAo1F,sBACAp1F,KAAAo1F,qBAAAp1F,KAAAq1F,yBAaAI,YAAA,SAAA51F,EAAAygD,EAAAt5C,EAAA6uF,GACA71F,KAAA81F,gBAAA9uF,EAEA,OAAAhH,KAAA+xB,QACA/xB,KAAA+xB,MAAA,IAAAlwB,QAAAi9B,MAAA,CAAA/B,kBAAA,KAGA,OAAA/8B,KAAA60F,qBACA70F,KAAA60F,mBAAAv2F,EAAA,iDAAA0T,WAAAxD,SAAA3M,QAAA+Q,OAGA5S,KAAA80F,QAAAx2F,EAAA,4BAAAkQ,SAAAxO,KAAA60F,mBAAAnB,SAEA1zF,KAAA+1F,eAAAz3F,EAAA,2BAAAkQ,SAAAxO,KAAA80F,SAEA90F,KAAAg2F,eAAA13F,EAAA,+BAAAkQ,SAAAxO,KAAA80F,SAEA90F,KAAA+0F,iCAAAz2F,EAAA,4CAAAkQ,SAAAxO,KAAA80F,SAAA5tE,OACAlnB,KAAAg1F,gCAAA12F,EAAA,4BAAAkQ,SAAAxO,KAAA+0F,kCACA/0F,KAAAi1F,6BAAA32F,EAAA,WAAAkQ,SAAAxO,KAAA+0F,kCAEA/0F,KAAAi2F,eAAA33F,EAAA,gCAAAkQ,SAAAxO,KAAA80F,SAEA90F,KAAA+xB,MAAA0zC,aAAAzlE,KAAA60F,oBAEA70F,KAAA+1F,eAAAr3F,KAAAmB,GAEA,IAAA4c,EAAAne,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,MACA3X,KAAAzE,MAAAc,EAAA,MAAA,YACA6O,SAAAxO,KAAAi2F,gBACAza,EAAAl9E,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,sBACA3X,KAAAzE,MAAAc,EAAA,MAAA,QACA6O,SAAAxO,KAAAi2F,gBAEA,IAAA,IAAA52F,EAAA,EAAAA,EAAAihD,EAAAhgD,OAAAjB,IAAA,CACA,IACA62F,EADA53F,EAAA,8DAAAgiD,EAAAjhD,GAAA8F,MAAA,OAAAm7C,EAAAjhD,GAAA6b,MAAA,kBAAA1M,SAAAxO,KAAAg2F,gBACAlgF,KAAA,SAEA9V,KAAAqd,YAAA64E,EAAA,SAAA,WACA1a,EAAAllE,YAAA,eAIAtW,KAAAqd,YAAAm+D,EAAA,YAAA,SAAAjkE,GACA,IAAA8sC,EAAA/lD,EAAAiZ,EAAA8C,eAAA0W,QAAA,UAAAjb,KAAA,oCAAAvR,MACAoxF,EAAA31F,KAAAg1F,gCAAA38D,KAAA,WAEAr4B,KAAAm2F,oBAAA9xC,EAAAsxC,MAGA31F,KAAAqd,YAAAZ,EAAA,YAAA,WACA,IACAk5E,EAAA31F,KAAAg1F,gCAAA38D,KAAA,WAEAr4B,KAAAm2F,oBAHA,SAGAR,MAGAE,IACA71F,KAAA+0F,iCAAAn4D,OACA58B,KAAAi1F,6BAAAv2F,KAAA,IAAAG,MAAAc,EAAA,MAAA,kDAAA,CAAA6B,OAAAq0F,MAGA71F,KAAA+xB,MAAA6K,OACA58B,KAAA+xB,MAAAnH,eAAA/oB,QAAAi9B,MAAArgB,OAAA,SACAze,KAAAqd,YAAAxb,QAAAi9B,MAAArgB,OAAA,QAAA,kBAUA03E,oBAAA,SAAA9xC,EAAAsxC,GACA31F,KAAA80F,QAAAsB,QAAA,OAAA,KACAp2F,KAAA+xB,MAAA7K,OACAlnB,KAAA81F,gBAAAzxC,EAAAsxC,MAOAU,cAAA,WACAr2F,KAAAm2F,oBAAA,UAAA,MCrLA,SAAA73F,GAMAO,MAAA6hF,YAAA7+E,QAAA4Z,KAAA7c,OAAA,CACAw1B,IAAA,KACAnI,IAAA,KACAqqE,WAAA,KACAnxF,MAAA,KAEA2N,WAAA,KACAq0B,SAAA,KAEAnqB,KAAA,SAAA7X,EAAA+O,GACAlU,KAAA8Z,YAAA5F,EAAArV,MAAA6hF,YAAAzjE,UAEAjd,KAAA8S,WAAAxU,EAAA,SAAA,CACA2c,MAAA,eACA4Z,KAAA,SACAC,SAAA,IAGA90B,KAAAuxF,UACAvxF,KAAA4zC,SAAAzuC,GAAA,GAEAnF,KAAAqd,YAAArd,KAAA8S,WAAA,UAAAyE,IACA,OAAAA,EAAAC,SACA,KAAA3V,QAAAmpF,OACAhrF,KAAA4zC,SAAA5zC,KAAAmF,MAAAnF,KAAAkU,SAAAysE,MACAppE,EAAAK,iBACA,MACA,KAAA/V,QAAAqpF,SACAlrF,KAAA4zC,SAAA5zC,KAAAmF,MAAAnF,KAAAkU,SAAAysE,MACAppE,EAAAK,iBACA,MACA,KAAA/V,QAAAugC,UACA,QAAAvjC,MAAA0Z,YACAvY,KAAA4zC,SAAA5zC,KAAAmF,MAAAnF,KAAAkU,SAAAysE,MAEA3gF,KAAA4zC,SAAA5zC,KAAAmF,MAAAnF,KAAAkU,SAAAysE,MAEAppE,EAAAK,iBACA,MACA,KAAA/V,QAAAsgC,SACA,QAAAtjC,MAAA0Z,YACAvY,KAAA4zC,SAAA5zC,KAAAmF,MAAAnF,KAAAkU,SAAAysE,MAEA3gF,KAAA4zC,SAAA5zC,KAAAmF,MAAAnF,KAAAkU,SAAAysE,MAEAppE,EAAAK,qBAMA25E,QAAA,WAMA,GAJAvxF,KAAAo0B,IAAAp0B,KAAAu2F,OACAv2F,KAAAisB,IAAAjsB,KAAAw2F,OACAx2F,KAAAs2F,YAAAt2F,KAAAisB,IAAAjsB,KAAAo0B,KAAAp0B,KAAAkU,SAAAysE,MAEA8V,OAAAC,UAAA12F,KAAAs2F,YACA,KAAA,6BAGAt2F,KAAAmnC,UACAnnC,KAAAmnC,SAAA/rB,SAGApb,KAAA8S,WAAA1E,KAAA,gBAAApO,KAAAo0B,KACAp0B,KAAA8S,WAAA1E,KAAA,gBAAApO,KAAAisB,KACAjsB,KAAAmnC,SAAA7oC,IAGA,IAAA,IAAA6G,EAAAnF,KAAAo0B,IAAAjvB,GAAAnF,KAAAisB,IAAA9mB,GAAAnF,KAAAkU,SAAAysE,KACA3gF,KAAAmnC,SAAAnnC,KAAAmnC,SAAAzpB,IAAApf,EAAA,OAAA,CACA4c,MAAAlb,KAAAkU,SAAA0sE,WAAAz7E,GACA4B,KAAA,CAAA5B,MAAAA,MAMA,GAFAnF,KAAAmnC,SAAA34B,SAAAxO,KAAA8S,YAEA,OAAA9S,KAAAmF,MAAA,CACA,IAAAA,EAAAnF,KAAAmF,MACAnF,KAAAmF,MAAA,KACAnF,KAAA4zC,SAAAzuC,GAAA,GAGAnF,KAAAqd,YAAArd,KAAAmnC,SAAA,YAAA5vB,IACAvX,KAAAmnC,SAAA7wB,YAAA,kCACAhY,EAAAiZ,EAAA8C,eACArI,SAAA,kCACA2kF,UAAA3kF,SAAA,kBAGAhS,KAAAqd,YAAArd,KAAAmnC,SAAA,WAAA,KACAnnC,KAAAmnC,SAAA7wB,YAAA,kBAGAtW,KAAAqd,YAAArd,KAAAmnC,SAAA,QAAA5vB,IACAvX,KAAA4zC,SAAAt1C,EAAAyI,KAAAwQ,EAAA8C,cAAA,UACA9C,EAAAM,kBACA7X,KAAA8S,WAAAiF,WAIA67B,SAAA,SAAAzuC,EAAAyxF,GAGA,GAFAzxF,EAAA0L,KAAAob,IAAApb,KAAAujB,IAAAjvB,EAAAnF,KAAAisB,KAAAjsB,KAAAo0B,KAEAp0B,KAAAmF,SAAAnF,KAAAmF,MAAAA,GACA,OAGAnF,KAAA8S,WAAA1E,KAAA,CACAyoF,gBAAA72F,KAAAmF,MACA2xF,iBAAA92F,KAAAkU,SAAA0sE,WAAA5gF,KAAAmF,SAGAnF,KAAAmnC,SAAA7wB,YAAA,sBACA,IAAAygF,EAAA/2F,KAAAmnC,SAAA90B,IAAArS,KAAAmF,MAAAnF,KAAAo0B,KAAAp0B,KAAAkU,SAAAysE,MACAoW,EAAAr5E,IAAAq5E,EAAAJ,WAAA3kF,SAAA,UACA+kF,EAAA/kF,SAAA,gBAEA,IAAA4kF,GACA52F,KAAAkU,SAAAs8B,SAAArrC,IAIAoxF,KAAA,WACA,MAAA,mBAAAv2F,KAAAkU,SAAAkgB,IACAp0B,KAAAkU,SAAAkgB,MAEAp0B,KAAAkU,SAAAkgB,KAGAoiE,KAAA,WACA,MAAA,mBAAAx2F,KAAAkU,SAAA+X,IACAjsB,KAAAkU,SAAA+X,MAEAjsB,KAAAkU,SAAA+X,MAEA,CACAhP,SAAA,CACAmX,IAAA,EACAnI,IAAA,IACA00D,KAAA,GACAC,WAAA,KACApwC,SAAAlyC,EAAA6kB,QAtJA,CAyJA3kB,QCvJAK,MAAAwxC,eAAAxuC,QAAA4Z,KAAA7c,OAAA,CACAkU,WAAA,KACAyU,SAAA,KACAg3D,gBAAA,KACAj6E,OAAA,KACAa,MAAA,KAEA6xF,eAAA,KAEAh6E,KAAA,SAAAjH,EAAA7B,GACAlU,KAAA8Z,YAAA5F,EAAArV,MAAAwxC,eAAAgjD,iBAEArzF,KAAAmF,MAAA,EACAnF,KAAAi3F,gBAAA,GACAj3F,KAAAk3F,eAAA,GACAl3F,KAAAm3F,UAAA,GACAn3F,KAAAo3F,SAAA,GAEAp3F,KAAA8S,WAAAxU,EAAA,IAAAyX,GACA/V,KAAAq3F,SAAA/4F,EAAA,+BAAAkQ,SAAAxO,KAAA8S,YACA9S,KAAAs3F,QAAAh5F,EAAA,8BAAAkQ,SAAAxO,KAAA8S,YACA9S,KAAAu3F,aAAAj5F,EAAA,mCAAAkQ,SAAAxO,KAAA8S,YACA9S,KAAAw3F,eAAAl5F,EAAA,aAAAkQ,SAAAxO,KAAAu3F,cAEA,IAAA,IAAAl4F,EAAAW,KAAAi3F,eAAA53F,GAAAW,KAAAk3F,eAAA73F,IAAA,CACA,IAAA4S,EAAA3T,EAAA,2CAAAe,EAAA,wBAAAA,EAAA,eAAAmP,SAAAxO,KAAAw3F,gBAEAn4F,EAAA,GAAA,GACA4S,EAAAD,SAAA,mBAGA,IAAA3S,GACA4S,EAAAD,SAAA,YAIAhS,KAAAunB,SAAAvnB,KAAA8S,WAAAgD,KAAA,eAEA9V,KAAAqd,YAAArd,KAAA8S,WAAA,SAAA9S,KAAAy3F,cAAAnwE,KAAAtnB,OACAA,KAAAqd,YAAArd,KAAA8S,WAAA,WAAA9S,KAAA03F,gBAAApwE,KAAAtnB,OACAA,KAAAqd,YAAAxb,QAAA+Q,KAAA,UAAA5S,KAAA23F,eAAArwE,KAAAtnB,OACAA,KAAAqd,YAAAxb,QAAA+Q,KAAA,SAAA5S,KAAA43F,cAAAtwE,KAAAtnB,OAMAkoB,WAAA,KAEAloB,KAAA63F,2BAAA,IAAA73F,KAAAunB,SAAAjnB,OAAA,GACAN,KAAAw3F,eAAAl2E,IAAA,QAAAthB,KAAA63F,2BAAA,EAAA73F,KAAA8S,WAAA44B,QAAA,IACA,KAGA+rD,cAAA,WACA,IAAAh/E,EAAAzY,KAAA83F,gBAAA93F,KAAAmF,OACAnF,KAAAw3F,eAAAl2E,IAAA,OAAA7I,IAGAi/E,gBAAA,SAAAngF,EAAAwgF,GACAxgF,EAAAK,iBAEA5X,KAAAg3F,eAAAe,EAAAv5D,SAAA+L,EACAvqC,KAAAg4F,UAAAh4F,KAAAw3F,eAAAh5D,WAAA/lB,KAEAzY,KAAA4qF,UAAA,EACA5qF,KAAAswC,WAGAqnD,eAAA,SAAApgF,EAAAwgF,GACA,GAAA/3F,KAAA4qF,SAAA,CACArzE,EAAAK,iBAEA,IAAAqgF,EAAAj4F,KAAAg3F,eAAAe,EAAAv5D,SAAA+L,EACA9xB,EAAAzY,KAAAg4F,UAAAC,EACA9yF,EAAAnF,KAAAk4F,gBAAAz/E,GAEAzY,KAAA4zC,SAAAzuC,GAEAnF,KAAAwwC,aAIAoD,SAAA,SAAAzuC,GACA,IAAAsT,EAAAzY,KAAA83F,gBAAA3yF,GACAA,EAAAnF,KAAAm3F,UACAhyF,EAAAnF,KAAAm3F,SACA1+E,EAAAzY,KAAA83F,gBAAA3yF,IACAA,EAAAnF,KAAAo3F,WACAjyF,EAAAnF,KAAAo3F,SACA3+E,EAAAzY,KAAA83F,gBAAA3yF,IAGAnF,KAAAw3F,eAAAl2E,IAAA,OAAA7I,GAEAtT,GAAAnF,KAAAm3F,UAAAhyF,GAAAnF,KAAAo3F,WACAp3F,KAAAunB,SAAAjR,YAAA,YAEAhY,EAAAkV,KAAAxT,KAAAunB,UAAA,SAAAtoB,EAAAuzB,GACAl0B,EAAAk0B,GAAAzrB,KAAA,cAAA,GACAzI,EAAAk0B,GAAAzrB,KAAA,eAAA5B,GACA7G,EAAAk0B,GAAAxgB,SAAA,YAGA1T,EAAAk0B,GAAAzrB,KAAA,cAAA,GACAzI,EAAAk0B,GAAAzrB,KAAA,eAAA5B,GACA7G,EAAAk0B,GAAAxgB,SAAA,YAIA,GAAA1T,EAAAk0B,GAAAzrB,KAAA,eACAzI,EAAAk0B,GAAAxgB,SAAA,gBAKAhS,KAAAmF,MAAAA,GAGAyyF,cAAA,SAAArgF,GACAvX,KAAA4qF,WACArzE,EAAAK,iBACA5X,KAAA4qF,UAAA,EACA5qF,KAAA2wC,UAIAunD,gBAAA,SAAA15D,GACA,IAAA25D,GAAA,EAAAn4F,KAAAi3F,eACAmB,GAAA,GAAAp4F,KAAAi3F,eAAAj3F,KAAAk3F,gBAEA,OAAAl3F,KAAAu3F,aAAA7rD,QAAA,GAAA,EAAAlN,GAAAx+B,KAAA63F,2BAAAO,EAAAD,GAGAL,gBAAA,SAAA3yF,GACA,IAAAgzF,GAAA,EAAAn4F,KAAAi3F,eACAmB,GAAA,GAAAp4F,KAAAi3F,eAAAj3F,KAAAk3F,gBAEA,SAAA/xF,EAAAgzF,GAAAn4F,KAAA63F,2BAAAO,EAAAp4F,KAAAu3F,aAAA7rD,QAAA,IAGA4E,QAAA,WACA,mBAAAtwC,KAAAkU,SAAAs8B,UACAxwC,KAAAkU,SAAAo8B,QAAAtwC,OAIAwwC,SAAA,WACA,mBAAAxwC,KAAAkU,SAAAs8B,UACAxwC,KAAAkU,SAAAs8B,SAAAxwC,OAIA2wC,MAAA,WACA,mBAAA3wC,KAAAkU,SAAAs8B,UACAxwC,KAAAkU,SAAAy8B,MAAA3wC,OAIAqzF,gBAAA,CACA/iD,QAAAhyC,EAAA6kB,KACAqtB,SAAAlyC,EAAA6kB,KACAwtB,MAAAryC,EAAA6kB,QCpKA,SAAA7kB,GAMAO,MAAA8e,SAAA9b,QAAA4Z,KAAA7c,OAAA,CACAwqD,gBAAA,KACAt2C,WAAA,KACA2L,OAAA,KACAkE,QAAA,EAEA3F,KAAA,SAAA23C,EAAAzgD,GACAlU,KAAA8Z,YAAA5F,EAAArV,MAAA8e,SAAAV,UAEApb,QAAAsf,oBACAnhB,KAAAye,OAAAngB,EAAA,iCACAkQ,SAAA3M,QAAA+Q,MAEA5S,KAAAkU,SAAA8J,mBACAhe,KAAAqd,YAAArd,KAAAye,OAAA,QAAAlH,IACAA,EAAAM,kBACA7X,KAAAiB,WAKAjB,KAAAopD,gBAAA9qD,EAAA,SAAA,CAAA2c,MAAA,8BACAjb,KAAA8S,WAAAxU,EAAA,IAAA0B,KAAAkU,SAAA0J,qBAAA5d,KAAAkU,SAAA2J,qBACA7L,SAAA,YACAO,OAAAoiD,GACA5tD,KAAA,WAAA/G,MACAwO,SAAAxO,KAAAopD,iBAEAvnD,QAAAsf,mBACAnhB,KAAA8S,WAAAd,SAAA,aAGAnT,MAAAuY,gBAAApX,KAAA8S,YAEA9S,KAAAkU,SAAAmkF,UACAr4F,KAAAgB,QAIAA,KAAA,WACAhB,KAAA2iB,SAIA3iB,KAAAs4F,6BAGAt4F,KAAAye,QACAze,KAAAye,OACAjQ,SAAA3M,QAAA+Q,MACAgqB,OAGA58B,KAAAopD,gBACA56C,SAAA3M,QAAA+Q,MACA0D,YAAA,UAEAzU,QAAAsf,kBACAnhB,KAAA8S,WAAAwO,IAAA,MAAA,SAEAthB,KAAA8S,WAAAwO,IAAAzf,QAAAub,IAAA,OAAA,QAAA,SAGApd,KAAA8S,WAAA4O,IAAA,yBAAA,KACA7iB,MAAAoZ,eAAAjY,KAAA8S,cAGA9S,KAAAye,SACAze,KAAAye,OAAA,GAAA+C,YACAxhB,KAAAye,OAAAzM,SAAA,eAGAhS,KAAA8S,WAAA,GAAA0O,YACA3iB,MAAA8e,SAAA46E,SAAAv4F,MAEAA,KAAA+Y,SACAlX,QAAAqc,gBAAAyD,WAEA3hB,KAAAkU,SAAA6J,YACAlc,QAAAqc,gBAAAC,iBAAAtc,QAAA0c,QAAA,KACAve,KAAAiB,UAIAjB,KAAA2iB,QAAA,EACA3iB,KAAAmX,QAAA,UAGAlW,MAAA,WACAjB,KAAA2iB,SAIA3iB,KAAAmX,QAAA,eACAnX,KAAA4Y,UACA5Y,KAAA2iB,QAAA,EAEA3iB,KAAAs4F,6BAEAt4F,KAAAye,SACAze,KAAA4qB,eAAA5qB,KAAAye,OAAA,SACAze,KAAAye,OACAnI,YAAA,cACAoL,IAAA,yBAAA,KACA1hB,KAAAye,OAAAyI,UAIAroB,MAAA8e,SAAA66E,YAAAx4F,MACA6B,QAAAqc,gBAAA0D,cACA5hB,KAAA8S,WAAA4O,IAAA,yBAAA,KACA1hB,KAAAopD,gBAAAp3C,SAAA,UACAhS,KAAAmX,QAAA,aAIAmhF,2BAAA,WACAt4F,KAAAye,QACAze,KAAAye,OAAA4C,IAAA,0BAGArhB,KAAA8S,WAAAuO,IAAA,2BAMApD,QAAA,WACAje,KAAAye,SACAze,KAAAye,OAAArD,SACApb,KAAAye,OAAA,MAGAze,KAAAopD,gBAAAhuC,SACApb,KAAAopD,gBAAA,KACAppD,KAAA8S,WAAA,KAEA9S,KAAA6iB,SAEA,CACA5F,SAAA,CACAW,iBAAA,MACAC,oBAAA,GACAw6E,UAAA,EACAt6E,YAAA,EACAC,mBAAA,GAEAy6E,WAAA,GACAF,SAAA,SAAAG,GACA75F,MAAA8e,SAAA86E,WAAAzqF,QAAA0qF,GACA72F,QAAAsf,kBACAu3E,EAAA5lF,WAAAwO,IAAA,MAAA,GAEAziB,MAAA8e,SAAAg7E,gBAGAH,YAAA,SAAAE,GACA75F,MAAA8e,SAAA86E,WAAA55F,MAAA8e,SAAA86E,WAAAjxE,OAAAzZ,GAAAA,IAAA2qF,GACA72F,QAAAsf,kBACAu3E,EAAA5lF,WAAAwO,IAAA,MAAA,UAEAo3E,EAAA5lF,WAAAwO,IAAAzf,QAAAub,IAAA,OAAA,QAAA,SACAve,MAAA8e,SAAAg7E,iBAGAA,aAAA,WACA,MAAAC,EAAA/5F,MAAA8e,SAAA86E,WAAAn4F,OACAzB,MAAA8e,SAAA86E,WAAAnxC,QAAA,CAAAoxC,EAAAr5F,KACAq5F,EAAA5lF,WAAAwO,IAAAzf,QAAAub,IAAA,OAAA,SAAAw7E,EAAAv5F,GAAAu5F,EAAA,GAAA,QAGA,IAAAA,EACA/2F,QAAA+Q,KAAAZ,SAAA,aAEAnQ,QAAA+Q,KAAA0D,YAAA,gBApLA,CAwLA9X,QCnLAK,MAAAg6F,cAAAh6F,MAAA2hC,mBAAA5hC,OAAA,CACAyiC,oBAAA,SAAAF,GAKAA,GAHAA,EAAAA,EAAAxiC,QAAA,WAAA,KAGAA,QAAA,yBAAA,IAGAE,MAAAi6F,uBACA33D,EAAAA,EAAArxB,eAGAjR,MAAAk6F,wBAEA53D,EAAAtiC,MAAAuS,YAAA+vB,EAAAnhC,KAAAkU,SAAA7C,UAKA,IAAAi3E,EAAAzpF,MAAAsQ,YAAA6pF,QAAAC,WAAA93D,EAAA,CAAA63D,QAAA,4BAEA,OAAA1Q,EAAAhoF,OACAgoF,EAAA7nF,KAAA5B,MAAAq6F,mBAEA,MCzBAr6F,MAAAs6F,UAAAt3F,QAAA4Z,KAAA7c,OAAA,CACAmX,GAAA,KAEAjD,WAAA,KACA48B,MAAA,KACA0pD,cAAA,KAKAp8E,KAAA,SAAAjH,EAAAsB,EAAAnD,GACAlU,KAAA+V,GAAAA,EACA/V,KAAA8S,WAAAxU,EAAA+Y,GACArX,KAAA8Z,YAAA5F,EAAArV,MAAAs6F,UAAAl8E,UAGAjd,KAAA8S,WAAA/L,KAAA,eACAlF,QAAAigC,IAAA,kDACA9hC,KAAA8S,WAAA/L,KAAA,aAAAkX,WAGAje,KAAA8S,WAAA/L,KAAA,YAAA/G,MAEAA,KAAA0vC,MAAA,GAEA1vC,KAAAkU,SAAA4S,YACAxoB,EAAAM,OAAAoB,KAAA0vC,MAAA7wC,MAAA4V,gBAAAzU,KAAAkU,SAAA4S,WAAA,UAGA,IAAA9mB,KAAA0vC,MAAA3iB,sBACA/sB,KAAA0vC,MAAA3iB,oBAAA,IAKA,IAFA,IAAAssE,EAAAr5F,KAAA8S,WAAAgD,KAAA,MAAA0d,KAAA,QAEAn0B,EAAA,EAAAA,EAAAg6F,EAAA/4F,OAAAjB,IAAA,CACA,IAAA4kC,EAAA3lC,EAAA+6F,EAAAh6F,IACA4S,EAAAgyB,EAAAhd,SACAuD,EAAAlsB,EAAA,8BAAAO,MAAAc,EAAA,MAAA,sBAAA,OAAAwrB,UAAA8Y,IAEA,IAAA3lC,EAAA6O,QAAA82B,EAAAjpB,SAAA,YAAAjU,KAAA,MAAA/G,KAAA0vC,MAAA3iB,sBACA9a,EAAAD,SAAA,aAGAhS,KAAAs5F,WAAA9uE,GAGAxqB,KAAAkU,SAAAomB,WACAt6B,KAAAo5F,cAAA,IAAAv6F,MAAA06F,cAAAv5F,KAAAA,KAAAkU,SAAA6kE,YAGA/4E,KAAAkU,SAAA8kE,aACAh5E,KAAAw5F,kBAAAx5F,KAAA8S,WAAAgD,KAAA,UAIAwjF,WAAA,SAAA9uE,GACAA,EAAAlT,GAAA,QAAAC,IACA,IAAAtF,EAAA3T,EAAAiZ,EAAA8C,eAAAE,QAAA,MACAmB,EAAAzJ,EAAA+I,SAAA,QAAAlF,KAAA,kBAAA/O,KAAA,MACA0yF,EAAAn7F,EAAA6O,QAAAuO,EAAA1b,KAAA0vC,MAAA3iB,qBAEA9a,EAAA4D,SAAA,cACA5D,EAAAqE,YAAA,cAEA,IAAAmjF,GACAz5F,KAAA0vC,MAAA3iB,oBAAAvd,OAAAiqF,EAAA,KAGAxnF,EAAAD,SAAA,cAEA,IAAAynF,GACAz5F,KAAA0vC,MAAA3iB,oBAAArtB,KAAAgc,IAIA1b,KAAAkU,SAAA4S,YACAjoB,MAAAiW,gBAAA9U,KAAAkU,SAAA4S,WAAA9mB,KAAA0vC,UAKA8pD,kBAAA,SAAAE,GACA15F,KAAAqd,YAAAq8E,EAAA,QAAA,wBAGAC,oBAAA,SAAApiF,GACA,IAAA6C,EAAA9b,EAAAiZ,EAAA8C,eAEA,IAAAD,EAAArT,KAAA,WAAA,CACA,IAAA2U,EAAAtB,EAAA6M,SAAAjM,SAAA,YAAAjU,KAAA,MACAiyE,EAAAn6E,MAAA+F,OAAA5E,KAAAkU,SAAA8kE,YAAA,YAAAt9D,GAEApd,EAAA,sCAAA06E,EAAA,KAAAn6E,MAAAc,EAAA,MAAA,aAAA,wBAAAm4B,YAAA1d,GAEA,IAAAvY,QAAA8Y,QAAAP,GACAw/E,aAIAC,UAAA,SAAAC,GACA,OAAAj7F,MAAAs6F,UAAAY,YAAAD,EAAA,GAAAj7F,MAAAs6F,UAAAa,cAGAC,WAAA,SAAArkF,GACA,IAAA3D,EAAA3T,EAAA,wBAAAkQ,SAAAxO,KAAA8S,YACAmxB,EAAA3lC,EAAA,kCAAAO,MAAA4Z,KAAA,MAAA5Z,MAAAs6F,UAAAY,WAAA,eAAAl7F,MAAA4Z,KAAA,KAAA5Z,MAAAs6F,UAAAY,WAAA,SAAAvrF,SAAAyD,GASA,GAPAgyB,EAAA1xB,OAAAqD,GAEA5V,KAAAkU,SAAAomB,WACA2J,EAAA1xB,OAAA,+BAAA1T,MAAAc,EAAA,MAAA,QAAA,UACAK,KAAAo5F,cAAAjvE,SAAAlY,IAGAjS,KAAAkU,SAAA8kE,YAAA,CACA,IAAAkhB,EAAA57F,EAAA,8BAAAO,MAAAc,EAAA,MAAA,aAAA,UAAA6O,SAAAy1B,GACAjkC,KAAAw5F,kBAAAU,GAGAj2D,EAAA3iB,IAAA,iBAAA,IACA2iB,EAAAzrB,SAAA,CAAA2uE,gBAAA,GAAA,SAGAlrD,cAAA,SAAArmB,GACA,IAMAukF,EANAloF,EAAA2D,EAAAqR,SAAAA,SAEAjnB,KAAAkU,SAAAomB,UACAt6B,KAAAo5F,cAAAzuE,YAAA1Y,GAKAA,EAAA0hB,WAAArzB,SACA65F,EAAAloF,EAAAgV,UAGAhV,EAAAqP,IAAA,aAAA,UAAA9I,SAAA,CAAAkvC,cAAAz1C,EAAAob,UAAA,OAAA,KACApb,EAAAmJ,cAEA,IAAA++E,GACAn6F,KAAAo6F,UAAAD,MAKAC,UAAA,SAAAroF,GACAA,EAAA4hB,SAAA,QAAA3Y,SAAA,WAAAI,SACArJ,EAAAqJ,WAEA,CACA2+E,WAAA,EACAC,aAAA,GAEA/8E,SAAA,CACA6J,WAAA,KACAwT,UAAA,EACA0+C,YAAA,KACAD,UAAA,QC9JAl6E,MAAA06F,cAAA13F,QAAAs/E,KAAAviF,OAAA,CACAy7F,UAAA,KACAthB,UAAA,KACAuhB,aAAA,KAEAC,UAAA,KACAC,SAAA,KACAC,cAAA,KAEAz9E,KAAA,SAAAq9E,EAAAthB,GACA/4E,KAAAq6F,UAAAA,EACAr6F,KAAA+4E,UAAAA,EAEA/4E,KAAAohF,WAAA9iF,EAAA,+BAEA,IAAA0qB,EAAAhpB,KAAAq6F,UAAAvnF,WAAAgD,KAAA,MAEA9V,KAAA6iB,KAAAmG,EAAA,CACAmP,OAAA,8BACA+oB,OAAAlhD,KAAAgoE,UAAA1gD,KAAAtnB,SAIAgoE,UAAA,SAAAzpC,GACAv+B,KAAAu6F,UAAAh8D,EACA,IAAAxsB,EAAAzT,EAAA,sCAAAiU,OAAAgsB,GAGA,OAFAA,EAAAjd,IAAA,WAAAziB,MAAA4Z,KAAAzY,KAAAshD,SAAAhgC,IAAA,WAAAziB,MAAA4Z,OACA8lB,EAAAzoB,KAAA,SAAAgD,WAAA,SACA/G,GAGAyvC,YAAA,WACAxhD,KAAAw6F,SAAAl8F,IAGA0B,KAAA0jF,YAAA1jF,KAAAq6F,UAAAvnF,YAGA9S,KAAAs6F,aAAA,EACA,IAAAI,EAAA16F,KAAAshD,SACA,GACAthD,KAAAs6F,eACAI,EAAAA,EAAA5kF,KAAA,mBACA4kF,EAAAp6F,QAGAN,KAAAy6F,cAAAz6F,KAAAshD,SAAAj0B,SACArtB,KAAAshD,SAAA9oC,SAAA,CACA6U,OAAA,GACA,OAAA,KACArtB,KAAAshD,SAAAtvC,SAAA,YAEAhS,KAAA6iB,OAEA7iB,KAAAqd,YAAAxb,QAAA0Z,KAAA,WAAA,SAAAhE,GACAA,EAAAC,UAAA3V,QAAA0c,SACAve,KAAA26F,iBAKAjX,YAAA,SAAA3xE,GAGA,IAFA,IAAA6oF,EAAA7oF,EAAAiJ,WAAA+Y,IAAA/zB,KAAAshD,UAEAjiD,EAAA,EAAAA,EAAAu7F,EAAAt6F,OAAAjB,IAAA,CACA,IAAA4S,EAAA3T,EAAAs8F,EAAAv7F,IACAW,KAAAw6F,SAAAx6F,KAAAw6F,SAAA98E,IAAAzL,EAAA+I,SAAA,SAEA/I,EAAA4D,SAAA,cACA7V,KAAA0jF,YAAAzxE,EAAA+I,SAAA,SAKA2nE,OAAA,WAaA,IAZA3iF,KAAA8vC,EAAA+qD,iBACA76F,KAAA8vC,EAAA+qD,eAAAvkF,YAAA,aACAtW,KAAAohF,WAAAhmE,UAIApb,KAAA8vC,EAAA+qD,eAAA,KACA76F,KAAA8vC,EAAAgrD,iBAAA,KACA96F,KAAA8vC,EAAAirD,mBAAA,KACA/6F,KAAA8vC,EAAAkrD,oBAAA,KACAh7F,KAAA8vC,EAAAmrD,oBAAA,KAEAj7F,KAAA8vC,EAAAzwC,EAAA,EAAAW,KAAA8vC,EAAAzwC,EAAAW,KAAAw6F,SAAAl6F,SACAN,KAAA8vC,EAAApxB,QAAApgB,EAAA0B,KAAAw6F,SAAAx6F,KAAA8vC,EAAAzwC,IACAW,KAAA8vC,EAAAorD,aAAAl7F,KAAA8vC,EAAApxB,QAAA1c,SACAhC,KAAA8vC,EAAAqrD,aAAAn7F,KAAA8vC,EAAApxB,QAAA2a,cACAr5B,KAAA8vC,EAAAsrD,gBAAAp7F,KAAA8vC,EAAAorD,aAAA9hE,IAAAp5B,KAAA8vC,EAAAqrD,aAAA,EACAn7F,KAAA8vC,EAAAurD,YAAAxqF,KAAAilC,IAAA91C,KAAAk8C,OAAAl8C,KAAA8vC,EAAAsrD,iBAEA,IAAAp7F,KAAA8vC,EAAAzwC,GAAAW,KAAAk8C,QAAAl8C,KAAA8vC,EAAAorD,aAAA9hE,IAAA,GAAAp5B,KAAA8vC,EAAAurD,YAAAr7F,KAAA8vC,EAAAirD,oBAPA/6F,KAAA8vC,EAAAzwC,IAQAW,KAAA8vC,EAAA+qD,eAAA76F,KAAA8vC,EAAApxB,QACA1e,KAAA8vC,EAAAgrD,iBAAA96F,KAAA8vC,EAAAzwC,EACAW,KAAA8vC,EAAAirD,mBAAA/6F,KAAA8vC,EAAAurD,YACAr7F,KAAA8vC,EAAAkrD,oBAAAh7F,KAAA8vC,EAAAorD,aACAl7F,KAAA8vC,EAAAmrD,oBAAAj7F,KAAA8vC,EAAAqrD,aAOA,GAAAn7F,KAAA8vC,EAAA+qD,eAKA,GAAA,IAAA76F,KAAA8vC,EAAAgrD,kBAAA96F,KAAAk8C,OAAAl8C,KAAA8vC,EAAAkrD,oBAAA5hE,IAAA,EACAp5B,KAAAohF,WAAAj2D,UAAAnrB,KAAAq6F,UAAAvnF,iBAyBA,GAvBA9S,KAAA8vC,EAAAwrD,iBAAAt7F,KAAA8vC,EAAA+qD,eAAA5zE,SACAjnB,KAAA8vC,EAAAyrD,mBAAAv7F,KAAA8vC,EAAAwrD,iBAAAv0F,KAAA,SAGA/G,KAAA8vC,EAAAgrD,iBAAA96F,KAAAw6F,SAAAl6F,OAAA,GACAN,KAAA8vC,EAAA0rD,cAAAl9F,EAAA0B,KAAAw6F,SAAAx6F,KAAA8vC,EAAAgrD,iBAAA,IAAA7zE,SACAjnB,KAAA8vC,EAAA2rD,gBAAAz7F,KAAA8vC,EAAA0rD,cAAAz0F,KAAA,WAEA/G,KAAA8vC,EAAA0rD,cAAA,KACAx7F,KAAA8vC,EAAA2rD,gBAAA,MAIAz7F,KAAA8vC,EAAA4rD,oBAAA17F,KAAAk8C,QAAAl8C,KAAA8vC,EAAAkrD,oBAAA5hE,IAAAp5B,KAAA8vC,EAAAmrD,oBAAA,EAUAj7F,KAAA8vC,EAAA0rD,eAAAx7F,KAAA8vC,EAAA2rD,iBAAAz7F,KAAA8vC,EAAAyrD,mBACAv7F,KAAA8vC,EAAA4rD,sBACA17F,KAAA+4E,WAAA/4E,KAAA+4E,WAAA/4E,KAAA8vC,EAAAyrD,mBAAAv7F,KAAAs6F,aAAA,IAEAt6F,KAAAohF,WAAAtpD,YAAA93B,KAAA8vC,EAAAwrD,oBAGAt7F,KAAA+4E,WAAA/4E,KAAA+4E,WAAA/4E,KAAA8vC,EAAAyrD,mBAAAv7F,KAAAs6F,eACAt6F,KAAA8vC,EAAA+qD,eAAA7oF,SAAA,kBAaA,GAAAhS,KAAA8vC,EAAA0rD,eAAAx7F,KAAA8vC,EAAA2rD,gBAAAz7F,KAAA8vC,EAAAyrD,qBACAv7F,KAAA+4E,WAAA/4E,KAAA+4E,WAAA/4E,KAAA8vC,EAAA2rD,gBAAAz7F,KAAAs6F,aAAA,KACAt6F,KAAA8vC,EAAA4rD,oBAEA17F,KAAAohF,WAAAr7B,aAAA/lD,KAAA8vC,EAAA0rD,gBAEAx7F,KAAA8vC,EAAA+qD,eAAA7oF,SAAA,aACAhS,KAAAohF,WAAA5yE,SAAAxO,KAAA8vC,EAAAwrD,iBAAAtgF,SAAA,cAcA,GAAAhb,KAAA8vC,EAAA4rD,oBAAA,CAaA,IAXA17F,KAAA8vC,EAAA6rD,SAAA37F,KAAAi8C,OAAAj8C,KAAA47F,qBAEA,QAAA/8F,MAAA0Z,cACAvY,KAAA8vC,EAAA6rD,UAAA37F,KAAAu6F,UAAA7uD,SAGA1rC,KAAA8vC,EAAA+rD,WAAA77F,KAAA8vC,EAAA+qD,eAAA/5C,aAAA9gD,KAAAq6F,UAAAvnF,WAAA,MACA9S,KAAA8vC,EAAAgsD,iBAAA,KACA97F,KAAA8vC,EAAAisD,qBAAA,KACA/7F,KAAA8vC,EAAAksD,mBAAA,KAEAh8F,KAAA8vC,EAAAzwC,EAAA,EAAAW,KAAA8vC,EAAAzwC,EAAAW,KAAA8vC,EAAA+rD,WAAAv7F,OAAAN,KAAA8vC,EAAAzwC,IACAW,KAAA8vC,EAAAmsD,UAAA39F,EAAA0B,KAAA8vC,EAAA+rD,WAAA77F,KAAA8vC,EAAAzwC,IACAW,KAAA8vC,EAAAosD,UAAAl8F,KAAA8vC,EAAAmsD,UAAAj6F,SAAAyW,KAEA,QAAA5Z,MAAA0Z,cACAvY,KAAA8vC,EAAAosD,WAAAl8F,KAAA8vC,EAAAmsD,UAAAvwD,SAGA1rC,KAAA8vC,EAAAqsD,cAAAtrF,KAAAilC,IAAA91C,KAAA8vC,EAAAosD,UAAAl8F,KAAA8vC,EAAA6rD,UACA37F,KAAA8vC,EAAAssD,YAAAp8F,KAAA8vC,EAAAmsD,UAAAl1F,KAAA,WAEA/G,KAAA+4E,WAAA/4E,KAAA+4E,WAAA/4E,KAAA8vC,EAAAssD,YAAAp8F,KAAAs6F,aAAA,MACAt6F,KAAA8vC,EAAAgsD,kBACA97F,KAAA8vC,EAAAqsD,cAAAn8F,KAAA8vC,EAAAisD,wBACA/7F,KAAA8vC,EAAA0rD,eAAAx7F,KAAA8vC,EAAAssD,aAAAp8F,KAAA8vC,EAAA2rD,oBAGAz7F,KAAA8vC,EAAAgsD,iBAAA97F,KAAA8vC,EAAAmsD,UACAj8F,KAAA8vC,EAAAisD,qBAAA/7F,KAAA8vC,EAAAqsD,cACAn8F,KAAA8vC,EAAAksD,mBAAAh8F,KAAA8vC,EAAAssD,aAIAp8F,KAAA8vC,EAAAgsD,kBACA97F,KAAAohF,WAAAtpD,YAAA93B,KAAA8vC,EAAAgsD,wBAGA97F,KAAA+4E,WAAA/4E,KAAA+4E,WAAA/4E,KAAA8vC,EAAAyrD,mBAAAv7F,KAAAs6F,eACAt6F,KAAA8vC,EAAA+qD,eAAA7oF,SAAA,cAOA2oF,WAAA,WACA36F,KAAAohF,WAAAhmE,SAEApb,KAAA8vC,EAAA+qD,gBACA76F,KAAA8vC,EAAA+qD,eAAAvkF,YAAA,aAGAtW,KAAAq8F,aAGAz6C,WAAA,WAEA,GAAA5hD,KAAA8vC,EAAA+qD,iBAAA76F,KAAAohF,WAAAn6D,SAAA3mB,QAAAN,KAAA8vC,EAAA+qD,eAAAhlF,SAAA,cAAA,CACA,IAAAymF,EACAC,EAOA,GAJAv8F,KAAAshD,SAAA3tB,WAAArzB,SACAg8F,EAAAt8F,KAAAshD,SAAAr6B,UAGAjnB,KAAAohF,WAAAn6D,SAAA3mB,OAAA,CAEA,IAAAk8F,EAAAx8F,KAAAohF,WAAA3mE,OAAAiD,IAAA1d,KAAAohF,WAAA5tD,SAEA,IAAAl1B,EAAA6O,QAAAnN,KAAAshD,SAAA,GAAAk7C,IACAx8F,KAAAohF,WAAAzqE,YAAA3W,KAAAshD,UACAi7C,GAAA,IAEAv8F,KAAAohF,WAAAhmE,SACAmhF,GAAA,OAEA,CACA,IAAAxqF,EAAA/R,KAAA8vC,EAAAwrD,iBAAAtgF,SAAA,MAGA,GAAAshF,GAAAvqF,EAAAzR,QAAAyR,EAAA,KAAAuqF,EAAA,GAaAC,GAAA,MAbA,CACA,GAAAxqF,EAAAzR,OAKAN,KAAA8vC,EAAAwrD,iBAAAzlF,SAAA,cACA7V,KAAA8vC,EAAA+qD,eAAA7/E,SAAA,WAAA7D,QAAA,aANA,CACA,IAAAqT,EAAAlsB,EAAA,8BAAAO,MAAAc,EAAA,MAAA,sBAAA,OAAAwrB,UAAAnrB,KAAA8vC,EAAA+qD,gBACA76F,KAAAq6F,UAAAf,WAAA9uE,GAEAzY,EAAAzT,EAAA,QAAAkQ,SAAAxO,KAAA8vC,EAAAwrD,kBAKAt7F,KAAAshD,SAAA9yC,SAAAuD,GACAwqF,GAAA,GASA,GAFAv8F,KAAA8vC,EAAA+qD,eAAAvkF,YAAA,aAEAimF,EAAA,CAEAD,GACAt8F,KAAAq6F,UAAAD,UAAAkC,GAIA,IAEAlgE,EAFAqgE,EAAAz8F,KAAAshD,SAAAR,aAAA9gD,KAAAq6F,UAAAvnF,WAAA,MAAAxS,OAAA,EAIAm8F,GAAAz8F,KAAAshD,SAAAv6C,KAAA,WAEA,GAAA/G,KAAAshD,SAAAv6C,KAAA,WACAq1B,EAAA,IACA,WAAAv9B,MAAA4Z,MAAA,GACAzY,KAAAu6F,UAAA/hF,SAAA4jB,EAAA,SACA,GAAAqgE,KACArgE,EAAA,IACA,WAAAv9B,MAAA4Z,MAAA5Z,MAAAs6F,UAAAY,WACA/5F,KAAAu6F,UAAA/hF,SAAA4jB,EAAA,SAGAp8B,KAAA08F,SAAA18F,KAAAshD,SAAAm7C,IAIA,IAAA7mF,EAAA5V,KAAAshD,SAAAtmC,SAAA,QAAAA,SAAA,YAEAjU,EAAA,CACA41F,YAAA38F,KAAAq6F,UAAAtkF,GACA2F,UAAA9F,EAAA7O,KAAA,MACAiP,OAAAJ,EAAA7O,KAAA,WACA61F,OAAA58F,KAAAshD,SAAA9tB,OAAAxY,SAAA,QAAAA,SAAA,YAAAjU,KAAA,MACA29C,SAAA1kD,KAAAshD,SAAAr6B,OAAA,MAAAA,OAAA,MAAAjM,SAAA,QAAAA,SAAA,YAAAjU,KAAA,OAGAlI,MAAAgI,kBAAA,0BAAAE,GAAA,SAAA2D,EAAA9C,GACA,YAAAA,GACA/I,MAAAkJ,GAAAua,cAAAzjB,MAAAc,EAAA,MAAA,yBAOAK,KAAAshD,SAAA9oC,SAAA,QAAAlC,YAAA,UAAAkC,SAAA,CACA6U,OAAArtB,KAAAy6F,eACA,OAAA,KACAz6F,KAAAshD,SAAAhgC,IAAA,SAAA,UAGAthB,KAAAwkD,0BAEAxkD,KAAA6iB,QAGA65E,SAAA,SAAAzqF,EAAA6nF,GACA7nF,EAAAlL,KAAA,QAAA+yF,GAEA,IAAA+C,EAAA78F,KAAAq6F,UAAAR,UAAAC,GAEAx4E,EAAA,GACAA,EAAA,UAAAziB,MAAA4Z,MAAA,IAAAokF,EAAA,KACAv7E,EAAA,WAAAziB,MAAA4Z,MAAAokF,EAAA,KACA78F,KAAAshD,SAAAtmC,SAAA,QAAAsG,IAAAA,GAIA,IAFA,IAAAw7E,EAAA7qF,EAAA+I,SAAA,MAAAA,WAEA3b,EAAA,EAAAA,EAAAy9F,EAAAx8F,OAAAjB,IACAW,KAAA08F,SAAAp+F,EAAAw+F,EAAAz9F,IAAAy6F,EAAA,MCpWAj7F,MAAAk+F,qBAAAl7F,QAAAi5B,SAAAl8B,OAAA,CACAo+F,UAAA,KACAL,YAAA,KACA5jB,UAAA,KAEAkkB,aAAA,KACAC,cAAA,KAEA5zC,gBAAA,KACA6zC,kBAAA,KAEAC,2BAAA,KAEAC,WAAA,KACAC,sBAAA,KAEAC,cAAA,KACAC,mBAAA,KACAC,qBAAA,KACAC,2BAAA,EAEAC,aAAA,KACAC,mBAAA,KAEAC,iBAAA,KAKA7gF,KAAA,SAAAggF,EAAA33E,EAAAnR,GACAlU,KAAAg9F,UAAAA,EACAh9F,KAAA28F,YAAA38F,KAAAg9F,UAAA35D,OAAAt8B,KAAA,gBACA/G,KAAA+4E,UAAA52E,SAAAnC,KAAAg9F,UAAA35D,OAAAj1B,KAAA,oBAEApO,KAAAi9F,aAAA,IAAAj9F,KAAAg9F,UAAA95E,aAAA+C,QAAA,GAAA,IACAjmB,KAAAk9F,cAAAl9F,KAAAg9F,UAAA95E,aAAA+C,QAAA,GAAA,EAEA/R,EAAA5V,EAAAM,OAAA,GAAAC,MAAAk+F,qBAAA9/E,SAAA/I,EAAA,CACAikB,OAAA,QACAiD,kBAAA,EACA0iE,cAAA,EACAC,eAAA,EACA1iE,eAAA,EACA6lB,OAAAlhD,KAAAgoE,UAAA1gD,KAAAtnB,MACAs7B,cAAA,IACAJ,KAAAr5B,QAAAqmE,SAGAloE,KAAA6iB,KAAAwC,EAAAnR,IAMA8pF,YAAA,WACAh+F,KAAAu9F,cAAAv9F,KAAA29F,aAAA39F,KAAA+6B,YAAAh0B,KAAA,SACA/G,KAAAw9F,mBAAA,EAKA,IAHA,IAAAl8C,EAAAhjD,EAAA0B,KAAA+6B,aACAkjE,EAAAj+F,KAAA+6B,YAAAtgB,OAEAwjF,EAAA39F,QAAA,CAEA,IAAA49F,EAAAD,EAAAl3F,KAAA,SAEA,GAAAm3F,GAAAl+F,KAAAu9F,cACA,MAIA,IAAAY,EAAAD,EAAAl+F,KAAAu9F,cAEAY,EAAAn+F,KAAAw9F,qBACAx9F,KAAAw9F,mBAAAW,GAIA78C,EAAAA,EAAA5jC,IAAAugF,GACAA,EAAAA,EAAAxjF,OAQA,GAJAza,KAAAy9F,sBAAAQ,EAAA39F,OAKAN,KAAA+4E,WACA/4E,KAAAy9F,sBACAz9F,KAAAg9F,UAAAjkE,iBACA,CAEA/4B,KAAA09F,2BAAA,EAEA,IAAA32F,EAAA/G,KAAAo+F,iBAAAp+F,KAAA+6B,aAEAl8B,MAAAgI,kBAAA,qCAAAE,EAAA,CAAA2D,EAAA9C,KACA,YAAAA,IACA5H,KAAA09F,2BAAA,EAEA19F,KAAA4qF,WACA5qF,KAAAw9F,mBAAA9yF,EAAA2zF,MACAr+F,KAAAs+F,MAAA,OAMA,OAAAh9C,GAMA0mB,UAAA,SAAAG,GACA,IAAA/e,EAAA9qD,EAAA,+CAAAkQ,SAAA3M,QAAA+Q,MACAy2C,EAAA/qD,EAAA,4BAAAkQ,SAAA46C,GACA/lB,EAAA/kC,EAAA,yBAAAkQ,SAAA66C,GACApqB,EAAA3gC,EAAA,YAAAkQ,SAAA60B,GAEA8kC,EAAA35D,SAAAywB,GAGAj/B,KAAAspD,gBAAAtpD,KAAAg9F,UAAA3lE,kBAAArc,SAAA,YAAAA,WAGA,IAFA,IAAAuuC,EAAA4e,EAAAntD,WAEA3b,EAAA,EAAAA,EAAAkqD,EAAAjpD,OAAAjB,IAAA,CACA,IAAAmqD,EAAAlrD,EAAAirD,EAAAlqD,IAGA,GAAAmqD,EAAA3zC,SAAA,iBACA2zC,EAAApuC,aADA,CAMA,IAAAquC,EAAAnrD,EAAA0B,KAAAspD,gBAAAjqD,IACAqsC,EAAA+d,EAAA,GAAA2M,wBAAA1qB,MAMA,GAJA+d,EAAAnoC,IAAA,QAAAoqB,EAAA,MACA8d,EAAAloC,IAAA,QAAAoqB,EAAA,MAGA7pC,QAAAmY,QAAAyvC,EAAA,kBAAA,CACAzpD,KAAAm9F,kBAAA3zC,EAEArnD,SAAAsnD,EAAAnoC,IAAA,WAAAziB,MAAA4Z,OACAzY,KAAAo9F,2BAAA1xD,EAEA8d,EAAAloC,IAAA,WAAAziB,MAAA4Z,KAAAzY,KAAAi9F,gBAIA,OAAA7zC,GAMAm1C,gBAAA,SAAAzwC,GACA,OAAA9tD,KAAA09F,4BAIA,IAAA19F,KAAAw+F,gBAAA1wC,EAAAt6B,OAAAs6B,IAMA2wC,eAAA,SAAA3wC,GACA,OAAA9tD,KAAA09F,4BAIA,IAAA19F,KAAAw+F,gBAAA1wC,EAAAA,EAAArzC,SASA+mC,YAAA,WAEAxhD,KAAAq9F,WAAAr9F,KAAA0+F,cAAA1+F,KAAA+6B,YAAA/6B,KAAA+6B,YAAAh0B,KAAA,UAGA/G,KAAA2+F,wBAGA3+F,KAAAg9F,UAAAzkE,gBAEAv4B,KAAA6iB,QAMA8/D,OAAA,WACA3iF,KAAA6iB,OACA7iB,KAAA4+F,iBAMAC,uBAAA,WACA7+F,KAAA2+F,wBACA3+F,KAAA8+F,gCACA9+F,KAAA6iB,QAMA++B,WAAA,WAOA,GANA5hD,KAAA69F,kBAAA,EACA79F,KAAA6iB,OAKA7iB,KAAA29F,cAAA39F,KAAAu9F,cAAA,CAGA,IAFA,IAAAwB,EAAA/+F,KAAA29F,aAAA39F,KAAAu9F,cAEAl+F,EAAA,EAAAA,EAAAW,KAAAshD,SAAAhhD,OAAAjB,IAAA,CACA,IAAAiiD,EAAAhjD,EAAA0B,KAAAshD,SAAAjiD,IAEAo9F,EADAn7C,EAAAv6C,KAAA,SACAg4F,EACAC,EAAAh/F,KAAAi9F,aAAAj9F,KAAAi/F,gBAAAxC,GAEAn7C,EAAAv6C,KAAA,QAAA01F,GACAn7C,EAAAxrC,KAAA,YAAA/O,KAAA,QAAA01F,GACAn7C,EAAAtmC,SAAA,0BAAAsG,IAAA,WAAAziB,MAAA4Z,KAAAumF,GAGAh/F,KAAA69F,kBAAA,EAIA,GAAA79F,KAAA69F,iBAAA,CASA,IALA,IAAA92F,EAAA/G,KAAAo+F,iBAAAp+F,KAAAshD,UAGA49C,EAAAl/F,KAAAshD,SAAAtpC,QAAAwb,OAEA0rE,EAAA5+F,QAAA,CACA,IAAA6+F,EAAAD,EAAAn4F,KAAA,SAEA,GAAAo4F,GAAAn/F,KAAA29F,aAAA,CACA52F,EAAA61F,OAAAsC,EAAAn4F,KAAA,MACA,MAGA,GAAAo4F,EAAAn/F,KAAA29F,aAAA,CACA52F,EAAA29C,SAAAw6C,EAAAn4F,KAAA,MAGA,IAAAyjB,EAAA00E,EAAAppF,KAAA,kBAEA,IAAA0U,EAAA3U,SAAA,YAAA,CAEA2U,EAAAxY,SAAA,YAGA,IAAAotF,EAAAp/F,KAAAg9F,UAAAqC,uBAAAH,GAGAl/F,KAAAg9F,UAAAxlE,eACAx3B,KAAAg9F,UAAAxlE,cAAA7M,YAAA3qB,KAAA+6B,aAGA/6B,KAAA2qB,YAAA3qB,KAAA+6B,aACA/6B,KAAA+6B,YAAA3f,SACApb,KAAAg9F,UAAAtlE,gBAGA,MAGAwnE,EAAAA,EAAA1rE,OAGA30B,MAAAgI,kBAAA,0BAAAE,EAAA,CAAA2D,EAAA9C,KACA,GAAA,YAAAA,EAAA,CACA,IAAA8C,EAAAhD,QAGA,OAFA7I,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAA,kCACAK,KAAAg9F,UAAA95E,aAAAwF,iBAGA7pB,MAAAkJ,GAAAua,cAAAzjB,MAAAc,EAAA,MAAA,wBACAK,KAAAs/F,mBAGAF,GAAAA,EAAAn4E,SAAA3mB,SACA8+F,EAAAhkF,SACApb,KAAAg9F,UAAAuC,eAAA/0E,GAAA,IAIA3rB,MAAAkJ,GAAA0a,gBAMA8Y,aAAA,WACAv7B,KAAAg9F,UAAAxlE,eACAx3B,KAAAg9F,UAAAxlE,cAAAgE,iBAGAx7B,KAAA69F,kBAAA,EACA79F,KAAA6iB,QAGAy8E,iBAAA,WACAz9F,QAAAkf,sBAAA,KACA/gB,KAAAmX,QAAA,kBACAnX,KAAAkU,SAAAorF,sBAIAE,0BAAA,WAMA,GALAx/F,KAAAspD,gBAAAhoC,IAAA,QAAA,IAKAthB,KAAAy9F,sBAAAz9F,KAAAg9F,UAAAjkE,iBAAA,CAEA/4B,KAAAg9F,UAAAtlE,eAAA13B,KAAAy/F,kBAAA,GAAAz/F,KAAA0/F,kBAAA,GAEA,IAAAC,EAAA3/F,KAAAshD,SAAAxpC,OAAA6uD,UAEAg5B,EAAAr/F,SACAN,KAAA2qB,YAAAg1E,GACAA,EAAAvkF,SACApb,KAAAg9F,UAAAzkE,iBAIAv4B,KAAA6iB,QAOA27E,gBAAA,SAAAU,EAAAjB,GAgBA,GAdAA,GAAAA,EAAA39F,OACAN,KAAAw+F,gBAAAoB,UAAA3B,EAAAl3F,KAAA,SAEA/G,KAAAw+F,gBAAAoB,UAAA,EAIAV,GAAAA,EAAA5+F,OACAN,KAAAw+F,gBAAAqB,UAAAX,EAAAn4F,KAAA,SAAA,EAEA/G,KAAAw+F,gBAAAqB,UAAA,EAIA7/F,KAAA+4E,UAAA,CAEA,GACA,GAAA/4E,KAAAw+F,gBAAAoB,WACA5/F,KAAAw+F,gBAAAoB,UAAA5/F,KAAAw9F,mBAAAx9F,KAAA+4E,UAEA,OAAA,EAIA/4E,KAAAw+F,gBAAAqB,UAAA7/F,KAAAw9F,mBAAAx9F,KAAA+4E,YACA/4E,KAAAw+F,gBAAAqB,UAAA7/F,KAAA+4E,UAAA/4E,KAAAw9F,mBAEAx9F,KAAAw+F,gBAAAqB,UAAA7/F,KAAAw+F,gBAAAoB,YACA5/F,KAAAw+F,gBAAAqB,UAAA7/F,KAAAw+F,gBAAAoB,YAKA,MAAA,CACAxrE,IAAAp0B,KAAAw+F,gBAAAoB,UACA3zE,IAAAjsB,KAAAw+F,gBAAAqB,YAOAlB,sBAAA,WACA3+F,KAAA49F,mBAAA59F,KAAAw+F,gBACAx+F,KAAAshD,SAAAtpC,QAAAwb,OACAxzB,KAAAshD,SAAAxpC,OAAA2C,SAOAmkF,cAAA,SAAAkB,GAKA9/F,KAAA4+F,cAAAmB,WAAA//F,KAAAggG,WAAAhgG,KAAAigG,WAGA,QAAAphG,MAAA0Z,cACAvY,KAAA4+F,cAAAmB,aAAA,GAIA//F,KAAA4+F,cAAAsB,iBAAArvF,KAAAK,MAAAlR,KAAA4+F,cAAAmB,WAAAlhG,MAAAk+F,qBAAAoD,cAGAngG,KAAA4+F,cAAAjB,aAAA39F,KAAAu9F,cAAAv9F,KAAA4+F,cAAAsB,iBAGAlgG,KAAA4+F,cAAAjB,aAAA39F,KAAA49F,mBAAAxpE,KACAp0B,KAAA4+F,cAAAsB,kBAAAlgG,KAAA49F,mBAAAxpE,IAAAp0B,KAAA4+F,cAAAjB,aACA39F,KAAA4+F,cAAAjB,aAAA39F,KAAA49F,mBAAAxpE,KACAp0B,KAAA4+F,cAAAjB,aAAA39F,KAAA49F,mBAAA3xE,MACAjsB,KAAA4+F,cAAAsB,kBAAAlgG,KAAA4+F,cAAAjB,aAAA39F,KAAA49F,mBAAA3xE,IACAjsB,KAAA4+F,cAAAjB,aAAA39F,KAAA49F,mBAAA3xE,KAIAjsB,KAAA29F,gBAAA39F,KAAA29F,aAAA39F,KAAA4+F,cAAAjB,eAEA39F,KAAA8+F,gCAOA9+F,KAAA4+F,cAAAwB,sBAAApgG,KAAA4+F,cAAAmB,WAAA//F,KAAA4+F,cAAAsB,iBAAArhG,MAAAk+F,qBAAAoD,aAGAngG,KAAA4+F,cAAAyB,cAAAxvF,KAAAK,MAAAlR,KAAA4+F,cAAAwB,sBAAA,IAGAvvF,KAAAilC,IAAA91C,KAAA4+F,cAAAyB,eAAAxhG,MAAAk+F,qBAAAuD,WACAtgG,KAAA4+F,cAAAyB,eAAArgG,KAAA4+F,cAAAyB,cAAA,EAAA,GAAA,GAAAxhG,MAAAk+F,qBAAAuD,UAIAtgG,KAAA4+F,cAAA2B,0BAAAvgG,KAAAi/F,gBAAAj/F,KAAA29F,cAAA39F,KAAA4+F,cAAAyB,cACArgG,KAAAyiF,QAAA,GAAAnhE,IAAA,UAAAziB,MAAA4Z,KAAAzY,KAAA4+F,cAAA2B,0BAAAvgG,KAAAk9F,eACAl9F,KAAAm9F,kBAAA77E,IAAA,QAAAthB,KAAAo9F,2BAAAp9F,KAAA4+F,cAAA2B,4BAMAtB,gBAAA,SAAAnF,GACA,OAAAA,EAAA,GAAAj7F,MAAAk+F,qBAAAoD,cAMA/B,iBAAA,SAAAn6D,GACA,MAAA,CACA04D,YAAA38F,KAAA28F,YACAjhF,UAAAuoB,EAAAl9B,KAAA,MACAiP,OAAAiuB,EAAAnuB,KAAA,kBAAA/O,KAAA,aAOA23F,cAAA,SAAAz6D,EAAAu8D,GAGA,GAFAxgG,KAAA0+F,cAAArB,WAAA,GAEA,GAAAmD,EAIA,IAHAxgG,KAAA0+F,cAAA+B,OAAAD,EACAxgG,KAAA0+F,cAAAgC,UAAAz8D,EAAAzQ,OAEAxzB,KAAA0+F,cAAAgC,UAAApgG,UACAN,KAAA0+F,cAAAgC,UAAA35F,KAAA,SAAA/G,KAAA0+F,cAAA+B,SACAzgG,KAAA0+F,cAAArB,WAAArvF,QAAAhO,KAAA0+F,cAAAgC,WACA1gG,KAAA0+F,cAAA+B,OAAAzgG,KAAA0+F,cAAAgC,UAAA35F,KAAA,SAGA,GAAA/G,KAAA0+F,cAAA+B,UAKAzgG,KAAA0+F,cAAAgC,UAAA1gG,KAAA0+F,cAAAgC,UAAAltE,OAIA,OAAAxzB,KAAA0+F,cAAArB,YAMAyB,8BAAA,WACA9+F,KAAAs9F,uBACAz7F,QAAA8+F,qBAAA3gG,KAAAs9F,uBAGAt9F,KAAAs9F,sBAAAz7F,QAAAkf,sBAAA/gB,KAAA4gG,iBAAAt5E,KAAAtnB,QAGA4gG,iBAAA,WAMA,IALA5gG,KAAAs9F,sBAAA,KAKAt9F,KAAA4gG,iBAAA7qC,GAAA,EAAA/1D,KAAA4gG,iBAAA7qC,GAAA/1D,KAAAq9F,WAAA/8F,OAAAN,KAAA4gG,iBAAA7qC,KACA/1D,KAAA4gG,iBAAAC,WAAA7gG,KAAAq9F,WAAAr9F,KAAA4gG,iBAAA7qC,IAGA/1D,KAAA4gG,iBAAAC,WAAA95F,KAAA,cAAA/G,KAAA4gG,iBAAAC,WAAA95F,KAAA,eAAA,GAGA,GAAA/G,KAAA4gG,iBAAAC,WAAA95F,KAAA,gBAEA/G,KAAA4gG,iBAAAC,WAAA/qF,KAAA,wBAAAsF,SASA,IAFApb,KAAA4gG,iBAAAE,cAAA9gG,KAAA0+F,cAAA1+F,KAAA+6B,YAAA/6B,KAAA29F,cAEA39F,KAAA4gG,iBAAA7qC,GAAA,EAAA/1D,KAAA4gG,iBAAA7qC,GAAA/1D,KAAA4gG,iBAAAE,cAAAxgG,OAAAN,KAAA4gG,iBAAA7qC,KACA/1D,KAAA4gG,iBAAAC,WAAA7gG,KAAA4gG,iBAAAE,cAAA9gG,KAAA4gG,iBAAA7qC,IAGA/1D,KAAA4gG,iBAAAC,WAAA95F,KAAA,cAAA/G,KAAA4gG,iBAAAC,WAAA95F,KAAA,eAAA,GAGA,GAAA/G,KAAA4gG,iBAAAC,WAAA95F,KAAA,gBAEAzI,EAAA,wCAAAO,MAAAc,EAAA,MAAA,sBAAA,aACAm4B,YAAA93B,KAAA4gG,iBAAAC,WAAA/qF,KAAA,qBAIA9V,KAAAq9F,WAAAr9F,KAAA4gG,iBAAAE,qBAEA9gG,KAAA4gG,iBAAA7qC,UACA/1D,KAAA4gG,iBAAAC,kBACA7gG,KAAA4gG,iBAAAE,gBAEA,CACAC,cAAA,EACAZ,aAAA,GACAG,SAAA,GAEArjF,SAAA,CACAqiF,iBAAAhhG,EAAA6kB,QCpjBAtkB,MAAA6xB,sBAAA7xB,MAAAs4B,qBAAAv4B,OAAA,CACAykC,OAAA,KACA29D,oBAAA,KAEAC,mBAAA,KAEAC,uCAAA,KACAC,uCAAA,EAEAppE,oBAAA,WAGA,OADA/3B,KAAAqjC,OAAArjC,KAAA8S,WAAAgD,KAAA,eACA9V,KAAAqjC,OAAAroB,SAAA,gBAGAsN,UAAA,WAEAtoB,KAAAohG,mBAIA,UAAAphG,KAAAkjB,aAAAhP,SAAA6S,SACA,cAAA/mB,KAAAkjB,aAAA4I,4BACAjqB,QAAAmY,QAAAha,KAAAqjC,OAAA,qBAEArjC,KAAAihG,mBAAA,IAAApiG,MAAAk+F,qBAAA/8F,KAAAA,KAAAw4B,kBAEAx4B,KAAAihG,mBAAA,KAIA,cAAAjhG,KAAAkjB,aAAA4I,4BACA9rB,KAAAqd,YAAArd,KAAAq3B,kBAAA,SAAA,SAAA9f,GACA,IAAAmH,EAAApgB,EAAAiZ,EAAA2F,QAEAwB,EAAA7I,SAAA,YACA,IAAA7V,KAAAqhG,iBAAA3iF,IACA1e,KAAAu/F,eAAA7gF,OAOA0iF,iBAAA,WAIA,IAHA,IAAAE,EAAAthG,KAAAkjB,aAAA4I,2BACAy1E,EAAAvhG,KAAAqjC,OAAAroB,SAAA,SAAAA,WAAAA,SAAA,oBAEA3b,EAAA,EAAAA,EAAAkiG,EAAAjhG,OAAAjB,IAAA,CACA,IAAAuc,EAAA2lF,EAAAlvF,GAAAhT,GACA+O,EAAAwN,EAAAxN,KAAA,kBAGA,GAAAA,IAAAkzF,EAAA,CACAthG,KAAAghG,oBAAAplF,EACA,IAAA4lF,EAAAxhG,KAAAkjB,aAAA8I,2BAEApQ,EACA5J,SAAA,WAAAwvF,GACAlqF,GAAA,QAAAtX,KAAAyhG,+BAAAn6E,KAAAtnB,WACA,CAEAA,KAAAkjB,aAAA0L,uBAAAxgB,GAEA9N,QACAsb,EACA5J,SAAA,aACAsF,GAAA,QAAAtX,KAAA0hG,iCAAAp6E,KAAAtnB,UAMAk4B,eAAA,WACA,OAAA,GAGAW,gBAAA,WACA,OAAA74B,KAAA2hG,wCACA3hG,KAAAkhG,uCAEAlhG,KAAA03B,eAIAM,gBAAA,SAAAc,GACA94B,KAAA2hG,wCACA3hG,KAAAkhG,uCAAApoE,EAEA94B,KAAA03B,cAAAoB,GAIAC,eAAA,WACA,OAAA/4B,KAAA2hG,wCACA3hG,KAAAmhG,sCAEAnhG,KAAA23B,cAIAM,eAAA,SAAAe,GACAh5B,KAAA2hG,wCACA3hG,KAAAmhG,sCAAAnoE,EAEAh5B,KAAA23B,aAAA33B,KAAAmhG,sCAAAnoE,GAIAO,kBAAA,WACA,IAAAz5B,EAAAE,KAAA6iB,OAQA,OAJA7iB,KAAA2hG,0CACA7hG,EAAA4nB,SAAAk6E,gBAAA5hG,KAAAihG,mBAAAlmE,YAAAh0B,KAAA,OAGAjH,GAGA25B,eAAA,SAAAD,GACAx5B,KAAA6iB,KAAA2W,GAEAx5B,KAAAihG,oBACAjhG,KAAAihG,mBAAA92E,SAAAqP,GAGA36B,MAAAkJ,GAAA+tD,0BAGAxhD,oBAAA,SAAAsB,GACA/W,MAAAyV,oBAAAsB,EAAA7O,KAAA,QAAA6O,EAAA,CACA9V,OAAA,CACA+hG,gCAAA7hG,KAAAkjB,aAAAU,WAEApB,cAAA9X,IACAA,EAAAw8D,iBACAlnE,KAAA8hG,uBAAAlsF,EAAAlL,EAAAw8D,kBAGAhkD,aAAAljB,KAAAkjB,gBAIAm+E,iBAAA,SAAA72E,EAAA+F,GACA,IAAAA,IAAA/F,EAAA3U,SAAA,YACA,OAAA,EAGA2U,EAAAlU,YAAA,YAQA,IALA,IAAA2tB,EAAAzZ,EAAAvD,SAAAA,SACAlR,EAAAkuB,EAAAl9B,KAAA,MACA+yF,EAAA71D,EAAAl9B,KAAA,SACAk3F,EAAAh6D,EAAAxpB,OAEAwjF,EAAA39F,QAAA,CACA,IAAAuB,QAAAmY,QAAAikF,EAAA,mBAAA,CACA,GAAAA,EAAAl3F,KAAA,UAAA+yF,EACA,MAGA95F,KAAAw3B,eACAx3B,KAAAw3B,cAAA7M,YAAAszE,GAGAj+F,KAAAihG,oBACAjhG,KAAAihG,mBAAAt2E,YAAAszE,GAGAj+F,KAAA03B,gBAGA,IAAAqqE,EAAA9D,EAAAxjF,OACAwjF,EAAA7iF,SACA6iF,EAAA8D,EAIA/hG,KAAAkjB,aAAAG,cAAA0J,sBACA/sB,KAAAkjB,aAAAG,cAAA0J,oBAAA,IAGA/sB,KAAAkjB,aAAAG,cAAA0J,oBAAArtB,KAAAqW,GACA/V,KAAAkjB,aAAAqI,iBAAA,sBAAAvrB,KAAAkjB,aAAAG,cAAA0J,qBAGA/sB,KAAAu4B,iBAGAgnE,eAAA,SAAA/0E,EAAA+F,GACA,IAAAA,GAAA/F,EAAA3U,SAAA,YACA,OAAA,EAMA,GAHA2U,EAAAxY,SAAA,YAGAhS,KAAAkjB,aAAAG,cAAA0J,oBAAA,CACA,IAAAkX,EAAAzZ,EAAAvD,SAAAA,SACAlR,EAAAkuB,EAAAl9B,KAAA,MACAhI,EAAAT,EAAA6O,QAAA4I,EAAA/V,KAAAkjB,aAAAG,cAAA0J,qBAEA,IAAA,IAAAhuB,EAAA,CACAiB,KAAAkjB,aAAAG,cAAA0J,oBAAAvd,OAAAzQ,EAAA,GACAiB,KAAAkjB,aAAAqI,iBAAA,sBAAAvrB,KAAAkjB,aAAAG,cAAA0J,qBAGA,IAAAqyE,EAAAp/F,KAAAq/F,uBAAAp7D,GAGA,IAAAl9B,EAAAzI,EAAAM,QAAA,EAAA,GAAAoB,KAAAkU,SAAApU,QACAiH,EAAA2gB,SAAAs6E,aAAAjsF,EAEAlX,MAAAiK,kBAAA,OAAA9I,KAAAkU,SAAAolB,uBAAA,CAAAvyB,KAAAA,IAAAyC,KAAAkB,IAEA,IAAA00F,EAAAn4E,SAAA3mB,OACA,OAGA,IAAAk5B,EAAAl7B,EAAAoM,EAAA3D,KAAArI,MAGAo6B,EAAA94B,KAAA03B,cAAA8B,EAAAl5B,OACA04B,EAAAh5B,KAAAkU,SAAAqY,WAAAiN,EAAAl5B,SAAAN,KAAAkU,SAAAqY,UAEA,GAAAyM,EAAA,CAEA,IAAAipE,EAAA7C,EAAAz4B,UAEA3mE,KAAAw3B,eACAx3B,KAAAw3B,cAAA7M,YAAAs3E,GAGAjiG,KAAAihG,oBACAjhG,KAAAihG,mBAAAt2E,YAAAs3E,GAGAA,EAAA7mF,SACA0d,GAAAmpE,EAAA3hG,YAGA04B,EAAAh5B,KAAA23B,aAGAynE,EAAAzoF,YAAA6iB,GACAx5B,KAAAu3B,YAAA3Y,KAAA4a,IAEAx5B,KAAAkjB,aAAA+C,SAAAjmB,KAAAkU,SAAAihB,cACAn1B,KAAAw3B,cAAArN,SAAAqP,EAAAhS,OAAA,oBACAxnB,KAAAkjB,aAAAoL,wBAGAtuB,KAAAihG,oBACAjhG,KAAAihG,mBAAA92E,SAAAqP,GAGA36B,MAAAqT,eAAAxH,EAAA3D,KAAAia,UACAniB,MAAA2T,eAAA9H,EAAA3D,KAAAka,UACApiB,MAAAkJ,GAAA+tD,yBAEA91D,KAAAg4B,gBAAAc,GACA94B,KAAAi4B,eAAAe,GAGAh5B,KAAAu4B,kBACA9uB,MAAAkB,IACA9L,MAAAkJ,GAAAC,eACAo3F,EAAAn4E,SAAA3mB,YAQA++F,uBAAA,SAAAp7D,GACA,OAAA3lC,EACA,wDACA2lC,EAAAjpB,WAAA1a,OADA,sCAKAw3B,YAAAmM,IAGA09D,sCAAA,WACA,OACA3hG,KAAAihG,oBACAjhG,KAAAihG,mBAAArW,UACA5qF,KAAAihG,mBAAAxD,sBAIAgE,+BAAA,SAAAlqF,GACA,IAAAqE,EAAAtd,EAAAiZ,EAAA8C,eAEA,IAAAuB,EAAA/F,SAAA,WAAA,CAKA,IACAqsF,EAAA,QADAliG,KAAAkjB,aAAA8I,2BACA,OAAA,MAEAhsB,KAAAkjB,aAAA4L,iBAAAozE,GACAliG,KAAAmiG,uBAAA5qF,EAAAqE,KAGA8lF,iCAAA,SAAAnqF,GACA,IAAAqE,EAAAtd,EAAAiZ,EAAA8C,eAEA,IAAAuB,EAAA/F,SAAA,WAAA,CAIA,IAAAzH,EAAAwN,EAAAxN,KAAA,kBAEApO,KAAAkjB,aAAAmI,iBAAAjd,GACApO,KAAAmiG,uBAAA5qF,EAAAqE,KAGAumF,uBAAA,SAAA5qF,EAAAqE,GACA5b,KAAAghG,qBACAhhG,KAAAghG,oBAAA1qF,YAAA,oBAGAsF,EAAAtF,YAAA,aAAAtE,SAAA,mBACAhS,KAAAkjB,aAAA2I,iCACA7rB,KAAAkjB,aAAAwF,iBAGA1oB,KAAAkjB,aAAAgH,qBAGA43E,uBAAA,SAAAlsF,EAAAsxD,GACA,IAAAuN,EAAA7+D,EAAA2E,QAAA,MAEA,IAAA,IAAAnM,KAAA84D,EACAA,EAAAznE,eAAA2O,IAIAqmE,EAAAz5D,SAAA,eAAA5M,EAAA,YAAA1P,KAAAwoE,EAAA94D,OCzVAvP,MAAAujG,eAAAvjG,MAAA+6B,uBAAAh7B,OAAA,CACA4kB,cAAA,KACA6+E,WAAA,KAEAvvF,WAAA,KACAinB,mBAAA,KACA1U,UAAA,KACAi9E,aAAA,KACAvrE,SAAA,KAEAwrE,aAAA,EAEAvlF,KAAA,SAAA9I,GAKA,IAAA5V,EAAA0G,cAAAkP,GAAA,CAKA,IAHA,IAAAimB,EAAA,GACAh6B,EAAA,CAAA,KAAA,OAAA,aAAA,mBAEAd,EAAA,EAAAA,EAAAc,EAAAG,aACA,IAAA85B,UAAA/6B,GADAA,IAEA86B,EAAAh6B,EAAAd,IAAA+6B,UAAA/6B,GAMA6U,EAAAimB,EAGAn6B,KAAA6iB,KAAAvkB,EAAAM,OAAA,GAAAC,MAAAujG,eAAAnlF,SAAA/I,IAEAlU,KAAAsiG,aAAAtiG,KAAA8S,WAAAkI,SAAA,QAAAA,SAAA,SACAhb,KAAA+2B,SAAA/2B,KAAAsiG,aAAA7nF,OAEAza,KAAAqd,YAAArd,KAAAsiG,aAAA,QAAA,KACAtiG,KAAAwjB,eACAyE,aAAAjoB,KAAAwjB,eAGAxjB,KAAAwjB,cAAA0E,WAAAloB,KAAAwiG,cAAAl7E,KAAAtnB,MAAA,OAGAA,KAAAqd,YAAArd,KAAAsiG,aAAA,WAAA,SAAA/qF,GAOA,OANAA,EAAAC,UAAA3V,QAAAumB,YACA7Q,EAAAK,iBAKAL,EAAAC,SACA,KAAA3V,QAAAumB,WAKA,OAJA7Q,EAAAK,sBACA5X,KAAAqiG,YACAriG,KAAAyiG,UAAAziG,KAAAqiG,WAAA96E,SAAAC,OAAA,YAKA,KAAA3lB,QAAAqpF,SAEA,GADA3zE,EAAAK,iBACA5X,KAAAqiG,WAAA,CACA,IAAAK,EAAA1iG,KAAAqiG,WAAA96E,SAAAC,OAAA,UACA,GAAAk7E,EAAApiG,OAAA,CACA,IAAAqiG,EAAAD,EAAAz7E,SAAA0/C,UAAA7wD,KAAA,oBAAAkC,QACA2qF,EAAAriG,QACAN,KAAA4iG,YAAAD,QAGA3iG,KAAA4iG,YAAA5iG,KAAAqiG,WAAA96E,SAAAlV,GAAA,IAGA,OAGA,KAAAxQ,QAAAmpF,OAEA,GADAzzE,EAAAK,iBACA5X,KAAAqiG,WAAA,CACA,IAAAK,EAAA1iG,KAAAqiG,WAAA96E,SAAAC,OAAA,UACA,GAAAk7E,EAAApiG,OAAA,CACA,IAAAuiG,EAAAH,EAAAz7E,SAAA0vE,UAAA7gF,KAAA,oBAAAgC,OACA+qF,EAAAviG,QACAN,KAAA4iG,YAAAC,QAGA7iG,KAAA4iG,YAAA5iG,KAAAqiG,WAAA96E,SAAAlV,GAAArS,KAAAqiG,WAAA96E,SAAAjnB,OAAA,IAGA,WAKAN,KAAAqd,YAAArd,KAAAsiG,aAAA,SAAA,WACAtiG,KAAAqiG,YACAriG,KAAAqiG,WAAAzlE,UAIA58B,KAAAqd,YAAArd,KAAAsiG,aAAA,QAAA,WACAtiG,KAAAuiG,YACAviG,KAAAuiG,aAAA,EAIAr6E,WAAA,KACAloB,KAAAqiG,YACAriG,KAAAqiG,WAAAn7E,QAEA,OAIA07E,YAAA,SAAAriF,GACAvgB,KAAAqiG,WAAA96E,SAAAjR,YAAA,SACAiK,EAAAvO,SAAA,SACAhS,KAAAqiG,WAAAh1C,UAAAj/C,KAAA,wBAAAmS,EAAAnS,KAAA,QAIAqsB,kBAAAn8B,EAAA6kB,KAEAgY,mBAAA,WACA,OAAA,MAGAqnE,cAAA,WAOA,GANAxiG,KAAAqiG,YACAriG,KAAA8iG,iBAGA9iG,KAAAsiG,aAAA/9F,MAEA,CACAvE,KAAA+2B,SAAAzgB,YAAA,UAIA,IAFA,IAAAysF,EAAA,GAEA1jG,EAAA,EAAAA,EAAAW,KAAAqlB,UAAA/kB,OAAAjB,IAAA,CACA,IAAA0W,EAAAzX,EAAA0B,KAAAqlB,UAAAhmB,IAAA0H,KAAA,MAEAgP,GACAgtF,EAAArjG,KAAAqW,GAIA/V,KAAAkU,SAAAqpB,iBACAwlE,EAAArjG,KAAAM,KAAAkU,SAAAqpB,iBAGA,IAAAx2B,EAAA,CACAxB,OAAAvF,KAAAsiG,aAAA/9F,MACAy+F,WAAAhjG,KAAAkU,SAAA8uF,WACAD,WAAAA,GAGAlkG,MAAAgI,kBAAA,uBAAAE,EAAA,CAAA2D,EAAA9C,KAQA,GANA5H,KAAAqiG,YACAriG,KAAA8iG,iBAGA9iG,KAAA+2B,SAAA/kB,SAAA,UAEA,YAAApK,EAAA,CAMA,IALA,IAGAqK,EAHA8jB,EAAAz3B,EAAA,+BAAAkQ,SAAA3M,QAAA+Q,MACAb,EAAAzT,EAAA,SAAAkQ,SAAAunB,GAIA12B,EAAA,EAAAA,EAAAqL,EAAAu4F,KAAA3iG,OAAAjB,IACA4S,EAAA3T,EAAA,SACAkQ,SAAAuD,GAEAzT,EAAA,wBACAkQ,SAAAyD,GACA3O,KAAAoH,EAAAu4F,KAAA5jG,GAAA6b,OACAnU,KAAA,KAAA2D,EAAAu4F,KAAA5jG,GAAA0W,IACA/D,SAAAtH,EAAAu4F,KAAA5jG,GAAA6jG,QAAA,WAAA,IAGAx4F,EAAAy4F,aACAlxF,EAAA3T,EAAA,SAAAkQ,SAAAuD,GACAzT,EAAA,yBAAAkQ,SAAAyD,GAAA3O,KAAAyD,EAAAxB,SAGAwM,EAAA+D,KAAA,0BAAA9D,SAAA,SAEAhS,KAAAqiG,WAAA,IAAAxgG,QAAAuhG,KAAArtE,EAAA,CACAstE,gBAAArjG,KAAAsiG,aACA/0C,eAAAvtD,KAAAyiG,UAAAn7E,KAAAtnB,QAGAA,KAAAqd,YAAA0Y,EAAA,YAAA,KACA/1B,KAAAuiG,aAAA,IAGAviG,KAAAqiG,WAAAzlE,eAIA58B,KAAA+2B,SAAA/kB,SAAA,WAIAywF,UAAA,SAAAjwE,GACA,IAAAjS,EAAAjiB,EAAAk0B,GAEA,IAAAjS,EAAA1K,SAAA,YAAA,CAIA,IAAAE,EAAAwK,EAAAxZ,KAAA,MACAmU,EAAAqF,EAAAjd,OAEAsS,EAAAtX,EAAA,SAAA,CACA2c,MAAA,0BACA86D,UAAAhgE,EACAutF,eAAAtjG,KAAAkU,SAAAqvF,aACAC,aAAAtoF,EACAuoF,gBAAA,MACAj1F,SAAAxO,KAAA+5B,oBAEAz1B,EAAAhG,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAlF,KAAAkU,SAAAhP,KAAA,KACAC,MAAA4Q,IACAvH,SAAAoH,GAEAtX,EAAA,OAAA,CACA2c,MAAA,cACAC,MAAArc,MAAAc,EAAA,MAAA,YACA6O,SAAAoH,GAEA,IAAA8tF,EAAAplG,EAAA,SAAA,CACA2c,MAAA,UACAzM,SAAAoH,GAEAtX,EAAA,UAAA,CACA2c,MAAA,QACA3X,KAAA4X,IACA1M,SAAAk1F,GAEA,IAAA72C,IAAAj3C,EAAA0mB,aAAA,IACAt8B,KAAAsiG,aAAAhhF,IAAA,UAAAziB,MAAA4Z,KAAAo0C,EAAA,MAEA,IAAAzwB,EAAA,GAYA,GAXAA,EAAA,UAAAv9B,MAAA4Z,MAAA,EACAzY,KAAAsiG,aAAA9pF,SAAA4jB,EAAA,QAEAp8B,KAAAqlB,UAAArlB,KAAAqlB,UAAA3H,IAAA9H,GAEA5V,KAAA87B,YAAAlmB,GAEA5V,KAAA8iG,iBACA9iG,KAAAsiG,aAAA/9F,IAAA,IACAvE,KAAAsiG,aAAAnrF,QAAA,UAEApB,EAAA,CAEAH,EAAA5D,SAAA,oBAEA,IAAAjL,EAAA,CACA+1D,QAAA98D,KAAAkU,SAAA8uF,WACA9nF,MAAAA,GAGArc,MAAAgI,kBAAA,kBAAAE,EAAA,CAAA2D,EAAA9C,KACA,YAAAA,GAAA8C,EAAAhD,SACAkO,EAAAxH,KAAA,UAAA1D,EAAAqL,IACAzR,EAAAC,IAAAmG,EAAAqL,IAEAH,EAAAU,YAAA,sBAEAtW,KAAAi8B,cAAArmB,GAEA,YAAAhO,GAEA/I,MAAAkJ,GAAAC,aAAAnJ,MAAAc,EAAA,MAAA,mCAOAmjG,eAAA,WACA9iG,KAAAqiG,WAAAn7E,OACAlnB,KAAAqiG,WAAApkF,UACAje,KAAAqiG,WAAA,OAEA,CACAplF,SAAA,CACA+lF,WAAA,QCvSAnkG,MAAA8xB,uBAAA9xB,MAAAs4B,qBAAAv4B,OAAA,CACAm5B,oBAAA,WACA,OAAA/3B,KAAA8S,WAAAkI,SAAA,SCLAnc,MAAA03B,GACA,CACAmgD,gBAAA,SAAAqJ,GACAA,EAAAzhF,EAAAM,OAAA,CACA+kG,cAAA,GACA5jB,GACA,IAAAz7E,EAAAhG,EAAA,WAAA,CACA8P,KAAA,CACA6M,MAAA,OACA3Z,KAAAy+E,EAAAz+E,MAAA,OACAsiG,UAAA7jB,EAAA6jB,UACA7tF,GAAAgqE,EAAAhqE,GACAK,KAAA2pE,EAAA3pE,KACAlR,KAAA66E,EAAA76E,KACAC,MAAA46E,EAAA56E,MACA0+F,UAAA9jB,EAAA8jB,UACAC,UAAA9jG,KAAA+jG,kBAAAhkB,EAAA+jB,WACAH,aAAA,kBAAA5jB,EAAA4jB,aAAA5jB,EAAA4jB,aAAA,KAAA,MAAA5jB,EAAA4jB,aACA70B,SAAA9uE,KAAAgkG,iBAAAjkB,EAAAjR,UACAm1B,SAAAlkB,EAAAkkB,SACA/oF,MAAA6kE,EAAA7kE,MACA4b,YAAAipD,EAAAjpD,YACA6pD,KAAAZ,EAAAY,KACAvsD,IAAA2rD,EAAA3rD,IACAnI,IAAA8zD,EAAA9zD,OA8BA,OA1BA8zD,EAAA9kE,OACA3W,EAAA0N,SAAA+tE,EAAA9kE,OAEA8kE,EAAAjpD,aACAxyB,EAAA0N,SAAA,YAEA,aAAA+tE,EAAAz+E,MACAgD,EAAA0N,SAAA,YAEA+tE,EAAAjR,UACAxqE,EAAA0N,SAAA,YAEA+tE,EAAA3pE,MACA9R,EAAA0N,SAAA,aAGA+tE,EAAAmkB,eAAAnkB,EAAA8jB,WACAv/F,EACA8J,KAAA,wBACAkT,IAAA,YAAA,QAAAziB,MAAA0Z,YAAA,QAAA,QAAA,IAAAwnE,EAAA8jB,UAAAhxE,WAAAvyB,OAAA,GAAA,OAGAy/E,EAAAjpD,aAAAipD,EAAAmkB,gBACA,IAAAriG,QAAAsY,SAAA7V,GAGA,aAAAy7E,EAAAz+E,KACAhD,EAAA,kCAAAiU,OAAAjO,GAEAA,GAIAuyB,gBAAA,SAAAkpD,GAIA,OAHAA,EAAAhqE,KACAgqE,EAAAhqE,GAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA5R,KAAAunE,YAAAvnE,KAAA02E,gBAAAqJ,GAAAA,IAGAokB,oBAAA,SAAApkB,GACA,IAAAhqE,EAAAgqE,EAAAhqE,IAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UACAwyF,EAAArkB,EAAAqkB,UAAAruF,EAAA,OAEAjD,EAAAxU,EAAA,SAAA,CACA2c,MAAA,aAGA3W,EAAAtE,KAAA02E,gBAAAp4E,EAAAM,OAAA,GAAAmhF,EAAA,CACAkkB,UAAA,KACAz1F,SAAAsE,GAmBA,OAjBAxU,EAAA,YAAA,CACAgD,KAAA,SACAyU,GAAAquF,EACAnpF,MAAA,MACAkC,YAAA,YACAjC,MAAArc,MAAAc,EAAA,MAAA,qBACAwb,aAAAtc,MAAAc,EAAA,MAAA,uBACA6O,SAAAsE,GAEAwE,GAAA,QAAA,KACAhT,EAAA,GAAA3C,SACA4E,SAAA89F,YAAA,QACAxlG,MAAAkJ,GAAAua,cAAAzjB,MAAAc,EAAA,MAAA,yBACAmT,EAAAqE,QAAA,QACA7S,EAAA,GAAAE,kBAAA,EAAA,KAGAsO,GAGAwxF,oBAAA,SAAAvkB,GAIA,OAHAA,EAAAhqE,KACAgqE,EAAAhqE,GAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA5R,KAAAunE,YAAAvnE,KAAAmkG,oBAAApkB,GAAAA,IAGAwkB,qBAAA,SAAAxkB,GACA,IAAAjtE,EAAAxU,EAAA,SAAA,CACA2c,MAAA,iBAEAiB,EAAA5d,EAAA,SAAA,CACA2c,MAAA,SACAzM,SAAAsE,GACA9S,KAAAskG,oBAAAhmG,EAAAM,OAAA,CACAwX,KAAAvF,KAAAob,IAAApb,KAAAujB,IAAA2rD,EAAA56E,MAAA7E,OAAA,IAAA,KACAy/E,IAAAvxE,SAAA0N,GACA,IAAA6V,EAAA,IAAAlwB,QAAAi9B,MAAAhsB,EAAA,CACAiqB,kBAAA,IAKA,OAHAjqB,EAAAwE,GAAA,OAAA,KACAya,EAAA7K,SAEApU,GAGA0xF,eAAA,SAAAzkB,GACA,IAAA/I,EAAA14E,EAAA,cAAA,CACA2c,MAAA,OACA6iD,KAAAiiB,EAAAjiB,MAAA,EACA7kD,KAAA8mE,EAAA9mE,MAAA,GACAlD,GAAAgqE,EAAAhqE,GACA7Q,KAAA66E,EAAA76E,KACA2+F,UAAA9jB,EAAA8jB,UACAC,UAAA/jB,EAAA+jB,YAAAjiG,QAAAsf,iBAAA,GACA2tD,WAAAiR,EAAAjR,SACAh4C,YAAAipD,EAAAjpD,YACAp4B,KAAAqhF,EAAA56E,QAeA,OAZA46E,EAAAmkB,eACAltB,EAAA5oE,KAAA,uBAAA,IAGA2xE,EAAA9kE,OACA+7D,EAAAhlE,SAAA+tE,EAAA9kE,OAGA8kE,EAAA3pE,MACA4gE,EAAAhlE,SAAA,aAGAglE,GAGAytB,oBAAA,SAAA1kB,GAIA,OAHAA,EAAAhqE,KACAgqE,EAAAhqE,GAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA5R,KAAAunE,YAAAvnE,KAAAwkG,eAAAzkB,GAAAA,IAGA9Q,aAAA,SAAA8Q,GACA,IAAAjtE,EAAAxU,EAAA,SAAA,CACA2c,MAAA,WAGA8kE,EAAA9kE,OACAnI,EAAAd,SAAA+tE,EAAA9kE,OAGA,IAAAypF,EAAApmG,EAAA,YAAA,CACAyX,GAAAgqE,EAAAhqE,GACA7Q,KAAA66E,EAAA76E,KACA4+F,UAAA/jB,EAAA+jB,WAAAjiG,QAAAsf,iBAAA,GACA2tD,SAAAiR,EAAAjR,SACA61B,qBAAA5kB,EAAAoD,eACA30E,SAAAsE,GAGA,GAAAxU,EAAA0G,cAAA+6E,EAAA94E,SAAA,CACA,IAAAA,EAAA,GACA,IAAA,IAAAhI,KAAA8gF,EAAA94E,QAAA,CACA,IAAA84E,EAAA94E,QAAAxH,eAAAR,GACA,SAEA,IAAAuzB,EAAAutD,EAAA94E,QAAAhI,GACAX,EAAA0G,cAAAwtB,QACA,IAAAA,EAAAoyE,SACA39F,EAAAvH,KAAA8yB,GAEAvrB,EAAAvH,KAAA,CACAuW,MAAAuc,EAAAvc,MACA9Q,WAAA,IAAAqtB,EAAArtB,MAAAqtB,EAAArtB,MAAAlG,EACA6vE,cAAA,IAAAt8C,EAAAs8C,UAAAt8C,EAAAs8C,WAIA7nE,EAAAvH,KAAA,CACAuW,MAAAuc,EACArtB,MAAAlG,IAIA8gF,EAAA94E,QAAAA,EAGA,IAAA49F,EAAA,KAEA,IAAA,IAAAxlG,EAAA,EAAAA,EAAA0gF,EAAA94E,QAAA3G,OAAAjB,IAAA,CACA,IAAAmzB,EAAAutD,EAAA94E,QAAA5H,QAGA,IAAAmzB,EAAAoyE,SACAC,EAAAvmG,EAAA,cAAA,CACA2X,MAAAuc,EAAAvc,QACAzH,SAAAk2F,GAEApmG,EAAA,YAAA,CACA6G,MAAAqtB,EAAArtB,MACA2/F,SAAAtyE,EAAArtB,OAAA46E,EAAA56E,MACA2pE,cAAA,IAAAt8C,EAAAs8C,UAAAt8C,EAAAs8C,SACApwE,KAAA8zB,EAAAvc,QACAzH,SAAAq2F,GAAAH,GASA,OALA3kB,EAAAzI,SACAotB,EAAA1yF,SAAA,eACA,IAAAnT,MAAA8a,YAAA+qF,IAGA5xF,GAGA0jB,kBAAA,SAAAupD,GAIA,OAHAA,EAAAhqE,KACAgqE,EAAAhqE,GAAA,SAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA5R,KAAAunE,YAAAvnE,KAAAivE,aAAA8Q,GAAAA,IAGAtY,eAAA,SAAAsY,GACA,IAAAhqE,EAAAgqE,EAAAhqE,IAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UAEAtN,EAAAhG,EAAA,WAAA,CACAgD,KAAA,WACA6D,WAAA,IAAA46E,EAAA56E,MAAA46E,EAAA56E,MAAA,IACA4Q,GAAAA,EACAkF,MAAA,WACA/V,KAAA66E,EAAA76E,KACAuiD,QAAAs4B,EAAAt4B,QAAA,UAAA,KACAq8C,UAAA9jG,KAAA+jG,kBAAAhkB,EAAA+jB,WACAh1B,SAAA9uE,KAAAgkG,iBAAAjkB,EAAAjR,UACAi2B,cAAAhlB,EAAAzI,OACA0tB,sBAAAjlB,EAAAklB,gBAGAllB,EAAA9kE,OACA3W,EAAA0N,SAAA+tE,EAAA9kE,QAGA8kE,EAAAzI,QAAAyI,EAAAklB,iBACA3gG,EAAA0N,SAAA,eACA,IAAAnT,MAAA8a,YAAArV,IAGA,IAAA6mD,EAAA7sD,EAAA,WAAA,CACA4mG,IAAAnvF,EACArX,KAAAqhF,EAAA9pE,QAIA,OAAA8pE,EAAA76E,OAAA66E,EAAA76E,KAAA5E,OAAA,GAAA,OAAAy/E,EAAA76E,KAAAxD,QAAA,IACApD,EAAA,CACAA,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAA66E,EAAA76E,KACAC,MAAA,KACA,GACAb,EAAA,GACA6mD,EAAA,KAGA7sD,EAAA,CACAgG,EAAA,GACA6mD,EAAA,MAKAg6C,oBAAA,SAAAplB,GACAA,EAAAhqE,KACAgqE,EAAAhqE,GAAA,WAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAGA,IAAAy8D,EAAA/vE,EAAA,qCAAA,CACAyX,GAAAgqE,EAAAhqE,GAAA,WAgBA,OAbAgqE,EAAA/nE,OACAq2D,EAAAr8D,SAAA,SAEA+tE,EAAAvY,cACA6G,EAAAr8D,SAAA,oBAGAhS,KAAAynE,eAAAsY,GAAAvxE,SAAA6/D,GAEA0R,EAAAvY,cACAlpE,EAAA,+BAAAgF,KAAAy8E,EAAAvY,cAAAh5D,SAAA6/D,GAGAA,GAGA+2B,qBAAA,SAAArlB,GACA,IAMAslB,EAAAC,EANAxyF,EAAAxU,EAAA,uCAEAyhF,EAAA9kE,OACAnI,EAAAd,SAAA+tE,EAAA9kE,OAKA8kE,EAAAwlB,eACAF,EAAAtlB,EAAAslB,UAAA,IACAC,EAAAvlB,EAAAxxE,QAAA82F,EAGA/mG,EAAA,UAAAkQ,SAAAsE,GAAAP,OACAvS,KAAAynE,eAAA,CACA1xD,GAAAgqE,EAAAhqE,GACAkF,MAAA,MACAhF,MAAA,OAAA8pE,EAAAylB,UAAA3mG,MAAAc,EAAA,MAAA,QAAA,OACAuF,KAAA66E,EAAA76E,KACAC,MAAAkgG,EACA59C,QAAA69C,EACAxB,UAAA/jB,EAAA+jB,cAIAwB,GAAA,EAIA,IAAA,IAAAjmG,EAAA,EAAAA,EAAA0gF,EAAA94E,QAAA3G,OAAAjB,IAAA,CACA,IAAAmzB,EAAAutD,EAAA94E,QAAA5H,GAEAmzB,EAAArtB,OAAAkgG,GAIA/mG,EAAA,UAAAkQ,SAAAsE,GAAAP,OACAvS,KAAAynE,eAAA,CACAxxD,MAAAuc,EAAAvc,MACA/Q,KAAA66E,EAAA76E,KAAA66E,EAAA76E,KAAA,KAAA,KACAC,MAAAqtB,EAAArtB,MACAsiD,QAAA69C,IAAAvlB,EAAAxxE,QAAA,IAAAe,SAAAkjB,EAAArtB,OACA2pE,SAAAw2B,KAOA,OAFA,IAAAzjG,QAAA6X,eAAA5G,GAEAA,GAGA2yF,0BAAA,SAAA1lB,GAKA,OAJAA,EAAA2lB,UAAA,EACA3lB,EAAAhqE,KACAgqE,EAAAhqE,GAAA,iBAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA5R,KAAAunE,YAAAvnE,KAAAolG,qBAAArlB,GAAAA,IAGAxJ,kBAAA,SAAAwJ,GACA,IAAA56E,EAAA46E,EAAA56E,OAAA,IACA8U,EAAA8lE,EAAA9lE,oBAAA,IAEAnH,EAAAxU,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAA,cACA0qF,aAAAxgG,EACAygG,2BAAA3rF,EACAlE,GAAAgqE,EAAAhqE,GACA8e,KAAA,WACAE,eAAAgrD,EAAAzoE,GAAA,OAAAyoE,EAAAgK,cAAA,QAAA,QACA8b,kBAAA9lB,EAAA+lB,QACAf,cAAAhlB,EAAAzI,OACA0tB,sBAAAjlB,EAAAklB,gBAyCA,OAtCAllB,EAAAzoE,GACAxE,EAAAd,SAAA,MACA+tE,EAAAgK,eACAj3E,EAAAd,SAAA,iBAGA+tE,EAAA1J,OACAvjE,EAAAd,SAAA,SAGA+tE,EAAAjR,UACAh8D,EAAAd,SAAA,YAGA1T,EACA,uEAGAkQ,SAAAsE,GAEAitE,EAAA76E,MACA5G,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAA66E,EAAA76E,KACAC,MAAA46E,EAAAzoE,GAAAnS,EAAA46E,EAAAgK,cAAA9vE,EAAA,GACA60D,SAAAiR,EAAAjR,WACAtgE,SAAAsE,IAGAitE,EAAAzI,QAAAyI,EAAAklB,iBACAnyF,EAAAd,SAAA,eACA,IAAAnT,MAAA8a,YAAA7G,IAGA,IAAAjU,MAAAqb,YAAApH,EAAA,CACA09B,SAAAuvC,EAAAvvC,UAAAlyC,EAAA6kB,OAGArQ,GAGA06D,uBAAA,SAAAuS,GAIA,OAHAA,EAAAhqE,KACAgqE,EAAAhqE,GAAA,cAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA5R,KAAAunE,YAAAvnE,KAAAu2E,kBAAAwJ,GAAAA,GACA/tE,SAAA,sBAGAwyD,iBAAA,SAAAub,GACA,MAAAhqE,EAAAgqE,EAAAhqE,IAAA,QAAAlF,KAAAC,MAAA,IAAAD,KAAAe,UACAm0F,EAAAhmB,EAAAgmB,aAAAhwF,EAAA,aACA7Q,EAAA66E,EAAA76E,MAAA,KACAC,EAAA46E,EAAA56E,OAAA,KACAkxE,EAAA0J,EAAA1J,QAAA,EACAytB,EAAA/jB,EAAA+jB,WAAAjiG,QAAAsf,iBAAA,GACA2tD,EAAAiR,EAAAjR,WAAA,EAEAh8D,EAAAxU,EAAA,SAAA,CACAyX,GAAAgwF,EACA9qF,MAAA,yBAGA+qF,EAAA1nG,EAAA,SAAA,CACA2c,MAAA,gBAAAo7D,EAAA,SAAA,MACA7nE,SAAAsE,GAOA09C,GALAlyD,EAAA,SAAA,CACA2c,MAAA,gBACA6qC,MAAAi6B,EAAA56E,MAAA,CAAA8zC,gBAAA8mC,EAAA56E,OAAA,OACAqJ,SAAAw3F,GAEA1nG,EAAA,SAAA,CACA2c,MAAA,0BAEA1I,OACAjU,EAAA,SAAA,CACA2c,MAAA,iCACAm2E,cAAA,OACA9tF,KAAA,OAGAkL,SAAAsE,IAEA9S,KAAA02E,gBAAA,CACA3gE,GAAAA,EACA7Q,KAAAA,EACAC,MAAAtG,MAAAoQ,MAAA9J,EAAA,KACAiR,KAAA,GACA6E,MAAA,cACA6oF,UAAAA,EACAh1B,SAAAA,EACA3zD,aAAAtc,MAAAc,EAAA,MAAA,qBACA6O,SAAAgiD,GAGA,OADA,IAAA3xD,MAAAulE,WAAAtxD,GACAA,GAGAmzF,iBAAA,SAAAlmB,GAKA,OAJAA,EAAA2lB,UAAA,EAAAj4F,EACAsyE,EAAAhqE,KACAgqE,EAAAhqE,GAAA,QAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA5R,KAAAunE,YAAAvnE,KAAAwkE,iBAAAub,GAAAA,IAGAzJ,gBAAA,SAAAyJ,GACA,IAAAhqE,GAAAgqE,EAAAhqE,IAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAAA,QACA1M,EAAA66E,EAAA76E,MAAA,KACAR,EAAAQ,EAAAA,EAAA,SAAA,KACAC,EAAA46E,EAAA56E,OAAA,mBAAA46E,EAAA56E,MAAA+gG,SAAAnmB,EAAA56E,MAAA,KACAghG,EAAAhhG,EAAAtG,MAAAyD,WAAA6C,GAAA,KACA2+F,EAAA/jB,EAAA+jB,WAAAjiG,QAAAsf,iBAAA,GACA2tD,EAAAiR,EAAAjR,WAAA,EAEAh8D,EAAAxU,EAAA,SAAA,CACA2c,MAAA,gBAGA3W,EAAAtE,KAAA02E,gBAAA,CACA3gE,GAAAA,EACA7Q,KAAAR,EACAS,MAAAghG,EACArvE,YAAA,IACA6sE,cAAA,EACAG,UAAAA,EACAh1B,SAAAA,IACAtgE,SAAAsE,GAgBA,OAdAxU,EAAA,gCAAAkQ,SAAAsE,GAEA5N,GACA5G,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAA,EAAA,aACAX,IAAA1F,MAAAunG,WACA53F,SAAAsE,GAGAxO,EAAA7B,WAAAnE,EAAAM,OAAA,CACAynG,YAAAlhG,GAAA,IAAA3C,MACA3D,MAAA6D,oBAEAoQ,GAGAwzF,gBAAA,SAAAvmB,GAIA,OAHAA,EAAAhqE,KACAgqE,EAAAhqE,GAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA5R,KAAAunE,YAAAvnE,KAAAs2E,gBAAAyJ,GAAAA,IAGAwmB,sBAAA,SAAAxmB,GACA,IAAA31C,EAAA,IAAA5nC,KACAgkG,EAAA,IAAAhkG,KAAA4nC,EAAAq8D,cAAAr8D,EAAA87D,WAAA97D,EAAAs8D,WACA3mB,EAAAzhF,EAAAM,OAAA,CACAqc,MAAA,GACAhU,QAAA,CACA,QACA,WACA,YACA,WACA,YACA,aACA,aACA,YAEAupC,SAAAlyC,EAAA6kB,KACA2hF,SAAA,KACA6B,UAAA,KACAC,QAAA,MACA7mB,GAEA,IAWAvtD,EACAC,EAZAsD,EAAAz3B,EAAA,SAAA,CAAA2c,MAAA,SACAlJ,EAAAzT,EAAA,QAAA,CAAA2c,MAAA,WAAAzM,SAAAunB,GACA8wE,EAAAvoG,EAAA,QACA0T,SAAA,OACA1O,KAAAzE,MAAAc,EAAA,MAAA,QACAoH,KAAA,SAAA,OAEAzI,EAAA,SACAiU,OAAAs0F,GACAr4F,SAAAuD,GAIA,IAAA,IAAA1S,EAAA,EAAAA,EAAA0gF,EAAA94E,QAAA3G,OAAAjB,IAAA,CACA,IAAA84B,EAAA4nD,EAAA94E,QAAA5H,GACA,OAAA84B,GACA,IAAA,QACA3F,EAAA,CACAvc,MAAApX,MAAAc,EAAA,MAAA,SACAgnG,UAAAH,EACAI,QAAAJ,GAEA,MACA,IAAA,WACA,IAAAM,EAAA18D,EAAA28D,SAAAloG,MAAA6D,kBAAAskG,SACAF,EAAA,IACAA,GAAA,GAEAt0E,EAAA,CACAvc,MAAApX,MAAAc,EAAA,MAAA,aACAgnG,UAAA,IAAAnkG,KAAA4nC,EAAAq8D,cAAAr8D,EAAA87D,WAAA97D,EAAAs8D,UAAAI,GACAF,QAAAJ,GAEA,MACA,IAAA,YACAh0E,EAAA,CACAvc,MAAApX,MAAAc,EAAA,MAAA,cACAgnG,UAAA,IAAAnkG,KAAA4nC,EAAAq8D,cAAAr8D,EAAA87D,YACAU,QAAAJ,GAEA,MACA,IAAA,WACAh0E,EAAA,CACAvc,MAAApX,MAAAc,EAAA,MAAA,aACAgnG,UAAA,IAAAnkG,KAAA4nC,EAAAq8D,cAAA,GACAG,QAAAJ,GAEA,MACA,IAAA,YACAh0E,EAAA,CACAvc,MAAApX,MAAAc,EAAA,MAAA,kBAAA,CAAAupE,IAAA,IACAy9B,UAAA,IAAAnkG,KAAA4nC,EAAAq8D,cAAAr8D,EAAA87D,WAAA97D,EAAAs8D,UAAA,GACAE,QAAAJ,GAEA,MACA,IAAA,aACAh0E,EAAA,CACAvc,MAAApX,MAAAc,EAAA,MAAA,kBAAA,CAAAupE,IAAA,KACAy9B,UAAA,IAAAnkG,KAAA4nC,EAAAq8D,cAAAr8D,EAAA87D,WAAA97D,EAAAs8D,UAAA,IACAE,QAAAJ,GAEA,MACA,IAAA,aACAh0E,EAAA,CACAvc,MAAApX,MAAAc,EAAA,MAAA,kBAAA,CAAAupE,IAAA,KACAy9B,UAAA,IAAAnkG,KAAA4nC,EAAAq8D,cAAAr8D,EAAA87D,WAAA97D,EAAAs8D,UAAA,IACAE,QAAAJ,GAEA,MACA,IAAA,WACAh0E,EAAA,CACAvc,MAAApX,MAAAc,EAAA,MAAA,aACAgnG,UAAA,IAAAnkG,KAAA4nC,EAAAq8D,cAAAr8D,EAAA87D,WAAA97D,EAAAs8D,UAAA,KACAE,QAAAJ,GAKA,IAAAv0F,EAAA3T,EAAA,SACA4jB,EAAA5jB,EAAA,OAAA,CAAAgF,KAAAkvB,EAAAvc,QACAlP,KAAA,SAAAoxB,GACApxB,KAAA,YAAAyrB,EAAAm0E,WACA5/F,KAAA,UAAAyrB,EAAAo0E,SACA7/F,KAAA,YAAAyrB,EAAAm0E,UAAAn0E,EAAAm0E,UAAAt9F,UAAA,MACAtC,KAAA,UAAAyrB,EAAAo0E,QAAAp0E,EAAAo0E,QAAAv9F,UAAA,MAEA02E,EAAA+kB,UAAA3sE,GAAA4nD,EAAA+kB,WACAryE,EAAAvQ,EAAA,IAGAjQ,EAAAM,OAAA2P,GACAjQ,EAAAzD,SAAAuD,GAGAzT,EAAA,SAAAkQ,SAAAunB,GAEA,IAAAkxE,EAAA3oG,EAAA,SAAA,CAAA2c,MAAA,4BAAAzM,SAAAunB,GACAmxE,EAAAlnG,KAAAsmG,gBAAA,CAAArwF,MAAApX,MAAAc,EAAA,MAAA,UAAA6O,SAAAy4F,GAAAnxF,KAAA,SACAqxF,EAAAnnG,KAAAsmG,gBAAA,CAAArwF,MAAApX,MAAAc,EAAA,MAAA,QAAA6O,SAAAy4F,GAAAnxF,KAAA,SAGAsxF,EAAAF,EAAAxpF,IAAAypF,GACAC,EAAA9vF,GAAA,SAAA,SAAAC,GACAA,EAAAC,UAAA3V,QAAA0c,SAAAjgB,EAAA0B,MAAA+G,KAAA,cAAAsgG,MAAAl0E,GAAA,aACA5b,EAAAM,qBAKAqvF,EAAAngG,KAAA,cAAAsgG,MAAA/vF,GAAA,aAAA,SAAAC,GACAA,EAAAM,qBAEAsvF,EAAApgG,KAAA,cAAAsgG,MAAA/vF,GAAA,aAAA,SAAAC,GACAA,EAAAM,qBAGA,IAAAuP,EAAA,IAAAvlB,QAAAuhG,KAAArtE,EAAA,CACAw3B,eAAA,SAAA/6B,GACA,IAAAjS,EAAAjiB,EAAAk0B,GACApY,EAAA9W,KAAAid,EAAAjd,QACA8jB,EAAAkgF,8BACAvxE,EAAAjgB,KAAA,QAAAQ,YAAA,OACAiK,EAAAvO,SAAA,OAGAk1F,EAAAzkG,WAAA,UAAA8d,EAAAxZ,KAAA,cACAogG,EAAA1kG,WAAA,UAAA8d,EAAAxZ,KAAA,YAEAg5E,EAAAvvC,SAAAjwB,EAAAxZ,KAAA,cAAA,KAAAwZ,EAAAxZ,KAAA,YAAA,KAAAwZ,EAAAxZ,KAAA,cAIAqgG,EAAA9vF,GAAA,UAAA,WAEA,IAMAiJ,EANAomF,EAAAO,EAAAzkG,WAAA,WACAmkG,EAAAO,EAAA1kG,WAAA,WACA8kG,EAAAZ,EAAAA,EAAAt9F,UAAA,KACAm+F,EAAAZ,EAAAA,EAAAv9F,UAAA,KAEAke,EAAAxV,EAAA+D,KAAA,KAEA2xF,GAAA,EAEA,IAAA,IAAApoG,EAAA,EAAAA,EAAAkoB,EAAAjnB,OAAAjB,IAEA,GADAkhB,EAAAgH,EAAAlV,GAAAhT,GAEAkoG,KAAAhnF,EAAAxZ,KAAA,cAAA,OACAygG,KAAAjnF,EAAAxZ,KAAA,YAAA,MACA,CACAqgB,EAAAuH,aAAApO,EAAA,IACAknF,GAAA,EACA1nB,EAAAvvC,SAAA,KAAA,KAAAjwB,EAAAxZ,KAAA,WACA,MAIA0gG,IACA1xE,EAAAjgB,KAAA,QAAAQ,YAAA,OACA2wF,EAAAj1F,SAAA,OAEAu1F,GAAAC,EAEAD,GAAAC,EACAptF,EAAA9W,KAAA4jG,EAAA3iG,MAAA,MAAA4iG,EAAA5iG,OACAgjG,EACAntF,EAAA9W,KAAAzE,MAAAc,EAAA,MAAA,cAAA,CAAA4C,KAAA2kG,EAAA3iG,SAEA6V,EAAA9W,KAAAzE,MAAAc,EAAA,MAAA,YAAA,CAAA4C,KAAA4kG,EAAA5iG,SANA6V,EAAA9W,KAAAzE,MAAAc,EAAA,MAAA,QAQAynB,EAAAkgF,8BAEAvnB,EAAAvvC,SAAAm2D,EAAAC,EAAA,cAIAx/E,EAAA9P,GAAA,QAAA,WACA4vF,EAAAzkG,WAAA,QACA0kG,EAAA1kG,WAAA,WAGA,IAAAilG,EAAA,cACA3nB,EAAA9kE,QACAysF,EAAAA,EAAA,IAAA3nB,EAAA9kE,OAGA,IAAAb,EAAA9b,EAAA,YAAA,CACAgD,KAAA,SACA2Z,MAAAysF,EACAvqF,YAAA,OACA7Z,KAAAzE,MAAAc,EAAA,MAAA,SAqBA,OAlBA,IAAAkC,QAAA8Y,QAAAP,EAAAgN,GAEAqL,GACArL,EAAAuH,aAAA8D,GAGAstD,EAAA4mB,WACAO,EAAAzkG,WAAA,UAAAs9E,EAAA4mB,WAGA5mB,EAAA6mB,SACAO,EAAA1kG,WAAA,UAAAs9E,EAAA6mB,UAGA7mB,EAAA4mB,WAAA5mB,EAAA6mB,UACAQ,EAAAjwF,QAAA,UAGAiD,GAGAq8D,gBAAA,SAAAsJ,GACA,IAAAhqE,GAAAgqE,EAAAhqE,IAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAAA,QACA1M,EAAA66E,EAAA76E,MAAA,KACAR,EAAAQ,EAAAA,EAAA,SAAA,KACAC,EAAA46E,EAAA56E,OAAA,mBAAA46E,EAAA56E,MAAA+gG,SAAAnmB,EAAA56E,MAAA,KACA2+F,EAAA/jB,EAAA+jB,WAAAjiG,QAAAsf,iBAAA,GACA2tD,EAAAiR,EAAAjR,WAAA,EAEAh8D,EAAAxU,EAAA,SAAA,CACA2c,MAAA,gBAGA3W,EAAAtE,KAAA02E,gBAAA,CACA3gE,GAAAA,EACA7Q,KAAAR,EACAoyB,YAAA,IACA6sE,cAAA,EACAG,UAAAA,EACAh1B,SAAAA,IACAtgE,SAAAsE,GAiBA,OAfAxU,EAAA,gCAAAkQ,SAAAsE,GAEA5N,GACA5G,EAAA,WAAA,CACAgD,KAAA,SACA4D,KAAAA,EAAA,aACAX,IAAA1F,MAAAunG,WACA53F,SAAAsE,GAGAxO,EAAAqjG,WAAA9oG,MAAA+oG,mBACAziG,GACAb,EAAAqjG,WAAA,UAAA,KAAAxiG,EAAA0iG,WAAA,GAAA1iG,EAAA2iG,aAAA3iG,EAAA4iG,cAGAj1F,GAGAk1F,gBAAA,SAAAjoB,GAIA,OAHAA,EAAAhqE,KACAgqE,EAAAhqE,GAAA,OAAAlF,KAAAC,MAAA,IAAAD,KAAAe,WAEA5R,KAAAunE,YAAAvnE,KAAAy2E,gBAAAsJ,GAAAA,IAGAxY,YAAA,SAAAljE,EAAA07E,GACA,IAAA9pE,EAAA8pE,EAAA9pE,OAAA,cAAA8pE,EAAA9pE,MAAA8pE,EAAA9pE,MAAA,KAGAo4D,GAFAxvE,MAAA4gB,aAAAsgE,EAAA/pE,QAAA+pE,EAAA/pE,OAEA1X,EAAAyhF,EAAA2lB,SAAA,cAAA,SAAA,CACAzqF,MAAA,QACAlF,GAAAgqE,EAAAnhD,UAAAmhD,EAAAhqE,GAAAgqE,EAAAhqE,GAAA,SAAA,SAOA,GAJAgqE,EAAA/nE,OACAq2D,EAAAr8D,SAAA,SAGAiE,EACA,CAAA,IAAA8c,EAAAz0B,EAAA,0BAAAkQ,SAAA6/D,GAEA/vE,EAAAyhF,EAAA2lB,SAAA,YAAA,WAAA,CACA3vF,GAAAgqE,EAAA+lB,UAAA/lB,EAAAhqE,GAAA,GAAAgqE,EAAAhqE,MAAAgqE,EAAA2lB,SAAA,SAAA,UAAA,MACAzqF,MAAA8kE,EAAAkB,SAAA,WAAA,KACAikB,KAAAnlB,EAAA2lB,UAAA3lB,EAAAhqE,GACAzS,KAAA2S,IACAzH,SAAAukB,GAiBA,OAdAgtD,EAAAvY,cACAlpE,EAAA,+BAAAgF,KAAAy8E,EAAAvY,cAAAh5D,SAAA6/D,GAGA/vE,EAAA,wBAAAiU,OAAAlO,GAAAmK,SAAA6/D,GAEA0R,EAAAkoB,SACA3pG,EAAA,wBAAAgF,KAAAy8E,EAAAkoB,SAAAz5F,SAAA6/D,GAGA0R,EAAAjuE,QACA9R,KAAAkoG,iBAAA75B,EAAA0R,EAAAjuE,QAGAu8D,GAGAx8D,gBAAA,SAAAC,GACA,IAAA2hB,EAAAn1B,EAAA,wBAMA,OAJAwT,GACA9R,KAAAmoG,gBAAA10E,EAAA3hB,GAGA2hB,GAGA00E,gBAAA,SAAA10E,EAAA3hB,GACA,IAAA,IAAAzS,EAAA,EAAAA,EAAAyS,EAAAxR,OAAAjB,IACAf,EAAA,SAAAgF,KAAAwO,EAAAzS,IAAAmP,SAAAilB,IAIAy0E,iBAAA,SAAA75B,EAAAv8D,GACA,GAAAA,EAAA,CAIAu8D,EAAAr8D,SAAA,cACAq8D,EAAArzD,SAAA,UAAAhJ,SAAA,UAEA,IAAAo2F,EAAA/5B,EAAArzD,SAAA,aAEAotF,EAAA9nG,SACA8nG,EAAApoG,KAAA6R,kBAAArD,SAAA6/D,IAGAruE,KAAAmoG,gBAAAC,EAAAt2F,KAGAu2F,qBAAA,SAAAh6B,GACAA,EAAA/3D,YAAA,cACA+3D,EAAArzD,SAAA,UAAA1E,YAAA,UACA+3D,EAAArzD,SAAA,aAAAI,UAGA2oF,kBAAA,SAAAD,GACA,OAAAA,IAAAjiG,QAAAsf,iBAAA,GAAA,YAAA,MAGA6iF,iBAAA,SAAAl1B,GACA,OAAAA,EAAA,WAAA,OC94BAjwE,MAAAgoD,SAAAhlD,QAAA4Z,KAAA7c,OAAA,CACA8gD,SAAA,KACAkH,aAAA,KACAhxC,SAAA,KACA1B,SAAA,KACAo0F,eAAA,GACAC,eAAA,KACAC,kBAAA,EACAC,kBAAA,EAEAzrF,KAAA,SAAApH,EAAA1B,GACAlU,KAAAsoG,eAAA,CAAAlyF,KAAA,GAAA9U,KAAA,GAAAkrB,MAAA,IACAxsB,KAAA4V,SAAAA,EACA5V,KAAA4mD,aAAA,KACA5mD,KAAAuoG,eAAA,KACAvoG,KAAAwoG,kBAAA,EACAxoG,KAAAyoG,kBAAA,EAIA,IAAAriD,GAFAlyC,EAAA5V,EAAAM,OAAA,GAAAC,MAAAgoD,SAAA5pC,SAAA/I,IAEAkyC,OAeA,IAAA,IAAAznC,YAdAzK,EAAAkyC,OAEAlyC,EAAA0yC,cAAA1yC,EAAA0yC,aAAAtmD,SACA,iBAAA4T,EAAA0yC,eACA1yC,EAAA0yC,aAAA,CAAA1yC,EAAA0yC,eAGA5mD,KAAA4mD,aAAA1yC,EAAA0yC,oBACA1yC,EAAA0yC,cAGA1yC,EAAAw0F,YAAA,EAEA1oG,KAAA0/C,SAAA1/C,KAAA4V,SAAA+yF,WAAAz0F,GACAkyC,EACAA,EAAA3mD,eAAAkf,IAIA3e,KAAA0/C,SAAApoC,GAAAqH,EAAAynC,EAAAznC,IAGA3e,KAAAkU,SAAAA,EAEAlU,KAAA0/C,SAAApoC,GAAA,gBAAAtX,KAAA4oG,UAAAthF,KAAAtnB,QAMAknD,UAAA,SAAA2hD,QAEA,IAAAhqG,MAAA8H,oBAAA,IAAA9H,MAAA+H,iBAEAiiG,EAAAhqG,MAAA8H,eAAA9H,MAAA+H,gBAGA5G,KAAA0/C,SAAAipD,WAAA,SAAA,CAAAr8C,SAAAu8C,KAMAC,cAAA,WACA,OAAA9oG,KAAA0/C,SAAAipD,WAAA,WAMAzgD,aAAA,WAEA,OAAAloD,KAAA8oG,gBAAA,GAMAF,UAAA,SAAAj+F,EAAA5D,GACA4D,EAAAkN,kBAEA,IAAAiuB,GAAA,EA8CA,OA5CA9lC,KAAA4mD,eACA5mD,KAAAuoG,gBACAvoG,KAAA+oG,uBAGAjjE,GAAA,GAIA/+B,EAAAiiG,UAAAC,KAAA,KACA,IAAAhhD,EAAAlhD,EAAAghD,MAAA,GACAmhD,GAAA,EACA,GAAApjE,EAAA,CACA,IACAqjE,EADAlhD,EAAA/iD,KAAAQ,MAAA,oBACA,IACA,IAAApH,EAAA6O,QAAAg8F,EAAAr5F,cAAA9P,KAAAuoG,kBACAW,GAAA,EACAlpG,KAAAsoG,eAAAhnG,KAAA5B,KAAA,IAAAuoD,EAAA/iD,KAAA,MAIA+iD,EAAA7xC,KAAApW,KAAAkU,SAAAk1F,cACAppG,KAAAsoG,eAAAlyF,KAAA1W,KAAA,IAAAuoD,EAAA/iD,KAAA,KACAgkG,GAAA,GAIAA,GAAA,mBAAAlpG,KAAAkU,SAAAs4C,kBAAAxsD,KAAAkU,SAAAs4C,gBAAAxsD,KAAAyoG,qBACAzoG,KAAAsoG,eAAA97E,MAAA9sB,KAAA,IAAAuoD,EAAA/iD,KAAA,KACAgkG,GAAA,GAGAA,IACAlpG,KAAAyoG,oBACA1hG,EAAAiuD,YAGAh1D,KAAAwoG,oBAAAzhG,EAAAsiG,cAAA/oG,SACAN,KAAAwoG,kBAAA,EACAxoG,KAAAyoG,kBAAA,EACAzoG,KAAAspG,2BAIA,GAMAA,qBAAA,WACA,IAAAjmG,EAEArD,KAAAsoG,eAAAhnG,KAAAhB,SAEA+C,EADA,IAAArD,KAAAsoG,eAAAhnG,KAAAhB,OACA,+EAEA,gFAGA+C,EAAAxE,MAAAc,EAAA,MAAA0D,EAAA,CAAA0kD,MAAA/nD,KAAAsoG,eAAAhnG,KAAAb,KAAA,MAAA8oG,MAAAvpG,KAAA4mD,aAAAnmD,KAAA,QACAT,KAAAsoG,eAAAhnG,KAAA,GACA2G,MAAA5E,IAGArD,KAAAsoG,eAAAlyF,KAAA9V,SAEA+C,EADA,IAAArD,KAAAsoG,eAAAlyF,KAAA9V,OACA,gGAEA,oGAGA+C,EAAAxE,MAAAc,EAAA,MAAA0D,EAAA,CAAA0kD,MAAA/nD,KAAAsoG,eAAAlyF,KAAA3V,KAAA,MAAA2V,KAAApW,KAAAwpG,cAAA3qG,MAAA4qG,iBACAzpG,KAAAsoG,eAAAlyF,KAAA,GACAnO,MAAA5E,IAGArD,KAAAsoG,eAAA97E,MAAAlsB,SAEA+C,EADA,IAAArD,KAAAsoG,eAAA97E,MAAAlsB,OACA,oFAEA,qFAGA+C,EAAAxE,MAAAc,EAAA,MAAA0D,EAAA,CAAA0kD,MAAA/nD,KAAAsoG,eAAA97E,MAAA/rB,KAAA,QACAT,KAAAsoG,eAAA97E,MAAA,GACAvkB,MAAA5E,KAIAmmG,cAAA,SAAAE,GAGA,GAAAA,EAFA,KAGA,OAAAA,EAAA,KAGA,IAEAC,GAAA,EAEA,GACAD,GAXA,OAYAC,QAEAD,GAdA,MAgBA,OAAAA,EAAAE,QAAA,GAAA,IAVA,CAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,KAAA,MAUAD,IAGAZ,qBAAA,WACA/oG,KAAAuoG,eAAA,GAEA,IAAA,IAAAlpG,EAAA,EAAAA,EAAAW,KAAA4mD,aAAAtmD,OAAAjB,IAAA,CACA,IAAAwqG,EAAA7pG,KAAA4mD,aAAAvnD,GAEA,QAAA,IAAAR,MAAAirG,UAAAD,GACA,IAAA,IAAA5wC,EAAA,EAAAA,EAAAp6D,MAAAirG,UAAAD,GAAAE,WAAAzpG,OAAA24D,IAAA,CACA,IAAAlyB,EAAAloC,MAAAirG,UAAAD,GAAAE,WAAA9wC,GACAj5D,KAAAuoG,eAAA7oG,KAAAqnC,MAMA9oB,QAAA,WACAje,KAAA4V,SAAA+yF,WAAA,WACA3oG,KAAA6iB,SAEA,CACA5F,SAAA,CACAkpC,SAAA,KACA6jD,UAAA,KACA9jD,UAAA,KACA+jD,mBAAA,EACAb,YAAAvqG,MAAA4qG,cACA7iD,aAAA,KACAR,OAAA,GACAoG,gBAAA,KACAhlD,QAAA,CAAA0iG,OAAA,oCACAt8F,UAAA,mBChOA/O,MAAAsrG,mBAAAtrG,MAAA2hC,mBAAA5hC,OAAA,CACAyiC,oBAAA,SAAAF,GAKAA,GAHAA,EAAAA,EAAAxiC,QAAA,aAAA,KAGAmR,cAOAqxB,GADAA,GAHAA,EAAAtiC,MAAAuS,YAAA+vB,IAGAxiC,QAAA,WAAA,KACAA,QAAA,cAAA,IAGA,IAEAyrG,EAFAvrG,MAAAsQ,YAAAgyB,EAAAjgC,MAAA,eAEAT,KAAA5B,MAAAq6F,mBAMA,OAJAkR,GAAApqG,KAAAkU,SAAAm2F,SACAD,GAAApqG,KAAAkU,SAAAm2F,QAGAD,K1D7BA,CAg+wBG5rG","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    return (() => {\n                        let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                        if (format !== null && format !== 'integer') {\n                            throw `Message format 'number' is only supported for integer values.`;\n                        }\n                        let number = Craft.formatNumber(arg);\n                        let pos;\n                        if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                            number += `.${arg.substr(pos + 1)}`;\n                        }\n                        return number;\n                    })();\n                case 'none':\n                    return arg;\n                case 'select':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1SelectFormat.html\n                        selectStyle = (selector '{' message '}')+\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let select = this._tokenizePattern(token[2]);\n                        let c = select.length;\n                        let message = false;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (Garnish.isArray(select[i]) || !Garnish.isArray(select[i + 1])) {\n                                return false;\n                            }\n                            let selector = Craft.trim(select[i++]);\n                            if (message === false && selector === 'other' || selector == arg) {\n                                message = select[i].join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                case 'plural':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                        pluralStyle = [offsetValue] (selector '{' message '}')+\n                        offsetValue = \"offset:\" number\n                        selector = explicitValue | keyword\n                        explicitValue = '=' number  // adjacent, no white space in between\n                        keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                        message: see MessageFormat\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let plural = this._tokenizePattern(token[2]);\n                        const c = plural.length;\n                        let message = false;\n                        let offset = 0;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                                return false;\n                            }\n                            let selector = Craft.trim(plural[i++]);\n                            let selectorChars = [...selector];\n\n                            if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                                let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                                if (pos === -1) {\n                                    throw 'Message pattern is invalid.';\n                                }\n                                offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                                selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                            }\n                            if (\n                              message === false &&\n                              selector === 'other' ||\n                              selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                              selector === 'one' && arg - offset === 1\n                            ) {\n                                message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                    return p.replace('#', arg - offset);\n                                }).join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[^\\w]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Make sure oldData and newData are always strings. This is important because further below String.split is called.\n            oldData = typeof oldData === 'string' ? oldData : '';\n            newData = typeof newData === 'string' ? newData : '';\n\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            const grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            const encodeURIComponentExceptEqualChar = o => encodeURIComponent(o).replace('%3D', '=');\n\n            params = params.map(p => decodeURIComponent(p));\n\n            paramLoop: for (let p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (let n = deltaNames.length - 1; n >= 0; n--) {\n                    const paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponentExceptEqualChar(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponentExceptEqualChar(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    getSite: function() {\n        if (!this.siteId) {\n            return undefined;\n        }\n        return Craft.sites.find(s => s.id == this.siteId);\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: {\n                context: this.settings.context,\n                elementType: this.elementType,\n            }\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (typeof response.data.badgeCounts !== 'undefined') {\n                        this._updateBadgeCounts(response.data.badgeCounts);\n                    }\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _updateBadgeCounts: function(badgeCounts) {\n        for (let sourceKey in badgeCounts) {\n            if (badgeCounts.hasOwnProperty(sourceKey)) {\n                const $source = this.getSourceByKey(sourceKey);\n                if ($source) {\n                    let $badge = $source.children('.badge');\n                    if (badgeCounts[sourceKey] !== null) {\n                        if (!$badge.length) {\n                            $badge = $('<span class=\"badge\"/>').appendTo($source);\n                        }\n                        $badge.text(badgeCounts[sourceKey]);\n                    } else if ($badge) {\n                        $badge.remove();\n                    }\n                }\n            }\n        }\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n    replaceAsset: null,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    if (this.replaceAsset) {\n                        this.settings.input.replaceElement(this.$element.data('id'), this.replaceAsset);\n                    } else {\n                        this.settings.input.refreshThumbnail(this.$element.data('id'));\n                    }\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n\n            onSave: (data) => {\n                if (data.elementId) {\n                    this.settings.elementId = this.replaceAsset = data.elementId;\n                }\n\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave(data);\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n        Garnish.$bod.addClass('no-scroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        Garnish.$bod.removeClass('no-scroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function(data) {\n        this.settings.onSave(data);\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        if ($source.length && this.settings.context === 'index') {\n            this._updateUrl($source);\n        }\n\n        this.base();\n    },\n\n    _updateUrl: function($source) {\n        if (typeof history === 'undefined') {\n            return;\n        }\n\n        // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n        let nestedSources = [];\n        let $thisSource = $source;\n        let $parent;\n        while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n            nestedSources.unshift($thisSource);\n            $thisSource = $parent;\n        }\n\n        let uri = 'assets';\n        if ($thisSource.data('volume-handle')) {\n            uri += '/' + $thisSource.data('volume-handle');\n            nestedSources.forEach($s => {\n                uri += '/' + $s.children('.label').text();\n            });\n        }\n\n        history.replaceState({}, '', Craft.getUrl(uri));\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($source) {\n        const $label = $source.children('.label');\n        const oldName = Craft.trim($label.text())\n        const newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (!newName || newName === oldName) {\n            return;\n        }\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', 'assets/rename-folder', {\n            data: {\n                folderId: $source.data('folder-id'),\n                newName: newName,\n            },\n        }).then(response => {\n            if (response.data.success) {\n                $label.text(response.data.newName);\n\n                // Is this the selected source?\n                if ($source.data('key') === this.$source.data('key')) {\n                    this.updateElements();\n\n                    // Update the URL if we're on the Assets index\n                    if (this.settings.context === 'index') {\n                        this._updateUrl($source);\n                    }\n                }\n            } else if (response.data.error) {\n                alert(response.data.error);\n            }\n        }).finally(() => {\n            this.setIndexAvailable();\n        });\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    replaceElement: function(elementId, replaceWithId) {\n        var parameters = {\n            elementId: replaceWithId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                this.removeElement($existing);\n                let elementInfo = Craft.getElementInfo(data.html);\n                this.selectElements([elementInfo]);\n            }\n        });\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.announcements.forEach(a => {\n                        contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                            '<div class=\"announcement-label-container\">' +\n                            `<div class=\"announcement-icon\">${a.icon}</div>` +\n                            `<div class=\"announcement-label\">${a.label}</div>` +\n                            '</div>' +\n                            `<h2>${a.heading}</h2>` +\n                            `<p>${a.body}</p>` +\n                            '</div>';\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            const uri = `categories/${group.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${group.id}\"`;\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 0; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($columnCheckboxes, {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, checked) {\n        return $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                })\n            );\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element draft editor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n    httpStatus: null,\n    httpError: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    scrollY: null,\n    createdProvisionalDraft: false,\n\n    bc: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (BroadcastChannel && !this.settings.revisionId) {\n            this.bc = new BroadcastChannel('DraftEditor');\n            this.bc.onmessage = ev => {\n                if (\n                  ev.data.event === 'saveDraft' &&\n                  ev.data.canonicalId === this.settings.sourceId &&\n                  (\n                    ev.data.draftId === this.settings.draftId ||\n                    (ev.data.isProvisionalDraft && !this.settings.draftId)\n                  )\n                ) {\n                    window.location.reload();\n                }\n            };\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const siteStatusValues = Object.values(this.settings.siteStatuses);\n        const hasEnabled = siteStatusValues.includes(true);\n        const hasDisabled = siteStatusValues.includes(false);\n        const originalEnabledValue = (hasEnabled && hasDisabled) ? '-' : (hasEnabled ? '1' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSites && this.settings.addlSites.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site, status) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: typeof status != 'undefined'\n                ? status\n                : (this.settings.siteStatuses.hasOwnProperty(site.id) ? this.settings.siteStatuses[site.id] : true),\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(site => {\n            return !this.siteIds.includes(site.id) && this.settings.addlSites.some(s => s.siteId == site.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            const addlSiteInfo = this.settings.addlSites.find(s => s.siteId == site.id);\n            this._createSiteStatusField(site, addlSiteInfo.enabledByDefault);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\"><strong>${this._saveFailMessage()}</strong></p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n\n            if (this.httpError) {\n                bodyHtml += `<p class=\"http-error code\">${Craft.escapeHtml(this.httpError)}</p>`;\n            }\n\n            if (this.httpStatus === 400) {\n                bodyHtml += `<button class=\"btn refresh-btn\">${Craft.t('app', 'Refresh')}</button>`;\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            hudClass: 'hud revision-status-hud',\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n\n        hud.$mainContainer.find('.refresh-btn').on('click', () => {\n            window.location.reload();\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            if (!this.enableAutosave) {\n                this.preview.on('open', () => {\n                    this.enableAutosave = true;\n                    this.listenForChanges();\n                });\n                this.preview.on('close', () => {\n                    this.enableAutosave = false;\n                    this.stopListeningForChanges();\n\n                    // Hide the status icon if the save was successful\n                    const $statusIcons = this.statusIcons();\n                    if ($statusIcons.hasClass('checkmark-icon')) {\n                        $statusIcons.addClass('hidden');\n                    }\n                });\n            }\n            this.preview.on('close', () => {\n                if (this.scrollY) {\n                    window.scrollTo(0, this.scrollY);\n                    this.scrollY = null;\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.scrollY = window.scrollY;\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional)\n              .catch(e => {\n                  console.warn('Couldn’t save draft:', e);\n              });\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject('Form already being submitted.');\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.httpStatus = null;\n            this.httpError = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject(response.data.errors);\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).parents().filter('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                this.afterUpdate(data);\n\n                if (this.bc) {\n                    this.bc.postMessage({\n                        event: 'saveDraft',\n                        canonicalId: this.settings.sourceId,\n                        draftId: this.settings.draftId,\n                        isProvisionalDraft: this.settings.isProvisionalDraft,\n                    });\n                }\n\n                resolve();\n            }).catch(e => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    if (e && e.response) {\n                        this.httpStatus = e.response.status;\n                        this.httpError = e.response.data ? e.response.data.error : null;\n                    }\n                    this._showFailStatus();\n                    reject(e);\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSites: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            const uri = `entries/${section.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${section.id}\"`;\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr({\n                type: 'text',\n                autocapitalize: 'off',\n            });\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n        Garnish.$doc.trigger('scroll');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe(true, true);\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe(true, true);\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    return (() => {\n                        let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                        if (format !== null && format !== 'integer') {\n                            throw `Message format 'number' is only supported for integer values.`;\n                        }\n                        let number = Craft.formatNumber(arg);\n                        let pos;\n                        if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                            number += `.${arg.substr(pos + 1)}`;\n                        }\n                        return number;\n                    })();\n                case 'none':\n                    return arg;\n                case 'select':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1SelectFormat.html\n                        selectStyle = (selector '{' message '}')+\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let select = this._tokenizePattern(token[2]);\n                        let c = select.length;\n                        let message = false;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (Garnish.isArray(select[i]) || !Garnish.isArray(select[i + 1])) {\n                                return false;\n                            }\n                            let selector = Craft.trim(select[i++]);\n                            if (message === false && selector === 'other' || selector == arg) {\n                                message = select[i].join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                case 'plural':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                        pluralStyle = [offsetValue] (selector '{' message '}')+\n                        offsetValue = \"offset:\" number\n                        selector = explicitValue | keyword\n                        explicitValue = '=' number  // adjacent, no white space in between\n                        keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                        message: see MessageFormat\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let plural = this._tokenizePattern(token[2]);\n                        const c = plural.length;\n                        let message = false;\n                        let offset = 0;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                                return false;\n                            }\n                            let selector = Craft.trim(plural[i++]);\n                            let selectorChars = [...selector];\n\n                            if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                                let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                                if (pos === -1) {\n                                    throw 'Message pattern is invalid.';\n                                }\n                                offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                                selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                            }\n                            if (\n                              message === false &&\n                              selector === 'other' ||\n                              selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                              selector === 'one' && arg - offset === 1\n                            ) {\n                                message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                    return p.replace('#', arg - offset);\n                                }).join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[^\\w]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Make sure oldData and newData are always strings. This is important because further below String.split is called.\n            oldData = typeof oldData === 'string' ? oldData : '';\n            newData = typeof newData === 'string' ? newData : '';\n\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            const grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            const encodeURIComponentExceptEqualChar = o => encodeURIComponent(o).replace('%3D', '=');\n\n            params = params.map(p => decodeURIComponent(p));\n\n            paramLoop: for (let p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (let n = deltaNames.length - 1; n >= 0; n--) {\n                    const paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponentExceptEqualChar(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponentExceptEqualChar(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    getSite: function() {\n        if (!this.siteId) {\n            return undefined;\n        }\n        return Craft.sites.find(s => s.id == this.siteId);\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: {\n                context: this.settings.context,\n                elementType: this.elementType,\n            }\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (typeof response.data.badgeCounts !== 'undefined') {\n                        this._updateBadgeCounts(response.data.badgeCounts);\n                    }\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _updateBadgeCounts: function(badgeCounts) {\n        for (let sourceKey in badgeCounts) {\n            if (badgeCounts.hasOwnProperty(sourceKey)) {\n                const $source = this.getSourceByKey(sourceKey);\n                if ($source) {\n                    let $badge = $source.children('.badge');\n                    if (badgeCounts[sourceKey] !== null) {\n                        if (!$badge.length) {\n                            $badge = $('<span class=\"badge\"/>').appendTo($source);\n                        }\n                        $badge.text(badgeCounts[sourceKey]);\n                    } else if ($badge) {\n                        $badge.remove();\n                    }\n                }\n            }\n        }\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n    replaceAsset: null,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    if (this.replaceAsset) {\n                        this.settings.input.replaceElement(this.$element.data('id'), this.replaceAsset);\n                    } else {\n                        this.settings.input.refreshThumbnail(this.$element.data('id'));\n                    }\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n\n            onSave: (data) => {\n                if (data.elementId) {\n                    this.settings.elementId = this.replaceAsset = data.elementId;\n                }\n\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave(data);\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n        Garnish.$bod.addClass('no-scroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        Garnish.$bod.removeClass('no-scroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function(data) {\n        this.settings.onSave(data);\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        if ($source.length && this.settings.context === 'index') {\n            this._updateUrl($source);\n        }\n\n        this.base();\n    },\n\n    _updateUrl: function($source) {\n        if (typeof history === 'undefined') {\n            return;\n        }\n\n        // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n        let nestedSources = [];\n        let $thisSource = $source;\n        let $parent;\n        while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n            nestedSources.unshift($thisSource);\n            $thisSource = $parent;\n        }\n\n        let uri = 'assets';\n        if ($thisSource.data('volume-handle')) {\n            uri += '/' + $thisSource.data('volume-handle');\n            nestedSources.forEach($s => {\n                uri += '/' + $s.children('.label').text();\n            });\n        }\n\n        history.replaceState({}, '', Craft.getUrl(uri));\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($source) {\n        const $label = $source.children('.label');\n        const oldName = Craft.trim($label.text())\n        const newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (!newName || newName === oldName) {\n            return;\n        }\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', 'assets/rename-folder', {\n            data: {\n                folderId: $source.data('folder-id'),\n                newName: newName,\n            },\n        }).then(response => {\n            if (response.data.success) {\n                $label.text(response.data.newName);\n\n                // Is this the selected source?\n                if ($source.data('key') === this.$source.data('key')) {\n                    this.updateElements();\n\n                    // Update the URL if we're on the Assets index\n                    if (this.settings.context === 'index') {\n                        this._updateUrl($source);\n                    }\n                }\n            } else if (response.data.error) {\n                alert(response.data.error);\n            }\n        }).finally(() => {\n            this.setIndexAvailable();\n        });\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    replaceElement: function(elementId, replaceWithId) {\n        var parameters = {\n            elementId: replaceWithId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                this.removeElement($existing);\n                let elementInfo = Craft.getElementInfo(data.html);\n                this.selectElements([elementInfo]);\n            }\n        });\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.announcements.forEach(a => {\n                        contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                            '<div class=\"announcement-label-container\">' +\n                            `<div class=\"announcement-icon\">${a.icon}</div>` +\n                            `<div class=\"announcement-label\">${a.label}</div>` +\n                            '</div>' +\n                            `<h2>${a.heading}</h2>` +\n                            `<p>${a.body}</p>` +\n                            '</div>';\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            const uri = `categories/${group.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${group.id}\"`;\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 0; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($columnCheckboxes, {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, checked) {\n        return $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                })\n            );\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element draft editor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n    httpStatus: null,\n    httpError: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    scrollY: null,\n    createdProvisionalDraft: false,\n\n    bc: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (BroadcastChannel && !this.settings.revisionId) {\n            this.bc = new BroadcastChannel('DraftEditor');\n            this.bc.onmessage = ev => {\n                if (\n                  ev.data.event === 'saveDraft' &&\n                  ev.data.canonicalId === this.settings.sourceId &&\n                  (\n                    ev.data.draftId === this.settings.draftId ||\n                    (ev.data.isProvisionalDraft && !this.settings.draftId)\n                  )\n                ) {\n                    window.location.reload();\n                }\n            };\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const siteStatusValues = Object.values(this.settings.siteStatuses);\n        const hasEnabled = siteStatusValues.includes(true);\n        const hasDisabled = siteStatusValues.includes(false);\n        const originalEnabledValue = (hasEnabled && hasDisabled) ? '-' : (hasEnabled ? '1' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSites && this.settings.addlSites.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site, status) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: typeof status != 'undefined'\n                ? status\n                : (this.settings.siteStatuses.hasOwnProperty(site.id) ? this.settings.siteStatuses[site.id] : true),\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(site => {\n            return !this.siteIds.includes(site.id) && this.settings.addlSites.some(s => s.siteId == site.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            const addlSiteInfo = this.settings.addlSites.find(s => s.siteId == site.id);\n            this._createSiteStatusField(site, addlSiteInfo.enabledByDefault);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\"><strong>${this._saveFailMessage()}</strong></p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n\n            if (this.httpError) {\n                bodyHtml += `<p class=\"http-error code\">${Craft.escapeHtml(this.httpError)}</p>`;\n            }\n\n            if (this.httpStatus === 400) {\n                bodyHtml += `<button class=\"btn refresh-btn\">${Craft.t('app', 'Refresh')}</button>`;\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            hudClass: 'hud revision-status-hud',\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n\n        hud.$mainContainer.find('.refresh-btn').on('click', () => {\n            window.location.reload();\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            if (!this.enableAutosave) {\n                this.preview.on('open', () => {\n                    this.enableAutosave = true;\n                    this.listenForChanges();\n                });\n                this.preview.on('close', () => {\n                    this.enableAutosave = false;\n                    this.stopListeningForChanges();\n\n                    // Hide the status icon if the save was successful\n                    const $statusIcons = this.statusIcons();\n                    if ($statusIcons.hasClass('checkmark-icon')) {\n                        $statusIcons.addClass('hidden');\n                    }\n                });\n            }\n            this.preview.on('close', () => {\n                if (this.scrollY) {\n                    window.scrollTo(0, this.scrollY);\n                    this.scrollY = null;\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.scrollY = window.scrollY;\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional)\n              .catch(e => {\n                  console.warn('Couldn’t save draft:', e);\n              });\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject('Form already being submitted.');\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.httpStatus = null;\n            this.httpError = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject(response.data.errors);\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).parents().filter('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                this.afterUpdate(data);\n\n                if (this.bc) {\n                    this.bc.postMessage({\n                        event: 'saveDraft',\n                        canonicalId: this.settings.sourceId,\n                        draftId: this.settings.draftId,\n                        isProvisionalDraft: this.settings.isProvisionalDraft,\n                    });\n                }\n\n                resolve();\n            }).catch(e => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    if (e && e.response) {\n                        this.httpStatus = e.response.status;\n                        this.httpError = e.response.data ? e.response.data.error : null;\n                    }\n                    this._showFailStatus();\n                    reject(e);\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSites: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            const uri = `entries/${section.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${section.id}\"`;\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr({\n                type: 'text',\n                autocapitalize: 'off',\n            });\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n        Garnish.$doc.trigger('scroll');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe(true, true);\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe(true, true);\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}