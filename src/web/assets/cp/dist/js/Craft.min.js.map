{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","Tabs.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","Slideout.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","group","grouped","thisKey","hasOwnProperty","push","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","split","param","trim","arg","type","format","number","formatNumber","substr","select","c","Garnish","selector","plural","offset","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","value","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","httpProxy","proxy","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","stringToArray","findDeltaData","oldData","newData","deltaNames","initialDeltaValues","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","initialValues","encodeURIComponentExceptEqualChar","o","decodeURIComponent","paramLoop","paramName","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","disclosure","datetime","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","trapFocusWithin","container","on","ev","keyCode","$focusableElements","activeElement","shiftKey","preventDefault","stopPropagation","last","focus","first","setFocusWithin","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$trigger","Disclosure","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","charsLeftHtml","charsLeft","$doc","ready","Base","elementId","initialData","$header","$toolbar","$tabContainer","$editLink","$sidebarBtn","$loadSpinner","$body","$fieldsContainer","$sidebar","$footer","$siteSelectContainer","$siteSelect","$siteSpinner","$cancelBtn","$saveBtn","$saveSpinner","slideout","tabManager","showingSidebar","ignoreFailedRequest","init","defaults","target","data-icon","ltr","addListener","hideSidebar","showSidebar","$siteSelectOuterContainer","$contents","add","Slideout","containerElement","containerAttributes","novalidate","closeOnEsc","closeOnShadeClick","destroy","shortcutManager","registerShortcut","S_KEY","ctrl","saveElement","ESC_KEY","maybeCloseSlideout","$shade","$target","event","load","onShowHud","onCreateForm","setElementAttribute","attributes","getBaseData","prevalidate","showLoadSpinner","onBeginLoading","cancel","CancelToken","source","includeSites","isMultiSite","showSiteSwitcher","hideLoadSpinner","onEndLoading","updateForm","showHeader","hideHeader","switchSite","isDirty","newSiteId","refreshInitialData","fieldHtml","sites","siteInfo","$option","tabHtml","Tabs","$tab","$win","editUrl","sidebarHtml","ElementThumbLoader","requestAnimationFrame","headHtml","footHtml","serialize","isMobileBrowser","scrollTop","off","css","_closedSidebarStyles","offsetWidth","_openedSidebarStyles","one","addLayer","removeLayer","[object Object]","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeSlideout","onSaveElement","runQueue","shake","isOpen","onHideHud","base","loadHud","maybeCloseHud","closeHud","reloadForm","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hide","initSources","menu","_handleStatusChange","bind","$options","filter","_setSite","criteria","_handleSiteChange","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","updateElementsIfSearchTextChanged","RETURN_KEY","_handleSortChange","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","_cancelRequests","getSourceContainer","$sources","$items","getSite","s","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_handleSourceSelectionChange","initSource","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","prependTo","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","updateElementsAction","$scrollContainer","_updateView","showActionTriggers","height","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","badgeCounts","_updateBadgeCounts","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","onHide","onSelectSite","onUpdateElements","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","selectedOption","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_collapseSource","aria-expanded","$childSources","not","_countResults","total","itemLabel","itemsLabel","min","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","$badge","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","$spinner","HUD","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","insertAfter","getElementContainer","setTotalVisible","setMorePending","isVerticalList","handle","_handleElementEditing","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","innerHeight","top","outerHeight","loadMoreElementsAction","getLoadMoreParams","$newElements","appendElements","onAppendElements","newElements","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","onModalSelect","modalSettings","allowSelfRelations","sourceElementId","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","single","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","updateTarget","onTargetTextChange","onFormSubmit","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","$menuBtn","$tabs","$selectedTab","$focusableTab","log","selectTab","makeTabFocusable","LOCATION_HASH","$initialTab","LEFT_KEY","RIGHT_KEY","contains","scrollToTab","updateMenuBtn","tab","_getTab","deselectTab","scrollLeft","elemScrollOffset","targetScrollLeft","tabWidth","ulWidth","HTMLElement","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","reorderItems","updateUI","addRow","row","maxItems","$row","$deleteBtn","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","$filenameInput","originalBasename","originalExtension","reloadIndex","refreshThumbnail","validateExtension","showImageEditor","AssetImageEditor","onSave","showImagePreview","startingWidth","startingHeight","PreviewFileModal","selectFilename","selectionStart","basename","extension","_parseFilename","selectionEnd","oldExt","newExt","originalFilename","ext","parts","pop","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","loadEditor","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","$viewsContainer","$views","innerWidth","_showSpinner","updateSizeAndPosition","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","_editorModeTransition","cropperData","_showCropper","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_positionProgressBar","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","_onDragStart","onDropTargetChange","_onDropTargetChange","onDragStop","_onFileDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFolderDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","fadeOutHelpers","showBatchPrompts","returnData","newParameterArray","choice","apply","_performBatchRequests","returnHelpersToDraggees","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","_onUploadStart","fileuploadprogressall","_onUploadProgress","fileuploaddone","_onUploadComplete","kind","allowedKinds","Uploader","defaultSourceParts","volumeSource","toArray","subfolderSource","setParams","_updateUrl","nestedSources","$thisSource","forEach","$s","$subContainer","checked","marginBottom","includeSubfolders","progress","loaded","setProgressPercentage","files","doReload","file","isLastUpload","_uploadFollowup","_updateAfterUpload","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","openInstance","selfDestruct","$focusedItem","_loadPreview","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","_expandFolder","dropTargetFolderId","$excludedSources","_collapseFolder","menuOptions","onClick","_createSubfolder","_renameFolder","_deleteFolder","ContextMenu","menuClass","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","$targetFolder","folder","_cleanUpTree","$label","oldName","newName","finally","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","finalCallback","doRequest","parameters","AssetSelectInput","hud","$uploadBtn","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","onSelectTransform","allowTransforms","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","showLoginModal","submitLogin","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","hideOnEsc","hideOnShadeClick","shadeClass","updateLogoutWarningMessage","decrementLogoutWarning","time","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","$allInstructions","$instructions","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initSpecialForms","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","_handleInputFocus","_handleInputBlur","announcements","hasUnreads","some","unread","contents","timestamp","heading","onShow","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","saveShortcut","toggleNav","toggleClass","toggleSidebar","menuBtn","$tabsContainer","$tabsList","selectedTabIndex","updateResponsiveTables","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","headerHeight","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","endPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","updateButton","editableCategoryGroups","uid","defaultGroupHandle","selectedSourceHandle","selectedGroup","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","site","groupId","newCategoryBtnText","hudTrigger","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","range","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","aria-controls","updateColor","repeat","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","getHelper","caboose","Y_AXIS","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","onSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","enableAutosave","lastSerializedValue","listeningForChanges","pauseLevel","saving","queue","submittingForm","duplicatedElements","httpStatus","httpError","openingPreview","preview","previewToken","createdProvisionalDraft","autosaveDrafts","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","isProvisionalDraft","initForProvisionalDraft","draftId","isUnpublishedDraft","initForDraft","canUpdateSource","createDraft","listenForChanges","showStatusHud","BroadcastChannel","onmessage","canonicalId","sourceId","reload","saveDraftAction","statusIcons","stopListeningForChanges","deleteDraftAction","hashedCpEditUrl","provisional","createEditMetaBtn","publishDraftAction","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","_createSiteStatusField","$globalField","createLightswitchField","_showField","siteStatusValues","hasEnabled","hasDisabled","originalEnabledValue","originalSerializedStatus","enabledForSite","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","enabled","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","bodyHtml","_saveSuccessMessage","_saveFailMessage","hudClass","spinners","getPreviewToken","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","$statusIcons","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","saveDraft","console","warn","isActive","modifiedFieldNames","preparedData","prepareData","deltaName","content-type","_afterSaveRequest","_showFailStatus","docTitle","draftName","revisionMenu","creator","updatePreviewTargets","checkMetaValues","oldId","selectors","modifiedAttributes","$fields","afterUpdate","postMessage","deltaCallback","swapDuplicatedElementIds","idsRE","pre","post","newTarget","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","$hud","handleFormSubmit","autosave","hashedAddAnotherRedirectUrl","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","copyDraggeeInputValuesToHelper","isVisible","initialize","initializeIfVisible","minRows","createRowObj","updateAddRowButton","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","onTextareaHeightChange","radioMode","toggle","applyToggleCheckbox","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","onTabOptionSelect","initElement","Element","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","applyHudSettings","serializeArray","updateRequiredClass","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","_onUploadError","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","showHud","showing","closeOtherHUDs","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","_onDrag","_onDragStop","muteEvent","changed","_onSettle","_getOffMargin","_onMouseDown","_onMouseUp","dragging","_getMargin","mouseDistX","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","forceUpdateIframe","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","X-Craft-Token","xhrFields","withCredentials","crossDomain","handleSuccess","handleError","write","onResponse","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","autocapitalize","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$refreshBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","_updateRefreshBtn","_activeTarget","refresh","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","_handleResize","_handleTapStart","_handleTapMove","_handleTapEnd","graduationsCalculatedWidth","valueToPosition","touch","startLeft","curX","positionToValue","scaleMin","scaleMax","autoOpen","_cancelTransitionListeners","addPanel","removePanel","openPanels","panel","updateStyles","totalPanels","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_handleSelectedSortHeaderClick","_handleUnselectedSortHeaderClick","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","newSortDir","_handleSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","searchForTags","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","onFileAdd","paramObject","getInProgress","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    return (() => {\n                        let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                        if (format !== null && format !== 'integer') {\n                            throw `Message format 'number' is only supported for integer values.`;\n                        }\n                        let number = Craft.formatNumber(arg);\n                        let pos;\n                        if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                            number += `.${arg.substr(pos + 1)}`;\n                        }\n                        return number;\n                    })();\n                case 'none':\n                    return arg;\n                case 'select':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1SelectFormat.html\n                        selectStyle = (selector '{' message '}')+\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let select = this._tokenizePattern(token[2]);\n                        let c = select.length;\n                        let message = false;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (Garnish.isArray(select[i]) || !Garnish.isArray(select[i + 1])) {\n                                return false;\n                            }\n                            let selector = Craft.trim(select[i++]);\n                            if (message === false && selector === 'other' || selector == arg) {\n                                message = select[i].join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                case 'plural':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                        pluralStyle = [offsetValue] (selector '{' message '}')+\n                        offsetValue = \"offset:\" number\n                        selector = explicitValue | keyword\n                        explicitValue = '=' number  // adjacent, no white space in between\n                        keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                        message: see MessageFormat\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let plural = this._tokenizePattern(token[2]);\n                        const c = plural.length;\n                        let message = false;\n                        let offset = 0;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                                return false;\n                            }\n                            let selector = Craft.trim(plural[i++]);\n                            let selectorChars = [...selector];\n\n                            if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                                let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                                if (pos === -1) {\n                                    throw 'Message pattern is invalid.';\n                                }\n                                offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                                selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                            }\n                            if (\n                              message === false &&\n                              selector === 'other' ||\n                              selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                              selector === 'one' && arg - offset === 1\n                            ) {\n                                message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                    return p.replace('#', arg - offset);\n                                }).join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Make sure oldData and newData are always strings. This is important because further below String.split is called.\n            oldData = typeof oldData === 'string' ? oldData : '';\n            newData = typeof newData === 'string' ? newData : '';\n\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            const grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            const encodeURIComponentExceptEqualChar = o => encodeURIComponent(o).replace('%3D', '=');\n\n            params = params.map(p => decodeURIComponent(p));\n\n            paramLoop: for (let p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (let n = deltaNames.length - 1; n >= 0; n--) {\n                    const paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponentExceptEqualChar(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponentExceptEqualChar(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('[data-disclosure-trigger]', $container).disclosure();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        disclosure: function() {\n            return this.each(function() {\n                var $trigger = $(this);\n                var $disclosureId = $trigger.attr('aria-controls');\n\n                // Only instantiate element if there is a reference to disclosure content\n                if ($disclosureId) {\n                    var settings = {};\n\n                    new Garnish.Disclosure($trigger, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    getSite: function() {\n        if (!this.siteId) {\n            return undefined;\n        }\n        return Craft.sites.find(s => s.id == this.siteId);\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: {\n                context: this.settings.context,\n                elementType: this.elementType,\n            }\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (typeof response.data.badgeCounts !== 'undefined') {\n                        this._updateBadgeCounts(response.data.badgeCounts);\n                    }\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _updateBadgeCounts: function(badgeCounts) {\n        for (let sourceKey in badgeCounts) {\n            if (badgeCounts.hasOwnProperty(sourceKey)) {\n                const $source = this.getSourceByKey(sourceKey);\n                if ($source) {\n                    let $badge = $source.children('.badge');\n                    if (badgeCounts[sourceKey] !== null) {\n                        if (!$badge.length) {\n                            $badge = $('<span class=\"badge\"/>').appendTo($source);\n                        }\n                        $badge.text(badgeCounts[sourceKey]);\n                    } else if ($badge) {\n                        $badge.remove();\n                    }\n                }\n            }\n        }\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    this.settings.input.refreshThumbnail(this.$element.data('id'));\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n        Garnish.$bod.addClass('no-scroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        Garnish.$bod.removeClass('no-scroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        if ($source.length && this.settings.context === 'index') {\n            this._updateUrl($source);\n        }\n\n        this.base();\n    },\n\n    _updateUrl: function($source) {\n        if (typeof history === 'undefined') {\n            return;\n        }\n\n        // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n        let nestedSources = [];\n        let $thisSource = $source;\n        let $parent;\n        while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n            nestedSources.unshift($thisSource);\n            $thisSource = $parent;\n        }\n\n        let uri = 'assets';\n        if ($thisSource.data('volume-handle')) {\n            uri += '/' + $thisSource.data('volume-handle');\n            nestedSources.forEach($s => {\n                uri += '/' + $s.children('.label').text();\n            });\n        }\n\n        history.replaceState({}, '', Craft.getUrl(uri));\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($source) {\n        const $label = $source.children('.label');\n        const oldName = Craft.trim($label.text())\n        const newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (!newName || newName === oldName) {\n            return;\n        }\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', 'assets/rename-folder', {\n            data: {\n                folderId: $source.data('folder-id'),\n                newName: newName,\n            },\n        }).then(response => {\n            if (response.data.success) {\n                $label.text(response.data.newName);\n\n                // Is this the selected source?\n                if ($source.data('key') === this.$source.data('key')) {\n                    this.updateElements();\n\n                    // Update the URL if we're on the Assets index\n                    if (this.settings.context === 'index') {\n                        this._updateUrl($source);\n                    }\n                }\n            } else if (response.data.error) {\n                alert(response.data.error);\n            }\n        }).finally(() => {\n            this.setIndexAvailable();\n        });\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.group(Craft.announcements, 'timestamp').forEach(([announcements, timestamp]) => {\n                        announcements.forEach((a, i) => {\n                            contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                                (i === 0 ? `<div class=\"timestamp\">${a.timestamp}</div>` : '') +\n                                `<h2>${a.heading}</h2>` +\n                                `<p>${a.body}</p>` +\n                                '</div>';\n                        });\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            const uri = `categories/${group.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${group.id}\"`;\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element draft editor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n    httpStatus: null,\n    httpError: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    scrollY: null,\n    createdProvisionalDraft: false,\n\n    bc: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (BroadcastChannel && !this.settings.revisionId) {\n            this.bc = new BroadcastChannel('DraftEditor');\n            this.bc.onmessage = ev => {\n                if (\n                  ev.data.event === 'saveDraft' &&\n                  ev.data.canonicalId === this.settings.sourceId &&\n                  (\n                    ev.data.draftId === this.settings.draftId ||\n                    (ev.data.isProvisionalDraft && !this.settings.draftId)\n                  )\n                ) {\n                    window.location.reload();\n                }\n            };\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const siteStatusValues = Object.values(this.settings.siteStatuses);\n        const hasEnabled = siteStatusValues.includes(true);\n        const hasDisabled = siteStatusValues.includes(false);\n        const originalEnabledValue = (hasEnabled && hasDisabled) ? '-' : (hasEnabled ? '1' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\"><strong>${this._saveFailMessage()}</strong></p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n\n            if (this.httpError) {\n                bodyHtml += `<p class=\"http-error code\">${Craft.escapeHtml(this.httpError)}</p>`;\n            }\n\n            if (this.httpStatus === 400) {\n                bodyHtml += `<button class=\"btn refresh-btn\">${Craft.t('app', 'Refresh')}</button>`;\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            hudClass: 'hud revision-status-hud',\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n\n        hud.$mainContainer.find('.refresh-btn').on('click', () => {\n            window.location.reload();\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            if (!this.enableAutosave) {\n                this.preview.on('open', () => {\n                    this.enableAutosave = true;\n                    this.listenForChanges();\n                });\n                this.preview.on('close', () => {\n                    this.enableAutosave = false;\n                    this.stopListeningForChanges();\n\n                    // Hide the status icon if the save was successful\n                    const $statusIcons = this.statusIcons();\n                    if ($statusIcons.hasClass('checkmark-icon')) {\n                        $statusIcons.addClass('hidden');\n                    }\n                });\n            }\n            this.preview.on('close', () => {\n                if (this.scrollY) {\n                    window.scrollTo(0, this.scrollY);\n                    this.scrollY = null;\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.scrollY = window.scrollY;\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional)\n              .catch(e => {\n                  console.warn('Couldn’t save draft:', e);\n              });\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject('Form already being submitted.');\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.httpStatus = null;\n            this.httpError = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject(response.data.errors);\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                class: 'extralight',\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).parents().filter('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                this.afterUpdate(data);\n\n                if (this.bc) {\n                    this.bc.postMessage({\n                        event: 'saveDraft',\n                        canonicalId: this.settings.sourceId,\n                        draftId: this.settings.draftId,\n                        isProvisionalDraft: this.settings.isProvisionalDraft,\n                    });\n                }\n\n                resolve();\n            }).catch(e => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    if (e && e.response) {\n                        this.httpStatus = e.response.status;\n                        this.httpError = e.response.data ? e.response.data.error : null;\n                    }\n                    this._showFailStatus();\n                    reject(e);\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            const uri = `entries/${section.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${section.id}\"`;\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr({\n                type: 'text',\n                autocapitalize: 'off',\n            });\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n        Garnish.$doc.trigger('scroll');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe(true, true);\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe(true, true);\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Groups an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        group: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.group() must be an array.';\n            }\n\n            let index = {};\n\n            return arr.reduce((grouped, obj, i) => {\n                const thisKey = typeof key === 'string' ? obj[key] : key(obj, i);\n                if (!index.hasOwnProperty(thisKey)) {\n                    index[thisKey] = [[], thisKey];\n                    grouped.push(index[thisKey]);\n                }\n                index[thisKey][0].push(obj);\n                return grouped;\n            }, []);\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    return (() => {\n                        let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                        if (format !== null && format !== 'integer') {\n                            throw `Message format 'number' is only supported for integer values.`;\n                        }\n                        let number = Craft.formatNumber(arg);\n                        let pos;\n                        if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                            number += `.${arg.substr(pos + 1)}`;\n                        }\n                        return number;\n                    })();\n                case 'none':\n                    return arg;\n                case 'select':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1SelectFormat.html\n                        selectStyle = (selector '{' message '}')+\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let select = this._tokenizePattern(token[2]);\n                        let c = select.length;\n                        let message = false;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (Garnish.isArray(select[i]) || !Garnish.isArray(select[i + 1])) {\n                                return false;\n                            }\n                            let selector = Craft.trim(select[i++]);\n                            if (message === false && selector === 'other' || selector == arg) {\n                                message = select[i].join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                case 'plural':\n                    return (() => {\n                        /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                        pluralStyle = [offsetValue] (selector '{' message '}')+\n                        offsetValue = \"offset:\" number\n                        selector = explicitValue | keyword\n                        explicitValue = '=' number  // adjacent, no white space in between\n                        keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                        message: see MessageFormat\n                        */\n                        if (typeof token[2] === 'undefined') {\n                            return false;\n                        }\n                        let plural = this._tokenizePattern(token[2]);\n                        const c = plural.length;\n                        let message = false;\n                        let offset = 0;\n                        for (let i = 0; i + 1 < c; i++) {\n                            if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                                return false;\n                            }\n                            let selector = Craft.trim(plural[i++]);\n                            let selectorChars = [...selector];\n\n                            if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                                let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                                if (pos === -1) {\n                                    throw 'Message pattern is invalid.';\n                                }\n                                offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                                selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                            }\n                            if (\n                              message === false &&\n                              selector === 'other' ||\n                              selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                              selector === 'one' && arg - offset === 1\n                            ) {\n                                message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                    return p.replace('#', arg - offset);\n                                }).join(',');\n                            }\n                        }\n                        if (message === false) {\n                            return false;\n                        }\n                        return this.formatMessage(message, args);\n                    })();\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    if (Craft.httpProxy) {\n                        options.proxy = Craft.httpProxy;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @param {object} [initialDeltaValues] Initial delta values. If undefined, `Craft.initialDeltaValues` will be used.\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback, initialDeltaValues) {\n            // Make sure oldData and newData are always strings. This is important because further below String.split is called.\n            oldData = typeof oldData === 'string' ? oldData : '';\n            newData = typeof newData === 'string' ? newData : '';\n\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            if (typeof initialDeltaValues === 'undefined') {\n                initialDeltaValues = Craft.initialDeltaValues;\n            }\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, initialDeltaValues);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        /**\n         * @param {object} params\n         * @param {object} deltaNames\n         * @param {boolean} withRoot\n         * @param {boolean|object} initialValues\n         * @returns {{}}\n         * @private\n         */\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, initialValues) {\n            const grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            const encodeURIComponentExceptEqualChar = o => encodeURIComponent(o).replace('%3D', '=');\n\n            params = params.map(p => decodeURIComponent(p));\n\n            paramLoop: for (let p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (let n = deltaNames.length - 1; n >= 0; n--) {\n                    const paramName = params[p].substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(encodeURIComponentExceptEqualChar(params[p]));\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(encodeURIComponentExceptEqualChar(params[p]));\n                }\n            }\n\n            if (initialValues) {\n                for (let name in initialValues) {\n                    if (initialValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(initialValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('[data-disclosure-trigger]', $container).disclosure();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: $.extend({\n                        customTrigger: $btn,\n                    }, $btn.data('event-data')),\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        disclosure: function() {\n            return this.each(function() {\n                var $trigger = $(this);\n                var $disclosureId = $trigger.attr('aria-controls');\n\n                // Only instantiate element if there is a reference to disclosure content\n                if ($disclosureId) {\n                    var settings = {};\n\n                    new Garnish.Disclosure($trigger, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    initialDeltaValues: null,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'});\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden sidebar-btn',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        let $contents = this.$header.add(this.$body).add(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout($contents, {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'click', ev => {\n            const $target = $(event.target);\n\n            if (\n                this.showingSidebar &&\n                !$target.closest(this.$sidebarBtn).length &&\n                !$target.closest(this.$sidebar).length\n            ) {\n                this.hideSidebar();\n            }\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (this.initialDeltaValues === null) {\n                    this.initialDeltaValues = response.data.initialDeltaValues;\n                }\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _openedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        };\n    },\n\n    _closedSidebarStyles: function() {\n        return {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        };\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames, null, this.initialDeltaValues);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    getSite: function() {\n        if (!this.siteId) {\n            return undefined;\n        }\n        return Craft.sites.find(s => s.id == this.siteId);\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n\n        for (let i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            data: {\n                context: this.settings.context,\n                elementType: this.elementType,\n            }\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (typeof response.data.badgeCounts !== 'undefined') {\n                        this._updateBadgeCounts(response.data.badgeCounts);\n                    }\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.initSource($($childSources[i]));\n            if (this.$visibleSources) {\n                this.$visibleSources = this.$visibleSources.add($childSources[i]);\n            }\n        }\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        for (let i = 0; i < $childSources.length; i++) {\n            this.deinitSource($($childSources[i]));\n            this.$visibleSources = this.$visibleSources.not($childSources[i]);\n        }\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _updateBadgeCounts: function(badgeCounts) {\n        for (let sourceKey in badgeCounts) {\n            if (badgeCounts.hasOwnProperty(sourceKey)) {\n                const $source = this.getSourceByKey(sourceKey);\n                if ($source) {\n                    let $badge = $source.children('.badge');\n                    if (badgeCounts[sourceKey] !== null) {\n                        if (!$badge.length) {\n                            $badge = $('<span class=\"badge\"/>').appendTo($source);\n                        }\n                        $badge.text(badgeCounts[sourceKey]);\n                    } else if ($badge) {\n                        $badge.remove();\n                    }\n                }\n            }\n        }\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container .edit-btn'), 'click', 'showImageEditor');\n            this.addListener(this.$sidebar.find('.preview-thumb-container .preview-btn'), 'click', 'showImagePreview');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    this.settings.input.refreshThumbnail(this.$element.data('id'));\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    showImagePreview: function() {\n        var settings = {};\n\n        if (this.$element.data('image-width')) {\n            settings.startingWidth = this.$element.data('image-width');\n            settings.startingHeight = this.$element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal(this.$element.data('id'), null, settings);\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n        Garnish.$bod.addClass('no-scroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        Garnish.$bod.removeClass('no-scroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof window.defaultSource !== 'undefined') {\n            let defaultSourceParts = window.defaultSource.split('/');\n            let volumeSource = this.$sources.toArray().find(s => {\n                return $(s).data('volume-handle') === defaultSourceParts[0];\n            });\n            if (volumeSource) {\n                let $source = $(volumeSource);\n\n                for (let i = 1; i < defaultSourceParts.length; i++) {\n                    // does $source have a subfolder with this path name?\n                    let subfolderSource = this._getChildSources($source).toArray().find(s => {\n                        return $('> .label', s).text() === defaultSourceParts[i];\n                    });\n                    if (!subfolderSource) {\n                        break;\n                    }\n                    this._expandSource($source);\n                    $source = $(subfolderSource);\n                }\n\n                return $source.data('key');\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        if ($source.length && this.settings.context === 'index') {\n            this._updateUrl($source);\n        }\n\n        this.base();\n    },\n\n    _updateUrl: function($source) {\n        if (typeof history === 'undefined') {\n            return;\n        }\n\n        // Find all the subfolder sources. At the end, $thisSource will be the root volume source\n        let nestedSources = [];\n        let $thisSource = $source;\n        let $parent;\n        while (($parent = this._getParentSource($thisSource)) && $parent.length) {\n            nestedSources.unshift($thisSource);\n            $thisSource = $parent;\n        }\n\n        let uri = 'assets';\n        if ($thisSource.data('volume-handle')) {\n            uri += '/' + $thisSource.data('volume-handle');\n            nestedSources.forEach($s => {\n                uri += '/' + $s.children('.label').text();\n            });\n        }\n\n        history.replaceState({}, '', Craft.getUrl(uri));\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($source) {\n        const $label = $source.children('.label');\n        const oldName = Craft.trim($label.text())\n        const newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (!newName || newName === oldName) {\n            return;\n        }\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', 'assets/rename-folder', {\n            data: {\n                folderId: $source.data('folder-id'),\n                newName: newName,\n            },\n        }).then(response => {\n            if (response.data.success) {\n                $label.text(response.data.newName);\n\n                // Is this the selected source?\n                if ($source.data('key') === this.$source.data('key')) {\n                    this.updateElements();\n\n                    // Update the URL if we're on the Assets index\n                    if (this.settings.context === 'index') {\n                        this._updateUrl($source);\n                    }\n                }\n            } else if (response.data.error) {\n                alert(response.data.error);\n            }\n        }).finally(() => {\n            this.setIndexAvailable();\n        });\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n\n        // Announcements HUD\n        if (Craft.announcements.length) {\n            let $btn = $('#announcements-btn').removeClass('hidden');\n            const hasUnreads = Craft.announcements.some(a => a.unread);\n            if (hasUnreads) {\n                $btn.addClass('unread');\n            }\n            let hud;\n            this.addListener($btn, 'click', () => {\n                if (!hud) {\n                    let contents = '';\n                    Craft.group(Craft.announcements, 'timestamp').forEach(([announcements, timestamp]) => {\n                        announcements.forEach((a, i) => {\n                            contents += `<div class=\"announcement ${a.unread ? 'unread' : ''}\">` +\n                                (i === 0 ? `<div class=\"timestamp\">${a.timestamp}</div>` : '') +\n                                `<h2>${a.heading}</h2>` +\n                                `<p>${a.body}</p>` +\n                                '</div>';\n                        });\n                    });\n                    hud = new Garnish.HUD($btn, `<div id=\"announcements\">${contents}</div>`, {\n                        onShow: () => {\n                            $btn.addClass('active');\n                        },\n                        onHide: () => {\n                            $btn.removeClass('active');\n                        },\n                    });\n\n                    // Open outbound links in new windows\n                    $('a', hud.$main).each(function() {\n                        if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                            $(this).attr('rel', 'noopener').attr('target', '_blank')\n                        }\n                    });\n\n                    if (hasUnreads) {\n                        $btn.removeClass('unread');\n                        Craft.sendActionRequest('POST', 'users/mark-announcements-as-read', {\n                            data: {\n                                ids: Craft.announcements.map(a => a.id),\n                            },\n                        });\n                    }\n                } else {\n                    hud.show();\n                }\n            });\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            const uri = `categories/${group.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${group.id}\"`;\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element draft editor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    enableAutosave: null,\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n    httpStatus: null,\n    httpError: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    scrollY: null,\n    createdProvisionalDraft: false,\n\n    bc: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n        this.enableAutosave = Craft.autosaveDrafts;\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n\n        if (BroadcastChannel && !this.settings.revisionId) {\n            this.bc = new BroadcastChannel('DraftEditor');\n            this.bc.onmessage = ev => {\n                if (\n                  ev.data.event === 'saveDraft' &&\n                  ev.data.canonicalId === this.settings.sourceId &&\n                  (\n                    ev.data.draftId === this.settings.draftId ||\n                    (ev.data.isProvisionalDraft && !this.settings.draftId)\n                  )\n                ) {\n                    window.location.reload();\n                }\n            };\n        }\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            if (this.enableAutosave) {\n                this.checkForm();\n                this.listenForChanges();\n            }\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const siteStatusValues = Object.values(this.settings.siteStatuses);\n        const hasEnabled = siteStatusValues.includes(true);\n        const hasDisabled = siteStatusValues.includes(false);\n        const originalEnabledValue = (hasEnabled && hasDisabled) ? '-' : (hasEnabled ? '1' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        if (this.lastSerializedValue) {\n            this.lastSerializedValue = this.lastSerializedValue.replace(originalSerializedStatus, serializedStatuses);\n        }\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\"><strong>${this._saveFailMessage()}</strong></p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n\n            if (this.httpError) {\n                bodyHtml += `<p class=\"http-error code\">${Craft.escapeHtml(this.httpError)}</p>`;\n            }\n\n            if (this.httpStatus === 400) {\n                bodyHtml += `<button class=\"btn refresh-btn\">${Craft.t('app', 'Refresh')}</button>`;\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            hudClass: 'hud revision-status-hud',\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n\n        hud.$mainContainer.find('.refresh-btn').on('click', () => {\n            window.location.reload();\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n            if (!this.enableAutosave) {\n                this.preview.on('open', () => {\n                    this.enableAutosave = true;\n                    this.listenForChanges();\n                });\n                this.preview.on('close', () => {\n                    this.enableAutosave = false;\n                    this.stopListeningForChanges();\n\n                    // Hide the status icon if the save was successful\n                    const $statusIcons = this.statusIcons();\n                    if ($statusIcons.hasClass('checkmark-icon')) {\n                        $statusIcons.addClass('hidden');\n                    }\n                });\n            }\n            this.preview.on('close', () => {\n                if (this.scrollY) {\n                    window.scrollTo(0, this.scrollY);\n                    this.scrollY = null;\n                }\n            });\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.scrollY = window.scrollY;\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !this.enableAutosave || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional)\n              .catch(e => {\n                  console.warn('Couldn’t save draft:', e);\n              });\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject('Form already being submitted.');\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.httpStatus = null;\n            this.httpError = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, !this.settings.isUnpublishedDraft ? (deltaName, params)  => {\n                if (params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            } : undefined);\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject(response.data.errors);\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                class: 'extralight',\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).parents().filter('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                this.afterUpdate(data);\n\n                if (this.bc) {\n                    this.bc.postMessage({\n                        event: 'saveDraft',\n                        canonicalId: this.settings.sourceId,\n                        draftId: this.settings.draftId,\n                        isProvisionalDraft: this.settings.isProvisionalDraft,\n                    });\n                }\n\n                resolve();\n            }).catch(e => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    if (e && e.response) {\n                        this.httpStatus = e.response.status;\n                        this.httpError = e.response.data ? e.response.data.error : null;\n                    }\n                    this._showFailStatus();\n                    reject(e);\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Filter out anything that hasn't changed since the last time the form was submitted\n        data = Craft.findDeltaData(Craft.cp.$primaryForm.data('initialSerializedValue'), data, Craft.deltaNames, deltaCallback);\n\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        return data;\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isUnpublishedDraft &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if ($scrollParent[0] === document.body) {\n                $scrollParent = Garnish.$doc;\n            }\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            const uri = `entries/${section.handle}/new`;\n            const site = this.getSite();\n            const params = site ? {site: site.handle} : undefined;\n            return `href=\"${Craft.getUrl(uri, params)}\"`;\n        }\n\n        return `data-id=\"${section.id}\"`;\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr({\n                type: 'text',\n                autocapitalize: 'off',\n            });\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n        Garnish.$doc.trigger('scroll');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe(true, true);\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe(true, true);\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n        this.$progressBarStatus.fadeTo('fast', 0.01, () => {\n            this.$progressBarStatus.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}