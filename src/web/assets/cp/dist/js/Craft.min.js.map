{"version":3,"sources":["Craft.min.js","Craft.js","BaseElementEditor.js","BaseElementIndex.js","BaseElementIndexView.js","BaseElementSelectInput.js","BaseElementSelectorModal.js","BaseInputGenerator.js","Tabs.js","AdminTable.js","AssetEditor.js","AssetImageEditor.js","AssetIndex.js","AssetSelectInput.js","AssetSelectorModal.js","AuthManager.js","CP.js","CategoryIndex.js","CategorySelectInput.js","Chart.js","ColorInput.js","CustomizeSourcesModal.js","DataTableSorter.js","DeleteUserModal.js","DraftEditor.js","DynamicGenerator.js","EditableTable.js","ElementActionTrigger.js","ElementThumbLoader.js","ElevatedSessionForm.js","ElevatedSessionManager.js","EntryIndex.js","FieldLayoutDesigner.js","FieldToggle.js","Grid.js","HandleGenerator.js","ImageUpload.js","InfoIcon.js","LightSwitch.js","Listbox.js","LivePreview.js","PasswordInput.js","Preview.js","PreviewFileModal.js","ProgressBar.js","PromptHandler.js","SlidePicker.js","SlideRuleInput.js","Slideout.js","SlugGenerator.js","Structure.js","StructureDrag.js","StructureTableSorter.js","TableElementIndexView.js","TagSelectInput.js","ThumbsElementIndexView.js","UI.js","Uploader.js","UriFormatGenerator.js"],"names":["$","rxhtmlTag","jQuery","htmlPrefilter","html","replace","extend","Craft","navHeight","index","arr","key","isArray","reduce","obj","i","t","category","message","params","translations","this","formatMessage","pattern","args","tokens","_tokenizePattern","length","token","_parseToken","join","start","pos","depth","chars","indexOf","slice","open","close","push","split","param","trim","arg","type","format","number","formatNumber","substr","plural","c","offset","selector","selectorChars","substring","parseInt","map","p","formatDate","date","Date","datepicker","datepickerOptions","dateFormat","d3","formatLocale","d3FormatLocaleDefinition","formatter","shortcutText","shift","alt","clientOs","escapeHtml","str","text","escapeRegex","getText","encodeUriComponent","encodeURIComponent","differences","!","*","'","(",")","chr","re","RegExp","selectFullValue","input","$input","val","setSelectionRange","formatInputId","inputName","rtrim","getUrl","path","baseUrl","anchor","isPlainObject","aParams","name","hasOwnProperty","value","Garnish","apos","url","qpos","search","pathParam","pathMatch","match","omitScriptNameInUrls","usePathInfo","scriptName","basePath","endPath","getCpUrl","baseCpUrl","getSiteUrl","baseSiteUrl","getActionUrl","actionUrl","redirectTo","document","location","href","getCsrfInput","csrfTokenName","csrfTokenValue","postActionRequest","action","data","callback","options","contentType","JSON","stringify","jqXHR","ajax","dataType","headers","_actionHeaders","success","error","textStatus","errorThrown","readyState","cp","displayError","alert","send","_waitingOnAjax","_ajaxQueue","queueActionRequest","undefined","_postNextActionRequestInQueue","X-Registered-Asset-Bundles","Object","keys","registeredAssetBundles","X-Registered-Js-Files","registeredJsFiles","sendActionRequest","method","Promise","resolve","reject","X-Requested-With","v","getTime","axios","request","then","catch","sendApiRequest","uri","cancelToken","_getApiHeaders","apiHeaders","baseURL","baseApiUrl","apiParams","_apiHeaders","processCraftHeaders","apiResponse","_processApiHeaders","_loadingApiHeaders","_apiHeaderWaitlist","response","e","_rejectApiRequests","clearCachedApiHeaders","downloadFromUrl","body","XMLHttpRequest","setRequestHeader","responseType","onload","status","disposition","getResponseHeader","matches","exec","filename","blob","Blob","link","createElement","window","URL","createObjectURL","download","appendChild","click","removeChild","stringToArray","findDeltaData","oldData","newData","deltaNames","sort","a","b","groupedOldParams","_groupParamsByDeltaNames","groupedNewParams","__root__","n","inArray","modifiedDeltaNames","concat","withRoot","useInitialValues","paramName","grouped","paramLoop","decodeURIComponent","initialDeltaValues","expandPostArray","expanded","m","unshift","parentElem","createForm","$form","attr","accept-charset","chunks","values","appendTo","compare","obj1","obj2","sortObjectKeys","Array","getObjectKeys","escapeChars","escaped","ltrim","startsWith","filterArray","filtered","elem","includes","removeFromArray","splice","getLast","uppercaseFirst","charAt","toUpperCase","lowercaseFirst","toLowerCase","parseUrl","scheme","host","hostname","port","query","hash","isSameHost","requestUrlInfo","urlInfo","secondsToHumanTimeDuration","seconds","showSeconds","weeks","Math","floor","days","minutes","hours","round","timeComponents","asciiString","charMap","normalize","char","asciiStr","asciiCharMap","randomString","result","random","createErrorList","errors","$ul","addClass","$li","appendHeadHtml","$existingCss","existingCss","eq","regexp","append","appendFootHtml","$existingJs","src","existingJs","$bod","initUiElements","$container","grid","infoicon","checkboxselect","fieldtoggle","lightswitch","nicetext","formsubmit","menubtn","datetime","each","_elementIndexClasses","_elementSelectorModalClasses","_elementEditorClasses","registerElementIndexClass","elementType","func","registerElementSelectorModalClass","registerElementEditorClass","createElementIndex","settings","BaseElementIndex","createElementSelectorModal","BaseElementSelectorModal","createElementEditor","element","BaseElementEditor","getLocalStorage","defaultValue","systemUid","localStorage","parse","setLocalStorage","removeLocalStorage","removeItem","getCookie","cookie","setCookie","defaultCookieOptions","domain","maxAge","expires","toUTCString","secure","removeCookie","getElementInfo","$element","hasClass","find","id","siteId","label","hasThumb","setElementSize","size","otherSize","removeClass","$oldImg","$newImg","sizes","srcset","replaceWith","picturefill","elements","submitForm","confirm","redirect","retainScroll","scrollY","trigger","trapFocusWithin","container","on","ev","keyCode","$focusableElements","activeElement","shiftKey","preventDefault","stopPropagation","last","focus","first","setFocusWithin","fn","animateLeft","duration","easing","complete","orientation","velocity","left","right","animateRight","disable","$elem","removeAttr","enable","itemSelector","cols","maxCols","minColWidth","mode","fillMode","colClass","snapToGrid","Grid","InfoIcon","CheckboxSelect","FieldToggle","settingName","settingValue","setSettings","thisSettings","hasAttr","indeterminateValue","LightSwitch","NiceText","$btn","currentTarget","$anchor","closest","customTrigger","next","menuAnchor","MenuBtn","$wrapper","$inputs","checkValue","hasValue","children","class","title","aria-label","remove","charsLeftHtml","charsLeft","$doc","ready","Base","elementId","initialData","$header","$toolbar","$tabContainer","$editLink","$sidebarBtn","$loadSpinner","$body","$fieldsContainer","$sidebarShade","$sidebar","$footer","$siteSelectContainer","$siteSelect","$siteSpinner","$cancelBtn","$saveBtn","$saveSpinner","slideout","tabManager","showingSidebar","ignoreFailedRequest","init","defaults","prependTo","target","data-icon","ltr","addListener","hideSidebar","showSidebar","isMobileBrowser","$siteSelectOuterContainer","Slideout","add","containerElement","containerAttributes","novalidate","closeOnEsc","closeOnShadeClick","destroy","shortcutManager","registerShortcut","S_KEY","ctrl","saveElement","ESC_KEY","maybeCloseSlideout","$shade","load","onShowHud","onCreateForm","setElementAttribute","attributes","getBaseData","prevalidate","showLoadSpinner","onBeginLoading","cancel","CancelToken","source","includeSites","isMultiSite","showSiteSwitcher","hideLoadSpinner","onEndLoading","updateForm","showHeader","hideHeader","switchSite","isDirty","newSiteId","refreshInitialData","fieldHtml","sites","siteInfo","$option","tabHtml","Tabs","$tab","$win","editUrl","sidebarHtml","ElementThumbLoader","requestAnimationFrame","headHtml","footHtml","serialize","scrollTop","off","css","_closedSidebarStyles","offsetWidth","_sidebarStyles","_openedSidebarStyles","one","addLayer","removeLayer","headerHeight","outerHeight","top","height","[object Object]","validators","isFunction","call","$title","$a","cpEditUrl","newTitle","elementTypeNames","displayNotice","closeSlideout","onSaveElement","runQueue","shake","isOpen","onHideHud","base","loadHud","maybeCloseHud","closeHud","reloadForm","elementIndex","noop","initialized","instanceState","sourceStates","sourceStatesStorageKey","searchTimeout","sourceSelect","$main","isIndexBusy","sourceKey","sourceViewModes","$source","sourcesByKey","$visibleSources","$customizeSourcesBtn","customizeSourcesModal","toolbarOffset","$search","searching","searchText","trashed","drafts","$clearSearchBtn","$statusMenuBtn","$statusMenuContainer","statusMenu","$siteMenuBtn","siteMenu","$sortMenuBtn","sortMenu","$sortAttributesList","$sortDirectionsList","$scoreSortAttribute","$structureSortAttribute","$elements","$viewModeBtnContainer","viewModeBtns","viewMode","view","_autoSelectElements","$countSpinner","$countContainer","page","resultSet","totalResults","$exportBtn","actions","actionsHeadHtml","actionsFootHtml","$selectAllContainer","$selectAllCheckbox","showingActionTriggers","exporters","exportersByType","_$detachedToolbarItems","_$triggers","_ignoreFailedRequest","_cancelToken","getDefaultInstanceState","storageKey","context","toolbarSelector","parent","hide","initSources","menu","_handleStatusChange","bind","$options","filter","_setSite","criteria","_handleSiteChange","defaultSiteId","getSiteId","$storedSiteOption","startSearching","stopSearching","clearTimeout","setTimeout","updateElementsIfSearchTextChanged","RETURN_KEY","_handleSortChange","afterInit","selectDefaultSource","setPage","pageNum","updateElements","onAfterInit","_createCancelToken","_cancelRequests","getSourceContainer","$sources","$items","_getSourcesInList","Select","multi","allowEmpty","vertical","onSelectionChange","_handleSourceSelectionChange","_initSources","getDefaultSourceKey","getSourceByKey","selectSource","refreshSources","removeAllItems","setIndexBusy","refreshSourcesAction","setIndexAvailable","initSource","addItems","initSourceToggle","expandedSources","_expandSource","deinitSourceToggle","$toggle","_getSourceToggle","deinitSource","removeItems","removeListener","removeData","selectedSource","defaultSource","paths","getDefaultExpandedSources","addOptions","_updateStructureSortOption","setSortAttribute","detach","setInstanceState","storeInstanceState","getSourceState","getSelectedSourceState","setSelecetedSourceState","viewState","storeSortAttributeAndDirection","getSelectedSortAttribute","order","getSelectedSortDirection","max","pageTrigger","history","replaceState","_resetCount","getViewParams","batchSize","limit","canHaveDrafts","savedDraftsOnly","draftOf","disabledElementIds","paginated","_isViewPaginated","collapsedElementIds","preservePagination","updateElementsAction","$scrollContainer","_updateView","showActionTriggers","_createTriggers","submitAction","actionParams","selectedElementIds","getSelectedElementIds","_findAction","viewParams","elementAction","elementIds","submitActionsAction","afterAction","actionClass","onAfterAction","hideActionTriggers","updateActionTriggers","totalSelected","getSelectedElements","getEnabledElements","setStatus","selectOption","getSortAttributeOption","attribute","setSortDirection","getSortDirectionOption","dir","getSelectedViewMode","selectItem","updateSidebarMenuLabel","sortOptions","data-extra","data-attr","setStoredSortOptionsForSource","$firstOption","getViewModesForSource","sourceViewMode","$viewModeBtn","className","data-view","icon","selectViewMode","doesSourceHaveViewMode","onSelectSource","selectSourceByKey","sortAttr","sortDir","getDefaultSort","viewModes","force","createView","getViewClass","TableElementIndexView","ThumbsElementIndexView","rememberDisabledElementId","forgetDisabledElementId","enableElements","parents","onEnableElements","disableElements","onDisableElements","getElementById","enableElementsById","ids","makeArray","disableElementsById","selectElementAfterUpdate","addButton","$button","getButtonContainer","isShowingSidebar","buttonContainer","createCustomizeSourcesModal","modal","CustomizeSourcesModal","onHide","onSelectSite","onUpdateElements","$selectedItems","_handleActionTriggerSubmit","getPostData","_handleMenuActionTriggerSubmit","option","selectedOption","firstSite","$firstVisibleSource","selectNewSource","toString","get","$heading","$headings","nextUntil","setSiteId","is","_handleSelectionChange","_handleSourceDblClick","_toggleSource","_handleSourceToggleClick","prev","$list","_getChildSources","siblings","_deinitSources","_collapseSource","aria-expanded","$childSources","_countResults","total","itemLabel","itemsLabel","min","countLabel","item","items","$paginationContainer","totalPages","ceil","$prevBtn","$nextBtn","role","tabindex","aria-checked","selectAllElements","deselectAllElements","SPACE_KEY","selectable","multiSelect","checkboxMode","selectElementById","countElementsAction","count","triggers","safeMenuActions","destructiveMenuActions","destructive","$menuTrigger","$menu","$safeList","_createMenuTriggerList","$destructiveList","$div","_showExportHud","typeOptions","$typeField","ui","createSelectField","$formatField","$typeSelect","formattable","$limitField","createTextField","placeholder","$spinner","HUD","submitting","isNaN","BaseElementIndexView","$loadingMoreSpinner","$elementContainer","$scroller","thumbLoader","elementSelect","loadingMore","_totalVisible","_morePending","_handleEnableElements","_handleDisableElements","insertAfter","getElementContainer","setTotalVisible","setMorePending","isVerticalList","handle","_handleElementEditing","$target","prop","isTouchCapable","maybeLoadMore","getAllElements","$selectedElements","selectElement","selectAll","deselectAll","getTotalVisible","totalVisible","getMorePending","morePending","canLoadMore","loadMore","innerHeight","loadMoreElementsAction","getLoadMoreParams","$newElements","appendElements","onAppendElements","newElements","BaseElementSelectInput","elementSort","elementEditor","$elementsContainer","$addElementBtn","$addElementBtnContainer","_initialized","normalizedSettings","arguments","modalStorageKey","sortable","getContainer","getElementsContainer","getAddElementsBtn","initElementSelect","initElementSort","resetElements","getElements","DragSort","$targetItem","getSelectedItems","ignoreHandleSelector","axis","getElementSortAxis","collapseDraggees","magnetStrength","helperLagBase","onSortChange","resetItemOrder","canAddMoreElements","updateAddElementsBtn","enableAddElementsBtn","disableAddElementsBtn","removeElements","addElements","editable","_handleShowElementEditor","removeElement","not","onRemoveElements","animateElementAway","animateCss","opacity","outerWidth","draftEditor","pause","REMOVE_FX_DURATION","resume","showModal","show","createModal","getModalSettings","closeOtherModals","sources","showSiteMenu","getDisabledElementIds","onSelect","onModalSelect","modalSettings","allowSelfRelations","sourceElementId","slotsLeft","selectElements","updateDisabledElementsInModal","elementInfo","createNewElement","appendElement","animateElementIntoPlace","onSelectElements","clone","prepend","single","$modalElement","$inputElement","origOffset","destOffset","$helper","position","zIndex","ADD_FX_DURATION","checkForm","fieldId","editorSettings","Modal","$selectBtn","$sourceToggles","$tbody","$primaryButtons","$secondaryButtons","$footerSpinner","onFadeIn","_createElementIndex","updateSelectBtnState","enableSelectBtn","disableSelectBtn","enableCancelBtn","disableCancelBtn","showFooterSpinner","hideFooterSpinner","clearMouseUpTimeout","disableElementsOnSelect","hideOnSelect","info","has","touchData","firstTap","secondTap","resizable","onCancel","BaseInputGenerator","listening","timeout","startListening","setNewSource","stopListening","removeAllListeners","onSourceTextChange","updateTarget","onTargetTextChange","onFormSubmit","sourceVal","targetVal","generateTargetValue","dispatchEvent","InputEvent","inputType","Event","$menuBtn","$tabs","$selectedTab","$focusableTab","log","selectTab","makeTabFocusable","LOCATION_HASH","$initialTab","LEFT_KEY","RIGHT_KEY","contains","scrollToTab","updateMenuBtn","tab","_getTab","deselectTab","scrollLeft","elemScrollOffset","targetScrollLeft","tabWidth","ulWidth","HTMLElement","AdminTable","totalItems","sorter","$noItems","$table","$deleteBtns","allowDeleteAll","minItems","noItemsSelector","tableSelector","DataTableSorter","reorderItems","updateUI","addRow","row","maxItems","$row","$deleteBtn","idAttribute","reorderAction","onReorderItems","reorderSuccessMessage","reorderFailMessage","handleDeleteBtnClick","event","confirmDeleteItem","deleteItem","getItemName","confirmDeleteMessage","getItemId","deleteAction","handleDeleteItemResponse","onDeleteItem","deleteSuccessMessage","deleteFailMessage","nameAttribute","$moveButtons","newItemBtnSelector","AssetEditor","$filenameInput","originalBasename","originalExtension","reloadIndex","refreshThumbnail","validateExtension","showImageEditor","AssetImageEditor","onSave","selectFilename","selectionStart","basename","extension","_parseFilename","selectionEnd","oldExt","newExt","originalFilename","ext","parts","pop","$imageTools","$buttons","$replaceBtn","$editorContainer","$straighten","$croppingCanvas","$spinnerCanvas","canvas","image","viewport","focalPoint","croppingCanvas","clipper","croppingRectangle","cropperHandles","cropperGrid","croppingShade","croppingAreaText","imageStraightenAngle","viewportRotation","originalWidth","originalHeight","imageVerticeCoords","zoomRatio","animationInProgress","currentView","assetId","cacheBust","draggingCropper","scalingCropper","draggingFocal","previousMouseX","previousMouseY","shiftKeyHeld","editorHeight","editorWidth","cropperState","scaleFactor","flipData","focalPointState","spinnerInterval","maxImageSize","lastLoadedDimensions","imageIsLoading","mouseMoveEvent","croppingConstraint","constraintOrientation","showingCustomConstraint","renderImage","renderCropper","now","allowDegreeFractions","isImagick","x","y","allowSavingAsNew","saveImage","getMaxImageSize","loadEditor","browserViewportWidth","documentElement","clientWidth","browserViewportHeight","clientHeight","devicePixelRatio","$viewsContainer","$views","innerWidth","_showSpinner","updateSizeAndPosition","fabric","StaticCanvas","width","enableRetinaScaling","renderAll","imageUrl","Image","fromURL","imageObject","set","originX","originY","getHeight","getWidth","getScaledImageDimensions","_setFittedImageVerticeCoordinates","_repositionEditorElements","focalState","imageDimensions","offsetX","offsetY","focal","focalData","adjustedX","adjustedY","storeFocalPointState","_createFocalPoint","_createViewport","storeCropperState","_addControlListeners","_handleMouseMove","_handleMouseDown","_handleMouseUp","_handleMouseOut","_hideSpinner","_reloadImage","setSrc","min-width","min-height","previousEditorDimensions","setDimensions","currentScaledDimensions","getZoomToFitRatio","previouslyOccupiedArea","_getBoundingRectangle","_repositionCropper","getZoomToCoverRatio","_repositionImage","_repositionViewport","_repositionFocalPoint","_zoomImage","Rect","fill","globalCompositeOperation","sizeFactor","focalX","focalY","deltaX","deltaY","Group","Circle","radius","strokeWidth","stroke","toggleFocalPoint","dimensions","state","currentWidth","ratio","hasOrientationChanged","_","imageRatio","editorRatio","_handleTabClick","rotateImage","flipImage","straighteningInput","SlideRuleInput","onStart","_showGrid","onChange","slider","straighten","onEnd","_hideGrid","_cleanupFocalPointAfterStraighten","SHIFT_KEY","_handleConstraintClick","_handleOrientationClick","_applyCustomConstraint","constraint","_showCustomConstraint","_hideCustomConstraint","setCroppingConstraint","enforceCroppingConstraint","$constraints","$constraint","reverse","_getCustomConstraint","w","h","parseFloat","_setCustomConstraint","showView","enableSlider","disableSlider","disableCropMode","enableCropMode","zoomFactor","degrees","imageZoomRatio","newAngle","angle","scaledImageDimensions","viewportProperties","imageProperties","angleInRadians","PI","newDeltaX","cos","sin","newDeltaY","modifiedDeltaX","modifiedDeltaY","temp","animate","animationDuration","onComplete","cleanAngle","_adjustFocalPointByAngle","_resetFocalPointPosition","editorCenter","setValue","properties","scaleY","scaleX","previousAngle","_adjustEditorElementsOnStraighten","newCenterX","newCenterY","angleDelta","currentZoomRatio","adjustmentRatio","cropperCenterX","cropperCenterY","imageVertices","getImageVerticeCoords","rectangle","_getZoomRatioToFitRectangle","_isCenterInside","object","containingObject","newFocalX","newFocalY","adjustedFocalX","adjustedFocalY","containingVertices","vertex","rectangleVertices","_getRectangleVertices","verticeIndex","arePointsInsideRectangle","edge","_getEdgeCrossed","rectangleCenter","distanceFromVertexToEdge","abs","sqrt","pow","distanceFromCenterToEdge","postData","imageRotation","cropData","zoom","end","scaledWidth","scaledHeight","boundingBox","_getImageBoundingBox","scale","vertScale","horiScale","getCombinedZoomRatio","strokeOptions","gridWidth","gridHeight","xStep","yStep","Line","onFadeOut","_editorModeTransition","cropperData","_showCropper","_hideCropper","targetZoom","inverseZoomFactor","imageOffsetX","imageOffsetY","getContext","cW","cH","setInterval","rotation","save","clearRect","translate","rotate","beginPath","moveTo","lineTo","lineWidth","strokeStyle","restore","clearInterval","clipperData","_setupCropperLayer","_redrawCropperElements","backgroundColor","hoverCursor","selection","rectangleRatio","rectWidth","rectHeight","lineOptions","gridOptions","pathGroup","Path","cropTextTop","cropTextBackgroundColor","Textbox","fontSize","font","textAlign","previousImageArea","currentOffset","areaFactor","coordinateSet","d","_isMouseOver","move","_cropperHandleHitTest","pageX","pageY","_handleMouseMoveInternal","_handleFocalDrag","_handleCropperDrag","_handleCropperResize","_setMouseCursor","vertices","dxi","dyi","furthest","furthestDeltas","newX","newY","previousHeight","previousWidth","startingRectangle","_calculateNewCropperSizeByDeltas","cropperDirection","topDelta","leftDelta","change","cursor","parentOffset","mouseX","mouseY","lb","rb","tb","bb","topLeft","topRight","bottomRight","bottomLeft","zoomMode","topVerticalSegment","bottomVerticalSegment","rightHorizontalSegment","leftHorizontalSegment","verticalOffset","horizontalOffset","_debug","fabricObj","debugger","points","ab","_getVector","bc","scalarAbAb","_getScalarProduct","scalarBcBc","point","ap","bp","scalarAbAp","scalarBcBp","projectsOnAB","projectsOnBC","_getVectorMagnitude","vector","_getAngleBetweenVectors","acos","edgePoints","centerPoint","smallestDiff","edgeCrossed","edgeIndex","toCenter","edgeVector","toVertex","diff","box","proportion","AssetIndex","$includeSubfoldersContainer","$includeSubfoldersCheckbox","showingIncludeSubfoldersCheckbox","$uploadButton","$uploadInput","$progressBar","$folders","uploader","promptHandler","progressBar","_uploadTotalFiles","_uploadFileProgress","_uploadedAssetIds","_currentUploaderSettings","_assetDrag","_folderDrag","_expandDropTargetFolderTimeout","_tempExpandedFolders","_fileConflictTemplate","choices","_folderConflictTemplate","_initIndexPageMode","_positionProgressBar","_createFolderContextMenu","_getSourceLevel","updateDropTargets","contextMenu","parentsUntil","DragDrop","activeDropTargetClass","helperOpacity","helper","$file","_getFileDragHelper","dropTargets","$draggee","targets","onDragStart","_onDragStart","onDropTargetChange","_onDropTargetChange","onDragStop","_onFileDragStop","helperBaseZindex","$selected","draggees","_getFolderUidFromSourceKey","$draggeeHelper","$helperSidebar","$helperNav","$helperUl","padding-top","padding-right","padding-bottom","padding-left","draggedSourceIds","_onFolderDragStop","$activeDropTarget","originatingSource","targetFolderId","originalAssetIds","originalAssetId","resetProgressBar","setItemCount","showProgressBar","parameterArray","folderId","onMoveFinish","responseArray","resetPrompts","conflict","addPrompt","suggestedFilename","prompt","hideProgressBar","performAfterMoveActions","_collapseExtraExpandedFolders","getPromptCount","fadeOutHelpers","showBatchPrompts","returnData","newParameterArray","choice","apply","_performBatchRequests","returnHelpersToDraggees","folderIds","parentId","requestId","fileMoveList","newSourceKey","transferList","newFolderId","newFolderUid","merge","_performActualFolderMove","folderDeleteList","moveCallback","counter","_getRootSource","$parent","_getParentSource","_selectSourceByFolderId","$targetSource","_getSourceByKey","$parentSources","$parentSource","style","insertBefore","PromptHandler","ProgressBar","fileInput","dropZone","events","fileuploadstart","_onUploadStart","fileuploadprogressall","_onUploadProgress","fileuploaddone","_onUploadComplete","kind","allowedKinds","Uploader","defaultVolumeHandle","setParams","$rootSource","$subContainer","checked","marginBottom","includeSubfolders","progress","loaded","setProgressPercentage","files","doReload","file","isLastUpload","_uploadFollowup","_updateAfterUpload","doFollowup","parameterIndex","followupCallback","incrementProcessedItemCount","updateProgressBar","sourceAssetId","conflictingAssetId","targetFilename","_onUpdateElements","_onKeyDown","_onElementFocus","PreviewFileModal","openInstance","selfDestruct","$focusedItem","_loadPreview","startingWidth","startingHeight","$outerContainer","$innerContainer","_$firstRowCells","$helperCells","$helperCell","$firstRowCell","$dropTarget","dropTargetFolder","_hasSubfolders","_isExpanded","_expandFolder","dropTargetFolderId","$excludedSources","_collapseFolder","menuOptions","onClick","_createSubfolder","_renameFolder","_deleteFolder","ContextMenu","menuClass","$parentFolder","subfolderName","folderName","_prepareParentForChildren","$subfolder","folderUid","_appendSubfolder","$targetFolder","folder","_cleanUpTree","oldName","newName","$existingChildren","subfolderLabel","folderInserted","$existingChild","before","windowHeight","finalCallback","doRequest","parameters","AssetSelectInput","hud","$uploadBtn","canUpload","_attachUploader","defaultFieldLayoutId","formData","multiple","canAddMoreFiles","$existing","selectUploadedFile","$newElement","margin","slotsTaken","AssetSelectorModal","$selectTransformBtn","_selectedTransform","transforms","createSelectTransformButton","$btnGroup","$menuList","MenuButton","onOptionSelect","onSelectTransform","allowTransforms","transform","selectImagesWithTransform","transformUrls","imageIdsWithMissingUrls","$item","fetchMissingTransformUrls","canSelectImageTransforms","AuthManager","remainingSessionTime","checkRemainingSessionTimer","showLoginModalTimer","decrementLogoutWarningInterval","showingLogoutWarningModal","showingLoginModal","logoutWarningModal","loginModal","$logoutWarningPara","$passwordInput","$passwordSpinner","$loginBtn","$loginErrorPara","submitLoginIfLoggedOut","updateRemainingSessionTime","setCheckRemainingSessionTimer","checkRemainingSessionTime","extendSession","responseJSON","minSafeSessionTime","showLogoutWarningModal","checkInterval","showLoginModal","submitLogin","hideLogoutWarningModal","hideLoginModal","quickShow","$logoutBtn","$renewSessionBtn","autoShow","hideOnEsc","hideOnShadeClick","shadeClass","updateLogoutWarningMessage","decrementLogoutWarning","time","quick","quickHide","$inputContainer","$inputsFlexContainer","$passwordContainer","$buttonContainer","$passwordWrapper","PasswordInput","onToggleInput","$newPasswordInput","logout","renewSession","validatePassword","login","clearLoginError","loginName","username","password","showLoginError","CP","authManager","$nav","$mainContainer","$alerts","$crumbs","$notificationContainer","$primaryForm","$headerContainer","$mainContent","$details","$sidebarContainer","$contentContainer","$edition","$confirmUnloadForms","$deltaForms","$collapsibleTables","fixedHeader","enableQueue","totalJobs","jobInfo","displayedJobInfo","displayedJobInfoUnchanged","trackJobProgressTimeout","jobProgressIcon","checkingForUpdates","forcingRefreshOnUpdatesCheck","includingDetailsOnUpdatesCheck","checkForUpdatesCallbacks","$allInstructions","$instructions","$label","updateFixedHeader","handleWindowResize","$errorNotifications","$otherNotifications","delay","notificationDuration","initSpecialForms","initAlerts","shortcuts","shortcut","submitPrimaryForm","initTabs","scrollTo","_handleInputFocus","_handleInputBlur","serialized","$forms","submit","confirmUnload","livePreview","inPreviewMode","originalEvent","returnValue","saveShortcut","toggleNav","toggleClass","toggleSidebar","menuBtn","$tabsContainer","$tabsList","selectedTabIndex","updateResponsiveTables","_i","_$table","_containerWidth","_check","_isCollapsed","getBoundingClientRect","max-height","displayNotification","$notification","fadedMargin","margin-left","margin-right","display","notificationType","fetchAlerts","displayAlerts","alerts","margin-top","$shunnableAlerts","$link","checkForUpdates","forceRefresh","includeDetails","realCallback","_checkForUpdates","updateUtilitiesBadge","callbacks","updateInfo","_getUpdates","_checkForCachedUpdates","cached","onlyIfCached","updates","_cacheUpdates","$utilitiesLink","$badge","badgeCount","runQueueAutomatically","trackJobProgress","_trackJobProgressInternal","setJobInfo","jobs","oldInfo","getDisplayedJobInfo","progressLabel","updateJobIcon","statuses","JOB_STATUS_RESERVED","JOB_STATUS_FAILED","JOB_STATUS_WAITING","j","JobProgressIcon","hideFailMode","setDescription","description","setProgress","showFailMode","JOB_STATUS_DONE","$progressLabel","failMode","_$bgCanvas","_$staticCanvas","_$hoverCanvas","_$failCanvas","_staticCtx","_hoverCtx","_canvasSize","_arcPos","_arcRadius","_lineWidth","_arcStartPos","_arcEndPos","_arcStartStepSize","_arcEndStepSize","_arcStep","_arcStepTimeout","_arcAnimateCallback","_progressBar","canAccessQueueManager","$canvasContainer","$labelContainer","_createCanvas","_drawArc","_animateArc","_setArc","color","$canvas","ctx","lineCap","startPos","endPos","arc","closePath","targetStartPos","targetEndPos","_takeNextArcStep","CategoryIndex","editableGroups","$newCategoryBtnGroup","$newCategoryBtn","updateButton","editableCategoryGroups","group","uid","defaultGroupHandle","selectedSourceHandle","selectedGroup","_getGroupTriggerHref","_openCreateCategoryModal","getAttribute","menuHtml","primarySiteId","groupId","newCategoryBtnText","hudTrigger","groupSourceKey","CategorySelectInput","selectedCategoryIds","categoryIds","branchLimit","selectionLabel","$newElementsContainer","filteredElements","$allCategories","_animateCategoryAway","charts","DataTable","columns","rows","forEach","cellIndex","parseTime","timeParse","Tip","$tip","setContent","setPosition","BaseChart","$chart","chartBaseClass","dataTable","timeFormatLocale","svg","globalSettings","formats","d3Formats","formatLocaleDefinition","timeFormatLocaleDefinition","d3TimeFormatLocaleDefinition","select","resize","baseSettings","draw","chartClass","onAfterDrawTicks","tickKey","tick","$tickText","numberFormat","percentFormat","currencyFormat","shortDateFormats","day","month","year","bottom","colors","Area","tip","drawingArea","getChartMargin","translateX","translateY","drawTicks","drawAxes","drawChart","drawTipTriggers","getX","xAxis","axisBottom","tickFormat","getXFormatter","ticks","yAxis","getY","axisLeft","getYFormatter","tickValues","getYTickValues","axisRight","showAxis","tickSizeOuter","gridlines","xLineAxis","tickSize","yLineAxis","line","datum","area","y0","y1","plots","enter","tips","chartMargin","xAxisTickInterval","node","getTotalLength","tipTriggerWidth","$content","$xValue","$yValue","content","yTicksMaxWidth","computedTickWidth","padded","xDomainMin","xDomainMax","xDomain","scaleTime","range","yDomain","getYMaxValue","scaleLinear","utils","getTimeFormatter","getNumberFormatter","maxValue","getDuration","secondsNum","chartSettings","dataScale","ColorInput","$colorContainer","$colorPreview","$colorInput","createColorInput","handleTextChange","setAttribute","aria-controls","updateColor","repeat","_browserSupportsColorInputs","doesBrowserSupportColorInputs","$elementIndexSourcesContainer","$sourcesContainer","$sourceSettingsContainer","$newHeadingBtn","$footerBtnContainer","$loadingSpinner","sourceSort","updateSourcesOnSave","availableTableAttributes","setContainer","buildModal","addSource","sourceData","$itemLabel","$itemInput","heading","Heading","updateItemLabel","Source","handleNewHeadingBtnClick","scrollContainerToElement","$pendingHeading","$lastSource","$indexSource","getIndexSource","isHeading","appendSource","$extraSources","nextAll","BaseSource","$settingsContainer","isSelected","deselect","createSettings","$settings","headerColHeading","defaultHeaderColHeading","tableAttributes","createTableColumnsField","firstKey","firstLabel","$titleColumnCheckbox","createTableColumnOption","$columnCheckboxes","selectedAttributes","createField","instructions","createCheckbox","disabled","$labelField","$labelInput","handleLabelInputChange","deleteHeading","table","$rows","getHelper","caboose","Y_AXIS","$helperRow","helperClass","$cells","DeleteUserModal","userId","$deleteActionRadios","$deleteSpinner","userSelect","_deleting","contentSummary","idParam","$deleteSubmitBtn","_submitBtnLabel","validateDeleteInputs","withContent","num","validates","handleSubmit","onSubmit","DraftEditor","$revisionBtn","$revisionLabel","$expandSiteStatusesBtn","$statusIcon","$editMetaBtn","metaHud","$nameTextInput","$saveMetaBtn","$siteStatusPane","$globalLightswitch","$siteLightswitches","$addlSiteField","siteIds","newSiteIds","lastSerializedValue","listeningForChanges","pauseLevel","saving","queue","submittingForm","duplicatedElements","openingPreview","preview","previewToken","createdProvisionalDraft","siteStatuses","canEditMultipleSites","previewTargets","enablePreview","$shareBtn","openShareLink","createShareMenu","revisionId","serializeForm","isProvisionalDraft","initForProvisionalDraft","draftId","isUnpublishedDraft","initForDraft","canUpdateSource","createDraft","listenForChanges","showStatusHud","autosaveDrafts","saveDraftAction","statusIcons","stopListeningForChanges","deleteDraftAction","hashedCpEditUrl","provisional","createEditMetaBtn","publishDraftAction","expandSiteStatuses","$enabledForSiteField","_getOtherSupportedSites","s","_createSiteStatusField","$globalField","createLightswitchField","_showField","originalEnabledValue","enabled","enabledForSite","originalSerializedStatus","_updateGlobalStatus","serializedStatuses","addlSiteIds","_createAddlSiteField","_updateSiteStatuses","$field","overflow","_removeField","allEnabled","allDisabled","turnOn","turnOff","turnIndeterminate","site","$lightswitch","addlSites","$addlSiteSelectContainer","createSelect","$addlSiteSelect","bodyHtml","_saveSuccessMessage","_saveFailMessage","spinners","getPreviewToken","sourceId","getTokenizedPreviewUrl","randoParam","isLive","siteToken","tokenParam","getPreview","Preview","openPreview","ensureIsDraftOrRevision","onlyIfChanged","removeActionParams","isPreviewActive","$editor","saveDraft","isActive","modifiedFieldNames","preparedData","prepareData","deltaName","content-type","_afterSaveRequest","_showFailStatus","docTitle","draftName","revisionMenu","creator","timestamp","updatePreviewTargets","afterUpdate","checkMetaValues","oldId","selectors","modifiedAttributes","$fields","deltaCallback","swapDuplicatedElementIds","getDeltaNames","idsRE","pre","post","newTarget","$statusIcons","nextInQueue","showMetaHud","createMetaHud","onMetaHudShow","$hudBody","$nameField","$nameInputContainer","saveMeta","onMetaHudHide","onMetaHudEscape","shakeMetaHud","$hud","handleFormSubmit","autosave","hashedAddAnotherRedirectUrl","DynamicGenerator","EditableTable","baseName","biggestId","$addRowBtn","rowCount","hasMaxRows","hasMinRows","radioCheckboxes","copyDraggeeInputValuesToHelper","isVisible","initialize","initializeIfVisible","minRows","createRowObj","updateAddRowButton","canAddRow","canDeleteRow","deleteRow","$tr","onDeleteRow","staticRows","maxRows","rowId","rowIdPrefix","createRow","defaultValues","onAddRow","Row","focusOnPrevRow","tdIndex","blurTd","prevRow","$prevTr","$tds","focusOnNextRow","nextRow","$nextTr","importData","lines","textualColTypes","data-id","colId","$cell","col","scope","code","small","createDateInput","createLightswitch","default","createTimeInput","createTextInput","niceTexts","tds","$textareas","tr","td","$textarea","$checkbox","textareasByColId","onHeightChange","onTextareaHeightChange","radioMode","toggle","applyToggleCheckbox","autopopulate","HandleGenerator","allowNonAlphaStart","onTextareaFocus","onRadioCheckboxChange","checkbox","checkboxColId","neg","checkboxCol","colum","ignoreNextTextareaFocus","handleKeypress","charCode","isCtrlKeyPressed","numericKeyCodes","handlePaste","clipboardData","getData","validateValue","safeValue","tallestTextareaHeight","tdHeight","ElementActionTrigger","maxLevels","newChildUrl","$trigger","triggerEnabled","activate","updateTrigger","validateSelection","enableTrigger","disableTrigger","valid","batch","handleTriggerActivation","workers","Worker","$thumbs","$thumb","$scrollParent","scrollParent","addToQueue","invisibleThumbs","thumb","active","loadNext","scrollParentOffset","scrollParentHeight","thumbOffset","retryAll","loader","$img","ElevatedSessionForm","inputs","form","getInputPostVal","elevatedSessionManager","fetchingTimeout","stopImmediatePropagation","inputsChanged","$currentInput","requireElevatedSession","ElevatedSessionManager","passwordModal","$submitBtn","$errorPara","minSafeElevatedSessionTimeout","showPasswordModal","$passwordModal","focusPasswordInput","submitPassword","currentPassword","showPasswordError","EntryIndex","publishableSections","$newEntryBtnGroup","$newEntryBtn","section","defaultSectionHandle","selectedSection","_getSectionTriggerHref","_openCreateEntryModal","sectionId","newEntryBtnText","typeId","entryTypes","canPublish","sectionSourceKey","FieldLayoutDesigner","$newTabBtn","$libraryToggle","$selectedLibrary","$fieldLibrary","$uiLibrary","$uiLibraryElements","$fieldSearch","$clearFieldSearchBtn","$fieldGroups","tabGrid","elementDrag","$workspace","$fieldSearchContainer","initTab","elementPlacementInputName","ElementDrag","customizableTabs","tabDrag","TabDrag","customizableUi","$libraryPicker","Listbox","$selectedOption","$matches","$group","$editBtn","data-action","onTabOptionSelect","initElement","Element","renameTab","removeTab","$prev","$next","$labelSpan","promptForTabName","getElementPlacementInputName","removeFieldByHandle","removeField","refreshCols","addTab","tabName","elementConfigInputName","designer","$placementInput","$configInput","config","isField","requirable","hasCustomWidth","hasSettings","settingsHtml","isRequired","createSettingsHud","initUi","updatePlacementInput","updateConfigInput","SlidePicker","step","valueLabel","pct","onShow","applyHudSettings","serializeArray","updateRequiredClass","console","required","BaseDrag","Drag","$insertion","showingInsertion","$caboose","findItems","createInsertion","createCaboose","removeCaboose","swapDraggeeWithInsertion","swapInsertionWithDraggee","setMidpoints","getClosestItem","_closestItem","_closestItemMouseDiff","_$item","_midpoint","_mouseDiff","getDist","checkForNewClosestItem","draggeeDisplay","visibility","FX_DURATION","helpers","_showDraggee","onDrag","draggingLibraryElement","draggingField","isDraggeeMandatory","isHoveringOverTab","hitTest","$fieldContainers","$libraryElement","targetPrefix","targetSelector","reverseTargetSelector","_$target","_$reverseTarget","getType","normalizeTargetSelector","findTargets","onToggleChange","nodeName","warn","getToggleVal","postVal","hideTarget","showTarget","_show","_currentHeight","$t","_targetHeight","totalCols","colGutterDrop","colPctWidth","possibleItemColspans","possibleItemPositionsByColspan","itemPositions","itemColspansByPosition","layouts","layout","itemHeights","leftPadding","_refreshingCols","_refreshColsAfterRefresh","_forceRefreshColsAfterRefresh","handleContainerHeightProxy","setItems","oldHeight","scrollHeight","gutter","itemIndex","tallestItemHeight","colIndex","itemHeight","remainder","itemHeightsByColspan","positionRight","positionLeft","minColspan","maxColspan","colspan","getItemWidthCss","minPosition","maxPosition","colHeights","createLayouts","layoutTotalCols","highestTotalCols","layoutHeights","shortestHeight","shortestLayouts","emptySpaces","emptySpace","colspans","getItemLeftPosCss","positions","isSimpleLayout","margin-bottom","positionItems","completeRefreshCols","onRefreshCols","getItemWidth","getItemWidthInPx","getItemLeftPosInPx","prevPositions","prevColspans","prevColHeights","prevEmptySpace","LayoutGenerator","endingCol","affectedColHeights","onItemResize","newHeight","tallestColHeightsByPosition","colHeightsForPosition","tallestColHeight","words","handleCasing","ImageUpload","initImageUpload","containerSelector","uploadAction","postParameters","fileInputSelector","uploadParamName","fileuploadfail","_onUploadError","initButtons","uploadButtonSelector","deleteButtonSelector","refreshImage","onAfterRefreshImage","$icon","previousSibling","nodeType","Node","TEXT_NODE","nodeValue","showHud","showing","hudClass","closeOtherHUDs","indeterminate","dragger","dragStartMargin","outerContainer","X_AXIS","_onDrag","_onDragStop","muteEvent","changed","_onSettle","_getOffMargin","_onMouseDown","_onMouseUp","dragging","_getMargin","mouseDistX","selectedOptionIndex","UP_KEY","selectPrev","DOWN_KEY","selectNext","selectedClass","focusClass","LivePreview","$extraFields","$dragHandle","$previewContainer","$iframeContainer","$iframe","$fieldPlaceholder","previewUrl","basePostData","fields","lastPostData","updateIframeInterval","loading","checkAgain","dragStartEditorWidth","_slideInOnIframeLoad","_forceUpdateIframeProxy","_scrollX","_scrollY","_editorWidth","_editorWidthInPx","protocol","previewParams","forceUpdateIframe","extraFields","defaultEditorWidth","moveFieldsBack","editorWidthInPx","inPx","minEditorWidthInPx","exit","$editorHeader","$closeBtn","getIframeWidth","$clone","_getClone","updateIframe","slideIn","createToken","previewAction","updateWidths","$newClone","field","contentWindow","X-Craft-Token","xhrFields","withCredentials","crossDomain","handleSuccess","handleError","write","onResponse","copyInputValues","$textInput","$showPasswordToggle","showingPassword","passwordInput","initInputFocusEvents","hidePassword","setCurrentInput","updateToggleLabel","showPassword","togglePassword","onKeyDown","ALT_KEY","onKeyUp","onInputChange","$previewHeader","$targetBtn","$targetMenu","$deviceTypeContainer","$orientationBtn","$refreshBtn","$deviceMask","$devicePreviewContainer","iframeLoaded","$tempInput","activeTarget","isDeviceUpdating","deviceAnimationTimeout","currentDeviceType","deviceOrientation","deviceWidth","deviceHeight","deviceMaskDimensions","phone","tablet","iframeHeight","_updateIframeProxy","Pro","switchTarget","aria-selected","deviceType","aria-hidden","_updateRefreshBtn","_activeTarget","refresh","previewTarget","resetDevicePreview","_devicePreviewIsActive","updateDevicePreview","_useIframeResizer","previewIframeResizerOptions","resetScroll","sameHost","frameborder","wrap","iFrameResize","checkOrigin","scrolling","onInit","iframe","switchDeviceType","newDeviceType","switchOrientation","hZoom","wZoom","previewHeight","previewWidth","maskHeight","maskWidth","rotationDeg","marginTop","marginLeft","iFrameResizer","removeListeners","defaultSettings","_onHide","instance","loadAsset","focusItem","empty","desiredHeight","desiredWidth","containerHeight","containerWidth","minGutter","_resizeContainer","previewHtml","max-width","$innerProgressBar","$progressBarStatus","_itemCount","_processedItemCount","_displaySteps","displaySteps","setProcessedItemCount","fadeTo","incrementItemCount","percentage","$modalContainerDiv","$prompt","$promptApplyToRemainingContainer","$promptApplyToRemainingCheckbox","$promptApplyToRemainingLabel","$pomptChoices","_prompts","_promptBatchCallback","_promptBatchReturnData","_promptBatchNum","_showNextPromptInBatch","remainingInBatch","_showPrompt","_handleBatchPromptSelection","applyToRemaining","choiceData","itemsToGo","_promptCallback","$promptMessage","$promptChoices","$promptButtons","$radioButton","_selectPromptChoice","fadeOut","_cancelPrompt","totalSteps","_min","_max","Number","isInteger","prevAll","triggerEvent","aria-valuenow","aria-valuetext","$activeButton","startPositionX","graduationsMin","graduationsMax","slideMin","slideMax","$overlay","$cursor","$graduations","$graduationsUl","_handleResize","_handleTapStart","_handleTapMove","_handleTapEnd","graduationsCalculatedWidth","valueToPosition","touch","startLeft","curX","positionToValue","scaleMin","scaleMax","contents","autoOpen","_cancelTransitionListeners","addPanel","removePanel","openPanels","panel","updateStyles","totalPanels","SlugGenerator","allowUppercaseInSlug","limitAutoSlugsToAscii","XRegExp","matchChain","slugWordSeparator","Structure","structureDrag","$parents","initToggle","StructureDrag","initNewChildMenus","viewStateKey","$addBtns","onNewChildMenuClick","showMenu","getIndent","level","baseIndent","nestedIndent","addElement","$addBtn","$parentUl","_removeUl","structure","draggeeLevel","$helperLi","$targets","draggeeHeight","$level","cancelDrag","$lis","$closestTarget","closestTargetPos","closestTargetYDiff","closestTargetOffset","closestTargetHeight","targetOffset","targetHeight","targetYMidpoint","targetYDiff","$closestTargetLi","closestTargetLevel","$nextTargetLi","nextTargetLevel","hoveringBetweenRows","draggeeX","targetItemMouseDiffX","$parentLis","$closestParentLi","closestParentLiXDiff","closestParentLevel","$parentLi","parentLiX","parentLiXDiff","parentLevel","onMouseUp","$draggeeParent","moved","$closestSiblings","newLevel","setLevel","structureId","prevId","indent","$childLis","StructureTableSorter","tableView","_basePadding","_helperMargin","_$titleHelperCell","_titleHelperCellOuterWidth","_ancestors","_updateAncestorsFrame","_draggeeLevel","_draggeeLevelDelta","draggingLastElements","_loadingDraggeeLevelDelta","_targetLevel","_targetLevelBounds","_positionChanged","singleHelper","helperSpacingY","findDraggee","$nextRow","nextRowLevel","nextRowLevelDelta","_getAjaxBaseData","delta","drag","canInsertBefore","_getLevelBounds","canInsertAfter","_getAncestors","_setTargetLevelBounds","_updateIndent","onInsertionPointChange","_updateAncestorsBeforeRepaint","levelDiff","padding","_getLevelIndent","$prevRow","prevRowLevel","$spinnerRow","_createSpinnerRowAfter","onPositionChange","_expandElement","onReturnHelpersToDraggees","newDraggeeIndexes","oldDraggeeIndexes","$postDraggeeItems","_minLevel","_maxLevel","forcePositionChange","_mouseDist","realMouseX","mousedownX","_indentationDist","LEVEL_INDENT","_targetLevelMouseDiff","_magnetImpact","MAX_GIVE","_closestLevelMagnetIndent","targetLevel","_level","_$prevRow","cancelAnimationFrame","_updateAncestors","_$ancestor","_newAncestors","HELPER_MARGIN","$selectedSortHeader","structureTableSort","_totalVisiblePostStructureTableDraggee","_morePendingPostStructureTableDraggee","initTableHeaders","_collapseElement","selectedSortAttr","$tableHeaders","selectedSortDir","_handleSelectedSortHeaderClick","_handleUnselectedSortHeaderClick","_isStructureTableDraggingLastElements","positionedAfter","includeTableAttributesForSource","_updateTableAttributes","$nextNextRow","descendantOf","$nextRows","newSortDir","_handleSortHeaderClick","TagSelectInput","searchMenu","$addTagInput","_ignoreBlur","searchForTags","selectTag","$hoverOption","$nextOption","focusOption","$prevOption","killSearchMenu","excludeIds","tagGroupId","tags","exclude","exactMatch","Menu","attachToElement","data-site-id","targetSiteId","data-label","data-editable","$titleContainer","autocomplete","inputmode","maxlength","autofocus","getAutofocusValue","getDisabledValue","readonly","showCharsLeft","createCopyTextInput","buttonId","execCommand","createCopyTextField","createCopyTextPrompt","createTextarea","createTextareaField","$select","data-target-prefix","optgroup","$optgroup","selected","data-target","data-reverse-target","reverseToggle","for","createCheckboxField","createCheckboxSelect","allValue","allChecked","showAllOption","allLabel","createCheckboxSelectField","fieldset","data-value","data-indeterminate-value","aria-labelledby","labelId","containerId","$colorPreviewContainer","createColorField","o","getMonth","formattedValue","timezone","defaultDate","createDateField","createDateRangePicker","today","getFullYear","getDate","startDate","endDate","$allOption","firstDayOffset","getDay","firstDay","$flex","$startDate","$endDate","$dateInputs","dpDiv","setPositionRelativeToAnchor","startTime","endTime","foundOption","btnClasses","timepicker","timepickerOptions","getHours","getMinutes","getSeconds","createTimeField","warning","addErrorsToField","addErrorsToList","$errors","clearErrorsFromField","_rejectedFiles","_extensionList","_totalFileCounter","_validFileCounter","autoUpload","fileupload","onFileAdd","paramObject","getInProgress","_createExtensionList","process","done","pass","fileExtension","maxFileSize","originalFiles","processErrorMessages","kinds","humanFileSize","maxUploadSize","bytes","u","toFixed","allowedKind","fileKinds","extensions","pasteZone","sequentialUploads","Accept","UriFormatGenerator","uriFormat","suffix"],"mappings":"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","file":"Craft.min.js","sourcesContent":["(function($){\n\n/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebarShade: null,\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'}).prependTo(this.$body);\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade = $('<div/>', {class: 'ee-sidebar-shade hidden'}).appendTo(this.$body);\n\n            this.addListener(this.$sidebarShade, 'click', ev => {\n                ev.stopPropagation();\n                this.hideSidebar();\n            });\n        }\n\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout(this.$body.add(this.$footer), {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade\n                .removeClass('hidden')\n                .css(this._sidebarStyles());\n        }\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade.addClass('hidden');\n        }\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _sidebarStyles: function() {\n        const headerHeight = this.$header.outerHeight();\n        return {\n            top: `${headerHeight}px`,\n            height: `calc(100% - ${headerHeight}px`,\n        };\n    },\n\n    _openedSidebarStyles: function() {\n        return $.extend(this._sidebarStyles(), {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        });\n    },\n\n    _closedSidebarStyles: function() {\n        return $.extend(this._sidebarStyles(), {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        });\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            context: this.settings.context,\n            elementType: this.elementType,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container.editable'), 'click', 'showImageEditor');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    this.settings.input.refreshThumbnail(this.$element.data('id'));\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdProvisionalDraft: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            this.checkForm();\n            this.listenForChanges();\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\">${this._saveFailMessage()}</p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, (deltaName, params)  => {\n                if (!this.settings.isUnpublishedDraft && params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            });\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject();\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                class: 'extralight',\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).closest('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                resolve();\n            }).catch(() => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    this._showFailStatus();\n                    reject();\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue') || '');\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames(), deltaCallback);\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n\n/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n\n/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n\n(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n\n/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n\n// Use old jQuery prefilter behavior\n// see https://jquery.com/upgrade-guide/3.5/\nvar rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\/>/gi;\njQuery.htmlPrefilter = function(html) {\n    return html.replace(rxhtmlTag, \"<$1></$2>\");\n};\n\n// Set all the standard Craft.* stuff\n$.extend(Craft,\n    {\n        navHeight: 48,\n\n        /**\n         * @callback indexKeyCallback\n         * @param {object} currentValue\n         * @param {number} [index]\n         * @return {string}\n         */\n        /**\n         * Indexes an array of objects by a specified key\n         *\n         * @param {object[]} arr\n         * @param {(string|indexKeyCallback)} key\n         */\n        index: function(arr, key) {\n            if (!$.isArray(arr)) {\n                throw 'The first argument passed to Craft.index() must be an array.';\n            }\n\n            return arr.reduce((index, obj, i) => {\n                index[typeof key === 'string' ? obj[key] : key(obj, i)] = obj;\n                return index;\n            }, {});\n        },\n\n        /**\n         * Get a translated message.\n         *\n         * @param {string} category\n         * @param {string} message\n         * @param {object} params\n         * @return string\n         */\n        t: function(category, message, params) {\n            if (\n                typeof Craft.translations[category] !== 'undefined' &&\n                typeof Craft.translations[category][message] !== 'undefined'\n            ) {\n                message = Craft.translations[category][message];\n            }\n\n            if (params) {\n                return this.formatMessage(message, params);\n            }\n\n            return message;\n        },\n\n        formatMessage: function(pattern, args) {\n            let tokens;\n            if ((tokens = this._tokenizePattern(pattern)) === false) {\n                throw 'Message pattern is invalid.';\n            }\n            for (let i = 0; i < tokens.length; i++) {\n                let token = tokens[i];\n                if (typeof token === 'object') {\n                    if ((tokens[i] = this._parseToken(token, args)) === false) {\n                        throw 'Message pattern is invalid.';\n                    }\n                }\n            }\n            return tokens.join('');\n        },\n\n        _tokenizePattern: function(pattern) {\n            let depth = 1, start, pos;\n            // Get an array of the string characters (factoring in 3+ byte chars)\n            const chars = [...pattern];\n            if ((start = pos = chars.indexOf('{')) === -1) {\n                return [pattern];\n            }\n            let tokens = [chars.slice(0, pos).join('')];\n            while (true) {\n                let open = chars.indexOf('{', pos + 1);\n                let close = chars.indexOf('}', pos + 1);\n                if (open === -1) {\n                    open = false;\n                }\n                if (close === -1) {\n                    close = false;\n                }\n                if (open === false && close === false) {\n                    break;\n                }\n                if (open === false) {\n                    open = chars.length;\n                }\n                if (close > open) {\n                    depth++;\n                    pos = open;\n                } else {\n                    depth--;\n                    pos = close;\n                }\n                if (depth === 0) {\n                    tokens.push(chars.slice(start + 1, pos).join('').split(',', 3));\n                    start = pos + 1;\n                    tokens.push(chars.slice(start, open).join(''));\n                    start = open;\n                }\n\n                if (depth !== 0 && (open === false || close === false)) {\n                    break;\n                }\n            }\n            if (depth !== 0) {\n                return false;\n            }\n\n            return tokens;\n        },\n\n        _parseToken: function(token, args) {\n            // parsing pattern based on ICU grammar:\n            // http://icu-project.org/apiref/icu4c/classMessageFormat.html#details\n            const param = Craft.trim(token[0]);\n            if (typeof args[param] === 'undefined') {\n                return `{${token.join(',')}}`;\n            }\n            const arg = args[param];\n            const type = typeof token[1] !== 'undefined' ? Craft.trim(token[1]) : 'none';\n            switch (type) {\n                case 'number':\n                    let format = typeof token[2] !== 'undefined' ? Craft.trim(token[2]) : null;\n                    if (format !== null && format !== 'integer') {\n                        throw `Message format 'number' is only supported for integer values.`;\n                    }\n                    let number = Craft.formatNumber(arg);\n                    let pos;\n                    if (format === null && (pos = `${arg}`.indexOf('.')) !== -1) {\n                        number += `.${arg.substr(pos + 1)}`;\n                    }\n\n                    return number;\n                case 'none':\n                    return arg;\n                case 'plural':\n                    /* http://icu-project.org/apiref/icu4c/classicu_1_1PluralFormat.html\n                    pluralStyle = [offsetValue] (selector '{' message '}')+\n                    offsetValue = \"offset:\" number\n                    selector = explicitValue | keyword\n                    explicitValue = '=' number  // adjacent, no white space in between\n                    keyword = [^[[:Pattern_Syntax:][:Pattern_White_Space:]]]+\n                    message: see MessageFormat\n                    */\n                    if (typeof token[2] === 'undefined') {\n                        return false;\n                    }\n                    let plural = this._tokenizePattern(token[2]);\n                    const c = plural.length;\n                    let message = false;\n                    let offset = 0;\n                    for (let i = 0; i + 1 < c; i++) {\n                        if (typeof plural[i] === 'object' || typeof plural[i + 1] !== 'object') {\n                            return false;\n                        }\n                        let selector = Craft.trim(plural[i++]);\n                        let selectorChars = [...selector];\n\n                        if (i === 1 && selector.substring(0, 7) === 'offset:') {\n                            let pos = [...selector.replace(/[\\n\\r\\t]/g, ' ')].indexOf(' ', 7);\n                            if (pos === -1) {\n                                throw 'Message pattern is invalid.';\n                            }\n                            let offset = parseInt(Craft.trim(selectorChars.slice(7, pos).join('')));\n                            selector = Craft.trim(selectorChars.slice(pos + 1, pos + 1 + selectorChars.length).join(''));\n                        }\n                        if (\n                            message === false &&\n                            selector === 'other' ||\n                            selector[0] === '=' && parseInt(selectorChars.slice(1, 1 + selectorChars.length).join('')) === arg ||\n                            selector === 'one' && arg - offset === 1\n                        ) {\n                            message = (typeof plural[i] === 'string' ? [plural[i]] : plural[i]).map((p) => {\n                                return p.replace('#', arg - offset);\n                            }).join(',');\n                        }\n                    }\n                    if (message !== false) {\n                        return this.formatMessage(message, args);\n                    }\n                    break;\n                default:\n                    throw `Message format '${type}' is not supported.`;\n            }\n\n            return false;\n        },\n\n        formatDate: function(date) {\n            if (typeof date !== 'object') {\n                date = new Date(date);\n            }\n\n            return $.datepicker.formatDate(Craft.datepickerOptions.dateFormat, date);\n        },\n\n        /**\n         * Formats a number.\n         *\n         * @param {string} number\n         * @return string D3 format\n         */\n        formatNumber: function(number, format) {\n            if (typeof format == 'undefined') {\n                format = ',.0f';\n            }\n\n            var formatter = d3.formatLocale(d3FormatLocaleDefinition).format(format);\n\n            return formatter(number);\n        },\n\n        /**\n         * @param {string} key\n         * @param {boolean} shift\n         * @param {boolean} alt\n         */\n        shortcutText: function (key, shift, alt) {\n            if (Craft.clientOs === 'Mac') {\n                return (alt ? '⌥' : '') + (shift ? '⇧' : '') + '⌘' + key;\n            }\n            return 'Ctrl+' + (alt ? 'Alt+' : '') + (shift ? 'Shift+' : '') + key;\n        },\n\n        /**\n         * Escapes some HTML.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeHtml: function(str) {\n            return $('<div/>').text(str).html();\n        },\n\n        /**\n         * Escapes special regular expression characters.\n         *\n         * @param {string} str\n         * @return string\n         */\n        escapeRegex: function(str) {\n            // h/t https://stackoverflow.com/a/9310752\n            return str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n\n        /**\n         * Returns the text in a string that might contain HTML tags.\n         *\n         * @param {string} str\n         * @return string\n         */\n        getText: function(str) {\n            return $('<div/>').html(str).text();\n        },\n\n        /**\n         * Encodes a URI copmonent. Mirrors PHP's rawurlencode().\n         *\n         * @param {string} str\n         * @return string\n         * @see http://stackoverflow.com/questions/1734250/what-is-the-equivalent-of-javascripts-encodeuricomponent-in-php\n         */\n        encodeUriComponent: function(str) {\n            str = encodeURIComponent(str);\n\n            var differences = {\n                '!': '%21',\n                '*': '%2A',\n                \"'\": '%27',\n                '(': '%28',\n                ')': '%29'\n            };\n\n            for (var chr in differences) {\n                var re = new RegExp('\\\\' + chr, 'g');\n                str = str.replace(re, differences[chr]);\n            }\n\n            return str;\n        },\n\n        /**\n         * Selects the full value of a given text input.\n         *\n         * @param input\n         */\n        selectFullValue: function(input) {\n            var $input = $(input);\n            var val = $input.val();\n\n            // Does the browser support setSelectionRange()?\n            if (typeof $input[0].setSelectionRange !== 'undefined') {\n                // Select the whole value\n                var length = val.length * 2;\n                $input[0].setSelectionRange(0, length);\n            } else {\n                // Refresh the value to get the cursor positioned at the end\n                $input.val(val);\n            }\n        },\n\n        /**\n         * Formats an ID out of an input name.\n         *\n         * @param {string} inputName\n         * @return string\n         */\n        formatInputId: function(inputName) {\n            return this.rtrim(inputName.replace(/[\\[\\]\\\\]+/g, '-'), '-');\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         * @param baseUrl\n         */\n        getUrl: function(path, params, baseUrl) {\n            if (typeof path !== 'string') {\n                path = '';\n            }\n\n            // Normalize the params\n            var anchor = '';\n\n            if ($.isPlainObject(params)) {\n                var aParams = [];\n\n                for (var name in params) {\n                    if (!params.hasOwnProperty(name)) {\n                        continue;\n                    }\n\n                    var value = params[name];\n\n                    if (name === '#') {\n                        anchor = value;\n                    } else if (value !== null && value !== '') {\n                        aParams.push(name + '=' + value);\n                    }\n                }\n\n                params = aParams;\n            }\n\n            if (Garnish.isArray(params)) {\n                params = params.join('&');\n            } else {\n                params = Craft.trim(params, '&?');\n            }\n\n            // Was there already an anchor on the path?\n            var apos = path.indexOf('#');\n            if (apos !== -1) {\n                // Only keep it if the params didn't specify a new anchor\n                if (!anchor) {\n                    anchor = path.substr(apos + 1);\n                }\n                path = path.substr(0, apos);\n            }\n\n            // Were there already any query string params in the path?\n            var qpos = path.indexOf('?');\n            if (qpos !== -1) {\n                params = path.substr(qpos + 1) + (params ? '&' + params : '');\n                path = path.substr(0, qpos);\n            }\n\n            // Return path if it appears to be an absolute URL.\n            if (path.search('://') !== -1 || path[0] === '/') {\n                return path + (params ? '?' + params : '') + (anchor ? '#' + anchor : '');\n            }\n\n            path = Craft.trim(path, '/');\n\n            // Put it all together\n            var url;\n\n            if (baseUrl) {\n                url = baseUrl;\n\n                if (path && Craft.pathParam) {\n                    // Does baseUrl already contain a path?\n                    var pathMatch = url.match(new RegExp('[&\\?]' + Craft.escapeRegex(Craft.pathParam) + '=[^&]+'));\n                    if (pathMatch) {\n                        url = url.replace(pathMatch[0], Craft.rtrim(pathMatch[0], '/') + '/' + path);\n                        path = '';\n                    }\n                }\n            } else {\n                url = Craft.baseUrl;\n            }\n\n            // Does the base URL already have a query string?\n            qpos = url.indexOf('?');\n            if (qpos !== -1) {\n                params = url.substr(qpos + 1) + (params ? '&' + params : '');\n                url = url.substr(0, qpos);\n            }\n\n            if (!Craft.omitScriptNameInUrls && path) {\n                if (Craft.usePathInfo || !Craft.pathParam) {\n                    // Make sure that the script name is in the URL\n                    if (url.search(Craft.scriptName) === -1) {\n                        url = Craft.rtrim(url, '/') + '/' + Craft.scriptName;\n                    }\n                } else {\n                    // Move the path into the query string params\n\n                    // Is the path param already set?\n                    if (params && params.substr(0, Craft.pathParam.length + 1) === Craft.pathParam + '=') {\n                        var basePath,\n                            endPath = params.indexOf('&');\n\n                        if (endPath !== -1) {\n                            basePath = params.substring(2, endPath);\n                            params = params.substr(endPath + 1);\n                        } else {\n                            basePath = params.substr(2);\n                            params = null;\n                        }\n\n                        // Just in case\n                        basePath = Craft.rtrim(basePath);\n\n                        path = basePath + (path ? '/' + path : '');\n                    }\n\n                    // Now move the path into the params\n                    params = Craft.pathParam + '=' + path + (params ? '&' + params : '');\n                    path = null;\n                }\n            }\n\n            if (path) {\n                url = Craft.rtrim(url, '/') + '/' + path;\n            }\n\n            if (params) {\n                url += '?' + params;\n            }\n\n            if (anchor) {\n                url += '#' + anchor;\n            }\n\n            return url;\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getCpUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseCpUrl);\n        },\n\n        /**\n         * @return string\n         * @param path\n         * @param params\n         */\n        getSiteUrl: function(path, params) {\n            return this.getUrl(path, params, Craft.baseSiteUrl);\n        },\n\n        /**\n         * Returns an action URL.\n         *\n         * @param {string} path\n         * @param {object|string|undefined} params\n         * @return string\n         */\n        getActionUrl: function(path, params) {\n            return Craft.getUrl(path, params, Craft.actionUrl);\n        },\n\n        /**\n         * Redirects the window to a given URL.\n         *\n         * @param {string} url\n         */\n        redirectTo: function(url) {\n            document.location.href = this.getUrl(url);\n        },\n\n        /**\n         * Returns a hidden CSRF token input, if CSRF protection is enabled.\n         *\n         * @return string\n         */\n        getCsrfInput: function() {\n            if (Craft.csrfTokenName) {\n                return '<input type=\"hidden\" name=\"' + Craft.csrfTokenName + '\" value=\"' + Craft.csrfTokenValue + '\"/>';\n            } else {\n                return '';\n            }\n        },\n\n        /**\n         * Posts an action request to the server.\n         *\n         * @param {string} action\n         * @param {object|undefined} data\n         * @param {function|undefined} callback\n         * @param {object|undefined} options\n         * @return jqXHR\n         * @deprecated in 3.4.6. sendActionRequest() should be used instead\n         */\n        postActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = {};\n            }\n\n            options = options || {};\n\n            if (options.contentType && options.contentType.match(/\\bjson\\b/)) {\n                if (typeof data === 'object') {\n                    data = JSON.stringify(data);\n                }\n                options.contentType = 'application/json; charset=utf-8';\n            }\n\n            var jqXHR = $.ajax($.extend({\n                url: Craft.getActionUrl(action),\n                type: 'POST',\n                dataType: 'json',\n                headers: this._actionHeaders(),\n                data: data,\n                success: callback,\n                error: function(jqXHR, textStatus, errorThrown) {\n                    // Ignore incomplete requests, likely due to navigating away from the page\n                    // h/t https://stackoverflow.com/a/22107079/1688568\n                    if (jqXHR.readyState !== 4) {\n                        return;\n                    }\n\n                    if (typeof Craft.cp !== 'undefined') {\n                        Craft.cp.displayError();\n                    } else {\n                        alert(Craft.t('app', 'A server error occurred.'));\n                    }\n\n                    if (callback) {\n                        callback(null, textStatus, jqXHR);\n                    }\n                }\n            }, options));\n\n            // Call the 'send' callback\n            if (typeof options.send === 'function') {\n                options.send(jqXHR);\n            }\n\n            return jqXHR;\n        },\n\n        _waitingOnAjax: false,\n        _ajaxQueue: [],\n\n        /**\n         * Queues up an action request to be posted to the server.\n         */\n        queueActionRequest: function(action, data, callback, options) {\n            // Make 'data' optional\n            if (typeof data === 'function') {\n                options = callback;\n                callback = data;\n                data = undefined;\n            }\n\n            Craft._ajaxQueue.push([action, data, callback, options]);\n\n            if (!Craft._waitingOnAjax) {\n                Craft._postNextActionRequestInQueue();\n            }\n        },\n\n        _postNextActionRequestInQueue: function() {\n            Craft._waitingOnAjax = true;\n\n            var args = Craft._ajaxQueue.shift();\n\n            Craft.postActionRequest(args[0], args[1], function(data, textStatus, jqXHR) {\n                if (args[2] && typeof args[2] === 'function') {\n                    args[2](data, textStatus, jqXHR);\n                }\n\n                if (Craft._ajaxQueue.length) {\n                    Craft._postNextActionRequestInQueue();\n                } else {\n                    Craft._waitingOnAjax = false;\n                }\n            }, args[3]);\n        },\n\n        _actionHeaders: function() {\n            let headers = {\n                'X-Registered-Asset-Bundles': Object.keys(Craft.registeredAssetBundles).join(','),\n                'X-Registered-Js-Files': Object.keys(Craft.registeredJsFiles).join(',')\n            };\n\n            if (Craft.csrfTokenValue) {\n                headers['X-CSRF-Token'] = Craft.csrfTokenValue;\n            }\n\n            return headers;\n        },\n\n        /**\n         * Sends a request to a Craft/plugin action\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} action The action to request\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.4.6\n         */\n        sendActionRequest: function(method, action, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                options.method = method;\n                options.url = Craft.getActionUrl(action);\n                options.headers = $.extend({\n                    'X-Requested-With': 'XMLHttpRequest',\n                }, options.headers || {}, this._actionHeaders());\n                options.params = $.extend({}, options.params || {}, {\n                    // Force Safari to not load from cache\n                    v: new Date().getTime(),\n                });\n                axios.request(options).then(resolve).catch(reject);\n            });\n        },\n\n        /**\n         * Sends a request to the Craftnet API.\n         * @param {string} method The request action to use ('GET' or 'POST')\n         * @param {string} uri The API endpoint URI\n         * @param {Object} options Axios request options\n         * @returns {Promise}\n         * @since 3.3.16\n         */\n        sendApiRequest: function(method, uri, options) {\n            return new Promise((resolve, reject) => {\n                options = options ? $.extend({}, options) : {};\n                let cancelToken = options.cancelToken || null;\n\n                // Get the latest headers\n                this._getApiHeaders(cancelToken).then(apiHeaders => {\n                    // Send the API request\n                    options.method = method;\n                    options.baseURL = Craft.baseApiUrl;\n                    options.url = uri;\n                    options.headers = $.extend(apiHeaders, options.headers || {});\n                    options.params = $.extend(Craft.apiParams || {}, options.params || {}, {\n                        // Force Safari to not load from cache\n                        v: new Date().getTime(),\n                    });\n\n                    // Force the API to process the Craft headers if this is the first API request\n                    if (!this._apiHeaders) {\n                        options.params.processCraftHeaders = 1;\n                    }\n\n                    axios.request(options).then((apiResponse) => {\n                        // Process the response headers\n                        this._processApiHeaders(apiResponse.headers, cancelToken).then(() => {\n                            // Finally return the API response data\n                            resolve(apiResponse.data);\n                        }).catch(reject);\n                    }).catch(reject);\n                }).catch(reject);\n            });\n        },\n\n        _loadingApiHeaders: false,\n        _apiHeaders: null,\n        _apiHeaderWaitlist: [],\n\n        /**\n         * Returns the headers that should be sent with API requests.\n         *\n         * @param {Object|null} cancelToken\n         * @return {Promise}\n         */\n        _getApiHeaders: function(cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Are we already loading them?\n                if (this._loadingApiHeaders) {\n                    this._apiHeaderWaitlist.push([resolve, reject]);\n                    return;\n                }\n\n                // Are the headers already cached?\n                if (this._apiHeaders) {\n                    resolve(this._apiHeaders);\n                    return;\n                }\n\n                this._loadingApiHeaders = true;\n                this.sendActionRequest('POST', 'app/api-headers', {\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    resolve(response.data);\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _processApiHeaders: function(headers, cancelToken) {\n            return new Promise((resolve, reject) => {\n                // Have we already processed them?\n                if (this._apiHeaders) {\n                    resolve();\n                    return;\n                }\n\n                this.sendActionRequest('POST', 'app/process-api-response-headers', {\n                    data: {\n                        headers: headers,\n                    },\n                    cancelToken: cancelToken,\n                }).then(response => {\n                    // Make sure we even are waiting for these anymore\n                    if (!this._loadingApiHeaders) {\n                        reject(e);\n                        return;\n                    }\n\n                    this._apiHeaders = response.data;\n                    this._loadingApiHeaders = false;\n\n                    resolve();\n\n                    // Was anything else waiting for them?\n                    while (this._apiHeaderWaitlist.length) {\n                        this._apiHeaderWaitlist.shift()[0](this._apiHeaders);\n                    }\n                }).catch(e => {\n                    this._rejectApiRequests(reject, e);\n                });\n            });\n        },\n\n        _rejectApiRequests: function(reject, e) {\n            this._loadingApiHeaders = false;\n            reject(e);\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1](e);\n            }\n        },\n\n        /**\n         * Clears the cached API headers.\n         */\n        clearCachedApiHeaders: function() {\n            this._apiHeaders = null;\n            this._loadingApiHeaders = false;\n\n            // Reject anything in the header waitlist\n            while (this._apiHeaderWaitlist.length) {\n                this._apiHeaderWaitlist.shift()[1]();\n            }\n        },\n\n        /**\n         * Requests a URL and downloads the response.\n         *\n         * @param {string} method the request method to use\n         * @param {string} url the URL\n         * @param {string|Object} [body] the request body, if method = POST\n         * @return {Promise}\n         */\n        downloadFromUrl: function(method, url, body) {\n            return new Promise((resolve, reject) => {\n                // h/t https://nehalist.io/downloading-files-from-post-requests/\n                let request = new XMLHttpRequest();\n                request.open(method, url, true);\n                if (typeof body === 'object') {\n                    request.setRequestHeader('Content-Type', 'application/json; charset=UTF-8');\n                    body = JSON.stringify(body);\n                } else {\n                    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n                }\n                request.responseType = 'blob';\n\n                request.onload = () => {\n                    // Only handle status code 200\n                    if (request.status === 200) {\n                        // Try to find out the filename from the content disposition `filename` value\n                        let disposition = request.getResponseHeader('content-disposition');\n                        let matches = /\"([^\"]*)\"/.exec(disposition);\n                        let filename = (matches != null && matches[1] ? matches[1] : 'Download');\n\n                        // Encode the download into an anchor href\n                        let contentType = request.getResponseHeader('content-type');\n                        let blob = new Blob([request.response], {type: contentType});\n                        let link = document.createElement('a');\n                        link.href = window.URL.createObjectURL(blob);\n                        link.download = filename;\n                        document.body.appendChild(link);\n                        link.click();\n                        document.body.removeChild(link);\n\n                        resolve();\n                    } else {\n                        reject();\n                    }\n                };\n\n                request.send(body);\n            });\n        },\n\n        /**\n         * Converts a comma-delimited string into an array.\n         *\n         * @param {string} str\n         * @return array\n         */\n        stringToArray: function(str) {\n            if (typeof str !== 'string') {\n                return str;\n            }\n\n            var arr = str.split(',');\n            for (var i = 0; i < arr.length; i++) {\n                arr[i] = $.trim(arr[i]);\n            }\n            return arr;\n        },\n\n        /**\n         * Compares old and new post data, and removes any values that haven't\n         * changed within the given list of delta namespaces.\n         *\n         * @param {string} oldData\n         * @param {string} newData\n         * @param {object} deltaNames\n         * @param {function} [callback] Callback function that should be called whenever a new group of modified params has been found\n         * @return {string}\n         */\n        findDeltaData: function(oldData, newData, deltaNames, callback) {\n            // Sort the delta namespaces from least -> most specific\n            deltaNames.sort(function(a, b) {\n                if (a.length === b.length) {\n                    return 0;\n                }\n                return a.length > b.length ? 1 : -1;\n            });\n\n            // Group all of the old & new params by namespace\n            var groupedOldParams = this._groupParamsByDeltaNames(oldData.split('&'), deltaNames, false, true);\n            var groupedNewParams = this._groupParamsByDeltaNames(newData.split('&'), deltaNames, true, false);\n\n            // Figure out which of the new params should actually be posted\n            var params = groupedNewParams.__root__;\n            var modifiedDeltaNames = [];\n            for (var n = 0; n < deltaNames.length; n++) {\n                if (Craft.inArray(deltaNames[n], Craft.modifiedDeltaNames) || (\n                    typeof groupedNewParams[deltaNames[n]] === 'object' &&\n                    (\n                        typeof groupedOldParams[deltaNames[n]] !== 'object' ||\n                        JSON.stringify(groupedOldParams[deltaNames[n]]) !== JSON.stringify(groupedNewParams[deltaNames[n]])\n                    )\n                )) {\n                    params = params.concat(groupedNewParams[deltaNames[n]]);\n                    params.push('modifiedDeltaNames[]=' + deltaNames[n]);\n                    if (callback) {\n                        callback(deltaNames[n], groupedNewParams[deltaNames[n]]);\n                    }\n                }\n            }\n\n            return params.join('&');\n        },\n\n        _groupParamsByDeltaNames: function(params, deltaNames, withRoot, useInitialValues) {\n            var grouped = {};\n\n            if (withRoot) {\n                grouped.__root__ = [];\n            }\n\n            var n, paramName;\n\n            paramLoop: for (var p = 0; p < params.length; p++) {\n                // loop through the delta names from most -> least specific\n                for (n = deltaNames.length - 1; n >= 0; n--) {\n                    paramName = decodeURIComponent(params[p]).substr(0, deltaNames[n].length + 1);\n                    if (\n                        paramName === deltaNames[n] + '=' ||\n                        paramName === deltaNames[n] + '['\n                    ) {\n                        if (typeof grouped[deltaNames[n]] === 'undefined') {\n                            grouped[deltaNames[n]] = [];\n                        }\n                        grouped[deltaNames[n]].push(params[p]);\n                        continue paramLoop;\n                    }\n                }\n\n                if (withRoot) {\n                    grouped.__root__.push(params[p]);\n                }\n            }\n\n            if (useInitialValues) {\n                for (let name in Craft.initialDeltaValues) {\n                    if (Craft.initialDeltaValues.hasOwnProperty(name)) {\n                        grouped[name] = [encodeURIComponent(name) + '=' + $.param(Craft.initialDeltaValues[name])];\n                    }\n                }\n            }\n\n            return grouped;\n        },\n\n        /**\n         * Expands an array of POST array-style strings into an actual array.\n         *\n         * @param {object} arr\n         * @return array\n         */\n        expandPostArray: function(arr) {\n            var expanded = {};\n            var i;\n\n            for (var key in arr) {\n                if (!arr.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                var value = arr[key],\n                    m = key.match(/^(\\w+)(\\[.*)?/),\n                    keys;\n\n                if (m[2]) {\n                    // Get all of the nested keys\n                    keys = m[2].match(/\\[[^\\[\\]]*\\]/g);\n\n                    // Chop off the brackets\n                    for (i = 0; i < keys.length; i++) {\n                        keys[i] = keys[i].substring(1, keys[i].length - 1);\n                    }\n                } else {\n                    keys = [];\n                }\n\n                keys.unshift(m[1]);\n\n                var parentElem = expanded;\n\n                for (i = 0; i < keys.length; i++) {\n                    if (i < keys.length - 1) {\n                        if (typeof parentElem[keys[i]] !== 'object') {\n                            // Figure out what this will be by looking at the next key\n                            if (!keys[i + 1] || parseInt(keys[i + 1]) == keys[i + 1]) {\n                                parentElem[keys[i]] = [];\n                            } else {\n                                parentElem[keys[i]] = {};\n                            }\n                        }\n\n                        parentElem = parentElem[keys[i]];\n                    } else {\n                        // Last one. Set the value\n                        if (!keys[i]) {\n                            keys[i] = parentElem.length;\n                        }\n\n                        parentElem[keys[i]] = value;\n                    }\n                }\n            }\n\n            return expanded;\n        },\n\n        /**\n         * Creates a form element populated with hidden inputs based on a string of serialized form data.\n         *\n         * @param {string} data\n         * @returns {jQuery|HTMLElement}\n         */\n        createForm: function(data) {\n            var $form = $('<form/>', {\n                attr: {\n                    method: 'post',\n                    action: '',\n                    'accept-charset': 'UTF-8',\n                },\n            });\n\n            if (typeof data === 'string') {\n                var values = data.split('&');\n                var chunks;\n                for (var i = 0; i < values.length; i++) {\n                    chunks = values[i].split('=', 2);\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: decodeURIComponent(chunks[0]),\n                        value: decodeURIComponent(chunks[1] || '')\n                    }).appendTo($form);\n                }\n            }\n\n            return $form;\n        },\n\n        /**\n         * Compares two variables and returns whether they are equal in value.\n         * Recursively compares array and object values.\n         *\n         * @param obj1\n         * @param obj2\n         * @param sortObjectKeys Whether object keys should be sorted before being compared. Default is true.\n         * @return boolean\n         */\n        compare: function(obj1, obj2, sortObjectKeys) {\n            // Compare the types\n            if (typeof obj1 !== typeof obj2) {\n                return false;\n            }\n\n            if (typeof obj1 === 'object') {\n                // Compare the lengths\n                if (obj1.length !== obj2.length) {\n                    return false;\n                }\n\n                // Is one of them an array but the other is not?\n                if ((obj1 instanceof Array) !== (obj2 instanceof Array)) {\n                    return false;\n                }\n\n                // If they're actual objects (not arrays), compare the keys\n                if (!(obj1 instanceof Array)) {\n                    if (typeof sortObjectKeys === 'undefined' || sortObjectKeys === true) {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1).sort(), Craft.getObjectKeys(obj2).sort())) {\n                            return false;\n                        }\n                    } else {\n                        if (!Craft.compare(Craft.getObjectKeys(obj1), Craft.getObjectKeys(obj2))) {\n                            return false;\n                        }\n                    }\n                }\n\n                // Compare each value\n                for (var i in obj1) {\n                    if (!obj1.hasOwnProperty(i)) {\n                        continue;\n                    }\n\n                    if (!Craft.compare(obj1[i], obj2[i])) {\n                        return false;\n                    }\n                }\n\n                // All clear\n                return true;\n            } else {\n                return (obj1 === obj2);\n            }\n        },\n\n        /**\n         * Returns an array of an object's keys.\n         *\n         * @param {object} obj\n         * @return string\n         */\n        getObjectKeys: function(obj) {\n            var keys = [];\n\n            for (var key in obj) {\n                if (!obj.hasOwnProperty(key)) {\n                    continue;\n                }\n\n                keys.push(key);\n            }\n\n            return keys;\n        },\n\n        /**\n         * Takes an array or string of chars, and places a backslash before each one, returning the combined string.\n         *\n         * Userd by ltrim() and rtrim()\n         *\n         * @param {string|object} chars\n         * @return string\n         */\n        escapeChars: function(chars) {\n            if (!Garnish.isArray(chars)) {\n                chars = chars.split();\n            }\n\n            var escaped = '';\n\n            for (var i = 0; i < chars.length; i++) {\n                escaped += \"\\\\\" + chars[i];\n            }\n\n            return escaped;\n        },\n\n        /**\n         * Trim characters off of the beginning of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        ltrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('^[' + Craft.escapeChars(chars) + ']+');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        rtrim: function(str, chars) {\n            if (!str) {\n                return str;\n            }\n            if (typeof chars === 'undefined') {\n                chars = ' \\t\\n\\r\\0\\x0B';\n            }\n            var re = new RegExp('[' + Craft.escapeChars(chars) + ']+$');\n            return str.replace(re, '');\n        },\n\n        /**\n         * Trim characters off of the beginning and end of a string.\n         *\n         * @param {string} str\n         * @param {string|object|undefined} chars The characters to trim off. Defaults to a space if left blank.\n         * @return string\n         */\n        trim: function(str, chars) {\n            str = Craft.ltrim(str, chars);\n            str = Craft.rtrim(str, chars);\n            return str;\n        },\n\n        /**\n         * Returns whether a string starts with another string.\n         *\n         * @param {string} str\n         * @param {string} substr\n         * @return boolean\n         */\n        startsWith: function(str, substr) {\n            return str.substr(0, substr.length) === substr;\n        },\n\n        /**\n         * Filters an array.\n         *\n         * @param {object} arr\n         * @param {function} callback A user-defined callback function. If null, we'll just remove any elements that equate to false.\n         * @return array\n         */\n        filterArray: function(arr, callback) {\n            var filtered = [];\n\n            for (var i = 0; i < arr.length; i++) {\n                var include;\n\n                if (typeof callback === 'function') {\n                    include = callback(arr[i], i);\n                } else {\n                    include = arr[i];\n                }\n\n                if (include) {\n                    filtered.push(arr[i]);\n                }\n            }\n\n            return filtered;\n        },\n\n        /**\n         * Returns whether an element is in an array (unlike jQuery.inArray(), which returns the element's index, or -1).\n         *\n         * @param elem\n         * @param arr\n         * @return boolean\n         */\n        inArray: function(elem, arr) {\n            if ($.isPlainObject(arr)) {\n                arr = Object.values(arr);\n            }\n            return arr.includes(elem);\n        },\n\n        /**\n         * Removes an element from an array.\n         *\n         * @param elem\n         * @param {object} arr\n         * @return boolean Whether the element could be found or not.\n         */\n        removeFromArray: function(elem, arr) {\n            var index = $.inArray(elem, arr);\n            if (index !== -1) {\n                arr.splice(index, 1);\n                return true;\n            } else {\n                return false;\n            }\n        },\n\n        /**\n         * Returns the last element in an array.\n         *\n         * @param {object} arr\n         * @return mixed\n         */\n        getLast: function(arr) {\n            if (!arr.length) {\n                return null;\n            } else {\n                return arr[arr.length - 1];\n            }\n        },\n\n        /**\n         * Makes the first character of a string uppercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        uppercaseFirst: function(str) {\n            return str.charAt(0).toUpperCase() + str.slice(1);\n        },\n\n        /**\n         * Makes the first character of a string lowercase.\n         *\n         * @param {string} str\n         * @return string\n         */\n        lowercaseFirst: function(str) {\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        },\n\n        parseUrl: function(url) {\n            var m = url.match(/^(?:(https?):\\/\\/|\\/\\/)([^\\/\\:]*)(?:\\:(\\d+))?(\\/[^\\?]*)?(?:\\?([^#]*))?(#.*)?/);\n            if (!m) {\n                return {};\n            }\n            return {\n                scheme: m[1],\n                host: m[2] + (m[3] ? ':' + m[3] : ''),\n                hostname: m[2],\n                port: m[3] || null,\n                path: m[4] || '/',\n                query: m[5] || null,\n                hash: m[6] || null,\n            };\n        },\n\n        isSameHost: function(url) {\n            var requestUrlInfo = this.parseUrl(document.location.href);\n            if (!requestUrlInfo) {\n                return false;\n            }\n            var urlInfo = this.parseUrl(url);\n            if (!urlInfo) {\n                return false;\n            }\n            return requestUrlInfo.host === urlInfo.host;\n        },\n\n        /**\n         * Converts a number of seconds into a human-facing time duration.\n         */\n        secondsToHumanTimeDuration: function(seconds, showSeconds) {\n            if (typeof showSeconds === 'undefined') {\n                showSeconds = true;\n            }\n\n            var secondsInWeek = 604800,\n                secondsInDay = 86400,\n                secondsInHour = 3600,\n                secondsInMinute = 60;\n\n            var weeks = Math.floor(seconds / secondsInWeek);\n            seconds = seconds % secondsInWeek;\n\n            var days = Math.floor(seconds / secondsInDay);\n            seconds = seconds % secondsInDay;\n\n            var hours = Math.floor(seconds / secondsInHour);\n            seconds = seconds % secondsInHour;\n\n            var minutes;\n\n            if (showSeconds) {\n                minutes = Math.floor(seconds / secondsInMinute);\n                seconds = seconds % secondsInMinute;\n            } else {\n                minutes = Math.round(seconds / secondsInMinute);\n                seconds = 0;\n            }\n\n            var timeComponents = [];\n\n            if (weeks) {\n                timeComponents.push(weeks + ' ' + (weeks === 1 ? Craft.t('app', 'week') : Craft.t('app', 'weeks')));\n            }\n\n            if (days) {\n                timeComponents.push(days + ' ' + (days === 1 ? Craft.t('app', 'day') : Craft.t('app', 'days')));\n            }\n\n            if (hours) {\n                timeComponents.push(hours + ' ' + (hours === 1 ? Craft.t('app', 'hour') : Craft.t('app', 'hours')));\n            }\n\n            if (minutes || (!showSeconds && !weeks && !days && !hours)) {\n                timeComponents.push(minutes + ' ' + (minutes === 1 ? Craft.t('app', 'minute') : Craft.t('app', 'minutes')));\n            }\n\n            if (seconds || (showSeconds && !weeks && !days && !hours && !minutes)) {\n                timeComponents.push(seconds + ' ' + (seconds === 1 ? Craft.t('app', 'second') : Craft.t('app', 'seconds')));\n            }\n\n            return timeComponents.join(', ');\n        },\n\n        /**\n         * Converts extended ASCII characters to ASCII.\n         *\n         * @param {string} str\n         * @param {object|undefined} charMap\n         * @return string\n         */\n        asciiString: function(str, charMap) {\n            // Normalize NFD chars to NFC\n            str = str.normalize('NFC');\n\n            var asciiStr = '';\n            var char;\n\n            for (var i = 0; i < str.length; i++) {\n                char = str.charAt(i);\n                asciiStr += typeof (charMap || Craft.asciiCharMap)[char] === 'string' ? (charMap || Craft.asciiCharMap)[char] : char;\n            }\n\n            return asciiStr;\n        },\n\n        randomString: function(length) {\n            // h/t https://stackoverflow.com/a/1349426/1688568\n            var result = '';\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n            for (var i = 0; i < length; i++) {\n                result += characters.charAt(Math.floor(Math.random() * 62));\n            }\n            return result;\n        },\n\n        /**\n         * Creates a validation error list.\n         *\n         * @param {object} errors\n         * @return jQuery\n         */\n        createErrorList: function(errors) {\n            var $ul = $(document.createElement('ul')).addClass('errors');\n\n            for (var i = 0; i < errors.length; i++) {\n                var $li = $(document.createElement('li'));\n                $li.appendTo($ul);\n                $li.html(errors[i]);\n            }\n\n            return $ul;\n        },\n\n        appendHeadHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any link tags that are already included\n            var $existingCss = $('link[href]');\n\n            if ($existingCss.length) {\n                var existingCss = [];\n                var href;\n\n                for (var i = 0; i < $existingCss.length; i++) {\n                    href = $existingCss.eq(i).attr('href').replace(/&/g, '&amp;');\n                    existingCss.push(Craft.escapeRegex(href));\n                }\n\n                var regexp = new RegExp('<link\\\\s[^>]*href=\"(?:' + existingCss.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            $('head').append(html);\n        },\n\n        appendFootHtml: function(html) {\n            if (!html) {\n                return;\n            }\n\n            // Prune out any script tags that are already included\n            var $existingJs = $('script[src]');\n\n            if ($existingJs.length) {\n                var existingJs = [];\n                var src;\n\n                for (var i = 0; i < $existingJs.length; i++) {\n                    src = $existingJs.eq(i).attr('src').replace(/&/g, '&amp;');\n                    existingJs.push(Craft.escapeRegex(src));\n                }\n\n                var regexp = new RegExp('<script\\\\s[^>]*src=\"(?:' + existingJs.join('|') + ')\".*?></script>', 'g');\n\n                html = html.replace(regexp, '');\n            }\n\n            Garnish.$bod.append(html);\n        },\n\n        /**\n         * Initializes any common UI elements in a given container.\n         *\n         * @param {object} $container\n         */\n        initUiElements: function($container) {\n            $('.grid', $container).grid();\n            $('.info', $container).infoicon();\n            $('.checkbox-select', $container).checkboxselect();\n            $('.fieldtoggle', $container).fieldtoggle();\n            $('.lightswitch', $container).lightswitch();\n            $('.nicetext', $container).nicetext();\n            $('.formsubmit', $container).formsubmit();\n            $('.menubtn', $container).menubtn();\n            $('.datetimewrapper', $container).datetime();\n\n            // Open outbound links in new windows\n            // hat tip: https://stackoverflow.com/a/2911045/1688568\n            $('a', $container).each(function() {\n                if (this.hostname.length && this.hostname !== location.hostname && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('rel', 'noopener').attr('target', '_blank')\n                }\n            });\n        },\n\n        _elementIndexClasses: {},\n        _elementSelectorModalClasses: {},\n        _elementEditorClasses: {},\n\n        /**\n         * Registers an element index class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementIndexClass: function(elementType, func) {\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                throw 'An element index class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementIndexClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element selector modal class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementSelectorModalClass: function(elementType, func) {\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                throw 'An element selector modal class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementSelectorModalClasses[elementType] = func;\n        },\n\n        /**\n         * Registers an element editor class for a given element type.\n         *\n         * @param {string} elementType\n         * @param {function} func\n         */\n        registerElementEditorClass: function(elementType, func) {\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                throw 'An element editor class has already been registered for the element type “' + elementType + '”.';\n            }\n\n            this._elementEditorClasses[elementType] = func;\n        },\n\n        /**\n         * Creates a new element index for a given element type.\n         *\n         * @param {string} elementType\n         * @param $container\n         * @param {object} settings\n         * @return BaseElementIndex\n         */\n        createElementIndex: function(elementType, $container, settings) {\n            var func;\n\n            if (typeof this._elementIndexClasses[elementType] !== 'undefined') {\n                func = this._elementIndexClasses[elementType];\n            } else {\n                func = Craft.BaseElementIndex;\n            }\n\n            return new func(elementType, $container, settings);\n        },\n\n        /**\n         * Creates a new element selector modal for a given element type.\n         *\n         * @param {string} elementType\n         * @param {object} settings\n         */\n        createElementSelectorModal: function(elementType, settings) {\n            var func;\n\n            if (typeof this._elementSelectorModalClasses[elementType] !== 'undefined') {\n                func = this._elementSelectorModalClasses[elementType];\n            } else {\n                func = Craft.BaseElementSelectorModal;\n            }\n\n            return new func(elementType, settings);\n        },\n\n        /**\n         * Creates a new element editor HUD for a given element type.\n         *\n         * @param {string} elementType\n         * @param element $element\n         * @param {object} settings\n         */\n        createElementEditor: function(elementType, element, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n                // (settings)\n                settings = element;\n                element = null;\n            } else if (typeof settings !== 'object') {\n                settings = {};\n            }\n\n            if (!settings.elementType) {\n                settings.elementType = elementType;\n            }\n\n            var func;\n            if (typeof this._elementEditorClasses[elementType] !== 'undefined') {\n                func = this._elementEditorClasses[elementType];\n            } else {\n                func = Craft.BaseElementEditor;\n            }\n\n            return new func(element, settings);\n        },\n\n        /**\n         * Retrieves a value from localStorage if it exists.\n         *\n         * @param {string} key\n         * @param defaultValue\n         */\n        getLocalStorage: function(key, defaultValue) {\n            key = 'Craft-' + Craft.systemUid + '.' + key;\n\n            if (typeof localStorage !== 'undefined' && typeof localStorage[key] !== 'undefined') {\n                return JSON.parse(localStorage[key]);\n            } else {\n                return defaultValue;\n            }\n        },\n\n        /**\n         * Saves a value to localStorage.\n         *\n         * @param {string} key\n         * @param value\n         */\n        setLocalStorage: function(key, value) {\n            if (typeof localStorage !== 'undefined') {\n                key = 'Craft-' + Craft.systemUid + '.' + key;\n\n                // localStorage might be filled all the way up.\n                // Especially likely if this is a private window in Safari 8+, where localStorage technically exists,\n                // but has a max size of 0 bytes.\n                try {\n                    localStorage[key] = JSON.stringify(value);\n                } catch (e) {\n                }\n            }\n        },\n\n        /**\n         * Removes a value from localStorage.\n         * @param key\n         */\n        removeLocalStorage: function(key) {\n            if (typeof localStorage !== 'undefined') {\n                localStorage.removeItem(`Craft-${Craft.systemUid}.${key}`);\n            }\n        },\n\n        /**\n         * Returns a cookie value, if it exists, otherwise returns `false`\n         * @return {(string|boolean)}\n         */\n        getCookie: function(name) {\n            // Adapted from https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie\n            return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)Craft-${Craft.systemUid}:${name}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), \"$1\");\n        },\n\n        /**\n         * Sets a cookie value.\n         * @param {string} name\n         * @param {string} value\n         * @param {Object} [options]\n         * @param {string} [options.path] The cookie path.\n         * @param {string} [options.domain] The cookie domain. Defaults to the `defaultCookieDomain` config setting.\n         * @param {number} [options.maxAge] The max age of the cookie (in seconds)\n         * @param {Date} [options.expires] The expiry date of the cookie. Defaults to none (session-based cookie).\n         * @param {boolean} [options.secure] Whether this is a secure cookie. Defaults to the `useSecureCookies`\n         * config setting.\n         * @param {string} [options.sameSite] The SameSite value (`lax` or `strict`). Defaults to the\n         * `sameSiteCookieValue` config setting.\n         */\n        setCookie: function(name, value, options) {\n            options = $.extend({}, this.defaultCookieOptions, options);\n            let cookie = `Craft-${Craft.systemUid}:${name}=${encodeURIComponent(value)}`;\n            if (options.path) {\n                cookie += `;path=${options.path}`;\n            }\n            if (options.domain) {\n                cookie += `;domain=${options.domain}`;\n            }\n            if (options.maxAge) {\n                cookie += `;max-age-in-seconds=${options.maxAge}`;\n            } else if (options.expires) {\n                cookie += `;expires=${options.expires.toUTCString()}`;\n            }\n            if (options.secure) {\n                cookie += ';secure';\n            }\n            document.cookie = cookie;\n        },\n\n        /**\n         * Removes a cookie\n         * @param {string} name\n         */\n        removeCookie: function(name) {\n            this.setCookie(name, '', new Date('1970-01-01T00:00:00'));\n        },\n\n        /**\n         * Returns element information from it's HTML.\n         *\n         * @param element\n         * @returns object\n         */\n        getElementInfo: function(element) {\n            var $element = $(element);\n\n            if (!$element.hasClass('element')) {\n                $element = $element.find('.element:first');\n            }\n\n            return {\n                id: $element.data('id'),\n                siteId: $element.data('site-id'),\n                label: $element.data('label'),\n                status: $element.data('status'),\n                url: $element.data('url'),\n                hasThumb: $element.hasClass('hasthumb'),\n                $element: $element\n            };\n        },\n\n        /**\n         * Changes an element to the requested size.\n         *\n         * @param element\n         * @param size\n         */\n        setElementSize: function(element, size) {\n            var $element = $(element);\n\n            if (size !== 'small' && size !== 'large') {\n                size = 'small';\n            }\n\n            if ($element.hasClass(size)) {\n                return;\n            }\n\n            var otherSize = (size === 'small' ? 'large' : 'small');\n\n            $element\n                .addClass(size)\n                .removeClass(otherSize);\n\n            if ($element.hasClass('hasthumb')) {\n                var $oldImg = $element.find('> .elementthumb > img'),\n                    imgSize = (size === 'small' ? '30' : '100'),\n                    $newImg = $('<img/>', {\n                        sizes: imgSize + 'px',\n                        srcset: $oldImg.attr('srcset') || $oldImg.attr('data-pfsrcset')\n                    });\n\n                $oldImg.replaceWith($newImg);\n\n                picturefill({\n                    elements: [$newImg[0]]\n                });\n            }\n        },\n\n        /**\n         * Submits a form.\n         * @param {Object} $form\n         * @param {Object} [options]\n         * @param {string} [options.action] The `action` param value override\n         * @param {string} [options.redirect] The `redirect` param value override\n         * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n         * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n         * @param {Object} [options.data] Additional data to be passed to the submit event\n         * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n         */\n        submitForm: function($form, options) {\n            if (typeof options === 'undefined') {\n                options = {};\n            }\n\n            if (options.confirm && !confirm(options.confirm)) {\n                return;\n            }\n\n            if (options.action) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'action',\n                    val: options.action,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.redirect) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: 'redirect',\n                    val: options.redirect,\n                })\n                    .appendTo($form);\n            }\n\n            if (options.params) {\n                for (let name in options.params) {\n                    let value = options.params[name];\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: name,\n                        val: value,\n                    })\n                        .appendTo($form);\n                }\n            }\n\n            if (options.retainScroll) {\n                this.setLocalStorage('scrollY', window.scrollY);\n            }\n\n            $form.trigger($.extend({type: 'submit'}, options.data));\n        },\n\n        /**\n         * Traps focus within a container, so when focus is tabbed out of it, it’s cycled back into it.\n         * @param {Object} container\n         */\n        trapFocusWithin: function(container) {\n            const $container = $(container);\n            $container.on('keydown.focus-trap', ev => {\n                // Tab key?\n                if (ev.keyCode === 9) {\n                    const $focusableElements = $container.find(':focusable');\n                    const index = $focusableElements.index(document.activeElement);\n                    if (index !== -1) {\n                        if (index === 0 && ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.last().focus();\n                        } else if (index === $focusableElements.length - 1 && !ev.shiftKey) {\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                            $focusableElements.first().focus();\n                        }\n                    }\n                }\n            });\n        },\n\n        /**\n         * Sets focus to the first focusable element within a container.\n         * @param {Object} container\n         */\n        setFocusWithin: function(container) {\n            $(container).find(':focusable:first').focus();\n        },\n    });\n\n// -------------------------------------------\n//  Custom jQuery plugins\n// -------------------------------------------\n\n$.extend($.fn,\n    {\n        animateLeft: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({left: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({right: pos}, duration, easing, complete);\n            }\n        },\n\n        animateRight: function(pos, duration, easing, complete) {\n            if (Craft.orientation === 'ltr') {\n                return this.velocity({right: pos}, duration, easing, complete);\n            } else {\n                return this.velocity({left: pos}, duration, easing, complete);\n            }\n        },\n\n        /**\n         * Disables elements by adding a .disabled class and preventing them from receiving focus.\n         */\n        disable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.addClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.removeAttr('tabindex');\n                }\n            });\n        },\n\n        /**\n         * Enables elements by removing their .disabled class and allowing them to receive focus.\n         */\n        enable: function() {\n            return this.each(function() {\n                var $elem = $(this);\n                $elem.removeClass('disabled');\n\n                if ($elem.data('activatable')) {\n                    $elem.attr('tabindex', '0');\n                }\n            });\n        },\n\n        /**\n         * Sets the element as the container of a grid.\n         */\n        grid: function() {\n            return this.each(function() {\n                var $container = $(this),\n                    settings = {};\n\n                if ($container.data('item-selector')) {\n                    settings.itemSelector = $container.data('item-selector');\n                }\n                if ($container.data('cols')) {\n                    settings.cols = parseInt($container.data('cols'));\n                }\n                if ($container.data('max-cols')) {\n                    settings.maxCols = parseInt($container.data('max-cols'));\n                }\n                if ($container.data('min-col-width')) {\n                    settings.minColWidth = parseInt($container.data('min-col-width'));\n                }\n                if ($container.data('mode')) {\n                    settings.mode = $container.data('mode');\n                }\n                if ($container.data('fill-mode')) {\n                    settings.fillMode = $container.data('fill-mode');\n                }\n                if ($container.data('col-class')) {\n                    settings.colClass = $container.data('col-class');\n                }\n                if ($container.data('snap-to-grid')) {\n                    settings.snapToGrid = !!$container.data('snap-to-grid');\n                }\n\n                new Craft.Grid(this, settings);\n            });\n        },\n\n        infoicon: function() {\n            return this.each(function() {\n                new Craft.InfoIcon(this);\n            });\n        },\n\n        /**\n         * Sets the element as a container for a checkbox select.\n         */\n        checkboxselect: function() {\n            return this.each(function() {\n                if (!$.data(this, 'checkboxselect')) {\n                    new Garnish.CheckboxSelect(this);\n                }\n            });\n        },\n\n        /**\n         * Sets the element as a field toggle trigger.\n         */\n        fieldtoggle: function() {\n            return this.each(function() {\n                if (!$.data(this, 'fieldtoggle')) {\n                    new Craft.FieldToggle(this);\n                }\n            });\n        },\n\n        lightswitch: function(settings, settingName, settingValue) {\n            // param mapping\n            if (settings === 'settings') {\n                if (typeof settingName === 'string') {\n                    settings = {};\n                    settings[settingName] = settingValue;\n                } else {\n                    settings = settingName;\n                }\n\n                return this.each(function() {\n                    var obj = $.data(this, 'lightswitch');\n                    if (obj) {\n                        obj.setSettings(settings);\n                    }\n                });\n            } else {\n                if (!$.isPlainObject(settings)) {\n                    settings = {};\n                }\n\n                return this.each(function() {\n                    var thisSettings = $.extend({}, settings);\n\n                    if (Garnish.hasAttr(this, 'data-value')) {\n                        thisSettings.value = $(this).attr('data-value');\n                    }\n\n                    if (Garnish.hasAttr(this, 'data-indeterminate-value')) {\n                        thisSettings.indeterminateValue = $(this).attr('data-indeterminate-value');\n                    }\n\n                    if (!$.data(this, 'lightswitch')) {\n                        new Craft.LightSwitch(this, thisSettings);\n                    }\n                });\n            }\n        },\n\n        nicetext: function() {\n            return this.each(function() {\n                if (!$.data(this, 'nicetext')) {\n                    new Garnish.NiceText(this);\n                }\n            });\n        },\n\n        formsubmit: function() {\n            // Secondary form submit buttons\n            return this.on('click', function(ev) {\n                let $btn = $(ev.currentTarget);\n                let params = $btn.data('params') || {};\n                if ($btn.data('param')) {\n                    params[$btn.data('param')] = $btn.data('value');\n                }\n\n                let $anchor = $btn.data('menu') ? $btn.data('menu').$anchor : $btn;\n                let $form = $anchor.attr('data-form') ? $('#' + $anchor.attr('data-form')) : $anchor.closest('form');\n\n                Craft.submitForm($form, {\n                    confirm: $btn.data('confirm'),\n                    action: $btn.data('action'),\n                    redirect: $btn.data('redirect'),\n                    params: params,\n                    data: {\n                        customTrigger: $btn,\n                    }\n                });\n            });\n        },\n\n        menubtn: function() {\n            return this.each(function() {\n                var $btn = $(this);\n\n                if (!$btn.data('menubtn') && $btn.next().hasClass('menu')) {\n                    var settings = {};\n\n                    if ($btn.data('menu-anchor')) {\n                        settings.menuAnchor = $btn.data('menu-anchor');\n                    }\n\n                    new Garnish.MenuBtn($btn, settings);\n                }\n            });\n        },\n\n        datetime: function() {\n            return this.each(function() {\n                let $wrapper = $(this);\n                let $inputs = $wrapper.find('input:not([name$=\"[timezone]\"])');\n                let checkValue = () => {\n                    let hasValue = false;\n                    for (let i = 0; i < $inputs.length; i++) {\n                        if ($inputs.eq(i).val()) {\n                            hasValue = true;\n                            break;\n                        }\n                    }\n                    if (hasValue) {\n                        if (!$wrapper.children('.clear-btn').length) {\n                            let $btn = $('<button/>', {\n                                type: 'button',\n                                class: 'clear-btn',\n                                title: Craft.t('app', 'Clear'),\n                                'aria-label': Craft.t('app', 'Clear'),\n                            })\n                                .appendTo($wrapper)\n                                .on('click', () => {\n                                    for (let i = 0; i < $inputs.length; i++) {\n                                        $inputs.eq(i).val('');\n                                    }\n                                    $btn.remove();\n                                    $inputs.first().focus();\n                                })\n                        }\n                    } else {\n                        $wrapper.children('.clear-btn').remove();\n                    }\n                };\n                $inputs.on('change', checkValue);\n                checkValue();\n            });\n        },\n    });\n\n// Override Garnish.NiceText.charsLeftHtml() to be more accessible\nGarnish.NiceText.charsLeftHtml = charsLeft => {\n    return Craft.t('app', '<span class=\"visually-hidden\">Characters left:</span> {chars, number}', {\n        chars: charsLeft,\n    });\n};\n\nGarnish.$doc.ready(function() {\n    Craft.initUiElements();\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element editor\n */\nCraft.BaseElementEditor = Garnish.Base.extend({\n    $element: null,\n    elementId: null,\n    siteId: null,\n    deltaNames: null,\n    initialData: null,\n\n    $header: null,\n    $toolbar: null,\n    $tabContainer: null,\n    $editLink: null,\n    $sidebarBtn: null,\n    $loadSpinner: null,\n\n    $body: null,\n    $fieldsContainer: null,\n\n    $sidebarShade: null,\n    $sidebar: null,\n\n    $footer: null,\n    $siteSelectContainer: null,\n    $siteSelect: null,\n    $siteSpinner: null,\n    $cancelBtn: null,\n    $saveBtn: null,\n    $saveSpinner: null,\n\n    slideout: null,\n    tabManager: null,\n    showingSidebar: false,\n\n    cancelToken: null,\n    ignoreFailedRequest: false,\n\n    init: function(element, settings) {\n        // Param mapping\n        if (typeof settings === 'undefined' && $.isPlainObject(element)) {\n            // (settings)\n            settings = element;\n            element = null;\n        }\n\n        this.$element = $(element);\n        this.setSettings(settings, Craft.BaseElementEditor.defaults);\n\n        // Body\n        this.$body = $('<div/>', {class: 'ee-body'});\n\n        // Header\n        this.$header = $('<header/>', {class: 'pane-header'}).prependTo(this.$body);\n        this.$toolbar = $('<div/>', {class: 'ee-toolbar'}).appendTo(this.$header);\n        this.$tabContainer = $('<div/>', {class: 'pane-tabs'}).appendTo(this.$toolbar);\n        this.$loadSpinner = $('<div/>', {\n            class: 'spinner',\n            title: Craft.t('app', 'Loading'),\n            'aria-label': Craft.t('app', 'Loading'),\n        }).appendTo(this.$toolbar);\n        this.$editLink = $('<a/>', {\n            target: '_blank',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Open the full edit page in a new tab'),\n            'aria-label': Craft.t('app', 'Open the full edit page in a new tab'),\n            'data-icon': 'external',\n        }).appendTo(this.$toolbar);\n        this.$sidebarBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn hidden',\n            title: Craft.t('app', 'Show sidebar'),\n            'aria-label': Craft.t('app', 'Show sidebar'),\n            'data-icon': `sidebar-${Garnish.ltr ? 'right' : 'left'}`,\n        }).appendTo(this.$toolbar);\n\n        this.addListener(this.$sidebarBtn, 'click', ev => {\n            ev.preventDefault();\n            if (!this.showingSidebar) {\n                this.showSidebar();\n            } else {\n                this.hideSidebar();\n            }\n        });\n\n        // Fields\n        this.$fieldsContainer = $('<div/>', {class: 'fields'}).appendTo(this.$body);\n\n        // Sidebar\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade = $('<div/>', {class: 'ee-sidebar-shade hidden'}).appendTo(this.$body);\n\n            this.addListener(this.$sidebarShade, 'click', ev => {\n                ev.stopPropagation();\n                this.hideSidebar();\n            });\n        }\n\n        this.$sidebar = $('<div/>', {class: 'ee-sidebar hidden'}).appendTo(this.$body);\n        Craft.trapFocusWithin(this.$sidebar);\n\n        // Footer\n        this.$footer = $('<div/>', {class: 'ee-footer hidden'});\n        const $siteSelectOuterContainer = $('<div/>', {class: 'ee-site-select'}).appendTo(this.$footer);\n        this.$siteSelectContainer = $('<div/>', {class: 'select hidden'}).appendTo($siteSelectOuterContainer);\n        this.$siteSelect = $('<select/>').appendTo(this.$siteSelectContainer);\n        this.$siteSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo($siteSelectOuterContainer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footer);\n        this.$saveBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footer);\n        this.$saveSpinner = $('<div/>', {class: 'spinner hidden'}).appendTo(this.$footer);\n\n        // Create the slideout\n        this.slideout = new Craft.Slideout(this.$body.add(this.$footer), {\n            containerElement: 'form',\n            containerAttributes: {\n                action: '',\n                method: 'post',\n                novalidate: '',\n                class: 'element-editor',\n            },\n            closeOnEsc: false,\n            closeOnShadeClick: false,\n        });\n        this.slideout.$container.data('elementEditor', this);\n        this.slideout.on('beforeClose', () => {\n            this.hideSidebar();\n        });\n        this.slideout.on('close', () => {\n            this.trigger('closeSlideout');\n            this.destroy();\n        });\n\n        // Register shortcuts & events\n        Garnish.shortcutManager.registerShortcut({\n            keyCode: Garnish.S_KEY,\n            ctrl: true,\n        }, () => {\n            this.saveElement();\n        });\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.$cancelBtn, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$shade, 'click', () => {\n            this.maybeCloseSlideout();\n        });\n        this.addListener(this.slideout.$container, 'submit', ev => {\n            ev.preventDefault();\n            this.saveElement();\n        });\n        this.addListener(this.$siteSelect, 'change', 'switchSite');\n\n        this.load().then(() => {\n            this.onShowHud();\n            this.onCreateForm(this.$body);\n        });\n    },\n\n    setElementAttribute: function(name, value) {\n        if (!this.settings.attributes) {\n            this.settings.attributes = {};\n        }\n\n        if (value === null) {\n            delete this.settings.attributes[name];\n        } else {\n            this.settings.attributes[name] = value;\n        }\n    },\n\n    getBaseData: function() {\n        const data = $.extend({}, this.settings.params);\n\n        if (this.settings.siteId) {\n            data.siteId = this.settings.siteId;\n        } else if (this.$element && this.$element.data('site-id')) {\n            data.siteId = this.$element.data('site-id');\n        }\n\n        if (this.settings.elementId) {\n            data.elementId = this.settings.elementId;\n        } else if (this.$element && this.$element.data('id')) {\n            data.elementId = this.$element.data('id');\n        }\n\n        if (this.settings.elementType) {\n            data.elementType = this.settings.elementType;\n        }\n\n        if (this.settings.attributes) {\n            data.attributes = this.settings.attributes;\n        }\n\n        if (this.settings.prevalidate) {\n            data.prevalidate = 1;\n        }\n\n        return data;\n    },\n\n    load: function(data) {\n        return new Promise((resolve, reject) => {\n            this.trigger('beforeLoad');\n            // todo: remove this in Craft 4\n            this.trigger('beginLoading');\n            this.showLoadSpinner();\n            this.onBeginLoading();\n\n            if (this.cancelToken) {\n                this.ignoreFailedRequest = true;\n                this.cancelToken.cancel();\n            }\n\n            this.cancelToken = axios.CancelToken.source();\n\n            Craft.sendActionRequest('POST', 'elements/get-editor-html', {\n                cancelToken: this.cancelToken.token,\n                data: $.extend(this.getBaseData(), data || {}, {\n                    includeSites: Craft.isMultiSite && this.settings.showSiteSwitcher,\n                }),\n            }).then(response => {\n                this.hideLoadSpinner();\n                this.trigger('load');\n                // todo: remove this in Craft 4\n                this.trigger('endLoading');\n                this.onEndLoading();\n                this.cancelToken = null;\n                this.updateForm(response.data, true);\n                this.cancelToken = null;\n                resolve();\n            }).catch(e => {\n                this.hideLoadSpinner();\n                this.onEndLoading();\n                this.cancelToken = null;\n                if (!this.ignoreFailedRequest) {\n                    Craft.cp.displayError();\n                    reject(e);\n                }\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    showHeader: function() {\n        this.$header.removeClass('hidden');\n    },\n\n    hideHeader: function() {\n        this.$header.addClass('hidden');\n    },\n\n    showLoadSpinner: function() {\n        this.showHeader();\n        this.$loadSpinner.removeClass('hidden');\n    },\n\n    hideLoadSpinner: function() {\n        this.$loadSpinner.addClass('hidden');\n    },\n\n    switchSite: function() {\n        if (this.isDirty() && !confirm(Craft.t('app', 'Switching sites will lose unsaved changes. Are you sure you want to switch sites?'))) {\n            this.$siteSelect.val(this.siteId);\n            return;\n        }\n\n        const newSiteId = this.$siteSelect.val();\n\n        if (newSiteId == this.siteId) {\n            return;\n        }\n\n        this.$siteSpinner.removeClass('hidden');\n\n        this.load({siteId: newSiteId}).then(() => {\n            this.$siteSpinner.addClass('hidden');\n        }).catch(() => {\n            this.$siteSpinner.addClass('hidden');\n            // Reset the site select\n            this.$siteSelect.val(this.siteId);\n        });\n    },\n\n    updateForm: function(data, refreshInitialData) {\n        // Cleanup\n        if (this.tabManager) {\n            this.$tabContainer.html('');\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        this.siteId = data.siteId;\n        this.$fieldsContainer.html(data.fieldHtml);\n\n        let showHeader = false;\n\n        if (data.sites && data.sites.length > 1) {\n            showHeader = true;\n            this.$siteSelectContainer.removeClass('hidden');\n            this.$siteSelect.html('');\n\n            for (let i = 0; i < data.sites.length; i++) {\n                const siteInfo = data.sites[i];\n                const $option = $('<option/>', {\n                    value: siteInfo.id,\n                    text: siteInfo.name\n                }).appendTo(this.$siteSelect);\n                if (siteInfo.id == data.siteId) {\n                    $option.attr('selected', 'selected');\n                }\n            }\n        } else {\n            this.$siteSelectContainer.addClass('hidden');\n        }\n\n        if (data.tabHtml) {\n            showHeader = true;\n            this.$tabContainer.replaceWith(this.$tabContainer = $(data.tabHtml));\n            this.tabManager = new Craft.Tabs(this.$tabContainer);\n            this.tabManager.on('deselectTab', ev => {\n                $(ev.$tab.attr('href')).addClass('hidden');\n            });\n            this.tabManager.on('selectTab', ev => {\n                $(ev.$tab.attr('href')).removeClass('hidden');\n                Garnish.$win.trigger('resize');\n                this.$body.trigger('scroll');\n            });\n        }\n\n        if (data.editUrl) {\n            showHeader = true;\n            this.$editLink\n                .removeClass('hidden')\n                .attr('href', data.editUrl);\n        } else if (this.$editLink) {\n            this.$editLink.addClass('hidden');\n        }\n\n        if (data.sidebarHtml) {\n            showHeader = true;\n            this.$sidebarBtn.removeClass('hidden');\n            this.$sidebar.html(data.sidebarHtml);\n            Craft.initUiElements(this.$sidebar);\n            new Craft.ElementThumbLoader().load($(this.$sidebar));\n\n            // Open outbound links in new windows\n            this.$sidebar.find('a').each(function() {\n                if (this.hostname.length && typeof $(this).attr('target') === 'undefined') {\n                    $(this).attr('target', '_blank')\n                }\n            });\n        } else if (this.$sidebarBtn) {\n            this.$sidebarBtn.addClass('hidden');\n            this.$sidebar.addClass('hidden');\n        }\n\n        if (showHeader) {\n            this.showHeader();\n        } else {\n            this.hideHeader();\n        }\n\n        this.$footer.removeClass('hidden');\n\n        if (refreshInitialData !== false) {\n            this.deltaNames = data.deltaNames;\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            Craft.appendHeadHtml(data.headHtml);\n            Craft.appendFootHtml(data.footHtml);\n            Craft.initUiElements(this.$fieldsContainer);\n\n            if (refreshInitialData) {\n                this.initialData = this.slideout.$container.serialize();\n            }\n\n            if (!Garnish.isMobileBrowser()) {\n                Craft.setFocusWithin(this.$fieldsContainer);\n            }\n\n            this.trigger('updateForm');\n        });\n    },\n\n    showSidebar: function() {\n        if (this.showingSidebar) {\n            return;\n        }\n\n        this.$body.scrollTop(0).addClass('no-scroll');\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .removeClass('hidden');\n\n        // Hack to force CSS animations\n        this.$sidebar[0].offsetWidth;\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade\n                .removeClass('hidden')\n                .css(this._sidebarStyles());\n        }\n\n        this.$sidebar.css(this._openedSidebarStyles());\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebar.one('transitionend.element-editor', () => {\n                Craft.setFocusWithin(this.$sidebar);\n            });\n        }\n\n        this.$sidebarBtn\n            .addClass('active')\n            .attr({\n                title: Craft.t('app', 'Hide sidebar'),\n                'aria-label': Craft.t('app', 'Hide sidebar'),\n            });\n\n        Garnish.$win.trigger('resize');\n        this.$sidebar.trigger('scroll');\n\n        Garnish.shortcutManager.addLayer();\n        Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n            this.hideSidebar();\n        });\n\n        this.showingSidebar = true;\n    },\n\n    hideSidebar: function() {\n        if (!this.showingSidebar) {\n            return;\n        }\n\n        this.$body.removeClass('no-scroll');\n\n        if (!Garnish.isMobileBrowser()) {\n            this.$sidebarShade.addClass('hidden');\n        }\n\n        this.$sidebar\n            .off('transitionend.element-editor')\n            .css(this._closedSidebarStyles())\n            .one('transitionend.element-editor', () => {\n                this.$sidebar.addClass('hidden');\n            });\n\n        this.$sidebarBtn\n            .removeClass('active')\n            .attr({\n                title: Craft.t('app', 'Show sidebar'),\n                'aria-label': Craft.t('app', 'Show sidebar'),\n            });\n\n        Garnish.shortcutManager.removeLayer();\n\n        this.showingSidebar = false;\n    },\n\n    _sidebarStyles: function() {\n        const headerHeight = this.$header.outerHeight();\n        return {\n            top: `${headerHeight}px`,\n            height: `calc(100% - ${headerHeight}px`,\n        };\n    },\n\n    _openedSidebarStyles: function() {\n        return $.extend(this._sidebarStyles(), {\n            [Garnish.ltr ? 'right' : 'left']: '0',\n        });\n    },\n\n    _closedSidebarStyles: function() {\n        return $.extend(this._sidebarStyles(), {\n            [Garnish.ltr ? 'right' : 'left']: '-350px',\n        });\n    },\n\n    saveElement: function() {\n        const validators = this.settings.validators;\n\n        if ($.isArray(validators)) {\n            for (let i = 0; i < validators.length; i++) {\n                if ($.isFunction(validators[i]) && !validators[i].call()) {\n                    return false;\n                }\n            }\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n\n        let data = $.param(this.getBaseData()) + '&' + this.slideout.$container.serialize();\n        data = Craft.findDeltaData(this.initialData, data, this.deltaNames);\n\n        Craft.postActionRequest('elements/save-element', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (this.$element && this.siteId == this.$element.data('site-id')) {\n                        // Update the label\n                        const $title = this.$element.find('.title');\n                        const $a = $title.find('a');\n\n                        if ($a.length && response.cpEditUrl) {\n                            $a.attr('href', response.cpEditUrl);\n                            $a.text(response.newTitle);\n                        } else {\n                            $title.text(response.newTitle);\n                        }\n                    }\n\n                    if (this.settings.elementType && Craft.elementTypeNames[this.settings.elementType]) {\n                        Craft.cp.displayNotice(Craft.t('app', '{type} saved.', {\n                            type: Craft.elementTypeNames[this.settings.elementType][0],\n                        }));\n                    }\n\n                    this.closeSlideout();\n                    this.trigger('saveElement', {\n                        response: response\n                    });\n                    this.onSaveElement(response);\n                    this.settings.onSaveElement(response);\n\n                    // There may be a new background job that needs to be run\n                    Craft.cp.runQueue();\n                } else {\n                    this.updateForm(response, false);\n                    Garnish.shake(this.slideout.$container);\n                }\n            }\n        });\n    },\n\n    isDirty: function() {\n        return this.initialData !== null && this.slideout.$container.serialize() !== this.initialData;\n    },\n\n    maybeCloseSlideout: function() {\n        if (!this.slideout.isOpen) {\n            return;\n        }\n\n        if (!this.isDirty() || confirm('Are you sure you want to close the editor? Any changes will be lost.')) {\n            this.closeSlideout();\n        }\n    },\n\n    closeSlideout: function() {\n        this.slideout.close();\n        this.onHideHud();\n\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n    },\n\n    destroy: function() {\n        this.slideout.destroy();\n        delete this.slideout;\n        this.base();\n    },\n\n    // Deprecated Methods\n    // -------------------------------------------------------------------------\n\n    /** @deprecated in 3.7.0 */\n    loadHud: function() {\n        this.load();\n    },\n    /** @deprecated in 3.7.0 */\n    maybeCloseHud: function() {\n        this.maybeCloseSlideout();\n    },\n    /** @deprecated in 3.7.0 */\n    closeHud: function() {\n        this.closeSlideout();\n    },\n    /** @deprecated */\n    reloadForm: function(data, callback) {\n        this.load(data).then(() => {\n            callback('success');\n        }).catch(() => {\n            callback('error');\n        });\n    },\n    /** @deprecated in 3.7.0 */\n    onBeginLoading: function() {\n        this.settings.onBeginLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onEndLoading: function() {\n        this.settings.onEndLoading();\n    },\n    /** @deprecated in 3.7.0 */\n    onSaveElement: function(response) {\n    },\n    /** @deprecated in 3.7.0 */\n    onCreateForm: function($form) {\n        this.settings.onCreateForm($form);\n    },\n    /** @deprecated in 3.7.0 */\n    onShowHud: function() {\n        this.trigger('showHud');\n        this.settings.onShowHud();\n    },\n    /** @deprecated in 3.7.0 */\n    onHideHud: function() {\n        this.trigger('hideHud');\n        this.settings.onHideHud();\n    },\n}, {\n    defaults: {\n        showSiteSwitcher: true,\n        elementId: null,\n        elementType: null,\n        siteId: null,\n        attributes: null,\n        params: null,\n        prevalidate: false,\n        elementIndex: null,\n        onSaveElement: $.noop,\n        validators: [],\n\n        /** @deprecated in 3.7.0 */\n        onShowHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onHideHud: $.noop,\n        /** @deprecated in 3.7.0 */\n        onBeginLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onEndLoading: $.noop,\n        /** @deprecated in 3.7.0 */\n        onCreateForm: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element index class\n */\nCraft.BaseElementIndex = Garnish.Base.extend({\n    initialized: false,\n    elementType: null,\n\n    instanceState: null,\n    sourceStates: null,\n    sourceStatesStorageKey: null,\n\n    searchTimeout: null,\n    sourceSelect: null,\n\n    $container: null,\n    $main: null,\n    isIndexBusy: false,\n\n    $sidebar: null,\n    showingSidebar: null,\n    sourceKey: null,\n    sourceViewModes: null,\n    $source: null,\n    sourcesByKey: null,\n    $visibleSources: null,\n\n    $customizeSourcesBtn: null,\n    customizeSourcesModal: null,\n\n    $toolbar: null,\n    toolbarOffset: null,\n\n    $search: null,\n    searching: false,\n    searchText: null,\n    trashed: false,\n    drafts: false,\n    $clearSearchBtn: null,\n\n    $statusMenuBtn: null,\n    $statusMenuContainer: null,\n    statusMenu: null,\n    status: null,\n\n    $siteMenuBtn: null,\n    siteMenu: null,\n    siteId: null,\n\n    $sortMenuBtn: null,\n    sortMenu: null,\n    $sortAttributesList: null,\n    $sortDirectionsList: null,\n    $scoreSortAttribute: null,\n    $structureSortAttribute: null,\n\n    $elements: null,\n    $viewModeBtnContainer: null,\n    viewModeBtns: null,\n    viewMode: null,\n    view: null,\n    _autoSelectElements: null,\n    $countSpinner: null,\n    $countContainer: null,\n    page: 1,\n    resultSet: null,\n    totalResults: null,\n    $exportBtn: null,\n\n    actions: null,\n    actionsHeadHtml: null,\n    actionsFootHtml: null,\n    $selectAllContainer: null,\n    $selectAllCheckbox: null,\n    showingActionTriggers: false,\n    exporters: null,\n    exportersByType: null,\n    _$detachedToolbarItems: null,\n    _$triggers: null,\n\n    _ignoreFailedRequest: false,\n    _cancelToken: null,\n\n    /**\n     * Constructor\n     */\n    init: function(elementType, $container, settings) {\n        this.elementType = elementType;\n        this.$container = $container;\n        this.setSettings(settings, Craft.BaseElementIndex.defaults);\n\n        // Set the state objects\n        // ---------------------------------------------------------------------\n\n        this.instanceState = this.getDefaultInstanceState();\n\n        this.sourceStates = {};\n\n        // Instance states (selected source) are stored by a custom storage key defined in the settings\n        if (this.settings.storageKey) {\n            $.extend(this.instanceState, Craft.getLocalStorage(this.settings.storageKey), {});\n        }\n\n        // Source states (view mode, etc.) are stored by the element type and context\n        this.sourceStatesStorageKey = 'BaseElementIndex.' + this.elementType + '.' + this.settings.context;\n        $.extend(this.sourceStates, Craft.getLocalStorage(this.sourceStatesStorageKey, {}));\n\n        // Find the DOM elements\n        // ---------------------------------------------------------------------\n\n        this.$main = this.$container.find('.main');\n        this.$toolbar = this.$container.find(this.settings.toolbarSelector);\n        this.$statusMenuBtn = this.$toolbar.find('.statusmenubtn:first');\n        this.$statusMenuContainer = this.$statusMenuBtn.parent();\n        this.$siteMenuBtn = this.$container.find('.sitemenubtn:first');\n        this.$sortMenuBtn = this.$toolbar.find('.sortmenubtn:first');\n        this.$search = this.$toolbar.find('.search:first input:first');\n        this.$clearSearchBtn = this.$toolbar.find('.search:first > .clear');\n        this.$sidebar = this.$container.find('.sidebar:first');\n        this.$customizeSourcesBtn = this.$sidebar.find('.customize-sources');\n        this.$elements = this.$container.find('.elements:first');\n        this.$countSpinner = this.$container.find('#count-spinner');\n        this.$countContainer = this.$container.find('#count-container');\n        this.$exportBtn = this.$container.find('#export-btn');\n\n        // Hide sidebar if needed\n        if (this.settings.hideSidebar) {\n            this.$sidebar.hide();\n            $('.body, .content', this.$container).removeClass('has-sidebar');\n        }\n\n        // Initialize the sources\n        // ---------------------------------------------------------------------\n\n        if (!this.initSources()) {\n            return;\n        }\n\n        // Customize button\n        if (this.$customizeSourcesBtn.length) {\n            this.addListener(this.$customizeSourcesBtn, 'click', 'createCustomizeSourcesModal');\n        }\n\n        // Initialize the status menu\n        // ---------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            this.statusMenu = this.$statusMenuBtn.menubtn().data('menubtn').menu;\n            this.statusMenu.on('optionselect', this._handleStatusChange.bind(this));\n        }\n\n        // Initialize the site menu\n        // ---------------------------------------------------------------------\n\n        // Is there a site menu?\n        if (this.$siteMenuBtn.length) {\n            this.siteMenu = this.$siteMenuBtn.menubtn().data('menubtn').menu;\n\n            // Figure out the initial site\n            var $option = this.siteMenu.$options.filter('.sel:first');\n\n            if (!$option.length) {\n                $option = this.siteMenu.$options.first();\n            }\n\n            if ($option.length) {\n                this._setSite($option.data('site-id'));\n            } else {\n                // No site options -- they must not have any site permissions\n                this.settings.criteria = {id: '0'};\n            }\n\n            this.siteMenu.on('optionselect', this._handleSiteChange.bind(this));\n\n            if (this.siteId) {\n                // Should we be using a different default site?\n                var defaultSiteId = this.settings.defaultSiteId || Craft.cp.getSiteId();\n\n                if (defaultSiteId && defaultSiteId != this.siteId) {\n                    // Is that one available here?\n                    var $storedSiteOption = this.siteMenu.$options.filter('[data-site-id=\"' + defaultSiteId + '\"]:first');\n\n                    if ($storedSiteOption.length) {\n                        // Todo: switch this to siteMenu.selectOption($storedSiteOption) once Menu is updated to support that\n                        $storedSiteOption.trigger('click');\n                    }\n                }\n            }\n        } else if (this.settings.criteria && this.settings.criteria.siteId && this.settings.criteria.siteId !== '*') {\n            this._setSite(this.settings.criteria.siteId);\n        } else {\n            this._setSite(Craft.siteId);\n        }\n\n        // Don't let the criteria override the selected site\n        if (this.settings.criteria && this.settings.criteria.siteId) {\n            delete this.settings.criteria.siteId;\n        }\n\n        // Initialize the search input\n        // ---------------------------------------------------------------------\n\n        // Automatically update the elements after new search text has been sitting for a 1/2 second\n        this.addListener(this.$search, 'input', () => {\n            if (!this.searching && this.$search.val()) {\n                this.startSearching();\n            } else if (this.searching && !this.$search.val()) {\n                this.stopSearching();\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.updateElementsIfSearchTextChanged.bind(this), 500);\n        });\n\n        // Update the elements when the Return key is pressed\n        this.addListener(this.$search, 'keypress', ev => {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n\n                if (this.searchTimeout) {\n                    clearTimeout(this.searchTimeout);\n                }\n\n                this.updateElementsIfSearchTextChanged();\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearSearchBtn, 'click', () => {\n            this.$search.val('');\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            if (!Garnish.isMobileBrowser(true)) {\n                this.$search.trigger('focus');\n            }\n\n            this.stopSearching();\n\n            this.updateElementsIfSearchTextChanged();\n        });\n\n        // Auto-focus the Search box\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$search.trigger('focus');\n        }\n\n        // Initialize the sort menu\n        // ---------------------------------------------------------------------\n\n        // Is there a sort menu?\n        if (this.$sortMenuBtn.length) {\n            this.sortMenu = this.$sortMenuBtn.menubtn().data('menubtn').menu;\n            this.$sortAttributesList = this.sortMenu.$container.children('.sort-attributes');\n            this.$sortDirectionsList = this.sortMenu.$container.children('.sort-directions');\n\n            this.sortMenu.on('optionselect', this._handleSortChange.bind(this));\n        }\n\n        // Initialize the Export button\n        // ---------------------------------------------------------------------\n\n        this.addListener(this.$exportBtn, 'click', '_showExportHud');\n\n        // Let everyone know that the UI is initialized\n        // ---------------------------------------------------------------------\n\n        this.initialized = true;\n        this.afterInit();\n\n        // Select the initial source\n        // ---------------------------------------------------------------------\n\n        this.selectDefaultSource();\n\n        // Load the first batch of elements!\n        // ---------------------------------------------------------------------\n\n        // Default to whatever page is in the URL\n        this.setPage(Craft.pageNum);\n\n        this.updateElements(true);\n    },\n\n    afterInit: function() {\n        this.onAfterInit();\n    },\n\n    _createCancelToken: function() {\n        this._cancelToken = axios.CancelToken.source();\n        return this._cancelToken.token;\n    },\n\n    _cancelRequests: function() {\n        if (this._cancelToken) {\n            this._ignoreFailedRequest = true;\n            this._cancelToken.cancel();\n            Garnish.requestAnimationFrame(() => {\n                this._ignoreFailedRequest = false;\n            });\n        }\n    },\n\n    getSourceContainer: function() {\n        return this.$sidebar.find('nav > ul');\n    },\n\n    get $sources() {\n        if (!this.sourceSelect) {\n            return undefined;\n        }\n\n        return this.sourceSelect.$items;\n    },\n\n    initSources: function() {\n        var $sources = this._getSourcesInList(this.getSourceContainer());\n\n        // No source, no party.\n        if ($sources.length === 0) {\n            return false;\n        }\n\n        // The source selector\n        if (!this.sourceSelect) {\n            this.sourceSelect = new Garnish.Select(this.$sidebar.find('nav'), {\n                multi: false,\n                allowEmpty: false,\n                vertical: true,\n                onSelectionChange: this._handleSourceSelectionChange.bind(this)\n            });\n        }\n\n        this.sourcesByKey = {};\n        this._initSources($sources);\n\n        return true;\n    },\n\n    selectDefaultSource: function() {\n        var sourceKey = this.getDefaultSourceKey(),\n            $source;\n\n        if (sourceKey) {\n            $source = this.getSourceByKey(sourceKey);\n\n            // Make sure it's visible\n            if (this.$visibleSources.index($source) === -1) {\n                $source = null;\n            }\n        }\n\n        if (!sourceKey || !$source) {\n            // Select the first source by default\n            $source = this.$visibleSources.first();\n        }\n\n        return this.selectSource($source);\n    },\n\n    refreshSources: function() {\n        this.sourceSelect.removeAllItems();\n\n        this.setIndexBusy();\n\n        Craft.sendActionRequest('POST', this.settings.refreshSourcesAction, {\n            context: this.settings.context,\n            elementType: this.elementType,\n        }).then((response) => {\n            this.setIndexAvailable();\n            this.getSourceContainer().replaceWith(response.data.html);\n            this.initSources();\n            this.selectDefaultSource();\n        }).catch(() => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    initSource: function($source) {\n        this.sourceSelect.addItems($source);\n        this.initSourceToggle($source);\n        this.sourcesByKey[$source.data('key')] = $source;\n\n        if ($source.data('hasNestedSources') && this.instanceState.expandedSources.indexOf($source.data('key')) !== -1) {\n            this._expandSource($source);\n        }\n    },\n\n    initSourceToggle: function($source) {\n        // Remove handlers for the same thing. Just in case.\n        this.deinitSourceToggle($source);\n\n        var $toggle = this._getSourceToggle($source);\n\n        if ($toggle.length) {\n            this.addListener($source, 'dblclick', '_handleSourceDblClick');\n            this.addListener($toggle, 'click', '_handleSourceToggleClick');\n            $source.data('hasNestedSources', true);\n        } else {\n            $source.data('hasNestedSources', false);\n        }\n    },\n\n    deinitSource: function($source) {\n        this.sourceSelect.removeItems($source);\n        this.deinitSourceToggle($source);\n        delete this.sourcesByKey[$source.data('key')];\n    },\n\n    deinitSourceToggle: function($source) {\n        if ($source.data('hasNestedSources')) {\n            this.removeListener($source, 'dblclick');\n            this.removeListener(this._getSourceToggle($source), 'click');\n        }\n\n        $source.removeData('hasNestedSources');\n    },\n\n    getDefaultInstanceState: function() {\n        return {\n            selectedSource: null,\n            expandedSources: []\n        };\n    },\n\n    getDefaultSourceKey: function() {\n        if (this.settings.defaultSource) {\n            var paths = this.settings.defaultSource.split('/'),\n                path = '';\n\n            // Expand the tree\n            for (var i = 0; i < paths.length; i++) {\n                path += paths[i];\n                var $source = this.getSourceByKey(path);\n\n                // If the folder can't be found, then just go to the stored instance source.\n                if (!$source) {\n                    return this.instanceState.selectedSource;\n                }\n\n                this._expandSource($source);\n                path += '/';\n            }\n\n            // Just make sure that the modal is aware of the newly expanded sources, too.\n            this._setSite(this.siteId);\n\n            return this.settings.defaultSource;\n        }\n\n        return this.instanceState.selectedSource;\n    },\n\n    getDefaultExpandedSources: function() {\n        return this.instanceState.expandedSources;\n    },\n\n    startSearching: function() {\n        // Show the clear button and add/select the Score sort option\n        this.$clearSearchBtn.removeClass('hidden');\n\n        if (!this.$scoreSortAttribute) {\n            this.$scoreSortAttribute = $('<li><a data-attr=\"score\">' + Craft.t('app', 'Score') + '</a></li>');\n            this.sortMenu.addOptions(this.$scoreSortAttribute.children());\n        }\n\n        this.$scoreSortAttribute.prependTo(this.$sortAttributesList);\n\n        this.searching = true;\n\n        this._updateStructureSortOption();\n        this.setSortAttribute('score');\n    },\n\n    stopSearching: function() {\n        // Hide the clear button and Score sort option\n        this.$clearSearchBtn.addClass('hidden');\n\n        this.$scoreSortAttribute.detach();\n\n        this.searching = false;\n\n        this._updateStructureSortOption();\n    },\n\n    setInstanceState: function(key, value) {\n        if (typeof key === 'object') {\n            $.extend(this.instanceState, key);\n        } else {\n            this.instanceState[key] = value;\n        }\n\n        this.storeInstanceState();\n    },\n\n    storeInstanceState: function() {\n        if (this.settings.storageKey) {\n            Craft.setLocalStorage(this.settings.storageKey, this.instanceState);\n        }\n    },\n\n    getSourceState: function(source, key, defaultValue) {\n        if (typeof this.sourceStates[source] === 'undefined') {\n            // Set it now so any modifications to it by whoever's calling this will be stored.\n            this.sourceStates[source] = {};\n        }\n\n        if (typeof key === 'undefined') {\n            return this.sourceStates[source];\n        } else if (typeof this.sourceStates[source][key] !== 'undefined') {\n            return this.sourceStates[source][key];\n        } else {\n            return (typeof defaultValue !== 'undefined' ? defaultValue : null);\n        }\n    },\n\n    getSelectedSourceState: function(key, defaultValue) {\n        return this.getSourceState(this.instanceState.selectedSource, key, defaultValue);\n    },\n\n    setSelecetedSourceState: function(key, value) {\n        var viewState = this.getSelectedSourceState();\n\n        if (typeof key === 'object') {\n            $.extend(viewState, key);\n        } else {\n            viewState[key] = value;\n        }\n\n        this.sourceStates[this.instanceState.selectedSource] = viewState;\n\n        // Store it in localStorage too\n        Craft.setLocalStorage(this.sourceStatesStorageKey, this.sourceStates);\n    },\n\n    storeSortAttributeAndDirection: function() {\n        var attr = this.getSelectedSortAttribute();\n\n        if (attr !== 'score') {\n            this.setSelecetedSourceState({\n                order: attr,\n                sort: this.getSelectedSortDirection()\n            });\n        }\n    },\n\n    /**\n     * Sets the page number.\n     */\n    setPage: function(page) {\n        if (this.settings.context !== 'index') {\n            return;\n        }\n\n        page = Math.max(page, 1);\n        this.page = page;\n\n        // Update the URL\n        var url = document.location.href\n            .replace(/\\?.*$/, '')\n            .replace(new RegExp('/' + Craft.pageTrigger.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') + '\\\\d+$'), '')\n            .replace(/\\/+$/, '');\n\n        if (this.page !== 1) {\n            if (Craft.pageTrigger[0] !== '?') {\n                url += '/';\n            }\n            url += Craft.pageTrigger + this.page;\n        }\n\n        history.replaceState({}, '', url);\n    },\n\n    _resetCount: function() {\n        this.resultSet = null;\n        this.totalResults = null;\n    },\n\n    /**\n     * Returns the data that should be passed to the elementIndex/getElements controller action\n     * when loading elements.\n     */\n    getViewParams: function() {\n        var criteria = {\n            siteId: this.siteId,\n            search: this.searchText,\n            offset: this.settings.batchSize * (this.page - 1),\n            limit: this.settings.batchSize,\n        };\n\n        // Only set drafts/draftOf/trashed params when needed, so we don't potentially override a source's criteria\n        if (\n            this.settings.canHaveDrafts &&\n            (this.drafts || (this.settings.context === 'index' && !this.status))\n        ) {\n            criteria.drafts = this.drafts || null;\n            criteria.savedDraftsOnly = true;\n            if (!this.drafts) {\n                criteria.draftOf = false;\n            }\n        }\n        if (this.trashed) {\n            criteria.trashed = true;\n        }\n\n        if (!Garnish.hasAttr(this.$source, 'data-override-status')) {\n            criteria.status = this.status;\n        }\n\n        $.extend(criteria, this.settings.criteria);\n\n        var params = {\n            context: this.settings.context,\n            elementType: this.elementType,\n            source: this.instanceState.selectedSource,\n            criteria: criteria,\n            disabledElementIds: this.settings.disabledElementIds,\n            viewState: $.extend({}, this.getSelectedSourceState()),\n            paginated: this._isViewPaginated() ? 1 : 0,\n        };\n\n        // Possible that the order/sort isn't entirely accurate if we're sorting by Score\n        params.viewState.order = this.getSelectedSortAttribute();\n        params.viewState.sort = this.getSelectedSortDirection();\n\n        if (this.getSelectedSortAttribute() === 'structure') {\n            if (typeof this.instanceState.collapsedElementIds === 'undefined') {\n                this.instanceState.collapsedElementIds = [];\n            }\n            params.collapsedElementIds = this.instanceState.collapsedElementIds;\n        }\n\n        // Give plugins a chance to hook in here\n        this.trigger('registerViewParams', {\n            params: params,\n        });\n\n        return params;\n    },\n\n    updateElements: function(preservePagination) {\n        // Ignore if we're not fully initialized yet\n        if (!this.initialized) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        this.setIndexBusy();\n\n        // Kill the old view class\n        if (this.view) {\n            this.view.destroy();\n            delete this.view;\n        }\n\n        if (preservePagination !== true) {\n            this.setPage(1);\n            this._resetCount();\n        }\n\n        var params = this.getViewParams();\n\n        Craft.sendActionRequest('POST', this.settings.updateElementsAction, {\n            data: params,\n            cancelToken: this._createCancelToken(),\n        }).then((response) => {\n            this.setIndexAvailable();\n            (this.settings.context === 'index' ? Garnish.$scrollContainer : this.$main).scrollTop(0);\n            this._updateView(params, response.data);\n        }).catch(e => {\n            this.setIndexAvailable();\n            if (!this._ignoreFailedRequest) {\n                Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n            }\n        });\n    },\n\n    updateElementsIfSearchTextChanged: function() {\n        if (this.searchText !== (this.searchText = this.searching ? this.$search.val() : null)) {\n            this.updateElements();\n        }\n    },\n\n    showActionTriggers: function() {\n        // Ignore if they're already shown\n        if (this.showingActionTriggers) {\n            return;\n        }\n\n        // Hard-code the min toolbar height in case it was taller than the actions toolbar\n        // (prevents the elements from jumping if this ends up being a double-click)\n        this.$toolbar.css('min-height', this.$toolbar.height());\n\n        // Hide any toolbar inputs\n        this._$detachedToolbarItems = this.$toolbar.children();\n        this._$detachedToolbarItems.detach();\n\n        if (!this._$triggers) {\n            this._createTriggers();\n        } else {\n            this._$triggers.appendTo(this.$toolbar);\n        }\n\n        this.showingActionTriggers = true;\n    },\n\n    submitAction: function(action, actionParams) {\n        // Make sure something's selected\n        var selectedElementIds = this.view.getSelectedElementIds(),\n            totalSelected = selectedElementIds.length;\n\n        if (totalSelected === 0) {\n            return;\n        }\n\n        if (typeof action === 'string') {\n            action = this._findAction(action);\n        }\n\n        if (action.confirm && !confirm(action.confirm)) {\n            return;\n        }\n\n        // Cancel any ongoing requests\n        this._cancelRequests();\n\n        // Get ready to submit\n        var viewParams = this.getViewParams();\n\n        actionParams = actionParams ? Craft.expandPostArray(actionParams) : {};\n        var params = $.extend(viewParams, action.settings || {}, actionParams, {\n            elementAction: action.type,\n            elementIds: selectedElementIds\n        });\n\n        // Do it\n        this.setIndexBusy();\n        this._autoSelectElements = selectedElementIds;\n\n        if (action.download) {\n            if (Craft.csrfTokenName) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n            Craft.downloadFromUrl('POST', Craft.getActionUrl(this.settings.submitActionsAction), params).then(response => {\n                this.setIndexAvailable();\n            }).catch(e => {\n                this.setIndexAvailable();\n            });\n        } else {\n            Craft.sendActionRequest('POST', this.settings.submitActionsAction, {\n                data: params,\n                cancelToken: this._createCancelToken(),\n            }).then((response) => {\n                this.setIndexAvailable();\n                if (response.data.success) {\n                    // Update the count text too\n                    this._resetCount();\n                    this._updateView(viewParams, response.data);\n\n                    if (response.data.message) {\n                        Craft.cp.displayNotice(response.data.message);\n                    }\n\n                    this.afterAction(action, params);\n                } else {\n                    Craft.cp.displayError(response.data.message);\n                }\n            }).catch(() => {\n                this.setIndexAvailable();\n            });\n        }\n    },\n\n    _findAction: function(actionClass) {\n        for (var i = 0; i < this.actions.length; i++) {\n            if (this.actions[i].type === actionClass) {\n                return this.actions[i];\n            }\n        }\n        throw `Invalid element action: ${actionClass}`;\n    },\n\n    afterAction: function(action, params) {\n        // There may be a new background job that needs to be run\n        Craft.cp.runQueue();\n\n        this.onAfterAction(action, params);\n    },\n\n    hideActionTriggers: function() {\n        // Ignore if there aren't any\n        if (!this.showingActionTriggers) {\n            return;\n        }\n\n        this._$detachedToolbarItems.appendTo(this.$toolbar);\n        this._$triggers.detach();\n        // this._$detachedToolbarItems.removeClass('hidden');\n\n        // Unset the min toolbar height\n        this.$toolbar.css('min-height', '');\n\n        this.showingActionTriggers = false;\n    },\n\n    updateActionTriggers: function() {\n        // Do we have an action UI to update?\n        if (this.actions) {\n            var totalSelected = this.view.getSelectedElements().length;\n\n            if (totalSelected !== 0) {\n                if (totalSelected === this.view.getEnabledElements().length) {\n                    this.$selectAllCheckbox.removeClass('indeterminate');\n                    this.$selectAllCheckbox.addClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'true');\n                } else {\n                    this.$selectAllCheckbox.addClass('indeterminate');\n                    this.$selectAllCheckbox.removeClass('checked');\n                    this.$selectAllContainer.attr('aria-checked', 'mixed');\n                }\n\n                this.showActionTriggers();\n            } else {\n                this.$selectAllCheckbox.removeClass('indeterminate checked');\n                this.$selectAllContainer.attr('aria-checked', 'false');\n                this.hideActionTriggers();\n            }\n        }\n    },\n\n    getSelectedElements: function() {\n        return this.view ? this.view.getSelectedElements() : $();\n    },\n\n    getSelectedElementIds: function() {\n        return this.view ? this.view.getSelectedElementIds() : [];\n    },\n\n    setStatus: function(status) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.statusMenu.$options.filter('a[data-status=\"' + status + '\"]:first');\n\n        if ($option.length) {\n            this.statusMenu.selectOption($option[0]);\n        }\n    },\n\n    getSortAttributeOption: function(attr) {\n        return this.$sortAttributesList.find('a[data-attr=\"' + attr + '\"]:first');\n    },\n\n    getSelectedSortAttribute: function() {\n        return this.$sortAttributesList.find('a.sel:first').data('attr');\n    },\n\n    setSortAttribute: function(attr) {\n        // Find the option (and make sure it actually exists)\n        var $option = this.getSortAttributeOption(attr);\n\n        if ($option.length) {\n            this.$sortAttributesList.find('a.sel').removeClass('sel');\n            $option.addClass('sel');\n\n            var label = $option.text();\n            this.$sortMenuBtn.attr('title', Craft.t('app', 'Sort by {attribute}', {attribute: label}));\n            this.$sortMenuBtn.text(label);\n\n            if (attr === 'score') {\n                this.setSortDirection('desc');\n            } else {\n                this.setSortDirection($option.data('default-dir') || 'asc');\n            }\n\n            if (attr === 'structure') {\n                this.$sortDirectionsList.find('a').addClass('disabled');\n            } else {\n                this.$sortDirectionsList.find('a').removeClass('disabled');\n            }\n        }\n    },\n\n    getSortDirectionOption: function(dir) {\n        return this.$sortDirectionsList.find('a[data-dir=' + dir + ']:first');\n    },\n\n    getSelectedSortDirection: function() {\n        return this.$sortDirectionsList.find('a.sel:first').data('dir');\n    },\n\n    getSelectedViewMode: function() {\n        return this.getSelectedSourceState('mode') || 'table';\n    },\n\n    setSortDirection: function(dir) {\n        if (dir !== 'desc') {\n            dir = 'asc';\n        }\n\n        this.$sortMenuBtn.attr('data-icon', dir);\n        this.$sortDirectionsList.find('a.sel').removeClass('sel');\n        this.getSortDirectionOption(dir).addClass('sel');\n    },\n\n    getSourceByKey: function(key) {\n        if (typeof this.sourcesByKey[key] === 'undefined') {\n            return null;\n        }\n\n        return this.sourcesByKey[key];\n    },\n\n    selectSource: function($source) {\n        if (!$source || !$source.length) {\n            return false;\n        }\n\n        if (this.$source && this.$source[0] && this.$source[0] === $source[0] && $source.data('key') === this.sourceKey) {\n            return false;\n        }\n\n        // Hide action triggers if they're currently being shown\n        this.hideActionTriggers();\n\n        this.$source = $source;\n        this.sourceKey = $source.data('key');\n        this.setInstanceState('selectedSource', this.sourceKey);\n        this.sourceSelect.selectItem($source);\n\n        Craft.cp.updateSidebarMenuLabel();\n\n        if (this.searching) {\n            // Clear the search value without causing it to update elements\n            this.searchText = null;\n            this.$search.val('');\n            this.stopSearching();\n        }\n\n        // Sort menu\n        // ----------------------------------------------------------------------\n\n        // Remove any existing custom sort options from the menu\n        this.$sortAttributesList.children('li[data-extra]').remove();\n\n        // Does this source have any custom sort options?\n        let $topSource = this.$source.closest('nav > ul > li').children('a');\n        let sortOptions = $topSource.data('sort-options')\n        if (sortOptions) {\n            for (let i = 0; i < sortOptions.length; i++) {\n                let $option = $('<li/>', {\n                    'data-extra': true,\n                })\n                    .append(\n                        $('<a/>', {\n                            text: sortOptions[i][0],\n                            'data-attr': sortOptions[i][1],\n                        })\n                    )\n                    .appendTo(this.$sortAttributesList);\n                this.sortMenu.addOptions($option.children());\n            }\n        }\n\n        // Does this source have a structure?\n        if (Garnish.hasAttr(this.$source, 'data-has-structure')) {\n            if (!this.$structureSortAttribute) {\n                this.$structureSortAttribute = $('<li><a data-attr=\"structure\">' + Craft.t('app', 'Structure') + '</a></li>');\n                this.sortMenu.addOptions(this.$structureSortAttribute.children());\n            }\n\n            this.$structureSortAttribute.prependTo(this.$sortAttributesList);\n        } else if (this.$structureSortAttribute) {\n            this.$structureSortAttribute.removeClass('sel').detach();\n        }\n\n        this.setStoredSortOptionsForSource();\n\n        // Status menu\n        // ----------------------------------------------------------------------\n\n        if (this.$statusMenuBtn.length) {\n            if (Garnish.hasAttr(this.$source, 'data-override-status')) {\n                this.$statusMenuContainer.addClass('hidden');\n            } else {\n                this.$statusMenuContainer.removeClass('hidden');\n            }\n\n            if (this.trashed) {\n                // Swap to the initial status\n                var $firstOption = this.statusMenu.$options.first();\n                this.setStatus($firstOption.data('status'));\n            }\n        }\n\n        // View mode buttons\n        // ----------------------------------------------------------------------\n\n        // Clear out any previous view mode data\n        if (this.$viewModeBtnContainer) {\n            this.$viewModeBtnContainer.remove();\n        }\n\n        this.viewModeBtns = {};\n        this.viewMode = null;\n\n        // Get the new list of view modes\n        this.sourceViewModes = this.getViewModesForSource();\n\n        // Create the buttons if there's more than one mode available to this source\n        if (this.sourceViewModes.length > 1) {\n            this.$viewModeBtnContainer = $('<div class=\"btngroup\"/>').appendTo(this.$toolbar);\n\n            for (var i = 0; i < this.sourceViewModes.length; i++) {\n                let sourceViewMode = this.sourceViewModes[i];\n\n                let $viewModeBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn' + (typeof sourceViewMode.className !== 'undefined' ? ` ${sourceViewMode.className}` : ''),\n                    'data-view': sourceViewMode.mode,\n                    'data-icon': sourceViewMode.icon,\n                    'aria-label': sourceViewMode.title,\n                    title: sourceViewMode.title,\n                }).appendTo(this.$viewModeBtnContainer);\n\n                this.viewModeBtns[sourceViewMode.mode] = $viewModeBtn;\n\n                this.addListener($viewModeBtn, 'click', {mode: sourceViewMode.mode}, function(ev) {\n                    this.selectViewMode(ev.data.mode);\n                    this.updateElements();\n                });\n            }\n        }\n\n        // Figure out which mode we should start with\n        var viewMode = this.getSelectedViewMode();\n\n        if (!viewMode || !this.doesSourceHaveViewMode(viewMode)) {\n            // Try to keep using the current view mode\n            if (this.viewMode && this.doesSourceHaveViewMode(this.viewMode)) {\n                viewMode = this.viewMode;\n            }\n            // Just use the first one\n            else {\n                viewMode = this.sourceViewModes[0].mode;\n            }\n        }\n\n        this.selectViewMode(viewMode);\n\n        this.onSelectSource();\n\n        return true;\n    },\n\n    selectSourceByKey: function(key) {\n        var $source = this.getSourceByKey(key);\n\n        if ($source) {\n            return this.selectSource($source);\n        } else {\n            return false;\n        }\n    },\n\n    setStoredSortOptionsForSource: function() {\n        var sortAttr = this.getSelectedSourceState('order'),\n            sortDir = this.getSelectedSourceState('sort');\n\n        if (!sortAttr || !sortDir) {\n            // Get the default\n            sortAttr = this.getDefaultSort();\n\n            if (Garnish.isArray(sortAttr)) {\n                sortDir = sortAttr[1];\n                sortAttr = sortAttr[0];\n            }\n        }\n\n        if (sortDir !== 'asc' && sortDir !== 'desc') {\n            sortDir = 'asc';\n        }\n\n        this.setSortAttribute(sortAttr);\n        this.setSortDirection(sortDir);\n    },\n\n    getDefaultSort: function() {\n        // Does the source specify what to do?\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-default-sort')) {\n            return this.$source.attr('data-default-sort').split(':');\n        } else {\n            // Default to whatever's first\n            return [this.$sortAttributesList.find('a:first').data('attr'), 'asc'];\n        }\n    },\n\n    getViewModesForSource: function() {\n        var viewModes = [\n            {mode: 'table', title: Craft.t('app', 'Display in a table'), icon: 'list'}\n        ];\n\n        if (this.$source && Garnish.hasAttr(this.$source, 'data-has-thumbs')) {\n            viewModes.push({mode: 'thumbs', title: Craft.t('app', 'Display as thumbnails'), icon: 'grid'});\n        }\n\n        return viewModes;\n    },\n\n    doesSourceHaveViewMode: function(viewMode) {\n        for (var i = 0; i < this.sourceViewModes.length; i++) {\n            if (this.sourceViewModes[i].mode === viewMode) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    selectViewMode: function(viewMode, force) {\n        // Make sure that the current source supports it\n        if (!force && !this.doesSourceHaveViewMode(viewMode)) {\n            viewMode = this.sourceViewModes[0].mode;\n        }\n\n        // Has anything changed?\n        if (viewMode === this.viewMode) {\n            return;\n        }\n\n        // Deselect the previous view mode\n        if (this.viewMode && typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].removeClass('active');\n        }\n\n        this.viewMode = viewMode;\n        this.setSelecetedSourceState('mode', this.viewMode);\n\n        if (typeof this.viewModeBtns[this.viewMode] !== 'undefined') {\n            this.viewModeBtns[this.viewMode].addClass('active');\n        }\n    },\n\n    createView: function(mode, settings) {\n        var viewClass = this.getViewClass(mode);\n        return new viewClass(this, this.$elements, settings);\n    },\n\n    getViewClass: function(mode) {\n        switch (mode) {\n            case 'table':\n                return Craft.TableElementIndexView;\n            case 'thumbs':\n                return Craft.ThumbsElementIndexView;\n            default:\n                throw `View mode \"${mode}\" not supported.`;\n        }\n    },\n\n    rememberDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index === -1) {\n            this.settings.disabledElementIds.push(id);\n        }\n    },\n\n    forgetDisabledElementId: function(id) {\n        var index = $.inArray(id, this.settings.disabledElementIds);\n\n        if (index !== -1) {\n            this.settings.disabledElementIds.splice(index, 1);\n        }\n    },\n\n    enableElements: function($elements) {\n        $elements.removeClass('disabled').parents('.disabled').removeClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.forgetDisabledElementId(id);\n        }\n\n        this.onEnableElements($elements);\n    },\n\n    disableElements: function($elements) {\n        $elements.removeClass('sel').addClass('disabled');\n\n        for (var i = 0; i < $elements.length; i++) {\n            var id = $($elements[i]).data('id');\n            this.rememberDisabledElementId(id);\n        }\n\n        this.onDisableElements($elements);\n    },\n\n    getElementById: function(id) {\n        return this.view.getElementById(id);\n    },\n\n    enableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.enableElements($element);\n            } else {\n                this.forgetDisabledElementId(id);\n            }\n        }\n    },\n\n    disableElementsById: function(ids) {\n        ids = $.makeArray(ids);\n\n        for (var i = 0; i < ids.length; i++) {\n            var id = ids[i],\n                $element = this.getElementById(id);\n\n            if ($element && $element.length) {\n                this.disableElements($element);\n            } else {\n                this.rememberDisabledElementId(id);\n            }\n        }\n    },\n\n    selectElementAfterUpdate: function(id) {\n        if (this._autoSelectElements === null) {\n            this._autoSelectElements = [];\n        }\n\n        this._autoSelectElements.push(id);\n    },\n\n    addButton: function($button) {\n        this.getButtonContainer().append($button);\n    },\n\n    isShowingSidebar: function() {\n        if (this.showingSidebar === null) {\n            this.showingSidebar = (this.$sidebar.length && !this.$sidebar.hasClass('hidden'));\n        }\n\n        return this.showingSidebar;\n    },\n\n    getButtonContainer: function() {\n        // Is there a predesignated place where buttons should go?\n        if (this.settings.buttonContainer) {\n            return $(this.settings.buttonContainer);\n        } else {\n            var $container = $('#action-button');\n\n            if (!$container.length) {\n                $container = $('<div id=\"action-button\"/>').appendTo($('#header'));\n            }\n\n            return $container;\n        }\n    },\n\n    setIndexBusy: function() {\n        this.$elements.addClass('busy');\n        this.isIndexBusy = true;\n    },\n\n    setIndexAvailable: function() {\n        this.$elements.removeClass('busy');\n        this.isIndexBusy = false;\n    },\n\n    createCustomizeSourcesModal: function() {\n        // Recreate it each time\n        var modal = new Craft.CustomizeSourcesModal(this, {\n            onHide: function() {\n                modal.destroy();\n            }\n        });\n\n        return modal;\n    },\n\n    disable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.disable();\n        }\n\n        if (this.view) {\n            this.view.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.sourceSelect) {\n            this.sourceSelect.enable();\n        }\n\n        if (this.view) {\n            this.view.enable();\n        }\n\n        this.base();\n    },\n\n    onAfterInit: function() {\n        this.settings.onAfterInit();\n        this.trigger('afterInit');\n    },\n\n    onSelectSource: function() {\n        this.settings.onSelectSource(this.sourceKey);\n        this.trigger('selectSource', {sourceKey: this.sourceKey});\n    },\n\n    onSelectSite: function() {\n        this.settings.onSelectSite(this.siteId);\n        this.trigger('selectSite', {siteId: this.siteId});\n    },\n\n    onUpdateElements: function() {\n        this.settings.onUpdateElements();\n        this.trigger('updateElements');\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    onEnableElements: function($elements) {\n        this.settings.onEnableElements($elements);\n        this.trigger('enableElements', {elements: $elements});\n    },\n\n    onDisableElements: function($elements) {\n        this.settings.onDisableElements($elements);\n        this.trigger('disableElements', {elements: $elements});\n    },\n\n    onAfterAction: function(action, params) {\n        this.settings.onAfterAction(action, params);\n        this.trigger('afterAction', {action: action, params: params});\n    },\n\n    // UI state handlers\n    // -------------------------------------------------------------------------\n\n    _handleSourceSelectionChange: function() {\n        // If the selected source was just removed (maybe because its parent was collapsed),\n        // there won't be a selected source\n        if (!this.sourceSelect.totalSelected) {\n            this.sourceSelect.selectItem(this.$visibleSources.first());\n            return;\n        }\n\n        if (this.selectSource(this.sourceSelect.$selectedItems)) {\n            this.updateElements();\n        }\n    },\n\n    _handleActionTriggerSubmit: function(ev) {\n        ev.preventDefault();\n\n        var $form = $(ev.currentTarget);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($form.hasClass('disabled') || $form.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($form.data('action'), Garnish.getPostData($form));\n    },\n\n    _handleMenuActionTriggerSubmit: function(ev) {\n        var $option = $(ev.option);\n\n        // Make sure Craft.ElementActionTrigger isn't overriding this\n        if ($option.hasClass('disabled') || $option.data('custom-handler')) {\n            return;\n        }\n\n        this.submitAction($option.data('action'));\n    },\n\n    _handleStatusChange: function(ev) {\n        this.statusMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$statusMenuBtn.html($option.html());\n\n        this.trashed = false;\n        this.drafts = false;\n        this.status = null;\n\n        if (Garnish.hasAttr($option, 'data-trashed')) {\n            this.trashed = true;\n        } else if (Garnish.hasAttr($option, 'data-drafts')) {\n            this.drafts = true;\n        } else {\n            this.status = $option.data('status');\n        }\n\n        this._updateStructureSortOption();\n        this.updateElements();\n    },\n\n    _handleSiteChange: function(ev) {\n        this.siteMenu.$options.removeClass('sel');\n        var $option = $(ev.selectedOption).addClass('sel');\n        this.$siteMenuBtn.html($option.html());\n        this._setSite($option.data('site-id'));\n        this.onSelectSite();\n    },\n\n    _setSite: function(siteId) {\n        let firstSite = this.siteId === null;\n        this.siteId = siteId;\n        this.$visibleSources = $();\n\n        // Hide any sources that aren't available for this site\n        var $firstVisibleSource;\n        var $source;\n        // Select a new source automatically if a site is already selected, but we don't have a selected source\n        // (or if the currently selected source ends up not supporting the new site)\n        var selectNewSource = !firstSite && (!this.$source || !this.$source.length);\n\n        for (var i = 0; i < this.$sources.length; i++) {\n            $source = this.$sources.eq(i);\n            if (typeof $source.data('sites') === 'undefined' || $source.data('sites').toString().split(',').indexOf(siteId.toString()) !== -1) {\n                $source.parent().removeClass('hidden');\n                this.$visibleSources = this.$visibleSources.add($source);\n                if (!$firstVisibleSource) {\n                    $firstVisibleSource = $source;\n                }\n            } else {\n                $source.parent().addClass('hidden');\n\n                // Is this the currently selected source?\n                if (this.$source && this.$source.get(0) == $source.get(0)) {\n                    selectNewSource = true;\n                }\n            }\n        }\n\n        if (this.initialized && selectNewSource) {\n            this.selectSource($firstVisibleSource);\n        }\n\n        // Hide any empty-nester headings\n        var $headings = this.getSourceContainer().children('.heading');\n        var $heading;\n\n        for (i = 0; i < $headings.length; i++) {\n            $heading = $headings.eq(i);\n            if ($heading.nextUntil('.heading', ':not(.hidden)').length !== 0) {\n                $heading.removeClass('hidden');\n            } else {\n                $heading.addClass('hidden');\n            }\n        }\n\n        if (this.initialized) {\n            if (this.settings.context === 'index') {\n                // Remember this site for later\n                Craft.cp.setSiteId(siteId);\n            }\n\n            // Update the elements\n            this.updateElements();\n        }\n    },\n\n    _handleSortChange: function(ev) {\n        var $option = $(ev.selectedOption);\n\n        if ($option.hasClass('disabled') || $option.hasClass('sel')) {\n            return;\n        }\n\n        // Is this an attribute or a direction?\n        if ($option.parent().parent().is(this.$sortAttributesList)) {\n            this.setSortAttribute($option.data('attr'));\n        } else {\n            this.setSortDirection($option.data('dir'));\n        }\n\n        this.storeSortAttributeAndDirection();\n        this.updateElements();\n    },\n\n    _handleSelectionChange: function() {\n        this.updateActionTriggers();\n        this.onSelectionChange();\n    },\n\n    _handleSourceDblClick: function(ev) {\n        this._toggleSource($(ev.currentTarget));\n        ev.stopPropagation();\n    },\n\n    _handleSourceToggleClick: function(ev) {\n        this._toggleSource($(ev.currentTarget).prev('a'));\n        ev.stopPropagation();\n    },\n\n    _updateStructureSortOption: function() {\n        var $option = this.getSortAttributeOption('structure');\n\n        if (!$option.length) {\n            return;\n        }\n\n        if (this.trashed || this.drafts || this.searching) {\n            $option.addClass('disabled');\n            if (this.getSelectedSortAttribute() === 'structure') {\n                // Temporarily set the sort to the first option\n                var $firstOption = this.$sortAttributesList.find('a:not(.disabled):first')\n                this.setSortAttribute($firstOption.data('attr'));\n                this.setSortDirection('asc');\n            }\n        } else {\n            $option.removeClass('disabled');\n            this.setStoredSortOptionsForSource();\n        }\n    },\n\n    // Source managemnet\n    // -------------------------------------------------------------------------\n\n    _getSourcesInList: function($list) {\n        return $list.children('li').children('a');\n    },\n\n    _getChildSources: function($source) {\n        var $list = $source.siblings('ul');\n        return this._getSourcesInList($list);\n    },\n\n    _getSourceToggle: function($source) {\n        return $source.siblings('.toggle');\n    },\n\n    _initSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.initSource($($sources[i]));\n        }\n    },\n\n    _deinitSources: function($sources) {\n        for (var i = 0; i < $sources.length; i++) {\n            this.deinitSource($($sources[i]));\n        }\n    },\n\n    _toggleSource: function($source) {\n        if ($source.parent('li').hasClass('expanded')) {\n            this._collapseSource($source);\n        } else {\n            this._expandSource($source);\n        }\n    },\n\n    _expandSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'true',\n            'aria-label': Craft.t('app', 'Hide nested sources'),\n        });\n        $source.parent('li').addClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._initSources($childSources);\n\n        var key = $source.data('key');\n        if (this.instanceState.expandedSources.indexOf(key) === -1) {\n            this.instanceState.expandedSources.push(key);\n            this.storeInstanceState();\n        }\n    },\n\n    _collapseSource: function($source) {\n        $source.next('.toggle').attr({\n            'aria-expanded': 'false',\n            'aria-label': Craft.t('app', 'Show nested sources'),\n        });\n        $source.parent('li').removeClass('expanded');\n\n        var $childSources = this._getChildSources($source);\n        this._deinitSources($childSources);\n\n        var i = this.instanceState.expandedSources.indexOf($source.data('key'));\n        if (i !== -1) {\n            this.instanceState.expandedSources.splice(i, 1);\n            this.storeInstanceState();\n        }\n    },\n\n    // View\n    // -------------------------------------------------------------------------\n\n    _isViewPaginated: function() {\n        return this.settings.context === 'index' && this.getSelectedSortAttribute() !== 'structure';\n    },\n\n    _updateView: function(params, response) {\n        // Cleanup\n        // -------------------------------------------------------------\n\n        // Get rid of the old action triggers regardless of whether the new batch has actions or not\n        if (this.actions) {\n            this.hideActionTriggers();\n            this.actions = this.actionsHeadHtml = this.actionsFootHtml = this._$triggers = null;\n        }\n\n        // Update the count text\n        // -------------------------------------------------------------\n\n        if (this.$countContainer.length) {\n            this.$countSpinner.removeClass('hidden');\n            this.$countContainer.html('');\n\n            this._countResults()\n                .then((total) => {\n                    this.$countSpinner.addClass('hidden');\n\n                    let itemLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][2] : 'element';\n                    let itemsLabel = Craft.elementTypeNames[this.elementType] ? Craft.elementTypeNames[this.elementType][3] : 'elements';\n\n                    if (!this._isViewPaginated()) {\n                        let countLabel = Craft.t('app', '{total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n                        this.$countContainer.text(countLabel);\n                    } else {\n                        let first = Math.min(this.settings.batchSize * (this.page - 1) + 1, total);\n                        let last = Math.min(first + (this.settings.batchSize - 1), total);\n                        let countLabel = Craft.t('app', '{first, number}-{last, number} of {total, number} {total, plural, =1{{item}} other{{items}}}', {\n                            first: first,\n                            last: last,\n                            total: total,\n                            item: itemLabel,\n                            items: itemsLabel,\n                        });\n\n                        let $paginationContainer = $('<div class=\"flex pagination\"/>').appendTo(this.$countContainer);\n                        let totalPages = Math.max(Math.ceil(total / this.settings.batchSize), 1);\n\n                        let $prevBtn = $('<div/>', {\n                            'class': 'page-link prev-page' + (this.page > 1 ? '' : ' disabled'),\n                            title: Craft.t('app', 'Previous Page')\n                        }).appendTo($paginationContainer);\n                        let $nextBtn = $('<div/>', {\n                            'class': 'page-link next-page' + (this.page < totalPages ? '' : ' disabled'),\n                            title: Craft.t('app', 'Next Page')\n                        }).appendTo($paginationContainer);\n\n                        $('<div/>', {\n                            'class': 'page-info',\n                            text: countLabel\n                        }).appendTo($paginationContainer);\n\n                        if (this.page > 1) {\n                            this.addListener($prevBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page - 1);\n                                this.updateElements(true);\n                            });\n                        }\n\n                        if (this.page < totalPages) {\n                            this.addListener($nextBtn, 'click', function() {\n                                this.removeListener($prevBtn, 'click');\n                                this.removeListener($nextBtn, 'click');\n                                this.setPage(this.page + 1);\n                                this.updateElements(true);\n                            });\n                        }\n                    }\n                })\n                .catch(() => {\n                    this.$countSpinner.addClass('hidden');\n                });\n        }\n\n        // Update the view with the new container + elements HTML\n        // -------------------------------------------------------------\n\n        this.$elements.html(response.html);\n        Craft.appendHeadHtml(response.headHtml);\n        Craft.appendFootHtml(response.footHtml);\n\n        // Batch actions setup\n        // -------------------------------------------------------------\n\n        this.$selectAllContainer = this.$elements.find('.selectallcontainer:first');\n\n        if (response.actions && response.actions.length) {\n            if (this.$selectAllContainer.length) {\n                this.actions = response.actions;\n                this.actionsHeadHtml = response.actionsHeadHtml;\n                this.actionsFootHtml = response.actionsFootHtml;\n\n                // Create the select all checkbox\n                this.$selectAllCheckbox = $('<div class=\"checkbox\"/>').prependTo(this.$selectAllContainer);\n\n                this.$selectAllContainer.attr({\n                    'role': 'checkbox',\n                    'tabindex': '0',\n                    'aria-checked': 'false',\n                    'aria-label': Craft.t('app', 'Select all'),\n                });\n\n                this.addListener(this.$selectAllContainer, 'click', function() {\n                    if (this.view.getSelectedElements().length === 0) {\n                        this.view.selectAllElements();\n                    } else {\n                        this.view.deselectAllElements();\n                    }\n                });\n\n                this.addListener(this.$selectAllContainer, 'keydown', function(ev) {\n                    if (ev.keyCode === Garnish.SPACE_KEY) {\n                        ev.preventDefault();\n\n                        $(ev.currentTarget).trigger('click');\n                    }\n                });\n            }\n        } else {\n            if (!this.$selectAllContainer.siblings().length) {\n                this.$selectAllContainer.parent('.header').remove();\n            }\n            this.$selectAllContainer.remove();\n        }\n\n        // Exporters setup\n        // -------------------------------------------------------------\n\n        this.exporters = response.exporters;\n        this.exportersByType = Craft.index(this.exporters || [], e => e.type);\n\n        if (this.exporters && this.exporters.length) {\n            this.$exportBtn.removeClass('hidden');\n        } else {\n            this.$exportBtn.addClass('hidden');\n        }\n\n        // Create the view\n        // -------------------------------------------------------------\n\n        // Should we make the view selectable?\n        var selectable = (this.actions || this.settings.selectable);\n\n        this.view = this.createView(this.getSelectedViewMode(), {\n            context: this.settings.context,\n            batchSize: this.settings.context !== 'index' || this.getSelectedSortAttribute() === 'structure' ? this.settings.batchSize : null,\n            params: params,\n            selectable: selectable,\n            multiSelect: (this.actions || this.settings.multiSelect),\n            checkboxMode: !!this.actions,\n            onSelectionChange: this._handleSelectionChange.bind(this)\n        });\n\n        // Auto-select elements\n        // -------------------------------------------------------------\n\n        if (this._autoSelectElements) {\n            if (selectable) {\n                for (var i = 0; i < this._autoSelectElements.length; i++) {\n                    this.view.selectElementById(this._autoSelectElements[i]);\n                }\n            }\n\n            this._autoSelectElements = null;\n        }\n\n        // Trigger the event\n        // -------------------------------------------------------------\n\n        this.onUpdateElements();\n    },\n\n    _countResults: function() {\n        return new Promise((resolve, reject) => {\n            if (this.totalResults !== null) {\n                resolve(this.totalResults);\n            } else {\n                var params = this.getViewParams();\n                delete params.criteria.offset;\n                delete params.criteria.limit;\n\n                // Make sure we've got an active result set ID\n                if (this.resultSet === null) {\n                    this.resultSet = Math.floor(Math.random() * 100000000);\n                }\n                params.resultSet = this.resultSet;\n\n                Craft.sendActionRequest('POST', this.settings.countElementsAction, {\n                    data: params,\n                    cancelToken: this._createCancelToken(),\n                }).then((response) => {\n                    if (response.data.resultSet == this.resultSet) {\n                        this.totalResults = response.data.count;\n                        resolve(response.data.count);\n                    } else {\n                        reject();\n                    }\n                }).catch(reject);\n            }\n        });\n    },\n\n    _createTriggers: function() {\n        var triggers = [],\n            safeMenuActions = [],\n            destructiveMenuActions = [];\n\n        var i;\n\n        for (i = 0; i < this.actions.length; i++) {\n            var action = this.actions[i];\n\n            if (action.trigger) {\n                var $form = $('<form id=\"' + Craft.formatInputId(action.type) + '-actiontrigger\"/>')\n                    .data('action', action)\n                    .append(action.trigger);\n\n                this.addListener($form, 'submit', '_handleActionTriggerSubmit');\n                triggers.push($form);\n            } else {\n                if (!action.destructive) {\n                    safeMenuActions.push(action);\n                } else {\n                    destructiveMenuActions.push(action);\n                }\n            }\n        }\n\n        var $btn;\n\n        if (safeMenuActions.length || destructiveMenuActions.length) {\n            var $menuTrigger = $('<form/>');\n\n            $btn = $('<button/>', {\n                type: 'button',\n                class: 'btn menubtn',\n                'data-icon': 'settings',\n                title: Craft.t('app', 'Actions'),\n            }).appendTo($menuTrigger);\n\n            var $menu = $('<ul class=\"menu\"/>').appendTo($menuTrigger),\n                $safeList = this._createMenuTriggerList(safeMenuActions, false),\n                $destructiveList = this._createMenuTriggerList(destructiveMenuActions, true);\n\n            if ($safeList) {\n                $safeList.appendTo($menu);\n            }\n\n            if ($safeList && $destructiveList) {\n                $('<hr/>').appendTo($menu);\n            }\n\n            if ($destructiveList) {\n                $destructiveList.appendTo($menu);\n            }\n\n            triggers.push($menuTrigger);\n        }\n\n        this._$triggers = $();\n\n        for (i = 0; i < triggers.length; i++) {\n            var $div = $('<div/>').append(triggers[i]);\n            this._$triggers = this._$triggers.add($div);\n        }\n\n        this._$triggers.appendTo(this.$toolbar);\n        Craft.appendHeadHtml(this.actionsHeadHtml);\n        Craft.appendFootHtml(this.actionsFootHtml);\n\n        Craft.initUiElements(this._$triggers);\n\n        if ($btn) {\n            $btn.data('menubtn').on('optionSelect', this._handleMenuActionTriggerSubmit.bind(this));\n        }\n    },\n\n    _showExportHud: function() {\n        this.$exportBtn.addClass('active');\n\n        var $form = $('<form/>', {\n            'class': 'export-form'\n        });\n\n        var typeOptions = [];\n        for (var i = 0; i < this.exporters.length; i++) {\n            typeOptions.push({label: this.exporters[i].name, value: this.exporters[i].type});\n        }\n        var $typeField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Export Type'),\n            options: typeOptions,\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        var $formatField = Craft.ui.createSelectField({\n            label: Craft.t('app', 'Format'),\n            options: [\n                {label: 'CSV', value: 'csv'}, {label: 'JSON', value: 'json'}, {label: 'XML', value: 'xml'},\n            ],\n            'class': 'fullwidth',\n        }).appendTo($form);\n\n        let $typeSelect = $typeField.find('select');\n        this.addListener($typeSelect, 'change', () => {\n            let type = $typeSelect.val();\n            if (this.exportersByType[type].formattable) {\n                $formatField.removeClass('hidden');\n            } else {\n                $formatField.addClass('hidden');\n            }\n        });\n        $typeSelect.trigger('change');\n\n        // Only show the Limit field if there aren't any selected elements\n        var selectedElementIds = this.view.getSelectedElementIds();\n\n        if (!selectedElementIds.length) {\n            var $limitField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Limit'),\n                placeholder: Craft.t('app', 'No limit'),\n                type: 'number',\n                min: 1\n            }).appendTo($form);\n        }\n\n        $('<button/>', {\n            type: 'submit',\n            'class': 'btn submit fullwidth',\n            text: Craft.t('app', 'Export')\n        }).appendTo($form)\n\n        var $spinner = $('<div/>', {\n            'class': 'spinner hidden'\n        }).appendTo($form);\n\n        var hud = new Garnish.HUD(this.$exportBtn, $form);\n\n        hud.on('hide', () => {\n            this.$exportBtn.removeClass('active');\n        });\n\n        var submitting = false;\n\n        this.addListener($form, 'submit', function(ev) {\n            ev.preventDefault();\n            if (submitting) {\n                return;\n            }\n\n            submitting = true;\n            $spinner.removeClass('hidden');\n\n            var params = this.getViewParams();\n            delete params.criteria.offset;\n            delete params.criteria.limit;\n\n            params.type = $typeField.find('select').val();\n            params.format = $formatField.find('select').val();\n\n            if (selectedElementIds.length) {\n                params.criteria.id = selectedElementIds;\n            } else {\n                var limit = parseInt($limitField.find('input').val());\n                if (limit && !isNaN(limit)) {\n                    params.criteria.limit = limit;\n                }\n            }\n\n            if (Craft.csrfTokenValue) {\n                params[Craft.csrfTokenName] = Craft.csrfTokenValue;\n            }\n\n            Craft.downloadFromUrl('POST', Craft.getActionUrl('element-indexes/export'), params)\n                .then(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                })\n                .catch(function() {\n                    submitting = false;\n                    $spinner.addClass('hidden');\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                });\n        });\n    },\n\n    _createMenuTriggerList: function(actions, destructive) {\n        if (actions && actions.length) {\n            var $ul = $('<ul/>');\n\n            for (var i = 0; i < actions.length; i++) {\n                $('<li/>').append($('<a/>', {\n                    id: Craft.formatInputId(actions[i].type) + '-actiontrigger',\n                    'class': (destructive ? 'error' : null),\n                    data: {\n                        action: actions[i],\n                    },\n                    text: actions[i].name\n                })).appendTo($ul);\n            }\n\n            return $ul;\n        }\n    }\n}, {\n    defaults: {\n        context: 'index',\n        modal: null,\n        storageKey: null,\n        criteria: null,\n        batchSize: 100,\n        disabledElementIds: [],\n        selectable: false,\n        multiSelect: false,\n        buttonContainer: null,\n        hideSidebar: false,\n        toolbarSelector: '.toolbar:first',\n        refreshSourcesAction: 'element-indexes/get-source-tree-html',\n        updateElementsAction: 'element-indexes/get-elements',\n        countElementsAction: 'element-indexes/count-elements',\n        submitActionsAction: 'element-indexes/perform-action',\n        defaultSiteId: null,\n        defaultSource: null,\n        canHaveDrafts: false,\n\n        onAfterInit: $.noop,\n        onSelectSource: $.noop,\n        onSelectSite: $.noop,\n        onUpdateElements: $.noop,\n        onSelectionChange: $.noop,\n        onEnableElements: $.noop,\n        onDisableElements: $.noop,\n        onAfterAction: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.BaseElementIndexView = Garnish.Base.extend({\n    $container: null,\n    $loadingMoreSpinner: null,\n    $elementContainer: null,\n    $scroller: null,\n\n    elementIndex: null,\n    thumbLoader: null,\n    elementSelect: null,\n\n    loadingMore: false,\n\n    _totalVisible: null,\n    _morePending: null,\n    _handleEnableElements: null,\n    _handleDisableElements: null,\n\n    init: function(elementIndex, container, settings) {\n        this.elementIndex = elementIndex;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.BaseElementIndexView.defaults);\n\n        // Create a \"loading-more\" spinner\n        this.$loadingMoreSpinner = $(\n            '<div class=\"centeralign hidden\">' +\n            '<div class=\"spinner loadingmore\"></div>' +\n            '</div>'\n        ).insertAfter(this.$container);\n\n        // Get the actual elements container and its child elements\n        this.$elementContainer = this.getElementContainer();\n        var $elements = this.$elementContainer.children();\n\n        this.setTotalVisible($elements.length);\n        this.setMorePending(this.settings.batchSize && $elements.length == this.settings.batchSize);\n\n        // Instantiate the thumb loader\n        this.thumbLoader = new Craft.ElementThumbLoader();\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select(\n                this.$elementContainer,\n                $elements.filter(':not(.disabled)'),\n                {\n                    multi: this.settings.multiSelect,\n                    vertical: this.isVerticalList(),\n                    handle: (this.settings.context === 'index' ? '.checkbox, .element:first' : null),\n                    filter: ':not(a):not(.toggle)',\n                    checkboxMode: this.settings.checkboxMode,\n                    onSelectionChange: this.onSelectionChange.bind(this)\n                });\n\n            this._handleEnableElements = ev => {\n                this.elementSelect.addItems(ev.elements);\n            };\n\n            this._handleDisableElements = ev => {\n                this.elementSelect.removeItems(ev.elements);\n            };\n\n            this.elementIndex.on('enableElements', this._handleEnableElements);\n            this.elementIndex.on('disableElements', this._handleDisableElements);\n        }\n\n        // Enable inline element editing if this is an index page\n        if (this.settings.context === 'index') {\n            this._handleElementEditing = ev => {\n                var $target = $(ev.target);\n\n                if ($target.prop('nodeName') === 'A') {\n                    // Let the link do its thing\n                    return;\n                }\n\n                var $element;\n\n                if ($target.hasClass('element')) {\n                    $element = $target;\n                } else {\n                    $element = $target.closest('.element');\n\n                    if (!$element.length) {\n                        return;\n                    }\n                }\n\n                if (Garnish.hasAttr($element, 'data-editable')) {\n                    this.createElementEditor($element);\n                }\n            };\n\n            if (!this.elementIndex.trashed) {\n                this.addListener(this.$elementContainer, 'dblclick', this._handleElementEditing);\n                if ($.isTouchCapable()) {\n                    this.addListener(this.$elementContainer, 'taphold', this._handleElementEditing);\n                }\n            }\n        }\n\n        // Give sub-classes a chance to do post-initialization stuff here\n        this.afterInit();\n\n        // Set up lazy-loading\n        if (this.settings.batchSize) {\n            if (this.settings.context === 'index') {\n                this.$scroller = Garnish.$scrollContainer;\n            } else {\n                this.$scroller = this.elementIndex.$main;\n            }\n\n            this.$scroller.scrollTop(0);\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }\n    },\n\n    getElementContainer: function() {\n        throw 'Classes that extend Craft.BaseElementIndexView must supply a getElementContainer() method.';\n    },\n\n    afterInit: function() {\n    },\n\n    getAllElements: function() {\n        return this.$elementContainer.children();\n    },\n\n    getEnabledElements: function() {\n        return this.$elementContainer.children(':not(.disabled)');\n    },\n\n    getElementById: function(id) {\n        var $element = this.$elementContainer.children('[data-id=\"' + id + '\"]:first');\n\n        if ($element.length) {\n            return $element;\n        } else {\n            return null;\n        }\n    },\n\n    getSelectedElements: function() {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        return this.elementSelect.$selectedItems;\n    },\n\n    getSelectedElementIds: function() {\n        let $selectedElements;\n        try {\n            $selectedElements = this.getSelectedElements();\n        } catch (e) {\n        }\n\n        let ids = [];\n        if ($selectedElements) {\n            for (var i = 0; i < $selectedElements.length; i++) {\n                ids.push($selectedElements.eq(i).data('id'));\n            }\n        }\n        return ids;\n    },\n\n    selectElement: function($element) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        this.elementSelect.selectItem($element, true);\n        return true;\n    },\n\n    selectElementById: function(id) {\n        if (!this.elementSelect) {\n            throw 'This view is not selectable.';\n        }\n\n        var $element = this.getElementById(id);\n\n        if ($element) {\n            this.elementSelect.selectItem($element, true);\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    selectAllElements: function() {\n        this.elementSelect.selectAll();\n    },\n\n    deselectAllElements: function() {\n        this.elementSelect.deselectAll();\n    },\n\n    isVerticalList: function() {\n        return false;\n    },\n\n    getTotalVisible: function() {\n        return this._totalVisible;\n    },\n\n    setTotalVisible: function(totalVisible) {\n        this._totalVisible = totalVisible;\n    },\n\n    getMorePending: function() {\n        return this._morePending;\n    },\n\n    setMorePending: function(morePending) {\n        this._morePending = morePending;\n    },\n\n    /**\n     * Checks if the user has reached the bottom of the scroll area, and if so, loads the next batch of elemets.\n     */\n    maybeLoadMore: function() {\n        if (this.canLoadMore()) {\n            this.loadMore();\n        }\n    },\n\n    /**\n     * Returns whether the user has reached the bottom of the scroll area.\n     */\n    canLoadMore: function() {\n        if (!this.getMorePending() || !this.settings.batchSize) {\n            return false;\n        }\n\n        // Check if the user has reached the bottom of the scroll area\n        var containerHeight;\n\n        if (this.$scroller[0] === Garnish.$win[0]) {\n            var winHeight = Garnish.$win.innerHeight(),\n                winScrollTop = Garnish.$win.scrollTop(),\n                containerOffset = this.$container.offset().top;\n            containerHeight = this.$container.height();\n\n            return (winHeight + winScrollTop >= containerOffset + containerHeight);\n        } else {\n            var containerScrollHeight = this.$scroller.prop('scrollHeight'),\n                containerScrollTop = this.$scroller.scrollTop();\n            containerHeight = this.$scroller.outerHeight();\n\n            return (containerScrollHeight - containerScrollTop <= containerHeight + 15);\n        }\n    },\n\n    /**\n     * Loads the next batch of elements.\n     */\n    loadMore: function() {\n        if (!this.getMorePending() || this.loadingMore || !this.settings.batchSize) {\n            return;\n        }\n\n        this.loadingMore = true;\n        this.$loadingMoreSpinner.removeClass('hidden');\n        this.removeListener(this.$scroller, 'scroll');\n\n        Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {\n            data: this.getLoadMoreParams(),\n        }).then(response => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n\n            let $newElements = $(response.data.html);\n\n            this.appendElements($newElements);\n            Craft.appendHeadHtml(response.data.headHtml);\n            Craft.appendFootHtml(response.data.footHtml);\n\n            if (this.elementSelect) {\n                this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                this.elementIndex.updateActionTriggers();\n            }\n\n            this.setTotalVisible(this.getTotalVisible() + $newElements.length);\n            this.setMorePending($newElements.length == this.settings.batchSize);\n\n            // Is there room to load more right now?\n            this.addListener(this.$scroller, 'scroll', 'maybeLoadMore');\n            this.maybeLoadMore();\n        }).catch(e => {\n            this.loadingMore = false;\n            this.$loadingMoreSpinner.addClass('hidden');\n        });\n    },\n\n    getLoadMoreParams: function() {\n        // Use the same params that were passed when initializing this view\n        var params = $.extend(true, {}, this.settings.params);\n        params.criteria.offset = this.getTotalVisible();\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        $newElements.appendTo(this.$elementContainer);\n        this.thumbLoader.load($newElements);\n        this.onAppendElements($newElements);\n    },\n\n    onAppendElements: function($newElements) {\n        this.settings.onAppendElements($newElements);\n        this.trigger('appendElements', {\n            newElements: $newElements\n        });\n    },\n\n    onSelectionChange: function() {\n        this.settings.onSelectionChange();\n        this.trigger('selectionChange');\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            elementIndex: this.elementIndex\n        });\n    },\n\n    disable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.disable();\n        }\n    },\n\n    enable: function() {\n        if (this.elementSelect) {\n            this.elementSelect.enable();\n        }\n    },\n\n    destroy: function() {\n        // Remove the \"loading-more\" spinner, since we added that outside of the view container\n        this.$loadingMoreSpinner.remove();\n\n        // Kill the thumb loader\n        this.thumbLoader.destroy();\n        delete this.thumbLoader;\n\n        // Delete the element select\n        if (this.elementSelect) {\n            this.elementIndex.off('enableElements', this._handleEnableElements);\n            this.elementIndex.off('disableElements', this._handleDisableElements);\n\n            this.elementSelect.destroy();\n            delete this.elementSelect;\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        context: 'index',\n        batchSize: null,\n        params: null,\n        selectable: false,\n        multiSelect: false,\n        checkboxMode: false,\n        loadMoreElementsAction: 'element-indexes/get-more-elements',\n        onAppendElements: $.noop,\n        onSelectionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Select input\n */\nCraft.BaseElementSelectInput = Garnish.Base.extend({\n    thumbLoader: null,\n    elementSelect: null,\n    elementSort: null,\n    modal: null,\n    elementEditor: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addElementBtn: null,\n    $addElementBtnContainer: null,\n\n    _initialized: false,\n\n    init: function(settings) {\n        // Normalize the settings and set them\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'elementType', 'sources', 'criteria', 'sourceElementId', 'limit', 'modalStorageKey', 'fieldId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.setSettings(settings, Craft.BaseElementSelectInput.defaults);\n\n        // Apply the storage key prefix\n        if (this.settings.modalStorageKey) {\n            this.modalStorageKey = 'BaseElementSelectInput.' + this.settings.modalStorageKey;\n        }\n\n        // No reason for this to be sortable if we're only allowing 1 selection\n        if (this.settings.limit == 1) {\n            this.settings.sortable = false;\n        }\n\n        this.$container = this.getContainer();\n\n        // Store a reference to this class\n        this.$container.data('elementSelect', this);\n\n        this.$elementsContainer = this.getElementsContainer();\n\n        this.$addElementBtn = this.getAddElementsBtn();\n        if (this.$addElementBtn) {\n            this.$addElementBtnContainer = this.$addElementBtn.parent('.flex');\n            if (!this.$addElementBtnContainer.length) {\n                this.$addElementBtnContainer = null;\n            }\n        }\n\n        this.thumbLoader = new Craft.ElementThumbLoader();\n\n        this.initElementSelect();\n        this.initElementSort();\n        this.resetElements();\n\n        if (this.$addElementBtn) {\n            this.addListener(this.$addElementBtn, 'activate', 'showModal');\n        }\n\n        Garnish.requestAnimationFrame(() => {\n            this._initialized = true;\n        });\n    },\n\n    get totalSelected() {\n        return this.$elements.length;\n    },\n\n    getContainer: function() {\n        return $('#' + this.settings.id);\n    },\n\n    getElementsContainer: function() {\n        return this.$container.children('.elements');\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.children();\n    },\n\n    getAddElementsBtn: function() {\n        return this.$container.find('.btn.add:first');\n    },\n\n    initElementSelect: function() {\n        if (this.settings.selectable) {\n            this.elementSelect = new Garnish.Select({\n                multi: this.settings.sortable,\n                filter: ':not(.delete)'\n            });\n        }\n    },\n\n    initElementSort: function() {\n        if (this.settings.sortable) {\n            this.elementSort = new Garnish.DragSort({\n                container: this.$elementsContainer,\n                filter: (this.settings.selectable ? () => {\n                    // Only return all the selected items if the target item is selected\n                    if (this.elementSort.$targetItem.hasClass('sel')) {\n                        return this.elementSelect.getSelectedItems();\n                    } else {\n                        return this.elementSort.$targetItem;\n                    }\n                } : null),\n                ignoreHandleSelector: '.delete',\n                axis: this.getElementSortAxis(),\n                collapseDraggees: true,\n                magnetStrength: 4,\n                helperLagBase: 1.5,\n                onSortChange: (this.settings.selectable ? () => {\n                    this.elementSelect.resetItemOrder();\n                } : null)\n            });\n        }\n    },\n\n    getElementSortAxis: function() {\n        return (this.settings.viewMode === 'list' ? 'y' : null);\n    },\n\n    canAddMoreElements: function() {\n        return (!this.settings.limit || this.$elements.length < this.settings.limit);\n    },\n\n    updateAddElementsBtn: function() {\n        if (this.canAddMoreElements()) {\n            this.enableAddElementsBtn();\n        } else {\n            this.disableAddElementsBtn();\n        }\n    },\n\n    disableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.addClass('hidden');\n        }\n    },\n\n    enableAddElementsBtn: function() {\n        let $btn = this.$addElementBtnContainer || this.$addElementBtn;\n        if ($btn) {\n            $btn.removeClass('hidden');\n        }\n    },\n\n    resetElements: function() {\n        if (this.$elements !== null) {\n            this.removeElements(this.$elements);\n        } else {\n            this.$elements = $();\n        }\n\n        this.addElements(this.getElements());\n    },\n\n    addElements: function($elements) {\n        this.thumbLoader.load($elements);\n\n        if (this.settings.selectable) {\n            this.elementSelect.addItems($elements);\n        }\n\n        if (this.settings.sortable) {\n            this.elementSort.addItems($elements);\n        }\n\n        if (this.settings.editable) {\n            this._handleShowElementEditor = ev => {\n                var $element = $(ev.currentTarget);\n                if (Garnish.hasAttr($element, 'data-editable') && !$element.hasClass('disabled') && !$element.hasClass('loading')) {\n                    this.elementEditor = this.createElementEditor($element);\n                }\n            };\n\n            this.addListener($elements, 'dblclick', this._handleShowElementEditor);\n\n            if ($.isTouchCapable()) {\n                this.addListener($elements, 'taphold', this._handleShowElementEditor);\n            }\n        }\n\n        $elements.find('.delete').on('click dblclick', ev => {\n            this.removeElement($(ev.currentTarget).closest('.element'));\n            // Prevent this from acting as one of a double-click\n            ev.stopPropagation();\n        });\n\n        this.$elements = this.$elements.add($elements);\n        this.updateAddElementsBtn();\n    },\n\n    createElementEditor: function($element, settings) {\n        if (!settings) {\n            settings = {};\n        }\n        settings.prevalidate = this.settings.prevalidate;\n        return Craft.createElementEditor(this.settings.elementType, $element, settings);\n    },\n\n    removeElements: function($elements) {\n        if (this.settings.selectable) {\n            this.elementSelect.removeItems($elements);\n        }\n\n        if (this.modal) {\n            var ids = [];\n\n            for (var i = 0; i < $elements.length; i++) {\n                var id = $elements.eq(i).data('id');\n\n                if (id) {\n                    ids.push(id);\n                }\n            }\n\n            if (ids.length) {\n                this.modal.elementIndex.enableElementsById(ids);\n            }\n        }\n\n        // Disable the hidden input in case the form is submitted before this element gets removed from the DOM\n        $elements.children('input').prop('disabled', true);\n\n        this.$elements = this.$elements.not($elements);\n        this.updateAddElementsBtn();\n\n        this.onRemoveElements();\n    },\n\n    removeElement: function($element) {\n        this.removeElements($element);\n        this.animateElementAway($element, () => {\n            $element.remove();\n        });\n    },\n\n    animateElementAway: function($element, callback) {\n        $element.css('z-index', 0);\n\n        var animateCss = {\n            opacity: -1\n        };\n        animateCss['margin-' + Craft.left] = -($element.outerWidth() + parseInt($element.css('margin-' + Craft.right)));\n\n        if (this.settings.viewMode === 'list' || this.$elements.length === 0) {\n            animateCss['margin-bottom'] = -($element.outerHeight() + parseInt($element.css('margin-bottom')));\n        }\n\n        // Pause the draft editor\n        if (window.draftEditor) {\n            window.draftEditor.pause();\n        }\n\n        $element.velocity(animateCss, Craft.BaseElementSelectInput.REMOVE_FX_DURATION, () => {\n            callback();\n\n            // Resume the draft editor\n            if (window.draftEditor) {\n                window.draftEditor.resume();\n            }\n        });\n    },\n\n    showModal: function() {\n        // Make sure we haven't reached the limit\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        if (!this.modal) {\n            this.modal = this.createModal();\n        } else {\n            this.modal.show();\n        }\n    },\n\n    createModal: function() {\n        return Craft.createElementSelectorModal(this.settings.elementType, this.getModalSettings());\n    },\n\n    getModalSettings: function() {\n        return $.extend({\n            closeOtherModals: false,\n            storageKey: this.modalStorageKey,\n            sources: this.settings.sources,\n            criteria: this.settings.criteria,\n            multiSelect: (this.settings.limit != 1),\n            showSiteMenu: this.settings.showSiteMenu,\n            disabledElementIds: this.getDisabledElementIds(),\n            onSelect: this.onModalSelect.bind(this)\n        }, this.settings.modalSettings);\n    },\n\n    getSelectedElementIds: function() {\n        var ids = [];\n\n        for (var i = 0; i < this.$elements.length; i++) {\n            ids.push(this.$elements.eq(i).data('id'));\n        }\n\n        return ids;\n    },\n\n    getDisabledElementIds: function() {\n        var ids = this.getSelectedElementIds();\n\n        if (!this.settings.allowSelfRelations && this.settings.sourceElementId) {\n            ids.push(this.settings.sourceElementId);\n        }\n\n        if (this.settings.disabledElementIds) {\n            ids.push(...this.settings.disabledElementIds);\n        }\n\n        return ids;\n    },\n\n    onModalSelect: function(elements) {\n        if (this.settings.limit) {\n            // Cut off any excess elements\n            var slotsLeft = this.settings.limit - this.$elements.length;\n\n            if (elements.length > slotsLeft) {\n                elements = elements.slice(0, slotsLeft);\n            }\n        }\n\n        this.selectElements(elements);\n        this.updateDisabledElementsInModal();\n    },\n\n    selectElements: function(elements) {\n        for (let i = 0; i < elements.length; i++) {\n            let elementInfo = elements[i],\n                $element = this.createNewElement(elementInfo);\n\n            this.appendElement($element);\n            this.addElements($element);\n            this.animateElementIntoPlace(elementInfo.$element, $element);\n\n            // Override the element reference with the new one\n            elementInfo.$element = $element;\n        }\n\n        this.onSelectElements(elements);\n    },\n\n    createNewElement: function(elementInfo) {\n        var $element = elementInfo.$element.clone();\n\n        // Make a couple tweaks\n        Craft.setElementSize($element, (this.settings.viewMode === 'large' ? 'large' : 'small'));\n        $element.addClass('removable');\n        $element.prepend(`<input type=\"hidden\" name=\"${this.settings.name}${this.settings.single ? '' : '[]'}\" value=\"${elementInfo.id}\">` +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        return $element;\n    },\n\n    appendElement: function($element) {\n        $element.appendTo(this.$elementsContainer);\n    },\n\n    animateElementIntoPlace: function($modalElement, $inputElement) {\n        var origOffset = $modalElement.offset(),\n            destOffset = $inputElement.offset(),\n            $helper = $inputElement.clone().appendTo(Garnish.$bod);\n\n        $inputElement.css('visibility', 'hidden');\n\n        $helper.css({\n            position: 'absolute',\n            zIndex: 10000,\n            top: origOffset.top,\n            left: origOffset.left\n        });\n\n        var animateCss = {\n            top: destOffset.top,\n            left: destOffset.left\n        };\n\n        $helper.velocity(animateCss, Craft.BaseElementSelectInput.ADD_FX_DURATION, function() {\n            $helper.remove();\n            $inputElement.css('visibility', 'visible');\n        });\n    },\n\n    updateDisabledElementsInModal: function() {\n        if (this.modal.elementIndex) {\n            this.modal.elementIndex.disableElementsById(this.getDisabledElementIds());\n        }\n    },\n\n    getElementById: function(id) {\n        for (var i = 0; i < this.$elements.length; i++) {\n            var $element = this.$elements.eq(i);\n\n            if ($element.data('id') == id) {\n                return $element;\n            }\n        }\n    },\n\n    onSelectElements: function(elements) {\n        this.trigger('selectElements', {elements});\n        this.settings.onSelectElements(elements);\n\n        if (window.draftEditor) {\n            window.draftEditor.checkForm();\n        }\n    },\n\n    onRemoveElements: function() {\n        this.trigger('removeElements');\n        this.settings.onRemoveElements();\n    }\n}, {\n    ADD_FX_DURATION: 200,\n    REMOVE_FX_DURATION: 200,\n\n    defaults: {\n        id: null,\n        name: null,\n        fieldId: null,\n        elementType: null,\n        sources: null,\n        criteria: {},\n        allowSelfRelations: false,\n        sourceElementId: null,\n        disabledElementIds: null,\n        viewMode: 'list',\n        single: false,\n        limit: null,\n        showSiteMenu: false,\n        modalStorageKey: null,\n        modalSettings: {},\n        onSelectElements: $.noop,\n        onRemoveElements: $.noop,\n        sortable: true,\n        selectable: true,\n        editable: true,\n        prevalidate: false,\n        editorSettings: {}\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element selector modal class\n */\nCraft.BaseElementSelectorModal = Garnish.Modal.extend({\n    elementType: null,\n    elementIndex: null,\n\n    $body: null,\n    $selectBtn: null,\n    $sidebar: null,\n    $sources: null,\n    $sourceToggles: null,\n    $main: null,\n    $search: null,\n    $elements: null,\n    $tbody: null,\n    $primaryButtons: null,\n    $secondaryButtons: null,\n    $cancelBtn: null,\n    $footerSpinner: null,\n\n    init: function(elementType, settings) {\n        this.elementType = elementType;\n        this.setSettings(settings, Craft.BaseElementSelectorModal.defaults);\n\n        // Build the modal\n        var $container = $('<div class=\"modal elementselectormodal\"></div>').appendTo(Garnish.$bod),\n            $body = $('<div class=\"body\"><div class=\"spinner big\"></div></div>').appendTo($container),\n            $footer = $('<div class=\"footer\"/>').appendTo($container);\n\n        this.base($container, this.settings);\n\n        this.$footerSpinner = $('<div class=\"spinner hidden\"/>').appendTo($footer);\n        this.$primaryButtons = $('<div class=\"buttons right\"/>').appendTo($footer);\n        this.$secondaryButtons = $('<div class=\"buttons left secondary-buttons\"/>').appendTo($footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$primaryButtons);\n        this.$selectBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn disabled submit',\n            text: Craft.t('app', 'Select'),\n        }).appendTo(this.$primaryButtons);\n\n        this.$body = $body;\n\n        this.addListener(this.$cancelBtn, 'activate', 'cancel');\n        this.addListener(this.$selectBtn, 'activate', 'selectElements');\n    },\n\n    onFadeIn: function() {\n        if (!this.elementIndex) {\n            this._createElementIndex();\n        } else {\n            // Auto-focus the Search box\n            if (!Garnish.isMobileBrowser(true)) {\n                this.elementIndex.$search.trigger('focus');\n            }\n        }\n\n        this.base();\n    },\n\n    onSelectionChange: function() {\n        this.updateSelectBtnState();\n    },\n\n    updateSelectBtnState: function() {\n        if (this.$selectBtn) {\n            if (this.elementIndex.getSelectedElements().length) {\n                this.enableSelectBtn();\n            } else {\n                this.disableSelectBtn();\n            }\n        }\n    },\n\n    enableSelectBtn: function() {\n        this.$selectBtn.removeClass('disabled');\n    },\n\n    disableSelectBtn: function() {\n        this.$selectBtn.addClass('disabled');\n    },\n\n    enableCancelBtn: function() {\n        this.$cancelBtn.removeClass('disabled');\n    },\n\n    disableCancelBtn: function() {\n        this.$cancelBtn.addClass('disabled');\n    },\n\n    showFooterSpinner: function() {\n        this.$footerSpinner.removeClass('hidden');\n    },\n\n    hideFooterSpinner: function() {\n        this.$footerSpinner.addClass('hidden');\n    },\n\n    cancel: function() {\n        if (!this.$cancelBtn.hasClass('disabled')) {\n            this.hide();\n        }\n    },\n\n    selectElements: function() {\n        if (this.elementIndex && this.elementIndex.getSelectedElements().length) {\n            // TODO: This code shouldn't know about views' elementSelect objects\n            this.elementIndex.view.elementSelect.clearMouseUpTimeout();\n\n            var $selectedElements = this.elementIndex.getSelectedElements(),\n                elementInfo = this.getElementInfo($selectedElements);\n\n            this.onSelect(elementInfo);\n\n            if (this.settings.disableElementsOnSelect) {\n                this.elementIndex.disableElements(this.elementIndex.getSelectedElements());\n            }\n\n            if (this.settings.hideOnSelect) {\n                this.hide();\n            }\n        }\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $element = $($selectedElements[i]);\n            var elementInfo = Craft.getElementInfo($element);\n\n            info.push(elementInfo);\n        }\n\n        return info;\n    },\n\n    show: function() {\n        this.updateSelectBtnState();\n        this.base();\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo);\n    },\n\n    disable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.disable();\n        }\n\n        this.base();\n    },\n\n    enable: function() {\n        if (this.elementIndex) {\n            this.elementIndex.enable();\n        }\n\n        this.base();\n    },\n\n    _createElementIndex: function() {\n        // Get the modal body HTML based on the settings\n        var data = {\n            context: 'modal',\n            elementType: this.elementType,\n            sources: this.settings.sources\n        };\n\n        if (this.settings.showSiteMenu !== null && this.settings.showSiteMenu !== 'auto') {\n            data.showSiteMenu = this.settings.showSiteMenu ? '1' : '0';\n        }\n\n        Craft.postActionRequest('elements/get-modal-body', data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.$body.html(response.html);\n\n                if (this.$body.has('.sidebar:not(.hidden)').length) {\n                    this.$body.addClass('has-sidebar');\n                }\n\n                // Initialize the element index\n                this.elementIndex = Craft.createElementIndex(this.elementType, this.$body, {\n                    context: 'modal',\n                    modal: this,\n                    storageKey: this.settings.storageKey,\n                    criteria: this.settings.criteria,\n                    disabledElementIds: this.settings.disabledElementIds,\n                    selectable: true,\n                    multiSelect: this.settings.multiSelect,\n                    buttonContainer: this.$secondaryButtons,\n                    onSelectionChange: this.onSelectionChange.bind(this),\n                    hideSidebar: this.settings.hideSidebar,\n                    defaultSiteId: this.settings.defaultSiteId,\n                    defaultSource: this.settings.defaultSource\n                });\n\n                // Double-clicking or double-tapping should select the elements\n                this.addListener(this.elementIndex.$elements, 'doubletap', function(ev, touchData) {\n                    // Make sure the touch targets are the same\n                    // (they may be different if Command/Ctrl/Shift-clicking on multiple elements quickly)\n                    if (touchData.firstTap.target === touchData.secondTap.target) {\n                        this.selectElements();\n                    }\n                });\n            }\n        });\n    }\n}, {\n    defaults: {\n        resizable: true,\n        storageKey: null,\n        sources: null,\n        criteria: null,\n        multiSelect: false,\n        showSiteMenu: null,\n        disabledElementIds: [],\n        disableElementsOnSelect: false,\n        hideOnSelect: true,\n        onCancel: $.noop,\n        onSelect: $.noop,\n        hideSidebar: false,\n        defaultSiteId: null,\n        defaultSource: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Input Generator\n */\nCraft.BaseInputGenerator = Garnish.Base.extend({\n    $source: null,\n    $target: null,\n    $form: null,\n    settings: null,\n\n    listening: null,\n    timeout: null,\n\n    init: function(source, target, settings) {\n        this.$source = $(source);\n        this.$target = $(target);\n        this.$form = this.$source.closest('form');\n\n        this.setSettings(settings);\n\n        this.startListening();\n    },\n\n    setNewSource: function(source) {\n        var listening = this.listening;\n        this.stopListening();\n\n        this.$source = $(source);\n\n        if (listening) {\n            this.startListening();\n        }\n    },\n\n    startListening: function() {\n        if (this.listening) {\n            return;\n        }\n\n        this.listening = true;\n\n        this.addListener(this.$source, 'input', 'onSourceTextChange');\n        this.addListener(this.$target, 'input', 'onTargetTextChange');\n        this.addListener(this.$form, 'submit', 'onFormSubmit');\n    },\n\n    stopListening: function() {\n        if (!this.listening) {\n            return;\n        }\n\n        this.listening = false;\n\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.removeAllListeners(this.$source);\n        this.removeAllListeners(this.$target);\n        this.removeAllListeners(this.$form);\n    },\n\n    onSourceTextChange: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.timeout = setTimeout(this.updateTarget.bind(this), 250);\n    },\n\n    onTargetTextChange: function() {\n        if (this.$target.get(0) === document.activeElement) {\n            this.stopListening();\n        }\n    },\n\n    onFormSubmit: function() {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n\n        this.updateTarget();\n    },\n\n    updateTarget: function() {\n        if (!this.$target.is(':visible')) {\n            return;\n        }\n\n        var sourceVal = this.$source.val();\n\n        if (typeof sourceVal === 'undefined') {\n            // The source input may not exist anymore\n            return;\n        }\n\n        var targetVal = this.generateTargetValue(sourceVal);\n\n        this.$target.val(targetVal);\n\n        for (let i = 0; i < this.$target.length; i++) {\n            this.$target[i].dispatchEvent(new InputEvent('input', {\n                inputType: 'insertText',\n            }));\n            this.$target[i].dispatchEvent(new Event('input'));\n        }\n\n        // If the target already has focus, select its whole value to mimic\n        // the behavior if the value had already been generated and they just tabbed in\n        if (this.$target.is(':focus')) {\n            Craft.selectFullValue(this.$target);\n        }\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return sourceVal;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tab manager\n */\nCraft.Tabs = Garnish.Base.extend({\n    $container: null,\n    $ul: null,\n    $menuBtn: null,\n    $tabs: null,\n    $selectedTab: null,\n    $focusableTab: null,\n    menu: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$ul = this.$container.find('> ul:first');\n        this.$tabs = this.$ul.find('> li > a');\n        this.$selectedTab = this.$tabs.filter('.sel:first');\n        this.$focusableTab = this.$tabs.filter('[tabindex=0]:first');\n        this.$menuBtn = this.$container.find('> .menubtn:first').menubtn();\n        this.menu = this.$menuBtn.data('menubtn').menu;\n\n        // Is there already a tab manager?\n        if (this.$container.data('tabs')) {\n            Garnish.log('Double-instantiating a tab manager on an element');\n            this.$container.data('tabs').destroy();\n        }\n\n        this.$container.data('tabs', this);\n\n        for (let i = 0; i < this.$tabs.length; i++) {\n            const $a = this.$tabs.eq(i);\n\n            // Does it link to an anchor?\n            const href = $a.attr('href');\n            if (href && href.charAt(0) === '#') {\n                this.addListener($a, 'keydown', ev => {\n                    if ([Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                        ev.preventDefault();\n                        this.selectTab(ev.currentTarget);\n                    }\n                });\n                this.addListener($a, 'click', ev => {\n                    ev.preventDefault();\n                    const $a = $(ev.currentTarget);\n                    this.selectTab(ev.currentTarget);\n                    this.makeTabFocusable(ev.currentTarget);\n                });\n\n                if (href.substr(1) === window.LOCATION_HASH) {\n                    $initialTab = $a;\n                }\n            }\n\n            this.addListener($a, 'keydown', ev => {\n                if (\n                    [Garnish.LEFT_KEY, Garnish.RIGHT_KEY].includes(ev.keyCode) &&\n                    $.contains(this.$ul[0], ev.currentTarget)\n                ) {\n                    let $tab;\n                    if (ev.keyCode === (Craft.orientation === 'ltr' ? Garnish.LEFT_KEY : Garnish.RIGHT_KEY)) {\n                        $tab = $(ev.currentTarget).parent().prev('li').children('a');\n                    } else {\n                        $tab = $(ev.currentTarget).parent().next('li').children('a');\n                    }\n                    if ($tab.length) {\n                        ev.preventDefault();\n                        this.makeTabFocusable($tab);\n                        $tab.focus();\n                        this.scrollToTab($tab);\n                    }\n                }\n            });\n        }\n\n        this.updateMenuBtn();\n\n        Garnish.$win.on('resize', () => {\n            this.updateMenuBtn();\n        });\n\n        // Prevent menu options from updating the URL\n        this.menu.$options.on('click', ev => {\n            const $option = $(ev.currentTarget);\n            if ($option.attr('href').charAt(0) === '#') {\n                ev.preventDefault();\n            }\n        });\n\n        this.menu.on('optionselect', ev => {\n            this.selectTab($(ev.selectedOption).data('id'))\n        });\n    },\n\n    selectTab: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$selectedTab[0]) {\n            return;\n        }\n\n        this.deselectTab();\n        this.$selectedTab = $tab.addClass('sel');\n        this.makeTabFocusable($tab);\n        this.scrollToTab($tab);\n\n        this.menu.$options.removeClass('sel');\n        this.menu.$options.filter(`[data-id=\"${$tab.data('id')}\"]`).addClass('sel');\n\n        this.trigger('selectTab', {\n            $tab: $tab,\n        });\n    },\n\n    deselectTab: function() {\n        const $tab = this.$selectedTab.removeClass('sel');\n        this.$selectedTab = null;\n\n        this.trigger('deselectTab', {\n            $tab: $tab,\n        });\n    },\n\n    makeTabFocusable: function(tab) {\n        const $tab = this._getTab(tab);\n\n        if ($tab[0] === this.$focusableTab[0]) {\n            return;\n        }\n\n        this.$focusableTab.attr('tabindex', '-1');\n        this.$focusableTab = $tab.attr('tabindex', '0');\n    },\n\n    scrollToTab: function(tab) {\n        const $tab = this._getTab(tab);\n        const scrollLeft = this.$ul.scrollLeft();\n        const tabOffset = $tab.offset().left;\n        const elemScrollOffset = tabOffset - this.$ul.offset().left;\n        let targetScrollLeft = false;\n\n        // Is the tab hidden on the left?\n        if (elemScrollOffset < 0) {\n            targetScrollLeft = scrollLeft + elemScrollOffset - 24;\n        } else {\n            const tabWidth = $tab.outerWidth();\n            const ulWidth = this.$ul.prop('clientWidth');\n\n            // Is it hidden to the right?\n            if (elemScrollOffset + tabWidth > ulWidth) {\n                targetScrollLeft = scrollLeft + (elemScrollOffset - (ulWidth - tabWidth)) + 24;\n            }\n        }\n\n        if (targetScrollLeft !== false) {\n            this.$ul.scrollLeft(targetScrollLeft);\n        }\n    },\n\n    updateMenuBtn: function() {\n        if (Math.floor(this.$ul.prop('scrollWidth') - 48) > this.$container.prop('clientWidth')) {\n            this.$ul.addClass('scrollable');\n            this.$menuBtn.removeClass('hidden');\n        } else {\n            this.$ul.removeClass('scrollable');\n            this.$menuBtn.addClass('hidden');\n        }\n    },\n\n    _getTab: function(tab) {\n        if (tab instanceof jQuery) {\n            return tab;\n        }\n\n        if (tab instanceof HTMLElement) {\n            return $(tab);\n        }\n\n        if (typeof tab !== 'string') {\n            throw 'Invalid tab ID';\n        }\n\n        const $tab = this.$tabs.filter(`[data-id=\"${tab}\"]`);\n\n        if (!$tab.length) {\n            throw `Invalid tab ID: ${tab}`;\n        }\n\n        return $tab;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Admin table class\n */\nCraft.AdminTable = Garnish.Base.extend({\n    settings: null,\n    totalItems: null,\n    sorter: null,\n\n    $noItems: null,\n    $table: null,\n    $tbody: null,\n    $deleteBtns: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.AdminTable.defaults);\n\n        if (!this.settings.allowDeleteAll) {\n            this.settings.minItems = 1;\n        }\n\n        this.$noItems = $(this.settings.noItemsSelector);\n        this.$table = $(this.settings.tableSelector);\n        this.$tbody = this.$table.children('tbody');\n        this.totalItems = this.$tbody.children().length;\n\n        if (this.settings.sortable) {\n            this.sorter = new Craft.DataTableSorter(this.$table, {\n                onSortChange: this.reorderItems.bind(this),\n            });\n        }\n\n        this.$deleteBtns = this.$table.find('.delete:not(.disabled)');\n        this.addListener(this.$deleteBtns, 'click', 'handleDeleteBtnClick');\n\n        this.updateUI();\n    },\n\n    addRow: function(row) {\n        if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(row).appendTo(this.$tbody),\n            $deleteBtn = $row.find('.delete');\n\n        if (this.settings.sortable) {\n            this.sorter.addItems($row);\n        }\n\n        this.$deleteBtns = this.$deleteBtns.add($deleteBtn);\n\n        this.addListener($deleteBtn, 'click', 'handleDeleteBtnClick');\n        this.totalItems++;\n\n        this.updateUI();\n    },\n\n    reorderItems: function() {\n        if (!this.settings.sortable) {\n            return;\n        }\n\n        // Get the new field order\n        var ids = [];\n\n        for (var i = 0; i < this.sorter.$items.length; i++) {\n            var id = $(this.sorter.$items[i]).attr(this.settings.idAttribute);\n            ids.push(id);\n        }\n\n        // Send it to the server\n        var data = {\n            ids: JSON.stringify(ids)\n        };\n\n        Craft.postActionRequest(this.settings.reorderAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.onReorderItems(ids);\n                    Craft.cp.displayNotice(Craft.t('app', this.settings.reorderSuccessMessage));\n                } else {\n                    Craft.cp.displayError(Craft.t('app', this.settings.reorderFailMessage));\n                }\n            }\n        });\n    },\n\n    handleDeleteBtnClick: function(event) {\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            // Sorry pal.\n            return;\n        }\n\n        var $row = $(event.target).closest('tr');\n\n        if (this.confirmDeleteItem($row)) {\n            this.deleteItem($row);\n        }\n    },\n\n    confirmDeleteItem: function($row) {\n        var name = this.getItemName($row);\n        return confirm(Craft.t('app', this.settings.confirmDeleteMessage, {name}));\n    },\n\n    deleteItem: function($row) {\n        var data = {\n            id: this.getItemId($row)\n        };\n\n        Craft.postActionRequest(this.settings.deleteAction, data, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.handleDeleteItemResponse(response, $row);\n            }\n        });\n    },\n\n    handleDeleteItemResponse: function(response, $row) {\n        var id = this.getItemId($row),\n            name = this.getItemName($row);\n\n        if (response.success) {\n            if (this.sorter) {\n                this.sorter.removeItems($row);\n            }\n\n            $row.remove();\n            this.totalItems--;\n            this.updateUI();\n            this.onDeleteItem(id);\n\n            Craft.cp.displayNotice(Craft.t('app', this.settings.deleteSuccessMessage, {name}));\n        } else {\n            Craft.cp.displayError(Craft.t('app', this.settings.deleteFailMessage, {name}));\n        }\n    },\n\n    onReorderItems: function(ids) {\n        this.settings.onReorderItems(ids);\n    },\n\n    onDeleteItem: function(id) {\n        this.settings.onDeleteItem(id);\n    },\n\n    getItemId: function($row) {\n        return $row.attr(this.settings.idAttribute);\n    },\n\n    getItemName: function($row) {\n        return Craft.escapeHtml($row.attr(this.settings.nameAttribute));\n    },\n\n    updateUI: function() {\n        // Show the \"No Whatever Exists\" message if there aren't any\n        if (this.totalItems === 0) {\n            this.$table.hide();\n            this.$noItems.removeClass('hidden');\n        } else {\n            this.$table.show();\n            this.$noItems.addClass('hidden');\n        }\n\n        // Disable the sort buttons if there's only one row\n        if (this.settings.sortable) {\n            var $moveButtons = this.$table.find('.move');\n\n            if (this.totalItems === 1) {\n                $moveButtons.addClass('disabled');\n            } else {\n                $moveButtons.removeClass('disabled');\n            }\n        }\n\n        // Disable the delete buttons if we've reached the minimum items\n        if (this.settings.minItems && this.totalItems <= this.settings.minItems) {\n            this.$deleteBtns.addClass('disabled');\n        } else {\n            this.$deleteBtns.removeClass('disabled');\n        }\n\n        // Hide the New Whatever button if we've reached the maximum items\n        if (this.settings.newItemBtnSelector) {\n            if (this.settings.maxItems && this.totalItems >= this.settings.maxItems) {\n                $(this.settings.newItemBtnSelector).addClass('hidden');\n            } else {\n                $(this.settings.newItemBtnSelector).removeClass('hidden');\n            }\n        }\n    }\n}, {\n    defaults: {\n        tableSelector: null,\n        noItemsSelector: null,\n        newItemBtnSelector: null,\n        idAttribute: 'data-id',\n        nameAttribute: 'data-name',\n        sortable: false,\n        allowDeleteAll: true,\n        minItems: 0,\n        maxItems: null,\n        reorderAction: null,\n        deleteAction: null,\n        reorderSuccessMessage: Craft.t('app', 'New order saved.'),\n        reorderFailMessage: Craft.t('app', 'Couldn’t save new order.'),\n        confirmDeleteMessage: Craft.t('app', 'Are you sure you want to delete “{name}”?'),\n        deleteSuccessMessage: Craft.t('app', '“{name}” deleted.'),\n        deleteFailMessage: Craft.t('app', 'Couldn’t delete “{name}”.'),\n        onReorderItems: $.noop,\n        onDeleteItem: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetEditor = Craft.BaseElementEditor.extend({\n    $filenameInput: null,\n\n    originalBasename: null,\n    originalExtension: null,\n    reloadIndex: false,\n\n    init: function(element, settings) {\n        this.on('updateForm', () => {\n            this.addListener(this.$sidebar.find('.preview-thumb-container.editable'), 'click', 'showImageEditor');\n\n            this.$filenameInput = this.$sidebar.find('.filename');\n            this.addListener(this.$filenameInput, 'focus', 'selectFilename');\n        });\n\n        this.on('closeSlideout', () => {\n            if (this.reloadIndex) {\n                if (this.settings.elementIndex) {\n                    this.settings.elementIndex.updateElements();\n                } else if (this.settings.input) {\n                    this.settings.input.refreshThumbnail(this.$element.data('id'));\n                }\n            }\n        });\n\n        this.base(element, settings);\n\n        this.settings.validators.push(() => this.validateExtension());\n    },\n\n    showImageEditor: function() {\n        new Craft.AssetImageEditor(this.$element.data('id'), {\n            onSave: () => {\n                this.reloadIndex = true;\n                this.load();\n            },\n        });\n    },\n\n    selectFilename: function() {\n        if (typeof this.$filenameInput[0].selectionStart === 'undefined') {\n            return;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (this.originalBasename === null) {\n            this.originalBasename = basename;\n            this.originalExtension = extension;\n        }\n\n        this.$filenameInput[0].selectionStart = 0;\n        this.$filenameInput[0].selectionEnd = basename.length;\n\n        // Prevent the selection from changing by the mouseup event\n        this.$filenameInput.one('mouseup.keepselection', ev => {\n            ev.preventDefault();\n        });\n        setTimeout(() => {\n            this.$filenameInput.off('mouseup.keepselection');\n        }, 500);\n    },\n\n    validateExtension: function() {\n        if (this.originalBasename === null) {\n            return true;\n        }\n\n        const {basename, extension} = this._parseFilename();\n\n        if (extension === this.originalExtension) {\n            return true;\n        }\n\n        // No extension?\n        if (!extension) {\n            // If filename changed as well, assume removal of extension a mistake\n            if (this.originalFilename !== basename) {\n                this.$filenameInput.val(`${Craft.rtrim(basename, '.')}.${this.originalExtension}`);\n                return true;\n            }\n\n            // If filename hasn't changed, make sure they want to remove extension\n            return confirm(Craft.t('app', 'Are you sure you want to remove the extension “.{ext}”?', {\n                ext: this.originalExtension,\n            }));\n        }\n\n        // If the extension has changed, make sure it's intentional\n        return confirm(Craft.t('app', 'Are you sure you want to change the extension from “.{oldExt}” to “.{newExt}”?', {\n            oldExt: this.originalExtension,\n            newExt: extension\n        }));\n    },\n\n    _parseFilename: function() {\n        const parts = this.$filenameInput.val().split('.');\n        const extension = parts.length > 1 ? parts.pop() : null;\n        const basename = parts.join('.');\n        return {basename, extension};\n    },\n});\n\n// Register it!\nCraft.registerElementEditorClass('craft\\\\elements\\\\Asset', Craft.AssetEditor);\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Asset image editor class\n */\n\nCraft.AssetImageEditor = Garnish.Modal.extend({\n    // jQuery objects\n    $body: null,\n    $footer: null,\n    $imageTools: null,\n    $buttons: null,\n    $cancelBtn: null,\n    $replaceBtn: null,\n    $saveBtn: null,\n    $editorContainer: null,\n    $straighten: null,\n    $croppingCanvas: null,\n    $spinnerCanvas: null,\n\n    // FabricJS objects\n    canvas: null,\n    image: null,\n    viewport: null,\n    focalPoint: null,\n    grid: null,\n    croppingCanvas: null,\n    clipper: null,\n    croppingRectangle: null,\n    cropperHandles: null,\n    cropperGrid: null,\n    croppingShade: null,\n    croppingAreaText: null,\n\n    // Image state attributes\n    imageStraightenAngle: 0,\n    viewportRotation: 0,\n    originalWidth: 0,\n    originalHeight: 0,\n    imageVerticeCoords: null,\n    zoomRatio: 1,\n\n    // Editor state attributes\n    animationInProgress: false,\n    currentView: '',\n    assetId: null,\n    cacheBust: null,\n    draggingCropper: false,\n    scalingCropper: false,\n    draggingFocal: false,\n    previousMouseX: 0,\n    previousMouseY: 0,\n    shiftKeyHeld: false,\n    editorHeight: 0,\n    editorWidth: 0,\n    cropperState: false,\n    scaleFactor: 1,\n    flipData: {},\n    focalPointState: false,\n    spinnerInterval: null,\n    maxImageSize: null,\n    lastLoadedDimensions: null,\n    imageIsLoading: false,\n    mouseMoveEvent: null,\n    croppingConstraint: false,\n    constraintOrientation: 'landscape',\n    showingCustomConstraint: false,\n\n    // Rendering proxy functions\n    renderImage: null,\n    renderCropper: null,\n\n    init: function(assetId, settings) {\n        this.cacheBust = Date.now();\n\n        this.setSettings(settings, Craft.AssetImageEditor.defaults);\n\n        if (this.settings.allowDegreeFractions === null) {\n            this.settings.allowDegreeFractions = Craft.isImagick;\n        }\n\n        this.assetId = assetId;\n        this.flipData = {x: 0, y: 0};\n\n        // Build the modal\n        this.$container = $('<form class=\"modal fitted imageeditor\"></form>').appendTo(Garnish.$bod);\n        this.$body = $('<div class=\"body\"></div>').appendTo(this.$container);\n        this.$footer = $('<div class=\"footer\"/>').appendTo(this.$container);\n\n        this.base(this.$container, this.settings);\n\n        this.$buttons = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn cancel',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$buttons);\n        this.$replaceBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit save replace',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$buttons);\n\n        if (this.settings.allowSavingAsNew) {\n            this.$saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit save copy',\n                text: Craft.t('app', 'Save as a new asset'),\n            }).appendTo(this.$buttons);\n            this.addListener(this.$saveBtn, 'activate', this.saveImage);\n        }\n\n        this.addListener(this.$replaceBtn, 'activate', this.saveImage);\n        this.addListener(this.$cancelBtn, 'activate', this.hide);\n        this.removeListener(this.$shade, 'click');\n\n        this.maxImageSize = this.getMaxImageSize();\n\n        Craft.postActionRequest('assets/image-editor', {assetId}, this.loadEditor.bind(this));\n    },\n\n    /**\n     * Get the max image size that is viewable in the editor currently\n     */\n    getMaxImageSize: function() {\n        var browserViewportWidth = Garnish.$doc.get(0).documentElement.clientWidth;\n        var browserViewportHeight = Garnish.$doc.get(0).documentElement.clientHeight;\n\n        return Math.max(browserViewportHeight, browserViewportWidth) * (window.devicePixelRatio > 1 ? 2 : 1);\n    },\n\n    /**\n     * Load the editor markup and start loading components and the image.\n     *\n     * @param data\n     */\n    loadEditor: function(data) {\n        if (!data.html) {\n            alert(Craft.t('app', 'Could not load the image editor.'));\n        }\n\n        this.$body.html(data.html);\n        this.$tabs = $('.tabs li', this.$body);\n        this.$viewsContainer = $('.views', this.$body);\n        this.$views = $('> div', this.$viewsContainer);\n        this.$imageTools = $('.image-container .image-tools', this.$body);\n        this.$editorContainer = $('.image-container .image', this.$body);\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this._showSpinner();\n\n        this.updateSizeAndPosition();\n\n        // Load the canvas on which we'll host our image and set up the proxy render function\n        this.canvas = new fabric.StaticCanvas('image-canvas');\n\n        // Set up the cropping canvas jquery element for tracking all the nice events\n        this.$croppingCanvas = $('#cropping-canvas', this.$editorContainer);\n        this.$croppingCanvas.width(this.editorWidth);\n        this.$croppingCanvas.height(this.editorHeight);\n\n        this.canvas.enableRetinaScaling = true;\n        this.renderImage = () => {\n            Garnish.requestAnimationFrame(this.canvas.renderAll.bind(this.canvas));\n        };\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        // Load image and set up the initial properties\n        fabric.Image.fromURL(imageUrl, imageObject => {\n            this.image = imageObject;\n            this.image.set({\n                originX: 'center',\n                originY: 'center',\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            });\n            this.canvas.add(this.image);\n\n            this.originalHeight = this.image.getHeight();\n            this.originalWidth = this.image.getWidth();\n            this.zoomRatio = 1;\n\n            this.lastLoadedDimensions = this.getScaledImageDimensions();\n\n            // Set up the image bounding box, viewport and position everything\n            this._setFittedImageVerticeCoordinates();\n            this._repositionEditorElements();\n\n            // Set up the focal point\n            var focalState = {\n                imageDimensions: this.getScaledImageDimensions(),\n                offsetX: 0,\n                offsetY: 0\n            };\n\n            var focal = false;\n            if (data.focalPoint) {\n                // Transform the focal point coordinates from relative to absolute\n                var focalData = data.focalPoint;\n\n                // Resolve for the current image dimensions.\n                var adjustedX = focalState.imageDimensions.width * focalData.x;\n                var adjustedY = focalState.imageDimensions.height * focalData.y;\n\n                focalState.offsetX = adjustedX - focalState.imageDimensions.width / 2;\n                focalState.offsetY = adjustedY - focalState.imageDimensions.height / 2;\n\n                focal = true;\n            }\n\n            this.storeFocalPointState(focalState);\n\n            if (focal) {\n                this._createFocalPoint();\n            }\n\n            this._createViewport();\n            this.storeCropperState();\n\n            // Add listeners to buttons\n            this._addControlListeners();\n\n            // Add mouse event listeners\n            this.addListener(this.$croppingCanvas, 'mousemove,touchmove', this._handleMouseMove);\n            this.addListener(this.$croppingCanvas, 'mousedown,touchstart', this._handleMouseDown);\n            this.addListener(this.$croppingCanvas, 'mouseup,touchend', this._handleMouseUp);\n            this.addListener(this.$croppingCanvas, 'mouseout,touchcancel', this._handleMouseOut);\n\n            this._hideSpinner();\n\n            // Render it, finally\n            this.renderImage();\n\n            // Make sure verything gets fired for the first tab\n            this.$tabs.first().trigger('click');\n        });\n    },\n\n    /**\n     * Reload the image to better fit the current available image editor viewport.\n     */\n    _reloadImage: function() {\n        if (this.imageIsLoading) {\n            return;\n        }\n\n        this.imageIsLoading = true;\n        this.maxImageSize = this.getMaxImageSize();\n\n        // Load the image from URL\n        var imageUrl = Craft.getActionUrl('assets/edit-image', {\n            assetId: this.assetId,\n            size: this.maxImageSize,\n            cacheBust: this.cacheBust\n        });\n\n        this.image.setSrc(imageUrl, imageObject => {\n            this.originalHeight = imageObject.getHeight();\n            this.originalWidth = imageObject.getWidth();\n            this.lastLoadedDimensions = {width: this.originalHeight, height: this.originalWidth};\n            this.updateSizeAndPosition();\n            this.renderImage();\n            this.imageIsLoading = false;\n        });\n    },\n\n    /**\n     * Update the modal size and position on browser resize\n     */\n    updateSizeAndPosition: function() {\n        if (!this.$container) {\n            return;\n        }\n\n        // Fullscreen modal\n        var innerWidth = window.innerWidth;\n        var innerHeight = window.innerHeight;\n\n        this.$container.css({\n            'width': innerWidth,\n            'min-width': innerWidth,\n            'left': 0,\n\n            'height': innerHeight,\n            'min-height': innerHeight,\n            'top': 0\n        });\n\n        this.$body.css({\n            'height': innerHeight - 62\n        });\n\n        if (innerWidth < innerHeight) {\n            this.$container.addClass('vertical');\n        } else {\n            this.$container.removeClass('vertical');\n        }\n\n        if (this.$spinnerCanvas) {\n            this.$spinnerCanvas.css({\n                left: ((this.$spinnerCanvas.parent().width() / 2) - (this.$spinnerCanvas.width() / 2)) + 'px',\n                top: ((this.$spinnerCanvas.parent().height() / 2) - (this.$spinnerCanvas.height() / 2)) + 'px'\n            });\n        }\n\n        // If image is already loaded, make sure it looks pretty.\n        if (this.$editorContainer && this.image) {\n            this._repositionEditorElements();\n        }\n    },\n\n    /**\n     * Reposition the editor elements to accurately reflect the editor state with current dimensions\n     */\n    _repositionEditorElements: function() {\n        // Remember what the dimensions were before the resize took place\n        var previousEditorDimensions = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        this.editorHeight = this.$editorContainer.innerHeight();\n        this.editorWidth = this.$editorContainer.innerWidth();\n\n        this.canvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        var currentScaledDimensions = this.getScaledImageDimensions();\n\n        // If we're cropping now, we have to reposition the cropper correctly in case\n        // the area for image changes, forcing the image size to change as well.\n        if (this.currentView === 'crop') {\n            this.zoomRatio = this.getZoomToFitRatio(this.getScaledImageDimensions());\n            var previouslyOccupiedArea = this._getBoundingRectangle(this.imageVerticeCoords);\n            this._setFittedImageVerticeCoordinates();\n            this._repositionCropper(previouslyOccupiedArea);\n        } else {\n            // Otherwise just recalculate the image zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n        }\n\n        // Reposition the image relatively to the previous editor dimensions.\n        this._repositionImage(previousEditorDimensions);\n        this._repositionViewport();\n        this._repositionFocalPoint(previousEditorDimensions);\n        this._zoomImage();\n\n        this.renderImage();\n\n        if (currentScaledDimensions.width / this.lastLoadedDimensions.width > 1.5 || currentScaledDimensions.height / this.lastLoadedDimensions.height > 1.5) {\n            this._reloadImage();\n        }\n    },\n\n    /**\n     * Reposition image based on how the editor dimensions have changed.\n     * This ensures keeping the image center offset, if there is any.\n     *\n     * @param previousEditorDimensions\n     */\n    _repositionImage: function(previousEditorDimensions) {\n        this.image.set({\n            left: this.image.left - (previousEditorDimensions.width - this.editorWidth) / 2,\n            top: this.image.top - (previousEditorDimensions.height - this.editorHeight) / 2\n        });\n    },\n\n    /**\n     * Create the viewport for image editor.\n     */\n    _createViewport: function() {\n        this.viewport = new fabric.Rect({\n            width: this.image.width,\n            height: this.image.height,\n            fill: 'rgba(127,0,0,1)',\n            originX: 'center',\n            originY: 'center',\n            globalCompositeOperation: 'destination-in', // This clips everything outside of the viewport\n            left: this.image.left,\n            top: this.image.top\n        });\n        this.canvas.add(this.viewport);\n        this.renderImage();\n    },\n\n    /**\n     * Create the focal point.\n     */\n    _createFocalPoint: function() {\n        var focalPointState = this.focalPointState;\n        var sizeFactor = this.getScaledImageDimensions().width / focalPointState.imageDimensions.width;\n\n        var focalX = focalPointState.offsetX * sizeFactor * this.zoomRatio * this.scaleFactor;\n        var focalY = focalPointState.offsetY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n        // Adjust by image margins\n        focalX += this.image.left;\n        focalY += this.image.top;\n\n        var deltaX = 0;\n        var deltaY = 0;\n\n        // When creating a fresh focal point, drop it dead in the center of the viewport, not the image.\n        if (this.viewport && focalPointState.offsetX === 0 && focalPointState.offsetY === 0) {\n            if (this.currentView !== 'crop') {\n                deltaX = this.viewport.left - this.image.left;\n                deltaY = this.viewport.top - this.image.top;\n            } else {\n                // Unless we have a cropper showing, in which case drop it in the middle of the cropper\n                deltaX = this.clipper.left - this.image.left;\n                deltaY = this.clipper.top - this.image.top;\n            }\n\n            // Bump focal to middle of viewport\n            focalX += deltaX;\n            focalY += deltaY;\n\n            // Reflect changes in saved state\n            focalPointState.offsetX += deltaX / (sizeFactor * this.zoomRatio * this.scaleFactor);\n            focalPointState.offsetY += deltaY / (sizeFactor * this.zoomRatio * this.scaleFactor);\n        }\n\n        this.focalPoint = new fabric.Group([\n            new fabric.Circle({radius: 8, fill: 'rgba(0,0,0,0.5)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'}),\n            new fabric.Circle({radius: 1, fill: 'rgba(255,255,255,0)', strokeWidth: 2, stroke: 'rgba(255,255,255,0.8)', left: 0, top: 0, originX: 'center', originY: 'center'})\n        ], {\n            originX: 'center',\n            originY: 'center',\n            left: focalX,\n            top: focalY\n        });\n\n        this.storeFocalPointState(focalPointState);\n        this.canvas.add(this.focalPoint);\n    },\n\n    /**\n     * Toggle focal point\n     */\n    toggleFocalPoint: function() {\n        if (!this.focalPoint) {\n            this._createFocalPoint();\n        } else {\n            this.canvas.remove(this.focalPoint);\n            this.focalPoint = null;\n        }\n\n        this.renderImage();\n    },\n\n    /**\n     * Reposition the viewport to handle editor resizing.\n     */\n    _repositionViewport: function() {\n        if (this.viewport) {\n            var dimensions = {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2\n            };\n\n            // If we're cropping, nothing exciting happens for the viewport\n            if (this.currentView === 'crop') {\n                dimensions.width = this.editorWidth;\n                dimensions.height = this.editorHeight;\n            } else {\n                // If this is the first initial reposition, no cropper state yet\n                if (this.cropperState) {\n                    // Recall the state\n                    var state = this.cropperState;\n\n                    var scaledImageDimensions = this.getScaledImageDimensions();\n                    // Make sure we have the correct current image size\n                    var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n                    // Set the viewport dimensions\n                    dimensions.width = state.width * sizeFactor * this.zoomRatio;\n                    dimensions.height = state.height * sizeFactor * this.zoomRatio;\n\n                    // Adjust the image position to show the correct part of the image in the viewport\n                    this.image.set({\n                        left: (this.editorWidth / 2) - (state.offsetX * sizeFactor),\n                        top: (this.editorHeight / 2) - (state.offsetY * sizeFactor)\n                    });\n                } else {\n                    $.extend(dimensions, this.getScaledImageDimensions());\n                }\n            }\n            this.viewport.set(dimensions);\n        }\n    },\n\n    _repositionFocalPoint: function(previousEditorDimensions) {\n        if (this.focalPoint) {\n            var offsetX = this.focalPoint.left - this.editorWidth / 2;\n            var offsetY = this.focalPoint.top - this.editorHeight / 2;\n\n            var currentWidth = this.image.width;\n            var newWidth = this.getScaledImageDimensions().width * this.zoomRatio;\n            var ratio = newWidth / currentWidth / this.scaleFactor;\n\n            offsetX -= (previousEditorDimensions.width - this.editorWidth) / 2;\n            offsetY -= (previousEditorDimensions.height - this.editorHeight) / 2;\n\n            offsetX *= ratio;\n            offsetY *= ratio;\n\n            this.focalPoint.set({\n                left: this.editorWidth / 2 + offsetX,\n                top: this.editorHeight / 2 + offsetY\n            });\n        }\n    },\n\n    /**\n     * Return true if the image orientation has changed\n     */\n    hasOrientationChanged: function() {\n        return this.viewportRotation % 180 !== 0;\n    },\n\n    /**\n     * Return the current image dimensions that would be used in the current image area with no straightening or rotation applied.\n     */\n    getScaledImageDimensions: function() {\n        if (typeof this.getScaledImageDimensions._ === 'undefined') {\n            this.getScaledImageDimensions._ = {};\n        }\n\n        this.getScaledImageDimensions._.imageRatio = this.originalHeight / this.originalWidth;\n        this.getScaledImageDimensions._.editorRatio = this.editorHeight / this.editorWidth;\n\n        this.getScaledImageDimensions._.dimensions = {};\n        if (this.getScaledImageDimensions._.imageRatio > this.getScaledImageDimensions._.editorRatio) {\n            this.getScaledImageDimensions._.dimensions.height = Math.min(this.editorHeight, this.originalHeight);\n            this.getScaledImageDimensions._.dimensions.width = Math.round(this.originalWidth / (this.originalHeight / this.getScaledImageDimensions._.dimensions.height));\n        } else {\n            this.getScaledImageDimensions._.dimensions.width = Math.min(this.editorWidth, this.originalWidth);\n            this.getScaledImageDimensions._.dimensions.height = Math.round(this.originalHeight * (this.getScaledImageDimensions._.dimensions.width / this.originalWidth));\n        }\n\n        return this.getScaledImageDimensions._.dimensions;\n    },\n\n    /**\n     * Set the image dimensions to reflect the current zoom ratio.\n     */\n    _zoomImage: function() {\n        if (typeof this._zoomImage._ === 'undefined') {\n            this._zoomImage._ = {};\n        }\n\n        this._zoomImage._.imageDimensions = this.getScaledImageDimensions();\n        this.image.set({\n            width: this._zoomImage._.imageDimensions.width * this.zoomRatio,\n            height: this._zoomImage._.imageDimensions.height * this.zoomRatio\n        });\n    },\n\n    /**\n     * Set up listeners for the controls.\n     */\n    _addControlListeners: function() {\n        // Tabs\n        this.addListener(this.$tabs, 'click', this._handleTabClick);\n\n        // Focal point\n        this.addListener($('.focal-point'), 'click', this.toggleFocalPoint);\n\n        // Rotate controls\n        this.addListener($('.rotate-left'), 'click', function() {\n            this.rotateImage(-90);\n        });\n        this.addListener($('.rotate-right'), 'click', function() {\n            this.rotateImage(90);\n        });\n        this.addListener($('.flip-vertical'), 'click', function() {\n            this.flipImage('y');\n        });\n        this.addListener($('.flip-horizontal'), 'click', function() {\n            this.flipImage('x');\n        });\n\n        // Straighten slider\n        this.straighteningInput = new Craft.SlideRuleInput(\"slide-rule\", {\n            onStart: () => {\n                this._showGrid();\n            },\n            onChange: slider => {\n                this.straighten(slider);\n            },\n            onEnd: () => {\n                this._hideGrid();\n                this._cleanupFocalPointAfterStraighten();\n            },\n        });\n\n        // Cropper scale modifier key\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = true;\n            }\n        });\n        this.addListener(Garnish.$doc, 'keyup', function(ev) {\n            if (ev.keyCode === Garnish.SHIFT_KEY) {\n                this.shiftKeyHeld = false;\n            }\n        });\n\n        this.addListener($('.constraint-buttons .constraint', this.$container), 'click', this._handleConstraintClick);\n        this.addListener($('.orientation input', this.$container), 'click', this._handleOrientationClick);\n        this.addListener($('.constraint-buttons .custom-input input', this.$container), 'keyup', this._applyCustomConstraint);\n    },\n\n    /**\n     * Handle a constraint button click.\n     *\n     * @param ev\n     */\n    _handleConstraintClick: function(ev) {\n        var constraint = $(ev.currentTarget).data('constraint');\n        var $target = $(ev.currentTarget);\n        $target.siblings().removeClass('active');\n        $target.addClass('active');\n\n        if (constraint == 'custom') {\n            this._showCustomConstraint();\n            this._applyCustomConstraint();\n            return;\n        }\n\n        this._hideCustomConstraint();\n\n        this.setCroppingConstraint(constraint);\n        this.enforceCroppingConstraint();\n    },\n\n    /**\n     * Handle an orientation switch click.\n     *\n     * @param ev\n     */\n    _handleOrientationClick: function(ev) {\n        if (ev.currentTarget.value === this.constraintOrientation) {\n            return;\n        }\n        this.constraintOrientation = ev.currentTarget.value;\n\n        var $constraints = $('.constraint.flip', this.$container);\n\n        for (var i = 0; i < $constraints.length; i++) {\n            var $constraint = $($constraints[i]);\n            $constraint.data('constraint', 1 / $constraint.data('constraint'));\n            $constraint.html($constraint.html().split(':').reverse().join(':'));\n        }\n\n        $constraints.filter('.active').click();\n    },\n\n    /**\n     * Apply the custom ratio set in the inputs\n     */\n    _applyCustomConstraint: function() {\n        var constraint = this._getCustomConstraint();\n\n        if (constraint.w > 0 && constraint.h > 0) {\n            this.setCroppingConstraint(constraint.w / constraint.h);\n            this.enforceCroppingConstraint();\n        }\n    },\n\n    /**\n     * Get the custom constraint.\n     *\n     * @returns {{w: *, h: *}}\n     */\n    _getCustomConstraint: function() {\n        var w = parseFloat($('.custom-constraint-w').val());\n        var h = parseFloat($('.custom-constraint-h').val());\n        return {\n            w: isNaN(w) ? 0 : w,\n            h: isNaN(h) ? 0 : h,\n        }\n    },\n\n    /**\n     * Set the custom constraint.\n     *\n     * @param w\n     * @param h\n     */\n    _setCustomConstraint: function(w, h) {\n        $('.custom-constraint-w').val(parseFloat(w));\n        $('.custom-constraint-h').val(parseFloat(h));\n    },\n\n    /**\n     * Hide the custom constraint inputs.\n     */\n    _hideCustomConstraint: function() {\n        this.showingCustomConstraint = false;\n        $('.constraint.custom .custom-input', this.$container).addClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).removeClass('hidden');\n        $('.orientation', this.$container).removeClass('hidden');\n    },\n\n    /**\n     * Show the custom constraint inputs.\n     */\n    _showCustomConstraint: function() {\n        if (this.showingCustomConstraint) {\n            return;\n        }\n\n        this.showingCustomConstraint = true;\n        $('.constraint.custom .custom-input', this.$container).removeClass('hidden');\n        $('.constraint.custom .custom-label', this.$container).addClass('hidden');\n        $('.orientation', this.$container).addClass('hidden');\n    },\n\n    /**\n     * Handle tab click.\n     *\n     * @param ev\n     */\n    _handleTabClick: function(ev) {\n        if (!this.animationInProgress) {\n            var $tab = $(ev.currentTarget);\n            var view = $tab.data('view');\n            this.$tabs.removeClass('selected');\n            $tab.addClass('selected');\n            this.showView(view);\n        }\n    },\n\n    /**\n     * Show a view.\n     *\n     * @param view\n     */\n    showView: function(view) {\n        if (this.currentView === view) {\n            return;\n        }\n\n        this.$views.addClass('hidden');\n        var $view = this.$views.filter('[data-view=\"' + view + '\"]');\n        $view.removeClass('hidden');\n\n        if (view === 'rotate') {\n            this.enableSlider();\n        } else {\n            this.disableSlider();\n        }\n\n        // Now that most likely our editor dimensions have changed, time to reposition stuff\n        this.updateSizeAndPosition();\n\n        // See if we have to enable or disable crop mode as we transition between tabs\n        if (this.currentView === 'crop' && view !== 'crop') {\n            this.disableCropMode();\n        } else if (this.currentView !== 'crop' && view === 'crop') {\n            this.enableCropMode();\n        }\n\n        // Mark the current view\n        this.currentView = view;\n    },\n\n    /**\n     * Store the current cropper state.\n     *\n     * Cropper state is always assumed to be saved at a zoom ratio of 1 to be used\n     * as the basis for recalculating the cropper position and dimensions.\n     *\n     * @param [state]\n     */\n    storeCropperState: function(state) {\n        if (typeof this.storeCropperState._ === 'undefined') {\n            this.storeCropperState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.cropperState = state;\n        } else if (this.clipper) {\n            this.storeCropperState._.zoomFactor = 1 / this.zoomRatio;\n\n            this.cropperState = {\n                offsetX: (this.clipper.left - this.image.left) * this.storeCropperState._.zoomFactor,\n                offsetY: (this.clipper.top - this.image.top) * this.storeCropperState._.zoomFactor,\n                height: this.clipper.height * this.storeCropperState._.zoomFactor,\n                width: this.clipper.width * this.storeCropperState._.zoomFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        } else {\n            this.storeCropperState._.dimensions = this.getScaledImageDimensions();\n            this.cropperState = {\n                offsetX: 0,\n                offsetY: 0,\n                height: this.storeCropperState._.dimensions.height,\n                width: this.storeCropperState._.dimensions.width,\n                imageDimensions: this.storeCropperState._.dimensions\n            };\n        }\n    },\n\n    /**\n     * Store focal point coordinates in a manner that is not tied to zoom ratio and rotation.\n     */\n    storeFocalPointState: function(state) {\n        if (typeof this.storeFocalPointState._ === 'undefined') {\n            this.storeFocalPointState._ = {};\n        }\n\n        // If we're asked to store a specific state.\n        if (state) {\n            this.focalPointState = state;\n        } else if (this.focalPoint) {\n            this.storeFocalPointState._.zoomFactor = 1 / this.zoomRatio;\n            this.focalPointState = {\n                offsetX: (this.focalPoint.left - this.image.left) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                offsetY: (this.focalPoint.top - this.image.top) * this.storeFocalPointState._.zoomFactor / this.scaleFactor,\n                imageDimensions: this.getScaledImageDimensions()\n            };\n        }\n    },\n\n    /**\n     * Rotate the image along with the viewport.\n     *\n     * @param degrees\n     */\n    rotateImage: function(degrees) {\n        if (!this.animationInProgress) {\n            // We're not that kind of an establishment, sir.\n            if (degrees !== 90 && degrees !== -90) {\n                return false;\n            }\n\n            this.animationInProgress = true;\n            this.viewportRotation += degrees;\n\n            // Normalize the viewport rotation angle so it's between 0 and 359\n            this.viewportRotation = parseInt((this.viewportRotation + 360) % 360, 10);\n\n            var newAngle = this.image.angle + degrees;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var imageZoomRatio;\n\n            if (this.hasOrientationChanged()) {\n                imageZoomRatio = this.getZoomToCoverRatio({height: scaledImageDimensions.width, width: scaledImageDimensions.height});\n            } else {\n                imageZoomRatio = this.getZoomToCoverRatio(scaledImageDimensions);\n            }\n\n            // In cases when for some reason we've already zoomed in on the image,\n            // use existing zoom.\n            if (this.zoomRatio > imageZoomRatio) {\n                imageZoomRatio = this.zoomRatio;\n            }\n\n            var viewportProperties = {\n                angle: degrees === 90 ? '+=90' : '-=90'\n            };\n\n            var imageProperties = {\n                angle: newAngle,\n                width: scaledImageDimensions.width * imageZoomRatio,\n                height: scaledImageDimensions.height * imageZoomRatio\n            };\n\n            var scaleFactor = 1;\n            if (this.scaleFactor < 1) {\n                scaleFactor = 1 / this.scaleFactor;\n                this.scaleFactor = 1;\n            } else {\n                if (this.viewport.width > this.editorHeight) {\n                    scaleFactor = this.editorHeight / this.viewport.width;\n                } else if (this.viewport.height > this.editorWidth) {\n                    scaleFactor = this.editorWidth / this.viewport.height;\n                }\n                this.scaleFactor = scaleFactor;\n            }\n\n            if (scaleFactor < 1) {\n                imageProperties.width *= scaleFactor;\n                imageProperties.height *= scaleFactor;\n            }\n\n            var state = this.cropperState;\n\n            // Make sure we reposition the image as well to focus on the same image area\n            var deltaX = state.offsetX;\n            var deltaY = state.offsetY;\n            var angleInRadians = degrees * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            var newDeltaX = deltaX * Math.cos(angleInRadians) - deltaY * Math.sin(angleInRadians);\n            var newDeltaY = deltaX * Math.sin(angleInRadians) + deltaY * Math.cos(angleInRadians);\n\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            var modifiedDeltaX = newDeltaX * sizeFactor * this.zoomRatio * this.scaleFactor;\n            var modifiedDeltaY = newDeltaY * sizeFactor * this.zoomRatio * this.scaleFactor;\n\n            imageProperties.left = this.editorWidth / 2 - modifiedDeltaX;\n            imageProperties.top = this.editorHeight / 2 - modifiedDeltaY;\n\n            state.offsetX = newDeltaX;\n            state.offsetY = newDeltaY;\n\n            var temp = state.width;\n            state.width = state.height;\n            state.height = temp;\n\n            this.storeCropperState(state);\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            }\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    // If we're zooming the image in or out, better do the same to viewport\n                    var temp = this.viewport.height * scaleFactor;\n                    this.viewport.height = this.viewport.width * scaleFactor;\n                    this.viewport.width = temp;\n                    this.viewport.set({angle: 0});\n                },\n            });\n\n            // Animate the rotation and dimension change\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    var cleanAngle = parseFloat((this.image.angle + 360) % 360);\n                    this.image.set({angle: cleanAngle});\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        this._adjustFocalPointByAngle(degrees);\n                        this.straighten(this.straighteningInput);\n                        this.canvas.add(this.focalPoint);\n                    } else {\n                        this._resetFocalPointPosition();\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Flip an image along an axis.\n     *\n     * @param axis\n     */\n    flipImage: function(axis) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            if (this.hasOrientationChanged()) {\n                axis = axis === 'y' ? 'x' : 'y';\n            }\n\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n            } else {\n                this._resetFocalPointPosition();\n            }\n\n            var editorCenter = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n            this.straighteningInput.setValue(-this.imageStraightenAngle);\n            this.imageStraightenAngle = -this.imageStraightenAngle;\n            var properties = {\n                angle: this.viewportRotation + this.imageStraightenAngle\n            };\n\n            var deltaY, deltaX;\n            var cropperState = this.cropperState;\n            var focalPointState = this.focalPointState;\n\n            // Reposition the image, viewport, and stored cropper and focal point states.\n            if ((axis === 'y' && this.hasOrientationChanged()) || (axis !== 'y' && !this.hasOrientationChanged())) {\n                cropperState.offsetX = -cropperState.offsetX;\n                focalPointState.offsetX = -focalPointState.offsetX;\n                deltaX = this.image.left - editorCenter.x;\n                properties.left = editorCenter.x - deltaX;\n            } else {\n                cropperState.offsetY = -cropperState.offsetY;\n                focalPointState.offsetY = -focalPointState.offsetY;\n                deltaY = this.image.top - editorCenter.y;\n                properties.top = editorCenter.y - deltaY;\n            }\n\n            if (axis === 'y') {\n                properties.scaleY = this.image.scaleY * -1;\n                this.flipData.y = 1 - this.flipData.y;\n            } else {\n                properties.scaleX = this.image.scaleX * -1;\n                this.flipData.x = 1 - this.flipData.x;\n            }\n\n            this.storeCropperState(cropperState);\n            this.storeFocalPointState(focalPointState);\n\n            this.image.animate(properties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    this.animationInProgress = false;\n                    if (this.focalPoint) {\n                        // Well this is handy\n                        this._adjustFocalPointByAngle(0);\n                        this.canvas.add(this.focalPoint);\n                    }\n                },\n            });\n        }\n    },\n\n    /**\n     * Perform the straightening with input slider.\n     *\n     * @param {Craft.SlideRuleInput} slider\n     */\n    straighten: function(slider) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            var previousAngle = this.image.angle;\n\n            this.imageStraightenAngle = (this.settings.allowDegreeFractions ? parseFloat(slider.value) : Math.round(parseFloat(slider.value))) % 360;\n\n            // Straighten the image\n            this.image.set({\n                angle: this.viewportRotation + this.imageStraightenAngle\n            });\n\n            // Set the new zoom ratio\n            this.zoomRatio = this.getZoomToCoverRatio(this.getScaledImageDimensions()) * this.scaleFactor;\n            this._zoomImage();\n\n            if (this.cropperState) {\n                this._adjustEditorElementsOnStraighten(previousAngle);\n            }\n\n            this.renderImage();\n\n            this.animationInProgress = false;\n        }\n    },\n\n    /**\n     * Adjust the cropped viewport when straightening the image to correct for\n     * bumping into edges, keeping focus on the cropped area center and to\n     * maintain the illusion that the image is being straightened relative to the viewport center.\n     *\n     * @param {integer} previousAngle integer the previous image angle before straightening\n     */\n    _adjustEditorElementsOnStraighten: function(previousAngle) {\n        var scaledImageDimensions = this.getScaledImageDimensions();\n        var angleDelta = this.image.angle - previousAngle;\n        var state = this.cropperState;\n\n        var currentZoomRatio = this.zoomRatio;\n        var adjustmentRatio = 1;\n\n        var deltaX, deltaY, newCenterX, newCenterY, sizeFactor;\n\n        do {\n            // Get the cropper center coordinates\n            var cropperCenterX = state.offsetX;\n            var cropperCenterY = state.offsetY;\n            var angleInRadians = angleDelta * (Math.PI / 180);\n\n            // Calculate how the cropper would need to move in a circle to maintain\n            // the focus on the same region if the image was rotated with zoom intact.\n            newCenterX = cropperCenterX * Math.cos(angleInRadians) - cropperCenterY * Math.sin(angleInRadians);\n            newCenterY = cropperCenterX * Math.sin(angleInRadians) + cropperCenterY * Math.cos(angleInRadians);\n\n            sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Figure out the final image offset to keep the viewport focused where we need it\n            deltaX = newCenterX * currentZoomRatio * sizeFactor;\n            deltaY = newCenterY * currentZoomRatio * sizeFactor;\n\n            // If the image would creep in the viewport, figure out how to math around it.\n            var imageVertices = this.getImageVerticeCoords(currentZoomRatio);\n            var rectangle = {\n                width: this.viewport.width,\n                height: this.viewport.height,\n                left: this.editorWidth / 2 - this.viewport.width / 2 + deltaX,\n                top: this.editorHeight / 2 - this.viewport.height / 2 + deltaY\n            };\n            adjustmentRatio = this._getZoomRatioToFitRectangle(rectangle, imageVertices);\n            currentZoomRatio = currentZoomRatio * adjustmentRatio;\n\n            // If we had to make adjustments, do the calculations again\n        } while (adjustmentRatio !== 1);\n\n        // Reposition the image correctly\n        this.image.set({\n            left: this.editorWidth / 2 - deltaX,\n            top: this.editorHeight / 2 - deltaY\n        });\n\n        // Finally, store the new cropper state to reflect the rotation change.\n        state.offsetX = newCenterX;\n        state.offsetY = newCenterY;\n        state.width = this.viewport.width / currentZoomRatio / sizeFactor;\n        state.height = this.viewport.height / currentZoomRatio / sizeFactor;\n\n        this.storeCropperState(state);\n\n        // Zoom the image in and we're done.\n        this.zoomRatio = currentZoomRatio;\n\n        if (this.focalPoint) {\n            this._adjustFocalPointByAngle(angleDelta);\n\n            if (!this._isCenterInside(this.focalPoint, this.viewport)) {\n                this.focalPoint.set({opacity: 0});\n            } else {\n                this.focalPoint.set({opacity: 1});\n            }\n        } else if (angleDelta !== 0) {\n            this._resetFocalPointPosition();\n        }\n\n        this._zoomImage();\n    },\n\n    /**\n     * If focal point is active and outside of viewport after straightening, reset it.\n     */\n    _cleanupFocalPointAfterStraighten: function() {\n        if (this.focalPoint && !this._isCenterInside(this.focalPoint, this.viewport)) {\n            this.focalPoint.set({opacity: 1});\n            var state = this.focalPointState;\n            state.offsetX = 0;\n            state.offsetY = 0;\n            this.storeFocalPointState(state);\n            this.toggleFocalPoint();\n        }\n    },\n\n    /**\n     * Reset focal point to the middle of image.\n     */\n    _resetFocalPointPosition: function() {\n        var state = this.focalPointState;\n        state.offsetX = 0;\n        state.offsetY = 0;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Returns true if a center of an object is inside another rectangle shaped object that is not rotated.\n     *\n     * @param object\n     * @param containingObject\n     *\n     * @returns {boolean}\n     */\n    _isCenterInside: function(object, containingObject) {\n        return (object.left > containingObject.left - containingObject.width / 2\n            && object.top > containingObject.top - containingObject.height / 2\n            && object.left < containingObject.left + containingObject.width / 2\n            && object.top < containingObject.top + containingObject.height / 2\n        );\n    },\n\n    /**\n     * Adjust the focal point by an angle in degrees.\n     * @param angle\n     */\n    _adjustFocalPointByAngle: function(angle) {\n        var angleInRadians = angle * (Math.PI / 180);\n        var state = this.focalPointState;\n\n        var focalX = state.offsetX;\n        var focalY = state.offsetY;\n\n        // Calculate how the focal point would need to move in a circle to keep on the same spot\n        // on the image if it was rotated with zoom intact.\n        var newFocalX = focalX * Math.cos(angleInRadians) - focalY * Math.sin(angleInRadians);\n        var newFocalY = focalX * Math.sin(angleInRadians) + focalY * Math.cos(angleInRadians);\n        var sizeFactor = this.getScaledImageDimensions().width / state.imageDimensions.width;\n\n        var adjustedFocalX = newFocalX * sizeFactor * this.zoomRatio;\n        var adjustedFocalY = newFocalY * sizeFactor * this.zoomRatio;\n\n        this.focalPoint.left = this.image.left + adjustedFocalX;\n        this.focalPoint.top = this.image.top + adjustedFocalY;\n\n        state.offsetX = newFocalX;\n        state.offsetY = newFocalY;\n        this.storeFocalPointState(state);\n    },\n\n    /**\n     * Get the zoom ratio required to fit a rectangle within another rectangle, that is defined by vertices.\n     * If the rectangle fits, 1 will be returned.\n     *\n     * @param rectangle\n     * @param containingVertices\n     */\n    _getZoomRatioToFitRectangle: function(rectangle, containingVertices) {\n        var rectangleVertices = this._getRectangleVertices(rectangle);\n        var vertex;\n\n        // Check if any of the viewport vertices end up out of bounds\n        for (var verticeIndex = 0; verticeIndex < rectangleVertices.length; verticeIndex++) {\n            vertex = rectangleVertices[verticeIndex];\n\n            if (!this.arePointsInsideRectangle([vertex], containingVertices)) {\n                break;\n            }\n\n            vertex = false;\n        }\n\n        // If there's no vertex set after loop, it means that all of them are inside the image rectangle\n        var adjustmentRatio;\n\n        if (!vertex) {\n            adjustmentRatio = 1;\n        } else {\n            // Find out which edge got crossed by the vertex\n            var edge = this._getEdgeCrossed(containingVertices, vertex);\n\n            var rectangleCenter = {\n                x: rectangle.left + rectangle.width / 2,\n                y: rectangle.top + rectangle.height / 2\n            };\n\n            // Calculate how much further that edge needs to be.\n            // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line#Line_defined_by_two_points\n            var distanceFromVertexToEdge = Math.abs((edge[1].y - edge[0].y) * vertex.x - (edge[1].x - edge[0].x) * vertex.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n            var distanceFromCenterToEdge = Math.abs((edge[1].y - edge[0].y) * rectangleCenter.x - (edge[1].x - edge[0].x) * rectangleCenter.y + edge[1].x * edge[0].y - edge[1].y * edge[0].x) / Math.sqrt(Math.pow(edge[1].y - edge[0].y, 2) + Math.pow(edge[1].x - edge[0].x, 2));\n\n            // Adjust the zoom ratio\n            adjustmentRatio = ((distanceFromVertexToEdge + distanceFromCenterToEdge) / distanceFromCenterToEdge);\n        }\n\n        return adjustmentRatio;\n    },\n\n    /**\n     * Save the image.\n     *\n     * @param ev\n     */\n    saveImage: function(ev) {\n        var $button = $(ev.currentTarget);\n        if ($button.hasClass('disabled')) {\n            return false;\n        }\n\n        $('.btn', this.$buttons).addClass('disabled');\n        this.$buttons.append('<div class=\"spinner\"></div>');\n\n        var postData = {\n            assetId: this.assetId,\n            viewportRotation: this.viewportRotation,\n            imageRotation: this.imageStraightenAngle,\n            replace: $button.hasClass('replace') ? 1 : 0\n        };\n\n        if (this.cropperState) {\n            var cropData = {};\n\n            cropData.height = this.cropperState.height;\n            cropData.width = this.cropperState.width;\n            cropData.offsetX = this.cropperState.offsetX;\n            cropData.offsetY = this.cropperState.offsetY;\n\n            postData.imageDimensions = this.cropperState.imageDimensions;\n\n            postData.cropData = cropData;\n        } else {\n            postData.imageDimensions = this.getScaledImageDimensions();\n        }\n\n        if (this.focalPoint) {\n            postData.focalPoint = this.focalPointState;\n        }\n\n        postData.flipData = this.flipData;\n        postData.zoom = this.zoomRatio;\n\n        Craft.postActionRequest('assets/save-image', postData, data => {\n            this.$buttons.find('.btn').removeClass('disabled').end().find('.spinner').remove();\n\n            if (data.error) {\n                alert(data.error);\n                return;\n            }\n\n            this.onSave();\n            this.hide();\n            Craft.cp.runQueue();\n        });\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to cover a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToCoverRatio: function(dimensions) {\n        // Convert the angle to radians\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        // Calculate the dimensions of the scaled image using the magic of math\n        var scaledWidth = Math.sin(angleInRadians) * dimensions.height + Math.cos(angleInRadians) * dimensions.width;\n        var scaledHeight = Math.sin(angleInRadians) * dimensions.width + Math.cos(angleInRadians) * dimensions.height;\n\n        // Calculate the ratio\n        return Math.max(scaledWidth / dimensions.width, scaledHeight / dimensions.height);\n    },\n\n    /**\n     * Return image zoom ratio depending on the straighten angle to fit inside a viewport by given dimensions.\n     *\n     * @param dimensions\n     */\n    getZoomToFitRatio: function(dimensions) {\n        // Get the bounding box for a rotated image\n        var boundingBox = this._getImageBoundingBox(dimensions);\n\n        // Scale the bounding box to fit\n        var scale = 1;\n        if (boundingBox.height > this.editorHeight || boundingBox.width > this.editorWidth) {\n            var vertScale = this.editorHeight / boundingBox.height;\n            var horiScale = this.editorWidth / boundingBox.width;\n            scale = Math.min(horiScale, vertScale);\n        }\n\n        return scale;\n    },\n\n    /**\n     * Return the combined zoom ratio to fit a rectangle inside image that's been zoomed to fit.\n     */\n    getCombinedZoomRatio: function(dimensions) {\n        return this.getZoomToCoverRatio(dimensions) / this.getZoomToFitRatio(dimensions);\n    },\n\n    /**\n     * Draw the grid.\n     *\n     * @private\n     */\n    _showGrid: function() {\n        if (!this.grid) {\n            var strokeOptions = {\n                strokeWidth: 1,\n                stroke: 'rgba(255,255,255,0.5)'\n            };\n\n            var lineCount = 8;\n            var gridWidth = this.viewport.width;\n            var gridHeight = this.viewport.height;\n            var xStep = gridWidth / (lineCount + 1);\n            var yStep = gridHeight / (lineCount + 1);\n\n            var grid = [\n                new fabric.Rect({\n                    strokeWidth: 2,\n                    stroke: 'rgba(255,255,255,1)',\n                    originX: 'center',\n                    originY: 'center',\n                    width: gridWidth,\n                    height: gridHeight,\n                    left: gridWidth / 2,\n                    top: gridHeight / 2,\n                    fill: 'rgba(255,255,255,0)'\n                })\n            ];\n\n            var i;\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([i * xStep, 0, i * xStep, gridHeight], strokeOptions));\n            }\n            for (i = 1; i <= lineCount; i++) {\n                grid.push(new fabric.Line([0, i * yStep, gridWidth, i * yStep], strokeOptions));\n            }\n\n            this.grid = new fabric.Group(grid, {\n                left: this.editorWidth / 2,\n                top: this.editorHeight / 2,\n                originX: 'center',\n                originY: 'center',\n                angle: this.viewport.angle\n            });\n\n            this.canvas.add(this.grid);\n            this.renderImage();\n        }\n    },\n\n    /**\n     * Hide the grid\n     */\n    _hideGrid: function() {\n        this.canvas.remove(this.grid);\n        this.grid = null;\n        this.renderImage();\n    },\n\n    /**\n     * Remove all the events when hiding the editor.\n     */\n    onFadeOut: function() {\n        this.destroy();\n    },\n\n    /**\n     * Make sure underlying content is not scrolled by accident.\n     */\n    show: function() {\n        this.base();\n\n        $('html').addClass('noscroll');\n    },\n\n    /**\n     * Allow the content to scroll.\n     */\n    hide: function() {\n        this.removeAllListeners();\n        this.straighteningInput.removeAllListeners();\n        $('html').removeClass('noscroll');\n        this.base();\n    },\n\n    /**\n     * onSave callback.\n     */\n    onSave: function() {\n        this.settings.onSave();\n        this.trigger('save');\n    },\n\n    /**\n     * Enable the rotation slider.\n     */\n    enableSlider: function() {\n        this.$imageTools.removeClass('hidden');\n    },\n\n    /**\n     * Disable the rotation slider.\n     */\n    disableSlider: function() {\n        this.$imageTools.addClass('hidden');\n    },\n\n    /**\n     * Switch to crop mode.\n     */\n    enableCropMode: function() {\n        var imageDimensions = this.getScaledImageDimensions();\n        this.zoomRatio = this.getZoomToFitRatio(imageDimensions);\n\n        var viewportProperties = {\n            width: this.editorWidth,\n            height: this.editorHeight\n        };\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var callback = () => {\n            this._setFittedImageVerticeCoordinates();\n\n            // Restore cropper\n            var state = this.cropperState;\n            var scaledImageDimensions = this.getScaledImageDimensions();\n            var sizeFactor = scaledImageDimensions.width / state.imageDimensions.width;\n\n            // Restore based on the stored information\n            var cropperData = {\n                left: this.image.left + (state.offsetX * sizeFactor * this.zoomRatio),\n                top: this.image.top + (state.offsetY * sizeFactor * this.zoomRatio),\n                width: state.width * sizeFactor * this.zoomRatio,\n                height: state.height * sizeFactor * this.zoomRatio\n            };\n\n            this._showCropper(cropperData);\n\n            if (this.focalPoint) {\n                sizeFactor = scaledImageDimensions.width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Switch out of crop mode.\n     */\n    disableCropMode: function() {\n        var viewportProperties = {};\n\n        this._hideCropper();\n        var imageDimensions = this.getScaledImageDimensions();\n        var targetZoom = this.getZoomToCoverRatio(imageDimensions) * this.scaleFactor;\n        var inverseZoomFactor = targetZoom / this.zoomRatio;\n        this.zoomRatio = targetZoom;\n\n        var imageProperties = {\n            width: imageDimensions.width * this.zoomRatio,\n            height: imageDimensions.height * this.zoomRatio,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        };\n\n        var offsetX = this.clipper.left - this.image.left;\n        var offsetY = this.clipper.top - this.image.top;\n\n        var imageOffsetX = offsetX * inverseZoomFactor;\n        var imageOffsetY = offsetY * inverseZoomFactor;\n        imageProperties.left = (this.editorWidth / 2) - imageOffsetX;\n        imageProperties.top = (this.editorHeight / 2) - imageOffsetY;\n\n        // Calculate the cropper dimensions after all the zooming\n        viewportProperties.height = this.clipper.height * inverseZoomFactor;\n        viewportProperties.width = this.clipper.width * inverseZoomFactor;\n\n        if (!this.focalPoint || (this.focalPoint && !this._isCenterInside(this.focalPoint, this.clipper))) {\n            if (this.focalPoint) {\n                this.toggleFocalPoint();\n            }\n\n            this._resetFocalPointPosition();\n        }\n\n        var callback = () => {\n            // Reposition focal point correctly\n            if (this.focalPoint) {\n                var sizeFactor = this.getScaledImageDimensions().width / this.focalPointState.imageDimensions.width;\n                this.focalPoint.left = this.image.left + (this.focalPointState.offsetX * sizeFactor * this.zoomRatio);\n                this.focalPoint.top = this.image.top + (this.focalPointState.offsetY * sizeFactor * this.zoomRatio);\n                this.canvas.add(this.focalPoint);\n            }\n        };\n\n        this._editorModeTransition(callback, imageProperties, viewportProperties);\n    },\n\n    /**\n     * Transition between cropping end editor modes\n     *\n     * @param callback\n     * @param imageProperties\n     * @param viewportProperties\n     * @private\n     */\n    _editorModeTransition: function(callback, imageProperties, viewportProperties) {\n        if (!this.animationInProgress) {\n            this.animationInProgress = true;\n\n            // Without this it looks semi-broken during animation\n            if (this.focalPoint) {\n                this.canvas.remove(this.focalPoint);\n                this.renderImage();\n            }\n\n            this.image.animate(imageProperties, {\n                onChange: this.canvas.renderAll.bind(this.canvas),\n                duration: this.settings.animationDuration,\n                onComplete: () => {\n                    callback();\n                    this.animationInProgress = false;\n                    this.renderImage();\n                },\n            });\n\n            this.viewport.animate(viewportProperties, {\n                duration: this.settings.animationDuration\n            });\n        }\n    },\n\n    _showSpinner: function() {\n        this.$spinnerCanvas = $('<canvas id=\"spinner-canvas\"></canvas>').appendTo($('.image', this.$container));\n        var canvas = document.getElementById('spinner-canvas');\n        var context = canvas.getContext('2d');\n        var start = new Date();\n        var lines = 16,\n            cW = context.canvas.width,\n            cH = context.canvas.height;\n\n        var draw = function() {\n            var rotation = parseInt(((new Date() - start) / 1000) * lines) / lines;\n            context.save();\n            context.clearRect(0, 0, cW, cH);\n            context.translate(cW / 2, cH / 2);\n            context.rotate(Math.PI * 2 * rotation);\n            for (var i = 0; i < lines; i++) {\n                context.beginPath();\n                context.rotate(Math.PI * 2 / lines);\n                context.moveTo(cW / 10, 0);\n                context.lineTo(cW / 4, 0);\n                context.lineWidth = cW / 30;\n                context.strokeStyle = \"rgba(255,255,255,\" + i / lines + \")\";\n                context.stroke();\n            }\n            context.restore();\n        };\n        this.spinnerInterval = window.setInterval(draw, 1000 / 30);\n    },\n\n    _hideSpinner: function() {\n        window.clearInterval(this.spinnerInterval);\n        this.$spinnerCanvas.remove();\n        this.$spinnerCanvas = null;\n    },\n\n    /**\n     * Show the cropper.\n     *\n     * @param clipperData\n     */\n    _showCropper: function(clipperData) {\n        this._setupCropperLayer(clipperData);\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Hide the cropper.\n     */\n    _hideCropper: function() {\n        if (this.clipper) {\n            this.croppingCanvas.remove(this.clipper);\n            this.croppingCanvas.remove(this.croppingShade);\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n\n            this.croppingCanvas = null;\n            this.renderCropper = null;\n        }\n    },\n\n    /**\n     * Draw the cropper.\n     *\n     * @param clipperData\n     */\n    _setupCropperLayer: function(clipperData) {\n        // Set up the canvas for cropper\n        this.croppingCanvas = new fabric.StaticCanvas('cropping-canvas', {\n            backgroundColor: 'rgba(0,0,0,0)',\n            hoverCursor: 'default',\n            selection: false\n        });\n\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        this.renderCropper = () => Garnish.requestAnimationFrame(this.croppingCanvas.renderAll.bind(this.croppingCanvas));\n\n        $('#cropping-canvas', this.$editorContainer).css({\n            position: 'absolute',\n            top: 0,\n            left: 0\n        });\n\n        this.croppingShade = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: this.editorWidth,\n            height: this.editorHeight,\n            fill: 'rgba(0,0,0,0.7)'\n        });\n\n        // Calculate the cropping rectangle size\n        var imageDimensions = this.getScaledImageDimensions();\n        var rectangleRatio = this.imageStraightenAngle === 0 ? 1 : this.getCombinedZoomRatio(imageDimensions) * 1.2;\n        var rectWidth = imageDimensions.width / rectangleRatio;\n        var rectHeight = imageDimensions.height / rectangleRatio;\n\n        if (this.hasOrientationChanged()) {\n            var temp = rectHeight;\n            rectHeight = rectWidth;\n            rectWidth = temp;\n        }\n\n        // Set up the cropping viewport rectangle\n        this.clipper = new fabric.Rect({\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2,\n            originX: 'center',\n            originY: 'center',\n            width: rectWidth,\n            height: rectHeight,\n            stroke: 'black',\n            fill: 'rgba(128,0,0,1)',\n            strokeWidth: 0\n        });\n\n        // Set from clipper data\n        if (clipperData) {\n            this.clipper.set(clipperData);\n        }\n\n        this.clipper.globalCompositeOperation = 'destination-out';\n        this.croppingCanvas.add(this.croppingShade);\n        this.croppingCanvas.add(this.clipper);\n    },\n\n    /**\n     * Redraw the cropper boundaries\n     */\n    _redrawCropperElements: function() {\n        if (typeof this._redrawCropperElements._ === 'undefined') {\n            this._redrawCropperElements._ = {};\n        }\n\n        if (this.cropperHandles) {\n            this.croppingCanvas.remove(this.cropperHandles);\n            this.croppingCanvas.remove(this.cropperGrid);\n            this.croppingCanvas.remove(this.croppingRectangle);\n            this.croppingCanvas.remove(this.croppingAreaText);\n        }\n        this._redrawCropperElements._.lineOptions = {\n            strokeWidth: 4,\n            stroke: 'rgb(255,255,255)',\n            fill: false\n        };\n\n        this._redrawCropperElements._.gridOptions = {\n            strokeWidth: 2,\n            stroke: 'rgba(255,255,255,0.5)'\n        };\n\n        // Draw the handles\n        this._redrawCropperElements._.pathGroup = [\n            new fabric.Path('M 0,10 L 0,0 L 10,0', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width - 8) + ',0 L ' + (this.clipper.width + 4) + ',0 L ' + (this.clipper.width + 4) + ',10', this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M ' + (this.clipper.width + 4) + ',' + (this.clipper.height - 8) + ' L' + (this.clipper.width + 4) + ',' + (this.clipper.height + 4) + ' L ' + (this.clipper.width - 8) + ',' + (this.clipper.height + 4), this._redrawCropperElements._.lineOptions),\n            new fabric.Path('M 10,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height + 4) + ' L 0,' + (this.clipper.height - 8), this._redrawCropperElements._.lineOptions)\n        ];\n\n        this.cropperHandles = new fabric.Group(this._redrawCropperElements._.pathGroup, {\n            left: this.clipper.left,\n            top: this.clipper.top,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        // Don't forget the rectangle\n        this.croppingRectangle = new fabric.Rect({\n            left: this.clipper.left,\n            top: this.clipper.top,\n            width: this.clipper.width,\n            height: this.clipper.height,\n            fill: 'rgba(0,0,0,0)',\n            stroke: 'rgba(255,255,255,0.8)',\n            strokeWidth: 2,\n            originX: 'center',\n            originY: 'center'\n        });\n\n        this.cropperGrid = new fabric.Group(\n            [\n                new fabric.Line([this.clipper.width * 0.33, 0, this.clipper.width * 0.33, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([this.clipper.width * 0.66, 0, this.clipper.width * 0.66, this.clipper.height], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.33, this.clipper.width, this.clipper.height * 0.33], this._redrawCropperElements._.gridOptions),\n                new fabric.Line([0, this.clipper.height * 0.66, this.clipper.width, this.clipper.height * 0.66], this._redrawCropperElements._.gridOptions)\n            ], {\n                left: this.clipper.left,\n                top: this.clipper.top,\n                originX: 'center',\n                originY: 'center'\n            });\n\n        this._redrawCropperElements._.cropTextTop = this.croppingRectangle.top + (this.clipper.height / 2) + 12;\n        this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0)';\n\n        if (this._redrawCropperElements._.cropTextTop + 12 > this.editorHeight - 2) {\n            this._redrawCropperElements._.cropTextTop -= 24;\n            this._redrawCropperElements._.cropTextBackgroundColor = 'rgba(0,0,0,0.5)';\n        }\n\n        this.croppingAreaText = new fabric.Textbox(Math.round(this.clipper.width) + ' x ' + Math.round(this.clipper.height), {\n            left: this.croppingRectangle.left,\n            top: this._redrawCropperElements._.cropTextTop,\n            fontSize: 13,\n            fill: 'rgb(200,200,200)',\n            backgroundColor: this._redrawCropperElements._.cropTextBackgroundColor,\n            font: 'Craft',\n            width: 70,\n            height: 15,\n            originX: 'center',\n            originY: 'center',\n            textAlign: 'center'\n        });\n\n        this.croppingCanvas.add(this.cropperHandles);\n        this.croppingCanvas.add(this.cropperGrid);\n        this.croppingCanvas.add(this.croppingRectangle);\n        this.croppingCanvas.add(this.croppingAreaText);\n    },\n\n    /**\n     * Reposition the cropper when the image editor dimensions change.\n     *\n     * @param previousImageArea\n     */\n    _repositionCropper: function(previousImageArea) {\n        if (!this.croppingCanvas) {\n            return;\n        }\n\n        // Get the current clipper offset relative to center\n        var currentOffset = {\n            x: this.clipper.left - this.croppingCanvas.width / 2,\n            y: this.clipper.top - this.croppingCanvas.height / 2\n        };\n\n        // Resize the cropping canvas\n        this.croppingCanvas.setDimensions({\n            width: this.editorWidth,\n            height: this.editorHeight\n        });\n\n        // Check by what factor will the new final bounding box be different\n        var currentArea = this._getBoundingRectangle(this.imageVerticeCoords);\n        var areaFactor = currentArea.width / previousImageArea.width;\n\n        // Adjust the cropper size to scale along with the bounding box\n        this.clipper.width = Math.round(this.clipper.width * areaFactor);\n        this.clipper.height = Math.round(this.clipper.height * areaFactor);\n\n        // Adjust the coordinates: re-position clipper in relation to the new center to adjust\n        // for editor size changes and then multiply by the size factor to adjust for image size changes\n        this.clipper.left = this.editorWidth / 2 + (currentOffset.x * areaFactor);\n        this.clipper.top = this.editorHeight / 2 + (currentOffset.y * areaFactor);\n\n        // Resize the cropping shade\n        this.croppingShade.set({\n            width: this.editorWidth,\n            height: this.editorHeight,\n            left: this.editorWidth / 2,\n            top: this.editorHeight / 2\n        });\n\n        this._redrawCropperElements();\n        this.renderCropper();\n    },\n\n    /**\n     * Get the dimensions of a bounding rectangle by a set of four coordinates.\n     *\n     * @param coordinateSet\n     */\n    _getBoundingRectangle: function(coordinateSet) {\n        return {\n            width: Math.max(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x) - Math.min(coordinateSet.a.x, coordinateSet.b.x, coordinateSet.c.x, coordinateSet.d.x),\n            height: Math.max(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y) - Math.min(coordinateSet.a.y, coordinateSet.b.y, coordinateSet.c.y, coordinateSet.d.y)\n        };\n    },\n\n    /**\n     * Handle the mouse being clicked.\n     *\n     * @param ev\n     */\n    _handleMouseDown: function(ev) {\n        // Focal before resize before dragging\n        var focal = this.focalPoint && this._isMouseOver(ev, this.focalPoint);\n        var move = this.croppingCanvas && this._isMouseOver(ev, this.clipper);\n        var handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n\n        if (handle || move || focal) {\n            this.previousMouseX = ev.pageX;\n            this.previousMouseY = ev.pageY;\n\n            if (focal) {\n                this.draggingFocal = true;\n            } else if (handle) {\n                this.scalingCropper = handle;\n            } else if (move) {\n                this.draggingCropper = true;\n            }\n        }\n    },\n\n    /**\n     * Handle the mouse being moved.\n     *\n     * @param ev\n     */\n    _handleMouseMove: function(ev) {\n        if (this.mouseMoveEvent !== null) {\n            Garnish.requestAnimationFrame(this._handleMouseMoveInternal.bind(this));\n        }\n        this.mouseMoveEvent = ev;\n    },\n\n    _handleMouseMoveInternal: function() {\n        if (this.mouseMoveEvent === null) {\n            return;\n        }\n\n        if (this.focalPoint && this.draggingFocal) {\n            this._handleFocalDrag(this.mouseMoveEvent);\n            this.storeFocalPointState();\n            this.renderImage();\n        } else if (this.draggingCropper || this.scalingCropper) {\n            if (this.draggingCropper) {\n                this._handleCropperDrag(this.mouseMoveEvent);\n            } else {\n                this._handleCropperResize(this.mouseMoveEvent);\n            }\n\n            this._redrawCropperElements();\n\n            this.storeCropperState();\n            this.renderCropper();\n        } else {\n            this._setMouseCursor(this.mouseMoveEvent);\n        }\n\n        this.previousMouseX = this.mouseMoveEvent.pageX;\n        this.previousMouseY = this.mouseMoveEvent.pageY;\n\n        this.mouseMoveEvent = null;\n    },\n\n    /**\n     * Handle mouse being released.\n     *\n     * @param ev\n     */\n    _handleMouseUp: function(ev) {\n        this.draggingCropper = false;\n        this.scalingCropper = false;\n        this.draggingFocal = false;\n    },\n\n    /**\n     * Handle mouse out\n     *\n     * @param ev\n     */\n    _handleMouseOut: function(ev) {\n        this._handleMouseUp(ev);\n        this.mouseMoveEvent = ev;\n        this._handleMouseMoveInternal();\n    },\n\n    /**\n     * Handle cropper being dragged.\n     *\n     * @param ev\n     */\n    _handleCropperDrag: function(ev) {\n        if (typeof this._handleCropperDrag._ === 'undefined') {\n            this._handleCropperDrag._ = {};\n        }\n\n        this._handleCropperDrag._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this._handleCropperDrag._.deltaX === 0 && this._handleCropperDrag._.deltaY === 0) {\n            return false;\n        }\n\n        this._handleCropperDrag._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.deltaX, this._handleCropperDrag._.deltaY);\n\n        // If this would drag it outside of the image\n        if (!this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n            // Try to find the furthest point in the same general direction where we can drag it\n\n            // Delta iterator setup\n            this._handleCropperDrag._.dxi = 0;\n            this._handleCropperDrag._.dyi = 0;\n            this._handleCropperDrag._.xStep = this._handleCropperDrag._.deltaX > 0 ? -1 : 1;\n            this._handleCropperDrag._.yStep = this._handleCropperDrag._.deltaY > 0 ? -1 : 1;\n\n            // The furthest we can move\n            this._handleCropperDrag._.furthest = 0;\n            this._handleCropperDrag._.furthestDeltas = {};\n\n            // Loop through every combination of dragging it not so far\n            for (this._handleCropperDrag._.dxi = Math.min(Math.abs(this._handleCropperDrag._.deltaX), 10); this._handleCropperDrag._.dxi >= 0; this._handleCropperDrag._.dxi--) {\n                for (this._handleCropperDrag._.dyi = Math.min(Math.abs(this._handleCropperDrag._.deltaY), 10); this._handleCropperDrag._.dyi >= 0; this._handleCropperDrag._.dyi--) {\n                    this._handleCropperDrag._.vertices = this._getRectangleVertices(this._handleCropperDrag._.rectangle, this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1), this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1));\n\n                    if (this.arePointsInsideRectangle(this._handleCropperDrag._.vertices, this.imageVerticeCoords)) {\n                        if (this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi > this._handleCropperDrag._.furthest) {\n                            this._handleCropperDrag._.furthest = this._handleCropperDrag._.dxi + this._handleCropperDrag._.dyi;\n                            this._handleCropperDrag._.furthestDeltas = {\n                                x: this._handleCropperDrag._.dxi * (this._handleCropperDrag._.deltaX > 0 ? 1 : -1),\n                                y: this._handleCropperDrag._.dyi * (this._handleCropperDrag._.deltaY > 0 ? 1 : -1)\n                            }\n                        }\n                    }\n                }\n            }\n\n            // REALLY can't drag along the cursor movement\n            if (this._handleCropperDrag._.furthest == 0) {\n                return;\n            } else {\n                this._handleCropperDrag._.deltaX = this._handleCropperDrag._.furthestDeltas.x;\n                this._handleCropperDrag._.deltaY = this._handleCropperDrag._.furthestDeltas.y;\n            }\n        }\n\n        this.clipper.set({\n            left: this.clipper.left + this._handleCropperDrag._.deltaX,\n            top: this.clipper.top + this._handleCropperDrag._.deltaY\n        });\n    },\n\n    /**\n     * Handle focal point being dragged.\n     *\n     * @param ev\n     */\n    _handleFocalDrag: function(ev) {\n        if (typeof this._handleFocalDrag._ === 'undefined') {\n            this._handleFocalDrag._ = {};\n        }\n\n        if (this.focalPoint) {\n            this._handleFocalDrag._.deltaX = ev.pageX - this.previousMouseX;\n            this._handleFocalDrag._.deltaY = ev.pageY - this.previousMouseY;\n\n            if (this._handleFocalDrag._.deltaX === 0 && this._handleFocalDrag._.deltaY === 0) {\n                return;\n            }\n\n            this._handleFocalDrag._.newX = this.focalPoint.left + this._handleFocalDrag._.deltaX;\n            this._handleFocalDrag._.newY = this.focalPoint.top + this._handleFocalDrag._.deltaY;\n\n            // Just make sure that the focal point stays inside the image\n            if (this.currentView === 'crop') {\n                if (!this.arePointsInsideRectangle([{x: this._handleFocalDrag._.newX, y: this._handleFocalDrag._.newY}], this.imageVerticeCoords)) {\n                    return;\n                }\n            } else {\n                if (!(this.viewport.left - this.viewport.width / 2 - this._handleFocalDrag._.newX < 0 && this.viewport.left + this.viewport.width / 2 - this._handleFocalDrag._.newX > 0\n                    && this.viewport.top - this.viewport.height / 2 - this._handleFocalDrag._.newY < 0 && this.viewport.top + this.viewport.height / 2 - this._handleFocalDrag._.newY > 0)) {\n                    return;\n                }\n            }\n\n            this.focalPoint.set({\n                left: this.focalPoint.left + this._handleFocalDrag._.deltaX,\n                top: this.focalPoint.top + this._handleFocalDrag._.deltaY\n            });\n        }\n    },\n\n    /**\n     * Set the cropping constraint\n     * @param constraint\n     */\n    setCroppingConstraint: function(constraint) {\n        // In case this caused the sidebar width to change.\n        this.updateSizeAndPosition();\n\n        switch (constraint) {\n            case 'none':\n                this.croppingConstraint = false;\n                break;\n\n            case 'original':\n                this.croppingConstraint = this.originalWidth / this.originalHeight;\n                break;\n\n            case 'current':\n                this.croppingConstraint = this.clipper.width / this.clipper.height;\n                break;\n\n            case 'custom':\n\n                break;\n            default:\n                this.croppingConstraint = parseFloat(constraint);\n\n                break;\n        }\n    },\n\n    /**\n     * Enforce the cropping constraint\n     */\n    enforceCroppingConstraint: function() {\n        if (typeof this.enforceCroppingConstraint._ === 'undefined') {\n            this.enforceCroppingConstraint._ = {};\n        }\n\n        if (this.animationInProgress || !this.croppingConstraint) {\n            return;\n        }\n\n        this.animationInProgress = true;\n\n        // Mock the clipping rectangle for collision tests\n        this.enforceCroppingConstraint._.rectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        };\n\n        // If wider than it should be\n        if (this.clipper.width > this.clipper.height * this.croppingConstraint) {\n            this.enforceCroppingConstraint._.previousHeight = this.enforceCroppingConstraint._.rectangle.height;\n\n            // Make it taller!\n            this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n\n            // Getting really awkward having to convert between 0;0 being center or top-left corner.\n            this.enforceCroppingConstraint._.rectangle.top -= (this.enforceCroppingConstraint._.rectangle.height - this.enforceCroppingConstraint._.previousHeight) / 2;\n\n            // If the clipper would end up out of bounds, make it narrower instead.\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.height = this.enforceCroppingConstraint._.rectangle.width / this.croppingConstraint;\n            }\n        } else {\n            // Follow the same pattern, if taller than it should be.\n            this.enforceCroppingConstraint._.previousWidth = this.enforceCroppingConstraint._.rectangle.width;\n            this.enforceCroppingConstraint._.rectangle.width = this.clipper.height * this.croppingConstraint;\n            this.enforceCroppingConstraint._.rectangle.left -= (this.enforceCroppingConstraint._.rectangle.width - this.enforceCroppingConstraint._.previousWidth) / 2;\n\n            if (!this.arePointsInsideRectangle(this._getRectangleVertices(this.enforceCroppingConstraint._.rectangle), this.imageVerticeCoords)) {\n                this.enforceCroppingConstraint._.rectangle.height = this.clipper.width / this.croppingConstraint;\n                this.enforceCroppingConstraint._.rectangle.width = this.enforceCroppingConstraint._.rectangle.height * this.croppingConstraint;\n            }\n        }\n\n        this.enforceCroppingConstraint._.properties = {\n            height: this.enforceCroppingConstraint._.rectangle.height,\n            width: this.enforceCroppingConstraint._.rectangle.width\n        };\n\n        // Make sure to redraw cropper handles and gridlines when resizing\n        this.clipper.animate(this.enforceCroppingConstraint._.properties, {\n            onChange: () => {\n                this._redrawCropperElements();\n                this.croppingCanvas.renderAll();\n            },\n            duration: this.settings.animationDuration,\n            onComplete: () => {\n                this._redrawCropperElements();\n                this.animationInProgress = false;\n                this.renderCropper();\n                this.storeCropperState();\n            },\n        });\n    },\n\n    /**\n     * Handle cropper being resized.\n     *\n     * @param ev\n     */\n    _handleCropperResize: function(ev) {\n        if (typeof this._handleCropperResize._ === 'undefined') {\n            this._handleCropperResize._ = {};\n        }\n\n        // Size deltas\n        this._handleCropperResize._.deltaX = ev.pageX - this.previousMouseX;\n        this._handleCropperResize._.deltaY = ev.pageY - this.previousMouseY;\n\n        if (this.scalingCropper === 'b' || this.scalingCropper === 't') {\n            this._handleCropperResize._.deltaX = 0;\n        }\n\n        if (this.scalingCropper === 'l' || this.scalingCropper === 'r') {\n            this._handleCropperResize._.deltaY = 0;\n        }\n\n        if (this._handleCropperResize._.deltaX === 0 && this._handleCropperResize._.deltaY === 0) {\n            return;\n        }\n\n        // Translate from center-center origin to absolute coords\n        this._handleCropperResize._.startingRectangle = {\n            left: this.clipper.left - this.clipper.width / 2,\n            top: this.clipper.top - this.clipper.height / 2,\n            width: this.clipper.width,\n            height: this.clipper.height\n        }\n\n        this._handleCropperResize._.rectangle = this._calculateNewCropperSizeByDeltas(this._handleCropperResize._.startingRectangle, this._handleCropperResize._.deltaX, this._handleCropperResize._.deltaY, this.scalingCropper);\n\n        if (this._handleCropperResize._.rectangle.height < 30 || this._handleCropperResize._.rectangle.width < 30) {\n            return;\n        }\n\n        if (!this.arePointsInsideRectangle(this._getRectangleVertices(this._handleCropperResize._.rectangle), this.imageVerticeCoords)) {\n            return;\n        }\n\n        // Translate back to center-center origin.\n        this.clipper.set({\n            top: this._handleCropperResize._.rectangle.top + this._handleCropperResize._.rectangle.height / 2,\n            left: this._handleCropperResize._.rectangle.left + this._handleCropperResize._.rectangle.width / 2,\n            width: this._handleCropperResize._.rectangle.width,\n            height: this._handleCropperResize._.rectangle.height\n        });\n\n        this._redrawCropperElements();\n    },\n\n    _calculateNewCropperSizeByDeltas: function(startingRectangle, deltaX, deltaY, cropperDirection) {\n        if (typeof this._calculateNewCropperSizeByDeltas._ === 'undefined') {\n            this._calculateNewCropperSizeByDeltas._ = {};\n        }\n\n        // Center deltas\n        this._calculateNewCropperSizeByDeltas._.topDelta = 0;\n        this._calculateNewCropperSizeByDeltas._.leftDelta = 0;\n\n        this._calculateNewCropperSizeByDeltas._.rectangle = startingRectangle;\n        this._calculateNewCropperSizeByDeltas._.deltaX = deltaX;\n        this._calculateNewCropperSizeByDeltas._.deltaY = deltaY;\n\n        // Lock the aspect ratio if needed\n        if (this.croppingConstraint) {\n            this._calculateNewCropperSizeByDeltas._.change = 0;\n\n            // Take into account the mouse direction and figure out the \"real\" change in cropper size\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.change = this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.change = -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? -this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'br':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.change = Math.abs(this._calculateNewCropperSizeByDeltas._.deltaY) > Math.abs(this._calculateNewCropperSizeByDeltas._.deltaX) ? this._calculateNewCropperSizeByDeltas._.deltaY : -this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n\n            if (this.croppingConstraint > 1) {\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this.croppingConstraint;\n            } else {\n                this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.change;\n                this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this.croppingConstraint;\n            }\n\n            this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n\n            // Make the cropper compress/expand relative to the correct edge to make it feel \"right\"\n            switch (cropperDirection) {\n                case 't':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'b':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left += -this._calculateNewCropperSizeByDeltas._.deltaX / 2;\n                    break;\n                case 'r':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top += -this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    break;\n                case 'l':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY / 2;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'tr':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    break;\n                case 'tl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.top -= this._calculateNewCropperSizeByDeltas._.deltaY;\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n                case 'bl':\n                    this._calculateNewCropperSizeByDeltas._.rectangle.left -= this._calculateNewCropperSizeByDeltas._.deltaX;\n                    break;\n            }\n        } else {\n            // Lock the aspect ratio\n            if (this.shiftKeyHeld &&\n                (cropperDirection === 'tl' || cropperDirection === 'tr' ||\n                    cropperDirection === 'bl' || cropperDirection === 'br')\n            ) {\n                this._calculateNewCropperSizeByDeltas._.ratio;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaY = this._calculateNewCropperSizeByDeltas._.deltaX / this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaY *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                } else {\n                    this._calculateNewCropperSizeByDeltas._.ratio = startingRectangle.width / startingRectangle.height;\n                    this._calculateNewCropperSizeByDeltas._.deltaX = this._calculateNewCropperSizeByDeltas._.deltaY * this._calculateNewCropperSizeByDeltas._.ratio;\n                    this._calculateNewCropperSizeByDeltas._.deltaX *= (cropperDirection === 'tr' || cropperDirection === 'bl') ? -1 : 1;\n                }\n            }\n\n            if (cropperDirection.match(/t/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.top += this._calculateNewCropperSizeByDeltas._.deltaY;\n                this._calculateNewCropperSizeByDeltas._.rectangle.height -= this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/b/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.height += this._calculateNewCropperSizeByDeltas._.deltaY;\n            }\n            if (cropperDirection.match(/r/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.width += this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n            if (cropperDirection.match(/l/)) {\n                this._calculateNewCropperSizeByDeltas._.rectangle.left += this._calculateNewCropperSizeByDeltas._.deltaX;\n                this._calculateNewCropperSizeByDeltas._.rectangle.width -= this._calculateNewCropperSizeByDeltas._.deltaX;\n            }\n        }\n\n        this._calculateNewCropperSizeByDeltas._.rectangle.top = this._calculateNewCropperSizeByDeltas._.rectangle.top;\n        this._calculateNewCropperSizeByDeltas._.rectangle.left = this._calculateNewCropperSizeByDeltas._.rectangle.left;\n        this._calculateNewCropperSizeByDeltas._.rectangle.width = this._calculateNewCropperSizeByDeltas._.rectangle.width;\n        this._calculateNewCropperSizeByDeltas._.rectangle.height = this._calculateNewCropperSizeByDeltas._.rectangle.height;\n\n        return this._calculateNewCropperSizeByDeltas._.rectangle;\n    },\n\n    /**\n     * Set mouse cursor by it's position over cropper.\n     *\n     * @param ev\n     */\n    _setMouseCursor: function(ev) {\n        if (typeof this._setMouseCursor._ === 'undefined') {\n            this._setMouseCursor._ = {};\n        }\n\n        if (Garnish.isMobileBrowser(true)) {\n            return;\n        }\n        this._setMouseCursor._.cursor = 'default';\n        this._setMouseCursor._.handle = this.croppingCanvas && this._cropperHandleHitTest(ev);\n        if (this.focalPoint && this._isMouseOver(ev, this.focalPoint)) {\n            this._setMouseCursor._.cursor = 'pointer';\n        } else if (this._setMouseCursor._.handle) {\n            if (this._setMouseCursor._.handle === 't' || this._setMouseCursor._.handle === 'b') {\n                this._setMouseCursor._.cursor = 'ns-resize';\n            } else if (this._setMouseCursor._.handle === 'l' || this._setMouseCursor._.handle === 'r') {\n                this._setMouseCursor._.cursor = 'ew-resize';\n            } else if (this._setMouseCursor._.handle === 'tl' || this._setMouseCursor._.handle === 'br') {\n                this._setMouseCursor._.cursor = 'nwse-resize';\n            } else if (this._setMouseCursor._.handle === 'bl' || this._setMouseCursor._.handle === 'tr') {\n                this._setMouseCursor._.cursor = 'nesw-resize';\n            }\n        } else if (this.croppingCanvas && this._isMouseOver(ev, this.clipper)) {\n            this._setMouseCursor._.cursor = 'move';\n        }\n\n        $('.body').css('cursor', this._setMouseCursor._.cursor);\n    },\n\n    /**\n     * Test whether the mouse cursor is on any cropper handles.\n     *\n     * @param ev\n     */\n    _cropperHandleHitTest: function(ev) {\n        if (typeof this._cropperHandleHitTest._ === 'undefined') {\n            this._cropperHandleHitTest._ = {};\n        }\n\n        this._cropperHandleHitTest._.parentOffset = this.$croppingCanvas.offset();\n        this._cropperHandleHitTest._.mouseX = ev.pageX - this._cropperHandleHitTest._.parentOffset.left;\n        this._cropperHandleHitTest._.mouseY = ev.pageY - this._cropperHandleHitTest._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._cropperHandleHitTest._.lb = this.clipper.left - this.clipper.width / 2;\n        this._cropperHandleHitTest._.rb = this._cropperHandleHitTest._.lb + this.clipper.width;\n        this._cropperHandleHitTest._.tb = this.clipper.top - this.clipper.height / 2;\n        this._cropperHandleHitTest._.bb = this._cropperHandleHitTest._.tb + this.clipper.height;\n\n        // Left side top/bottom\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tl';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 3 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'bl';\n            }\n        }\n        // Right side top/bottom\n        if (this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 13 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 3) {\n            if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 3) {\n                return 'tr';\n            } else if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 10) {\n                return 'br';\n            }\n        }\n\n        // Left or right\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.lb + 3 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb - 3 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'l';\n        }\n        if (this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb + 1 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.rb - 5 && this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb - 10 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb + 10) {\n            return 'r';\n        }\n\n        // Top or bottom\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.tb + 4 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.tb - 2 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 't';\n        }\n        if (this._cropperHandleHitTest._.mouseY < this._cropperHandleHitTest._.bb + 2 && this._cropperHandleHitTest._.mouseY > this._cropperHandleHitTest._.bb - 4 && this._cropperHandleHitTest._.mouseX > this._cropperHandleHitTest._.lb + 10 && this._cropperHandleHitTest._.mouseX < this._cropperHandleHitTest._.rb - 10) {\n            return 'b';\n        }\n\n        return false;\n    },\n\n    /**\n     * Test whether the mouse cursor is on a fabricJS object.\n     *\n     * @param object\n     * @param event\n     *\n     * @return boolean\n     */\n\n    _isMouseOver: function(event, object) {\n        if (typeof this._isMouseOver._ === 'undefined') {\n            this._isMouseOver._ = {};\n        }\n\n        this._isMouseOver._.parentOffset = this.$croppingCanvas.offset();\n        this._isMouseOver._.mouseX = event.pageX - this._isMouseOver._.parentOffset.left;\n        this._isMouseOver._.mouseY = event.pageY - this._isMouseOver._.parentOffset.top;\n\n        // Compensate for center origin coordinate-wise\n        this._isMouseOver._.lb = object.left - object.width / 2;\n        this._isMouseOver._.rb = this._isMouseOver._.lb + object.width;\n        this._isMouseOver._.tb = object.top - object.height / 2;\n        this._isMouseOver._.bb = this._isMouseOver._.tb + object.height;\n\n        return (\n            this._isMouseOver._.mouseX >= this._isMouseOver._.lb &&\n            this._isMouseOver._.mouseX <= this._isMouseOver._.rb &&\n            this._isMouseOver._.mouseY >= this._isMouseOver._.tb &&\n            this._isMouseOver._.mouseY <= this._isMouseOver._.bb\n        );\n    },\n\n    /**\n     * Get vertices of a rectangle defined by left,top,height and width properties.\n     * Optionally it's possible to provide offsetX and offsetY values.\n     * Left and top properties of rectangle reference the top-left corner.\n     *\n     * @param rectangle\n     * @param [offsetX]\n     * @param [offsetY]\n     */\n    _getRectangleVertices: function(rectangle, offsetX, offsetY) {\n        if (typeof this._getRectangleVertices._ === 'undefined') {\n            this._getRectangleVertices._ = {};\n        }\n\n        if (typeof offsetX === 'undefined') {\n            offsetX = 0;\n        }\n        if (typeof offsetY === 'undefined') {\n            offsetY = 0;\n        }\n\n        this._getRectangleVertices._.topLeft = {\n            x: rectangle.left + offsetX,\n            y: rectangle.top + offsetY\n        };\n\n        this._getRectangleVertices._.topRight = {x: this._getRectangleVertices._.topLeft.x + rectangle.width, y: this._getRectangleVertices._.topLeft.y};\n        this._getRectangleVertices._.bottomRight = {x: this._getRectangleVertices._.topRight.x, y: this._getRectangleVertices._.topRight.y + rectangle.height};\n        this._getRectangleVertices._.bottomLeft = {x: this._getRectangleVertices._.topLeft.x, y: this._getRectangleVertices._.bottomRight.y};\n\n        return [this._getRectangleVertices._.topLeft, this._getRectangleVertices._.topRight, this._getRectangleVertices._.bottomRight, this._getRectangleVertices._.bottomLeft];\n    },\n\n    /**\n     * Set image vertice coordinates for an image that's been zoomed to fit.\n     */\n    _setFittedImageVerticeCoordinates: function() {\n        this.imageVerticeCoords = this.getImageVerticeCoords('fit');\n    },\n\n    /**\n     * Get image vertice coords by a zoom mode and taking into account the straightening angle.\n     * The zoomMode can be either \"cover\", \"fit\" or a discrete float value.\n     *\n     * @param zoomMode\n     */\n    getImageVerticeCoords: function(zoomMode) {\n        var angleInRadians = -1 * ((this.hasOrientationChanged() ? 90 : 0) + this.imageStraightenAngle) * (Math.PI / 180);\n\n        var imageDimensions = this.getScaledImageDimensions();\n\n        var ratio;\n\n        if (typeof zoomMode === \"number\") {\n            ratio = zoomMode;\n        } else if (zoomMode === \"cover\") {\n            ratio = this.getZoomToCoverRatio(imageDimensions);\n        } else {\n            ratio = this.getZoomToFitRatio(imageDimensions);\n        }\n\n        // Get the dimensions of the scaled image\n        var scaledHeight = imageDimensions.height * ratio;\n        var scaledWidth = imageDimensions.width * ratio;\n\n        // Calculate the segments of the containing box for the image.\n        // When referring to top/bottom or right/left segments, these are on the\n        // right-side and bottom projection of the containing box for the zoomed out image.\n        var topVerticalSegment = Math.cos(angleInRadians) * scaledHeight;\n        var bottomVerticalSegment = Math.sin(angleInRadians) * scaledWidth;\n        var rightHorizontalSegment = Math.cos(angleInRadians) * scaledWidth;\n        var leftHorizontalSegment = Math.sin(angleInRadians) * scaledHeight;\n\n        // Calculate the offsets from editor box for the image-containing box\n        var verticalOffset = (this.editorHeight - (topVerticalSegment + bottomVerticalSegment)) / 2;\n        var horizontalOffset = (this.editorWidth - (leftHorizontalSegment + rightHorizontalSegment)) / 2;\n\n        // Finally, calculate the image vertice coordinates\n        return {\n            a: {\n                x: horizontalOffset + rightHorizontalSegment,\n                y: verticalOffset\n            },\n            b: {\n                x: this.editorWidth - horizontalOffset,\n                y: verticalOffset + topVerticalSegment\n            },\n            c: {\n                x: horizontalOffset + leftHorizontalSegment,\n                y: this.editorHeight - verticalOffset\n            },\n            d: {\n                x: horizontalOffset,\n                y: verticalOffset + bottomVerticalSegment\n            }\n        };\n    },\n\n    /**\n     * Debug stuff by continuously rendering a fabric object on canvas.\n     *\n     * @param fabricObj\n     */\n    _debug: function(fabricObj) {\n        this.canvas.remove(this.debugger);\n        this.debugger = fabricObj;\n        this.canvas.add(this.debugger);\n    },\n\n    /**\n     * Given an array of points in the form of {x: int, y:int} and a rectangle in the form of\n     * {a:{x:int, y:int}, b:{x:int, y:int}, c:{x:int, y:int}} (the fourth vertice is unnecessary)\n     * return true if the point is in the rectangle.\n     *\n     * Adapted from: http://stackoverflow.com/a/2763387/2040791\n     *\n     * @param points\n     * @param rectangle\n     */\n    arePointsInsideRectangle: function(points, rectangle) {\n        if (typeof this.arePointsInsideRectangle._ === 'undefined') {\n            this.arePointsInsideRectangle._ = {};\n        }\n\n        // Pre-calculate the vectors and scalar products for two rectangle edges\n        this.arePointsInsideRectangle._.ab = this._getVector(rectangle.a, rectangle.b);\n        this.arePointsInsideRectangle._.bc = this._getVector(rectangle.b, rectangle.c);\n        this.arePointsInsideRectangle._.scalarAbAb = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ab);\n        this.arePointsInsideRectangle._.scalarBcBc = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bc);\n\n        for (this.arePointsInsideRectangle._.i = 0; this.arePointsInsideRectangle._.i < points.length; this.arePointsInsideRectangle._.i++) {\n            this.arePointsInsideRectangle._.point = points[this.arePointsInsideRectangle._.i];\n\n            // Calculate the vectors for two rectangle sides and for\n            // the vector from vertices a and b to the point P\n            this.arePointsInsideRectangle._.ap = this._getVector(rectangle.a, this.arePointsInsideRectangle._.point);\n            this.arePointsInsideRectangle._.bp = this._getVector(rectangle.b, this.arePointsInsideRectangle._.point);\n\n            // Calculate scalar or dot products for some vector combinations\n            this.arePointsInsideRectangle._.scalarAbAp = this._getScalarProduct(this.arePointsInsideRectangle._.ab, this.arePointsInsideRectangle._.ap);\n            this.arePointsInsideRectangle._.scalarBcBp = this._getScalarProduct(this.arePointsInsideRectangle._.bc, this.arePointsInsideRectangle._.bp);\n\n            this.arePointsInsideRectangle._.projectsOnAB = 0 <= this.arePointsInsideRectangle._.scalarAbAp && this.arePointsInsideRectangle._.scalarAbAp <= this.arePointsInsideRectangle._.scalarAbAb;\n            this.arePointsInsideRectangle._.projectsOnBC = 0 <= this.arePointsInsideRectangle._.scalarBcBp && this.arePointsInsideRectangle._.scalarBcBp <= this.arePointsInsideRectangle._.scalarBcBc;\n\n            if (!(this.arePointsInsideRectangle._.projectsOnAB && this.arePointsInsideRectangle._.projectsOnBC)) {\n                return false;\n            }\n        }\n\n        return true;\n    },\n\n    /**\n     * Returns an object representing the vector between points a and b.\n     *\n     * @param a\n     * @param b\n     */\n    _getVector: function(a, b) {\n        return {x: b.x - a.x, y: b.y - a.y};\n    },\n\n    /**\n     * Returns the scalar product of two vectors\n     *\n     * @param a\n     * @param b\n     */\n    _getScalarProduct: function(a, b) {\n        return a.x * b.x + a.y * b.y;\n    },\n\n    /**\n     * Returns the magnitude of a vector_redrawCropperElements\n     * .\n     *\n     * @param vector\n     */\n    _getVectorMagnitude: function(vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n    },\n\n    /**\n     * Returns the angle between two vectors in degrees with two decimal points\n     *\n     * @param a\n     * @param b\n     */\n    _getAngleBetweenVectors: function(a, b) {\n        return Math.round(Math.acos(Math.min(1, this._getScalarProduct(a, b) / (this._getVectorMagnitude(a) * this._getVectorMagnitude(b)))) * 180 / Math.PI * 100) / 100;\n    },\n\n    /**\n     * Return the rectangle edge crossed by an imaginary line drawn from editor center to a vertex\n     *\n     * @param rectangle\n     * @param vertex\n     *\n     * @returns {*}\n     */\n    _getEdgeCrossed: function(rectangle, vertex) {\n        // Determine over which edge the vertex is\n        var edgePoints = [\n            [rectangle.a, rectangle.b],\n            [rectangle.b, rectangle.c],\n            [rectangle.c, rectangle.d],\n            [rectangle.d, rectangle.a]\n        ];\n\n        var centerPoint = {x: this.editorWidth / 2, y: this.editorHeight / 2};\n        var smallestDiff = 180;\n        var edgeCrossed = null;\n\n        // Test each edge\n        for (var edgeIndex = 0; edgeIndex < edgePoints.length; edgeIndex++) {\n            var edge = edgePoints[edgeIndex];\n            var toCenter = this._getVector(edge[0], centerPoint);\n            var edgeVector = this._getVector(edge[0], edge[1]);\n            var toVertex = this._getVector(edge[0], vertex);\n\n            // If the angle between toCenter/toVertex is the sum of\n            // angles between edgeVector/toCenter and edgeVector/toVertex, it means that\n            // the edgeVector is between the other two meaning that this is the offending vertex.\n            // To avoid the rounding errors, we'll take the closest match\n            var diff = Math.abs(this._getAngleBetweenVectors(toCenter, toVertex) - (this._getAngleBetweenVectors(toCenter, edgeVector) + this._getAngleBetweenVectors(edgeVector, toVertex)));\n\n            if (diff < smallestDiff) {\n                smallestDiff = diff;\n                edgeCrossed = edge;\n            }\n        }\n\n        return edgeCrossed;\n    },\n\n    /**\n     * Get the image bounding box by image scaled dimensions, taking ingo account the straightening angle.\n     *\n     * @param dimensions\n     */\n    _getImageBoundingBox: function(dimensions) {\n        var box = {};\n\n        var angleInRadians = Math.abs(this.imageStraightenAngle) * (Math.PI / 180);\n\n        var proportion = dimensions.height / dimensions.width;\n        box.height = dimensions.width * (Math.sin(angleInRadians) + Math.cos(angleInRadians) * proportion);\n        box.width = dimensions.width * (Math.cos(angleInRadians) + Math.sin(angleInRadians) * proportion);\n\n        if (this.hasOrientationChanged()) {\n            var temp = box.width;\n            box.width = box.height;\n            box.height = temp;\n        }\n\n        return box;\n    }\n}, {\n    defaults: {\n        animationDuration: 100,\n        allowSavingAsNew: true,\n        onSave: $.noop,\n        allowDegreeFractions: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset index class\n */\nCraft.AssetIndex = Craft.BaseElementIndex.extend({\n    $includeSubfoldersContainer: null,\n    $includeSubfoldersCheckbox: null,\n    showingIncludeSubfoldersCheckbox: false,\n\n    $uploadButton: null,\n    $uploadInput: null,\n    $progressBar: null,\n    $folders: null,\n\n    uploader: null,\n    promptHandler: null,\n    progressBar: null,\n\n    _uploadTotalFiles: 0,\n    _uploadFileProgress: {},\n    _uploadedAssetIds: [],\n    _currentUploaderSettings: {},\n\n    _assetDrag: null,\n    _folderDrag: null,\n    _expandDropTargetFolderTimeout: null,\n    _tempExpandedFolders: [],\n\n    _fileConflictTemplate: {\n        choices: [\n            {value: 'keepBoth', title: Craft.t('app', 'Keep both')}, {value: 'replace', title: Craft.t('app', 'Replace it')}\n        ]\n    },\n    _folderConflictTemplate: {\n        choices: [\n            {value: 'replace', title: Craft.t('app', 'Replace the folder (all existing files will be deleted)')}, {value: 'merge', title: Craft.t('app', 'Merge the folder (any conflicting files will be replaced)')}\n        ]\n    },\n\n    init: function(elementType, $container, settings) {\n        this.base(elementType, $container, settings);\n\n        if (this.settings.context === 'index') {\n            if (!this._folderDrag) {\n                this._initIndexPageMode();\n            }\n\n            this.addListener(Garnish.$win, 'resize,scroll', '_positionProgressBar');\n        } else {\n            this.addListener(this.$main, 'scroll', '_positionProgressBar');\n\n            if (this.settings.modal) {\n                this.settings.modal.on('updateSizeAndPosition', this._positionProgressBar.bind(this));\n            }\n        }\n    },\n\n    initSources: function() {\n        if (this.settings.context === 'index' && !this._folderDrag) {\n            this._initIndexPageMode();\n        }\n\n        return this.base();\n    },\n\n    initSource: function($source) {\n        this.base($source);\n\n        this._createFolderContextMenu($source);\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                if ($source.data('folder-id')) {\n                    this._folderDrag.addItems($source.parent());\n                }\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    deinitSource: function($source) {\n        this.base($source);\n\n        // Does this source have a context menu?\n        var contextMenu = $source.data('contextmenu');\n\n        if (contextMenu) {\n            contextMenu.destroy();\n        }\n\n        if (this.settings.context === 'index') {\n            if (this._folderDrag && this._getSourceLevel($source) > 1) {\n                this._folderDrag.removeItems($source.parent());\n            }\n\n            if (this._assetDrag) {\n                this._assetDrag.updateDropTargets();\n            }\n        }\n    },\n\n    _getSourceLevel: function($source) {\n        return $source.parentsUntil('nav', 'ul').length;\n    },\n\n    /**\n     * Initialize the index page-specific features\n     */\n    _initIndexPageMode: function() {\n        if (this._folderDrag) {\n            return;\n        }\n\n        // Make the elements selectable\n        this.settings.selectable = true;\n        this.settings.multiSelect = true;\n\n        // Asset dragging\n        // ---------------------------------------------------------------------\n\n        this._assetDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n            filter: () => this.view.getSelectedElements().has('div.element[data-movable]'),\n            helper: $file => this._getFileDragHelper($file),\n            dropTargets: () => {\n                // Which data attribute should we be checking?\n                var attr;\n                if (this._assetDrag.$draggee && this._assetDrag.$draggee.has('.element[data-peer-file]').length) {\n                    attr = 'data-can-move-peer-files-to';\n                } else {\n                    attr = 'data-can-move-to';\n                }\n\n                var targets = [];\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder\n                    var $source = this.$sources.eq(i);\n                    if (Garnish.hasAttr($source, attr)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFileDragStop.bind(this),\n            helperBaseZindex: 800\n        });\n\n        // Folder dragging\n        // ---------------------------------------------------------------------\n\n        this._folderDrag = new Garnish.DragDrop({\n            activeDropTargetClass: 'sel',\n            helperOpacity: 0.75,\n\n            filter: () => {\n                // Return each of the selected <a>'s parent <li>s, except for top level drag attempts.\n                var $selected = this.sourceSelect.getSelectedItems(),\n                    draggees = [];\n\n                for (var i = 0; i < $selected.length; i++) {\n                    var $source = $selected.eq(i);\n\n                    if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n                        continue;\n                    }\n\n                    if ($source.hasClass('sel') && this._getSourceLevel($source) > 1) {\n                        draggees.push($source.parent()[0]);\n                    }\n                }\n\n                return $(draggees);\n            },\n\n            helper: $draggeeHelper => {\n                var $helperSidebar = $('<div class=\"sidebar\" style=\"padding-top: 0; padding-bottom: 0;\"/>'),\n                    $helperNav = $('<nav/>').appendTo($helperSidebar),\n                    $helperUl = $('<ul/>').appendTo($helperNav);\n\n                $draggeeHelper.appendTo($helperUl).removeClass('expanded');\n                $draggeeHelper.children('a').addClass('sel');\n\n                // Match the style\n                $draggeeHelper.css({\n                    'padding-top': this._folderDrag.$draggee.css('padding-top'),\n                    'padding-right': this._folderDrag.$draggee.css('padding-right'),\n                    'padding-bottom': this._folderDrag.$draggee.css('padding-bottom'),\n                    'padding-left': this._folderDrag.$draggee.css('padding-left')\n                });\n\n                return $helperSidebar;\n            },\n\n            dropTargets: () => {\n                var targets = [];\n\n                // Tag the dragged folder and it's subfolders\n                var draggedSourceIds = [];\n                this._folderDrag.$draggee.find('a[data-key]').each(function() {\n                    draggedSourceIds.push($(this).data('key'));\n                });\n\n                for (var i = 0; i < this.$sources.length; i++) {\n                    // Make sure it's a volume folder and not one of the dragged folders\n                    var $source = this.$sources.eq(i),\n                        key = $source.data('key');\n\n                    if (!this._getFolderUidFromSourceKey(key)) {\n                        continue;\n                    }\n\n                    if (!Craft.inArray(key, draggedSourceIds)) {\n                        targets.push($source);\n                    }\n                }\n\n                return targets;\n            },\n\n            onDragStart: this._onDragStart.bind(this),\n            onDropTargetChange: this._onDropTargetChange.bind(this),\n            onDragStop: this._onFolderDragStop.bind(this),\n        });\n    },\n\n    /**\n     * On file drag stop\n     */\n    _onFileDragStop: function() {\n        if (this._assetDrag.$activeDropTarget && this._assetDrag.$activeDropTarget[0] !== this.$source[0]) {\n            // Keep it selected\n            var originatingSource = this.$source;\n\n            var targetFolderId = this._assetDrag.$activeDropTarget.data('folder-id'),\n                originalAssetIds = [];\n\n            // For each file, prepare array data.\n            for (var i = 0; i < this._assetDrag.$draggee.length; i++) {\n                var originalAssetId = Craft.getElementInfo(this._assetDrag.$draggee[i]).id;\n\n                originalAssetIds.push(originalAssetId);\n            }\n\n            // Are any files actually getting moved?\n            if (originalAssetIds.length) {\n                this.setIndexBusy();\n\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(originalAssetIds.length);\n                this.progressBar.showProgressBar();\n\n                // For each file to move a separate request\n                var parameterArray = [];\n                for (i = 0; i < originalAssetIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-asset',\n                        params: {\n                            assetId: originalAssetIds[i],\n                            folderId: targetFolderId\n                        }\n                    });\n                }\n\n                // Define the callback for when all file moves are complete\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var response = responseArray[i];\n\n                        // Push prompt into prompt array\n                        if (response.conflict) {\n                            this.promptHandler.addPrompt({\n                                assetId: response.assetId,\n                                suggestedFilename: response.suggestedFilename,\n                                prompt: {message: response.conflict, choices: this._fileConflictTemplate.choices}\n                            });\n                        }\n\n                        if (response.error) {\n                            alert(response.error);\n                        }\n                    }\n\n                    this.setIndexAvailable();\n                    this.progressBar.hideProgressBar();\n                    var reloadIndex = false;\n\n                    var performAfterMoveActions = function() {\n                        // Select original source\n                        this.sourceSelect.selectItem(originatingSource);\n\n                        // Make sure we use the correct offset when fetching the next page\n                        this._totalVisible -= this._assetDrag.$draggee.length;\n\n                        // And remove the elements that have been moved away\n                        for (var i = 0; i < originalAssetIds.length; i++) {\n                            $('[data-id=' + originalAssetIds[i] + ']').remove();\n                        }\n\n                        this.view.deselectAllElements();\n                        this._collapseExtraExpandedFolders(targetFolderId);\n\n                        if (reloadIndex) {\n                            this.updateElements();\n                        }\n                    };\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            var newParameterArray = [];\n\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    reloadIndex = true;\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'keepBoth') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            filename: returnData[i].suggestedFilename\n                                        }\n                                    });\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    newParameterArray.push({\n                                        action: 'assets/move-asset',\n                                        params: {\n                                            folderId: targetFolderId,\n                                            assetId: returnData[i].assetId,\n                                            force: true\n                                        }\n                                    });\n                                }\n                            }\n\n                            // Nothing to do, carry on\n                            if (newParameterArray.length === 0) {\n                                performAfterMoveActions.apply(this);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                // Move conflicting files again with resolutions now\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this._assetDrag.fadeOutHelpers();\n                        this.promptHandler.showBatchPrompts(promptCallback);\n                    } else {\n                        performAfterMoveActions.apply(this);\n                        this._assetDrag.fadeOutHelpers();\n                    }\n                };\n\n                // Initiate the file move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._assetDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * On folder drag stop\n     */\n    _onFolderDragStop: function() {\n        // Only move if we have a valid target and we're not trying to move into our direct parent\n        if (\n            this._folderDrag.$activeDropTarget &&\n            this._folderDrag.$activeDropTarget.siblings('ul').children('li').filter(this._folderDrag.$draggee).length === 0\n        ) {\n            var targetFolderId = this._folderDrag.$activeDropTarget.data('folder-id');\n\n            this._collapseExtraExpandedFolders(targetFolderId);\n\n            // Get the old folder IDs, and sort them so that we're moving the most-nested folders first\n            var folderIds = [];\n\n            for (var i = 0; i < this._folderDrag.$draggee.length; i++) {\n                var $a = this._folderDrag.$draggee.eq(i).children('a'),\n                    folderId = $a.data('folder-id');\n\n                // Make sure it's not already in the target folder and use this single folder Id.\n                if (folderId != targetFolderId) {\n                    folderIds.push(folderId);\n                    break;\n                }\n            }\n\n            if (folderIds.length) {\n                folderIds.sort();\n                folderIds.reverse();\n\n                this.setIndexBusy();\n                this._positionProgressBar();\n                this.progressBar.resetProgressBar();\n                this.progressBar.setItemCount(folderIds.length);\n                this.progressBar.showProgressBar();\n\n                var parameterArray = [];\n\n                for (i = 0; i < folderIds.length; i++) {\n                    parameterArray.push({\n                        action: 'assets/move-folder',\n                        params: {\n                            folderId: folderIds[i],\n                            parentId: targetFolderId\n                        }\n                    });\n                }\n\n                // Increment, so to avoid displaying folder files that are being moved\n                this.requestId++;\n\n                /*\n                 Here's the rundown:\n                 1) Send all the folders being moved\n                 2) Get results:\n                 a) For all conflicting, receive prompts and resolve them to get:\n                 b) For all valid move operations: by now server has created the needed folders\n                 in target destination. Server returns an array of file move operations\n                 c) server also returns a list of all the folder id changes\n                 d) and the data-id of node to be removed, in case of conflict\n                 e) and a list of folders to delete after the move\n                 3) From data in 2) build a large file move operation array\n                 4) Create a request loop based on this, so we can display progress bar\n                 5) when done, delete all the folders and perform other maintenance\n                 6) Champagne\n                 */\n\n                // This will hold the final list of files to move\n                var fileMoveList = [];\n\n                var newSourceKey = '';\n\n                var onMoveFinish = responseArray => {\n                    this.promptHandler.resetPrompts();\n\n                    // Loop trough all the responses\n                    for (var i = 0; i < responseArray.length; i++) {\n                        var data = responseArray[i];\n\n                        // If successful and have data, then update\n                        if (data.success) {\n                            if (data.transferList) {\n                                fileMoveList = data.transferList;\n                            }\n\n                            if (data.newFolderId) {\n                                newSourceKey = this._folderDrag.$activeDropTarget.data('key') + '/folder:' + data.newFolderUid;\n                            }\n                        }\n\n                        // Push prompt into prompt array\n                        if (data.conflict) {\n                            data.prompt = {\n                                message: data.conflict,\n                                choices: this._folderConflictTemplate.choices\n                            };\n\n                            this.promptHandler.addPrompt(data);\n                        }\n\n                        if (data.error) {\n                            alert(data.error);\n                        }\n                    }\n\n                    if (this.promptHandler.getPromptCount()) {\n                        // Define callback for completing all prompts\n                        var promptCallback = returnData => {\n                            this.promptHandler.resetPrompts();\n\n                            var newParameterArray = [];\n\n                            var params = {};\n                            // Loop trough all returned data and prepare a new request array\n                            for (var i = 0; i < returnData.length; i++) {\n                                if (returnData[i].choice === 'cancel') {\n                                    continue;\n                                }\n\n                                if (returnData[i].choice === 'replace') {\n                                    params.force = true;\n                                }\n\n                                if (returnData[i].choice === 'merge') {\n                                    params.merge = true;\n                                }\n\n                                params.folderId = data.folderId;\n                                params.parentId = data.parentId;\n\n                                newParameterArray.push({\n                                    action: 'assets/move-folder',\n                                    params: params\n                                });\n                            }\n\n                            // Start working on them lists, baby\n                            if (newParameterArray.length === 0) {\n                                this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                            } else {\n                                // Start working\n                                this.setIndexBusy();\n                                this.progressBar.resetProgressBar();\n                                this.progressBar.setItemCount(this.promptHandler.getPromptCount());\n                                this.progressBar.showProgressBar();\n\n                                this._performBatchRequests(newParameterArray, onMoveFinish);\n                            }\n                        };\n\n                        this.promptHandler.showBatchPrompts(promptCallback);\n\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                    } else {\n                        this._performActualFolderMove(fileMoveList, folderIds, newSourceKey);\n                    }\n                };\n\n                // Initiate the folder move with the built array, index of 0 and callback to use when done\n                this._performBatchRequests(parameterArray, onMoveFinish);\n\n                // Skip returning dragees until we get the Ajax response\n                return;\n            }\n        } else {\n            // Add the .sel class back on the selected source\n            this.$source.addClass('sel');\n\n            this._collapseExtraExpandedFolders();\n        }\n\n        this._folderDrag.returnHelpersToDraggees();\n    },\n\n    /**\n     * Really move the folder. Like really. For real.\n     */\n    _performActualFolderMove: function(fileMoveList, folderDeleteList, newSourceKey) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n        this.progressBar.setItemCount(1);\n        this.progressBar.showProgressBar();\n\n        var moveCallback = folderDeleteList => {\n            // Delete the old folders\n            var counter = 0;\n            var limit = folderDeleteList.length;\n            for (var i = 0; i < folderDeleteList.length; i++) {\n                // When all folders are deleted, reload the sources.\n                Craft.postActionRequest('assets/delete-folder', {folderId: folderDeleteList[i]}, () => {\n                    if (++counter === limit) {\n                        this.setIndexAvailable();\n                        this.progressBar.hideProgressBar();\n                        this._folderDrag.returnHelpersToDraggees();\n                        this.setInstanceState('selectedSource', newSourceKey);\n                        this.refreshSources();\n                    }\n                });\n            }\n        };\n\n        if (fileMoveList.length > 0) {\n            var parameterArray = [];\n\n            for (var i = 0; i < fileMoveList.length; i++) {\n                parameterArray.push({\n                    action: 'assets/move-asset',\n                    params: fileMoveList[i]\n                });\n            }\n            this._performBatchRequests(parameterArray, function() {\n                moveCallback(folderDeleteList);\n            });\n        } else {\n            moveCallback(folderDeleteList);\n        }\n    },\n\n    /**\n     * Returns the root level source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getRootSource: function($source) {\n        var $parent;\n        while (($parent = this._getParentSource($source)) && $parent.length) {\n            $source = $parent;\n        }\n        return $source;\n    },\n\n    /**\n     * Get parent source for a source.\n     *\n     * @param $source\n     * @returns {*}\n     * @private\n     */\n    _getParentSource: function($source) {\n        if (this._getSourceLevel($source) > 1) {\n            return $source.parent().parent().siblings('a');\n        }\n    },\n\n    _selectSourceByFolderId: function(targetFolderId) {\n        var $targetSource = this._getSourceByKey(targetFolderId);\n\n        // Make sure that all the parent sources are expanded and this source is visible.\n        var $parentSources = $targetSource.parent().parents('li');\n\n        for (var i = 0; i < $parentSources.length; i++) {\n            var $parentSource = $($parentSources[i]);\n\n            if (!$parentSource.hasClass('expanded')) {\n                $parentSource.children('.toggle').trigger('click');\n            }\n        }\n\n        this.selectSource($targetSource);\n        this.updateElements();\n    },\n\n    /**\n     * Initialize the uploader.\n     *\n     * @private\n     */\n    afterInit: function() {\n        if (!this.$uploadButton) {\n            this.$uploadButton = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                'data-icon': 'upload',\n                style: 'position: relative; overflow: hidden;',\n                text: Craft.t('app', 'Upload files'),\n            });\n            this.addButton(this.$uploadButton);\n\n            this.$uploadInput = $('<input type=\"file\" multiple=\"multiple\" name=\"assets-upload\" />').hide().insertBefore(this.$uploadButton);\n        }\n\n        this.promptHandler = new Craft.PromptHandler();\n        this.progressBar = new Craft.ProgressBar(this.$main, true);\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            fileInput: this.$uploadInput,\n            dropZone: this.$container\n        };\n\n        options.events = {\n            fileuploadstart: this._onUploadStart.bind(this),\n            fileuploadprogressall: this._onUploadProgress.bind(this),\n            fileuploaddone: this._onUploadComplete.bind(this),\n        };\n\n        if (this.settings.criteria && typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        this._currentUploaderSettings = options;\n\n        this.uploader = new Craft.Uploader(this.$uploadButton, options);\n\n        this.$uploadButton.on('click', () => {\n            if (this.$uploadButton.hasClass('disabled')) {\n                return;\n            }\n            if (!this.isIndexBusy) {\n                this.$uploadButton.parent().find('input[name=assets-upload]').trigger('click');\n            }\n        });\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific volume in the URL?\n        if (this.settings.context === 'index' && typeof defaultVolumeHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n                if ($source.data('volume-handle') === defaultVolumeHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    onSelectSource: function() {\n        var $source = this._getSourceByKey(this.sourceKey);\n        var folderId = $source.data('folder-id');\n\n        if (folderId && Garnish.hasAttr(this.$source, 'data-can-upload')) {\n            this.uploader.setParams({\n                folderId: this.$source.attr('data-folder-id')\n            });\n            this.$uploadButton.removeClass('disabled');\n        } else {\n            this.$uploadButton.addClass('disabled');\n        }\n\n        // Update the URL if we're on the Assets index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'assets';\n            var $rootSource = this._getRootSource($source);\n            if ($rootSource && $rootSource.data('volume-handle')) {\n                uri += '/' + $rootSource.data('volume-handle');\n            }\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n\n        this.base();\n    },\n\n    _getFolderUidFromSourceKey: function(sourceKey) {\n        var m = sourceKey.match(/\\bfolder:([0-9a-f\\-]+)$/);\n\n        return m ? m[1] : null;\n    },\n\n    startSearching: function() {\n        // Does this source have subfolders?\n        if (!this.settings.hideSidebar && this.$source.siblings('ul').length) {\n            if (this.$includeSubfoldersContainer === null) {\n                var id = 'includeSubfolders-' + Math.floor(Math.random() * 1000000000);\n\n                this.$includeSubfoldersContainer = $('<div style=\"margin-bottom: -25px; opacity: 0;\"/>').insertAfter(this.$search);\n                var $subContainer = $('<div style=\"padding-top: 5px;\"/>').appendTo(this.$includeSubfoldersContainer);\n                this.$includeSubfoldersCheckbox = $('<input type=\"checkbox\" id=\"' + id + '\" class=\"checkbox\"/>').appendTo($subContainer);\n                $('<label class=\"light smalltext\" for=\"' + id + '\"/>').text(' ' + Craft.t('app', 'Search in subfolders')).appendTo($subContainer);\n\n                this.addListener(this.$includeSubfoldersCheckbox, 'change', function() {\n                    this.setSelecetedSourceState('includeSubfolders', this.$includeSubfoldersCheckbox.prop('checked'));\n                    this.updateElements();\n                });\n            } else {\n                this.$includeSubfoldersContainer.velocity('stop');\n            }\n\n            var checked = this.getSelectedSourceState('includeSubfolders', false);\n            this.$includeSubfoldersCheckbox.prop('checked', checked);\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: 0,\n                opacity: 1\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = true;\n        }\n\n        this.base();\n    },\n\n    stopSearching: function() {\n        if (this.showingIncludeSubfoldersCheckbox) {\n            this.$includeSubfoldersContainer.velocity('stop');\n\n            this.$includeSubfoldersContainer.velocity({\n                marginBottom: -25,\n                opacity: 0\n            }, 'fast');\n\n            this.showingIncludeSubfoldersCheckbox = false;\n        }\n\n        this.base();\n    },\n\n    getViewParams: function() {\n        var data = this.base();\n\n        if (this.showingIncludeSubfoldersCheckbox && this.$includeSubfoldersCheckbox.prop('checked')) {\n            data.criteria.includeSubfolders = true;\n        }\n\n        return data;\n    },\n\n    /**\n     * React on upload submit.\n     *\n     * @private\n     */\n    _onUploadStart: function() {\n        this.setIndexBusy();\n\n        // Initial values\n        this._positionProgressBar();\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n\n        this.promptHandler.resetPrompts();\n    },\n\n    /**\n     * Update uploaded byte count.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On Upload Complete.\n     */\n    _onUploadComplete: function(event, data) {\n        var response = data.result;\n        var filename = data.files[0].name;\n\n        var doReload = true;\n\n        if (response.success || response.conflict) {\n            // Add the uploaded file to the selected ones, if appropriate\n            this._uploadedAssetIds.push(response.assetId);\n\n            // If there is a prompt, add it to the queue\n            if (response.conflict) {\n                response.prompt = {\n                    message: Craft.t('app', response.conflict, {file: response.filename}),\n                    choices: this._fileConflictTemplate.choices\n                };\n\n                this.promptHandler.addPrompt(response);\n            }\n\n            Craft.cp.runQueue();\n        } else {\n            if (response.error) {\n                alert(Craft.t('app', 'Upload failed. The error message was: “{error}”', {error: response.error}));\n            } else {\n                alert(Craft.t('app', 'Upload failed for {filename}.', {filename}));\n            }\n\n            doReload = false;\n        }\n\n        // For the last file, display prompts, if any. If not - just update the element view.\n        if (this.uploader.isLastUpload()) {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n\n            if (this.promptHandler.getPromptCount()) {\n                this.promptHandler.showBatchPrompts(this._uploadFollowup.bind(this));\n            } else {\n                if (doReload) {\n                    this._updateAfterUpload();\n                }\n            }\n        }\n    },\n\n    /**\n     * Update the elements after an upload, setting sort to dateModified descending, if not using index.\n     *\n     * @private\n     */\n    _updateAfterUpload: function() {\n        if (this.settings.context !== 'index') {\n            this.setSortAttribute('dateModified');\n            this.setSortDirection('desc');\n        }\n        this.updateElements();\n    },\n\n    /**\n     * Follow up to an upload that triggered at least one conflict resolution prompt.\n     *\n     * @param returnData\n     * @private\n     */\n    _uploadFollowup: function(returnData) {\n        this.setIndexBusy();\n        this.progressBar.resetProgressBar();\n\n        this.promptHandler.resetPrompts();\n\n        var finalCallback = () => {\n            this.setIndexAvailable();\n            this.progressBar.hideProgressBar();\n            this._updateAfterUpload();\n        };\n\n        this.progressBar.setItemCount(returnData.length);\n\n        var doFollowup = (parameterArray, parameterIndex, callback) => {\n            var postData = {};\n            var action = null;\n\n            var followupCallback = (data, textStatus) => {\n                if (textStatus === 'success' && data.assetId) {\n                    this._uploadedAssetIds.push(data.assetId);\n                } else if (data.error) {\n                    alert(data.error);\n                }\n                parameterIndex++;\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (parameterIndex === parameterArray.length) {\n                    callback();\n                } else {\n                    doFollowup(parameterArray, parameterIndex, callback);\n                }\n            };\n\n            if (parameterArray[parameterIndex].choice === 'replace') {\n                action = 'assets/replace-file';\n                postData.sourceAssetId = parameterArray[parameterIndex].assetId;\n\n                if (parameterArray[parameterIndex].conflictingAssetId) {\n                    postData.assetId = parameterArray[parameterIndex].conflictingAssetId;\n                } else {\n                    postData.targetFilename = parameterArray[parameterIndex].filename;\n                }\n            } else if (parameterArray[parameterIndex].choice === 'cancel') {\n                action = 'assets/delete-asset';\n                postData.assetId = parameterArray[parameterIndex].assetId;\n            }\n\n            if (!action) {\n                // We don't really need to do another request, so let's pretend that already happened\n                followupCallback({assetId: parameterArray[parameterIndex].assetId}, 'success');\n            } else {\n                Craft.postActionRequest(action, postData, followupCallback);\n            }\n        };\n\n        this.progressBar.showProgressBar();\n        doFollowup(returnData, 0, finalCallback);\n    },\n\n    /**\n     * Perform actions after updating elements\n     * @private\n     */\n    onUpdateElements: function() {\n        this._onUpdateElements(false, this.view.getAllElements());\n        this.view.on('appendElements', ev => {\n            this._onUpdateElements(true, ev.newElements);\n        });\n\n        this.base();\n    },\n\n    /**\n     * Do the after-update initializations\n     * @private\n     */\n    _onUpdateElements: function(append, $newElements) {\n        if (this.settings.context === 'index') {\n            if (!append) {\n                this._assetDrag.removeAllItems();\n            }\n\n            this._assetDrag.addItems($newElements.has('div.element[data-movable]'));\n        }\n\n        // See if we have freshly uploaded files to add to selection\n        if (this._uploadedAssetIds.length) {\n            if (this.view.settings.selectable) {\n                for (var i = 0; i < this._uploadedAssetIds.length; i++) {\n                    this.view.selectElementById(this._uploadedAssetIds[i]);\n                }\n            }\n\n            // Reset the list.\n            this._uploadedAssetIds = [];\n        }\n\n        this.base(append, $newElements);\n\n        this.removeListener(this.$elements, 'keydown');\n        this.addListener(this.$elements, 'keydown', this._onKeyDown.bind(this));\n        this.view.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.view.elementSelect.$focusedItem.find('.element');\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item).find('.element');\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.view.elementSelect, settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    _onDragStart: function() {\n        this._tempExpandedFolders = [];\n    },\n\n    /**\n     * Get File Drag Helper\n     */\n    _getFileDragHelper: function($element) {\n        var currentView = this.getSelectedSourceState('mode');\n        var $outerContainer;\n        var $innerContainer;\n\n        switch (currentView) {\n            case 'table': {\n                $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer);\n                var $table = $('<table class=\"data\"/>').appendTo($innerContainer);\n                var $tbody = $('<tbody/>').appendTo($table);\n\n                $element.appendTo($tbody);\n\n                // Copy the column widths\n                this._$firstRowCells = this.view.$table.children('tbody').children('tr:first').children();\n                var $helperCells = $element.children();\n\n                for (var i = 0; i < $helperCells.length; i++) {\n                    // Hard-set the cell widths\n                    var $helperCell = $($helperCells[i]);\n\n                    // Skip the checkbox cell\n                    if ($helperCell.hasClass('checkbox-cell')) {\n                        $helperCell.remove();\n                        $outerContainer.css('margin-' + Craft.left, 19); // 26 - 7\n                        continue;\n                    }\n\n                    var $firstRowCell = $(this._$firstRowCells[i]),\n                        width = $firstRowCell.width();\n\n                    $firstRowCell.width(width);\n                    $helperCell.width(width);\n                }\n\n                return $outerContainer;\n            }\n            case 'thumbs': {\n                $outerContainer = $('<div class=\"elements thumbviewhelper\"/>').appendTo(Garnish.$bod);\n                $innerContainer = $('<ul class=\"thumbsview\"/>').appendTo($outerContainer);\n\n                $element.appendTo($innerContainer);\n\n                return $outerContainer;\n            }\n        }\n\n        return $();\n    },\n\n    /**\n     * On Drop Target Change\n     */\n    _onDropTargetChange: function($dropTarget) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        if ($dropTarget) {\n            var folderId = $dropTarget.data('folder-id');\n\n            if (folderId) {\n                this.dropTargetFolder = this._getSourceByKey(folderId);\n\n                if (this._hasSubfolders(this.dropTargetFolder) && !this._isExpanded(this.dropTargetFolder)) {\n                    this._expandDropTargetFolderTimeout = setTimeout(this._expandFolder.bind(this), 500);\n                }\n            } else {\n                this.dropTargetFolder = null;\n            }\n        }\n\n        if ($dropTarget && $dropTarget[0] !== this.$source[0]) {\n            // Temporarily remove the .sel class on the active source\n            this.$source.removeClass('sel');\n        } else {\n            this.$source.addClass('sel');\n        }\n    },\n\n    /**\n     * Collapse Extra Expanded Folders\n     */\n    _collapseExtraExpandedFolders: function(dropTargetFolderId) {\n        clearTimeout(this._expandDropTargetFolderTimeout);\n\n        // If a source ID is passed in, exclude its parents\n        var $excludedSources;\n\n        if (dropTargetFolderId) {\n            $excludedSources = this._getSourceByKey(dropTargetFolderId).parents('li').children('a');\n        }\n\n        for (var i = this._tempExpandedFolders.length - 1; i >= 0; i--) {\n            var $source = this._tempExpandedFolders[i];\n\n            // Check the parent list, if a source id is passed in\n            if (typeof $excludedSources === 'undefined' || $excludedSources.filter('[data-key=\"' + $source.data('key') + '\"]').length === 0) {\n                this._collapseFolder($source);\n                this._tempExpandedFolders.splice(i, 1);\n            }\n        }\n    },\n\n    _getSourceByKey: function(key) {\n        return this.$sources.filter('[data-key$=\"' + key + '\"]');\n    },\n\n    _hasSubfolders: function($source) {\n        return $source.siblings('ul').find('li').length;\n    },\n\n    _isExpanded: function($source) {\n        return $source.parent('li').hasClass('expanded');\n    },\n\n    _expandFolder: function() {\n        // Collapse any temp-expanded drop targets that aren't parents of this one\n        this._collapseExtraExpandedFolders(this.dropTargetFolder.data('folder-id'));\n\n        this.dropTargetFolder.siblings('.toggle').trigger('click');\n\n        // Keep a record of that\n        this._tempExpandedFolders.push(this.dropTargetFolder);\n    },\n\n    _collapseFolder: function($source) {\n        if ($source.parent().hasClass('expanded')) {\n            $source.siblings('.toggle').trigger('click');\n        }\n    },\n\n    _createFolderContextMenu: function($source) {\n        // Make sure it's a volume folder\n        if (!this._getFolderUidFromSourceKey($source.data('key'))) {\n            return;\n        }\n\n        var menuOptions = [\n            {\n                label: Craft.t('app', 'New subfolder'),\n                onClick: () => {\n                    this._createSubfolder($source);\n                },\n            },\n        ];\n\n        // For all folders that are not top folders\n        if (this.settings.context === 'index' && this._getSourceLevel($source) > 1) {\n            menuOptions.push({\n                label: Craft.t('app', 'Rename folder'),\n                onClick: () => {\n                    this._renameFolder($source);\n                },\n            });\n            menuOptions.push({\n                label: Craft.t('app', 'Delete folder'),\n                onClick: () => {\n                    this._deleteFolder($source);\n                },\n            });\n        }\n\n        new Garnish.ContextMenu($source, menuOptions, {menuClass: 'menu'});\n    },\n\n    _createSubfolder: function($parentFolder) {\n        var subfolderName = prompt(Craft.t('app', 'Enter the name of the folder'));\n\n        if (subfolderName) {\n            var params = {\n                parentId: $parentFolder.data('folder-id'),\n                folderName: subfolderName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/create-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    this._prepareParentForChildren($parentFolder);\n\n                    var $subfolder = $(\n                        '<li>' +\n                        '<a data-key=\"' + $parentFolder.data('key') + '/folder:' + data.folderUid + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-has-thumbs') ? ' data-has-thumbs' : '') +\n                        ' data-folder-id=\"' + data.folderId + '\"' +\n                        (Garnish.hasAttr($parentFolder, 'data-can-upload') ? ' data-can-upload' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-to') ? ' data-can-move-to' : '') +\n                        (Garnish.hasAttr($parentFolder, 'data-can-move-peer-files-to') ? ' data-can-move-peer-files-to' : '') +\n                        '>' +\n                        data.folderName +\n                        '</a>' +\n                        '</li>'\n                    );\n\n                    var $a = $subfolder.children('a:first');\n                    this._appendSubfolder($parentFolder, $subfolder);\n                    this.initSource($a);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    _deleteFolder: function($targetFolder) {\n        if (confirm(Craft.t('app', 'Really delete folder “{folder}”?', {folder: $.trim($targetFolder.text())}))) {\n            var params = {\n                folderId: $targetFolder.data('folder-id')\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/delete-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    var $parentFolder = this._getParentSource($targetFolder);\n\n                    // Remove folder and any trace from its parent, if needed\n                    this.deinitSource($targetFolder);\n\n                    $targetFolder.parent().remove();\n                    this._cleanUpTree($parentFolder);\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            });\n        }\n    },\n\n    /**\n     * Rename\n     */\n    _renameFolder: function($targetFolder) {\n        var oldName = $.trim($targetFolder.text()),\n            newName = prompt(Craft.t('app', 'Rename folder'), oldName);\n\n        if (newName && newName !== oldName) {\n            var params = {\n                folderId: $targetFolder.data('folder-id'),\n                newName: newName\n            };\n\n            this.setIndexBusy();\n\n            Craft.postActionRequest('assets/rename-folder', params, (data, textStatus) => {\n                this.setIndexAvailable();\n\n                if (textStatus === 'success' && data.success) {\n                    $targetFolder.text(data.newName);\n\n                    // If the current folder was renamed.\n                    if (this._getFolderUidFromSourceKey(this.sourceSelect.$selectedItems.data('key')) === this._getFolderUidFromSourceKey($targetFolder.data('key'))) {\n                        this.updateElements();\n                    }\n                }\n\n                if (textStatus === 'success' && data.error) {\n                    alert(data.error);\n                }\n            }, 'json');\n        }\n    },\n\n    /**\n     * Prepare a source folder for children folder.\n     *\n     * @param $parentFolder\n     * @private\n     */\n    _prepareParentForChildren: function($parentFolder) {\n        if (!this._hasSubfolders($parentFolder)) {\n            $parentFolder.parent().addClass('expanded').append('<div class=\"toggle\"></div><ul></ul>');\n            this.initSourceToggle($parentFolder);\n        }\n    },\n\n    /**\n     * Appends a subfolder to the parent folder at the correct spot.\n     *\n     * @param $parentFolder\n     * @param $subfolder\n     * @private\n     */\n    _appendSubfolder: function($parentFolder, $subfolder) {\n        var $subfolderList = $parentFolder.siblings('ul'),\n            $existingChildren = $subfolderList.children('li'),\n            subfolderLabel = $.trim($subfolder.children('a:first').text()),\n            folderInserted = false;\n\n        for (var i = 0; i < $existingChildren.length; i++) {\n            var $existingChild = $($existingChildren[i]);\n\n            if ($.trim($existingChild.children('a:first').text()) > subfolderLabel) {\n                $existingChild.before($subfolder);\n                folderInserted = true;\n                break;\n            }\n        }\n\n        if (!folderInserted) {\n            $parentFolder.siblings('ul').append($subfolder);\n        }\n    },\n\n    _cleanUpTree: function($parentFolder) {\n        if ($parentFolder !== null && $parentFolder.siblings('ul').children('li').length === 0) {\n            this.deinitSourceToggle($parentFolder);\n            $parentFolder.siblings('ul').remove();\n            $parentFolder.siblings('.toggle').remove();\n            $parentFolder.parent().removeClass('expanded');\n        }\n    },\n\n    _positionProgressBar: function() {\n        if (!this.progressBar) {\n            this.progressBar = new Craft.ProgressBar(this.$main, true);\n        }\n\n        var $container = $(),\n            scrollTop = 0,\n            offset = 0;\n\n        if (this.settings.context === 'index') {\n            $container = this.progressBar.$progressBar.closest('#content');\n            scrollTop = Garnish.$win.scrollTop();\n        } else {\n            $container = this.progressBar.$progressBar.closest('.main');\n            scrollTop = this.$main.scrollTop();\n        }\n\n        var containerTop = $container.offset().top;\n        var diff = scrollTop - containerTop;\n        var windowHeight = Garnish.$win.height();\n\n        if ($container.height() > windowHeight) {\n            offset = (windowHeight / 2) - 6 + diff;\n        } else {\n            offset = ($container.height() / 2) - 6;\n        }\n\n        if (this.settings.context !== 'index') {\n            offset = scrollTop + (($container.height() / 2) - 6);\n        }\n\n        this.progressBar.$progressBar.css({\n            top: offset\n        });\n    },\n\n    _performBatchRequests: function(parameterArray, finalCallback) {\n        var responseArray = [];\n\n        var doRequest = parameters => {\n            Craft.postActionRequest(parameters.action, parameters.params, (data, textStatus) => {\n                this.progressBar.incrementProcessedItemCount(1);\n                this.progressBar.updateProgressBar();\n\n                if (textStatus === 'success') {\n                    responseArray.push(data);\n\n                    // If assets were just merged we should get the reference tags updated right away\n                    Craft.cp.runQueue();\n                }\n\n                if (responseArray.length >= parameterArray.length) {\n                    finalCallback(responseArray);\n                }\n            });\n        };\n\n        for (var i = 0; i < parameterArray.length; i++) {\n            doRequest(parameterArray[i]);\n        }\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Asset', Craft.AssetIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset Select input\n */\nCraft.AssetSelectInput = Craft.BaseElementSelectInput.extend({\n    requestId: 0,\n    hud: null,\n    $uploadBtn: null,\n    uploader: null,\n    progressBar: null,\n\n    init: function() {\n        this.base.apply(this, arguments);\n\n        if (this.settings.canUpload) {\n            this._attachUploader();\n        }\n\n        this.addListener(this.$elementsContainer, 'keydown', this._onKeyDown.bind(this));\n        this.elementSelect.on('focusItem', this._onElementFocus.bind(this));\n    },\n\n    /**\n     * Handle a keypress\n     * @private\n     */\n    _onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.SPACE_KEY && ev.shiftKey) {\n            if (Craft.PreviewFileModal.openInstance) {\n                Craft.PreviewFileModal.openInstance.selfDestruct();\n            } else {\n                var $element = this.elementSelect.$focusedItem;\n\n                if ($element.length) {\n                    this._loadPreview($element);\n                }\n            }\n\n            ev.stopPropagation();\n\n            return false;\n        }\n    },\n\n    /**\n     * Handle element being focused\n     * @private\n     */\n    _onElementFocus: function(ev) {\n        var $element = $(ev.item);\n\n        if (Craft.PreviewFileModal.openInstance && $element.length) {\n            this._loadPreview($element);\n        }\n    },\n\n    /**\n     * Load the preview for an Asset element\n     * @private\n     */\n    _loadPreview: function($element) {\n        var settings = {};\n\n        if ($element.data('image-width')) {\n            settings.startingWidth = $element.data('image-width');\n            settings.startingHeight = $element.data('image-height');\n        }\n\n        new Craft.PreviewFileModal($element.data('id'), this.elementSelect, settings);\n    },\n\n    /**\n     * Create the element editor\n     */\n    createElementEditor: function($element) {\n        return this.base($element, {\n            params: {\n                defaultFieldLayoutId: this.settings.defaultFieldLayoutId\n            },\n            input: this\n        });\n    },\n\n    /**\n     * Attach the uploader with drag event handler\n     */\n    _attachUploader: function() {\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl('assets/upload'),\n            dropZone: this.$container,\n            formData: {\n                fieldId: this.settings.fieldId,\n            }\n        };\n\n        if (this.settings.sourceElementId) {\n            options.formData.elementId = this.settings.sourceElementId;\n        }\n\n        if (this.settings.criteria.siteId) {\n            options.formData.siteId = this.settings.criteria.siteId;\n        }\n\n        if (this.$addElementBtn) {\n            this.$uploadBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn dashed',\n                'data-icon': 'upload',\n                text: this.settings.limit == 1 ? Craft.t('app', 'Upload a file') : Craft.t('app', 'Upload files'),\n            }).insertAfter(this.$addElementBtn);\n            options.fileInput = $('<input/>', {\n                type: 'file',\n                class: 'hidden',\n                multiple: this.settings.limit != 1,\n            }).insertAfter(this.$uploadBtn);\n\n            // Trigger a window resize in case the field is inside an element editor HUD\n            Garnish.$win.trigger('resize');\n        }\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        if (typeof this.settings.criteria.kind !== 'undefined') {\n            options.allowedKinds = this.settings.criteria.kind;\n        }\n\n        options.canAddMoreFiles = this.canAddMoreFiles.bind(this);\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        if (this.$uploadBtn) {\n            this.$uploadBtn.on('click', ev => {\n                // We can't store a reference to the file input, because it gets replaced with a new input\n                // each time a new file is uploaded - see https://stackoverflow.com/a/25034721/1688568\n                this.$uploadBtn.next('input[type=file]').trigger('click');\n            });\n        }\n    },\n\n    refreshThumbnail: function(elementId) {\n        var parameters = {\n            elementId: elementId,\n            siteId: this.settings.criteria.siteId,\n            size: this.settings.viewMode\n        };\n\n        Craft.postActionRequest('elements/get-element-html', parameters, data => {\n            if (data.error) {\n                alert(data.error);\n            } else {\n                var $existing = this.$elements.filter('[data-id=\"' + elementId + '\"]');\n                $existing.find('.elementthumb').replaceWith($(data.html).find('.elementthumb'));\n                this.thumbLoader.load($existing);\n            }\n        });\n    },\n\n    /**\n     * Add the freshly uploaded file to the input field.\n     */\n    selectUploadedFile: function(element) {\n        // Check if we're able to add new elements\n        if (!this.canAddMoreElements()) {\n            return;\n        }\n\n        var $newElement = element.$element;\n\n        // Make a couple tweaks\n        $newElement.addClass('removable');\n        $newElement.prepend('<input type=\"hidden\" name=\"' + this.settings.name + '[]\" value=\"' + element.id + '\">' +\n            '<a class=\"delete icon\" title=\"' + Craft.t('app', 'Remove') + '\"></a>');\n\n        $newElement.appendTo(this.$elementsContainer);\n\n        var margin = -($newElement.outerWidth() + 10);\n\n        this.$addElementBtn.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addElementBtn.velocity(animateCss, 'fast');\n\n        this.addElements($newElement);\n\n        delete this.modal;\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function() {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var parameters = {\n                elementId: data.result.assetId,\n                siteId: this.settings.criteria.siteId,\n                size: this.settings.viewMode\n            };\n\n            Craft.postActionRequest('elements/get-element-html', parameters, data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    var html = $(data.html);\n                    Craft.appendHeadHtml(data.headHtml);\n                    this.selectUploadedFile(Craft.getElementInfo(html));\n                }\n\n                // Last file\n                if (this.uploader.isLastUpload()) {\n                    this.progressBar.hideProgressBar();\n                    this.$container.removeClass('uploading');\n\n                    if (window.draftEditor) {\n                        window.draftEditor.checkForm();\n                    }\n                }\n            });\n\n            Craft.cp.runQueue();\n        }\n    },\n\n    /**\n     * We have to take into account files about to be added as well\n     */\n    canAddMoreFiles: function(slotsTaken) {\n        return (!this.settings.limit || this.$elements.length + slotsTaken < this.settings.limit);\n    },\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Asset selector modal class\n */\nCraft.AssetSelectorModal = Craft.BaseElementSelectorModal.extend({\n    $selectTransformBtn: null,\n    _selectedTransform: null,\n\n    init: function(elementType, settings) {\n        settings = $.extend({}, Craft.AssetSelectorModal.defaults, settings);\n\n        this.base(elementType, settings);\n\n        if (settings.transforms.length) {\n            this.createSelectTransformButton(settings.transforms);\n        }\n    },\n\n    createSelectTransformButton: function(transforms) {\n        if (!transforms || !transforms.length) {\n            return;\n        }\n\n        var $btnGroup = $('<div class=\"btngroup\"/>').appendTo(this.$primaryButtons);\n        this.$selectBtn.appendTo($btnGroup);\n\n        this.$selectTransformBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn menubtn disabled',\n            text: Craft.t('app', 'Select transform'),\n        }).appendTo($btnGroup);\n\n        var $menu = $('<div class=\"menu\" data-align=\"right\"></div>').insertAfter(this.$selectTransformBtn),\n            $menuList = $('<ul></ul>').appendTo($menu);\n\n        for (var i = 0; i < transforms.length; i++) {\n            $('<li><a data-transform=\"' + transforms[i].handle + '\">' + transforms[i].name + '</a></li>').appendTo($menuList);\n        }\n\n        var MenuButton = new Garnish.MenuBtn(this.$selectTransformBtn, {\n            onOptionSelect: this.onSelectTransform.bind(this),\n        });\n        MenuButton.disable();\n\n        this.$selectTransformBtn.data('menuButton', MenuButton);\n    },\n\n    onSelectionChange: function(ev) {\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            allowTransforms = false;\n\n        if ($selectedElements.length && this.settings.transforms.length) {\n            allowTransforms = true;\n\n            for (var i = 0; i < $selectedElements.length; i++) {\n                if (!$('.element.hasthumb:first', $selectedElements[i]).length) {\n                    break;\n                }\n            }\n        }\n\n        var MenuBtn = null;\n\n        if (this.$selectTransformBtn) {\n            MenuBtn = this.$selectTransformBtn.data('menuButton');\n        }\n\n        if (allowTransforms) {\n            if (MenuBtn) {\n                MenuBtn.enable();\n            }\n\n            this.$selectTransformBtn.removeClass('disabled');\n        } else if (this.$selectTransformBtn) {\n            if (MenuBtn) {\n                MenuBtn.disable();\n            }\n\n            this.$selectTransformBtn.addClass('disabled');\n        }\n\n        this.base();\n    },\n\n    onSelectTransform: function(option) {\n        var transform = $(option).data('transform');\n        this.selectImagesWithTransform(transform);\n    },\n\n    selectImagesWithTransform: function(transform) {\n        // First we must get any missing transform URLs\n        if (typeof Craft.AssetSelectorModal.transformUrls[transform] === 'undefined') {\n            Craft.AssetSelectorModal.transformUrls[transform] = {};\n        }\n\n        var $selectedElements = this.elementIndex.getSelectedElements(),\n            imageIdsWithMissingUrls = [];\n\n        for (var i = 0; i < $selectedElements.length; i++) {\n            var $item = $($selectedElements[i]),\n                elementId = Craft.getElementInfo($item).id;\n\n            if (typeof Craft.AssetSelectorModal.transformUrls[transform][elementId] === 'undefined') {\n                imageIdsWithMissingUrls.push(elementId);\n            }\n        }\n\n        if (imageIdsWithMissingUrls.length) {\n            this.showFooterSpinner();\n\n            this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, () => {\n                this.hideFooterSpinner();\n                this.selectImagesWithTransform(transform);\n            });\n        } else {\n            this._selectedTransform = transform;\n            this.selectElements();\n            this._selectedTransform = null;\n        }\n    },\n\n    fetchMissingTransformUrls: function(imageIdsWithMissingUrls, transform, callback) {\n        var elementId = imageIdsWithMissingUrls.pop();\n\n        var data = {\n            assetId: elementId,\n            handle: transform\n        };\n\n        Craft.postActionRequest('assets/generate-transform', data, (response, textStatus) => {\n            Craft.AssetSelectorModal.transformUrls[transform][elementId] = false;\n\n            if (textStatus === 'success') {\n                if (response.url) {\n                    Craft.AssetSelectorModal.transformUrls[transform][elementId] = response.url;\n                }\n            }\n\n            // More to load?\n            if (imageIdsWithMissingUrls.length) {\n                this.fetchMissingTransformUrls(imageIdsWithMissingUrls, transform, callback);\n            } else {\n                callback();\n            }\n        });\n    },\n\n    getElementInfo: function($selectedElements) {\n        var info = this.base($selectedElements);\n\n        if (this._selectedTransform) {\n            for (var i = 0; i < info.length; i++) {\n                var elementId = info[i].id;\n\n                if (\n                    typeof Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== 'undefined' &&\n                    Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId] !== false\n                ) {\n                    info[i].url = Craft.AssetSelectorModal.transformUrls[this._selectedTransform][elementId];\n                }\n            }\n        }\n\n        return info;\n    },\n\n    onSelect: function(elementInfo) {\n        this.settings.onSelect(elementInfo, this._selectedTransform);\n    }\n}, {\n    defaults: {\n        canSelectImageTransforms: false,\n        transforms: []\n    },\n\n    transformUrls: {}\n});\n\n// Register it!\nCraft.registerElementSelectorModalClass('craft\\\\elements\\\\Asset', Craft.AssetSelectorModal);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * AuthManager class\n */\nCraft.AuthManager = Garnish.Base.extend({\n    remainingSessionTime: null,\n    checkRemainingSessionTimer: null,\n    showLoginModalTimer: null,\n    decrementLogoutWarningInterval: null,\n\n    showingLogoutWarningModal: false,\n    showingLoginModal: false,\n\n    logoutWarningModal: null,\n    loginModal: null,\n\n    $logoutWarningPara: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $loginBtn: null,\n    $loginErrorPara: null,\n\n    submitLoginIfLoggedOut: false,\n\n    /**\n     * Init\n     */\n    init: function() {\n        this.updateRemainingSessionTime(Craft.remainingSessionTime);\n    },\n\n    /**\n     * Sets a timer for the next time to check the auth timeout.\n     */\n    setCheckRemainingSessionTimer: function(seconds) {\n        if (this.checkRemainingSessionTimer) {\n            clearTimeout(this.checkRemainingSessionTimer);\n        }\n\n        this.checkRemainingSessionTimer = setTimeout(this.checkRemainingSessionTime.bind(this), seconds * 1000);\n    },\n\n    /**\n     * Pings the server to see how many seconds are left on the current user session, and handles the response.\n     */\n    checkRemainingSessionTime: function(extendSession) {\n        $.ajax({\n            url: Craft.getActionUrl('users/session-info', (extendSession ? null : 'dontExtendSession=1')),\n            type: 'GET',\n            dataType: 'json',\n            complete: (jqXHR, textStatus) => {\n                if (textStatus === 'success') {\n                    if (typeof jqXHR.responseJSON.csrfTokenValue !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n                        Craft.csrfTokenValue = jqXHR.responseJSON.csrfTokenValue;\n                    }\n\n                    this.updateRemainingSessionTime(jqXHR.responseJSON.timeout);\n                    this.submitLoginIfLoggedOut = false;\n                } else {\n                    this.updateRemainingSessionTime(-1);\n                }\n            },\n        });\n    },\n\n    /**\n     * Updates our record of the auth timeout, and handles it.\n     */\n    updateRemainingSessionTime: function(remainingSessionTime) {\n        this.remainingSessionTime = parseInt(remainingSessionTime);\n\n        // Are we within the warning window?\n        if (this.remainingSessionTime !== -1 && this.remainingSessionTime < Craft.AuthManager.minSafeSessionTime) {\n            // Is there still time to renew the session?\n            if (this.remainingSessionTime) {\n                if (!this.showingLogoutWarningModal) {\n                    // Show the warning modal\n                    this.showLogoutWarningModal();\n                }\n\n                // Will the session expire before the next checkup?\n                if (this.remainingSessionTime < Craft.AuthManager.checkInterval) {\n                    if (this.showLoginModalTimer) {\n                        clearTimeout(this.showLoginModalTimer);\n                    }\n\n                    this.showLoginModalTimer = setTimeout(this.showLoginModal.bind(this), this.remainingSessionTime * 1000);\n                }\n            } else {\n                if (this.showingLoginModal) {\n                    if (this.submitLoginIfLoggedOut) {\n                        this.submitLogin();\n                    }\n                } else {\n                    // Show the login modal\n                    this.showLoginModal();\n                }\n            }\n\n            this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n        } else {\n            // Everything's good!\n            this.hideLogoutWarningModal();\n            this.hideLoginModal();\n\n            // Will be be within the minSafeSessionTime before the next update?\n            if (this.remainingSessionTime !== -1 && this.remainingSessionTime < (Craft.AuthManager.minSafeSessionTime + Craft.AuthManager.checkInterval)) {\n                this.setCheckRemainingSessionTimer(this.remainingSessionTime - Craft.AuthManager.minSafeSessionTime + 1);\n            } else {\n                this.setCheckRemainingSessionTimer(Craft.AuthManager.checkInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the logout warning modal.\n     */\n    showLogoutWarningModal: function() {\n        var quickShow;\n\n        if (this.showingLoginModal) {\n            this.hideLoginModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLogoutWarningModal = true;\n\n        if (!this.logoutWarningModal) {\n            let $form = $('<form id=\"logoutwarningmodal\" class=\"modal alert fitted\"/>');\n            let $body = $('<div class=\"body\"/>').appendTo($form);\n            let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n            let $logoutBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Log out now'),\n            }).appendTo($buttons);\n            let $renewSessionBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n                text: Craft.t('app', 'Keep me logged in'),\n            }).appendTo($buttons);\n\n            this.$logoutWarningPara = $('<p/>').prependTo($body);\n\n            this.logoutWarningModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark logoutwarningmodalshade',\n                onFadeIn: function() {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the renew button\n                        setTimeout(function() {\n                            $renewSessionBtn.trigger('focus');\n                        }, 100);\n                    }\n                }\n            });\n\n            this.addListener($logoutBtn, 'activate', 'logout');\n            this.addListener($form, 'submit', 'renewSession');\n        }\n\n        if (quickShow) {\n            this.logoutWarningModal.quickShow();\n        } else {\n            this.logoutWarningModal.show();\n        }\n\n        this.updateLogoutWarningMessage();\n\n        this.decrementLogoutWarningInterval = setInterval(this.decrementLogoutWarning.bind(this), 1000);\n    },\n\n    /**\n     * Updates the logout warning message indicating that the session is about to expire.\n     */\n    updateLogoutWarningMessage: function() {\n        this.$logoutWarningPara.text(Craft.t('app', 'Your session will expire in {time}.', {\n            time: Craft.secondsToHumanTimeDuration(this.remainingSessionTime)\n        }));\n\n        this.logoutWarningModal.updateSizeAndPosition();\n    },\n\n    decrementLogoutWarning: function() {\n        if (this.remainingSessionTime > 0) {\n            this.remainingSessionTime--;\n            this.updateLogoutWarningMessage();\n        }\n\n        if (this.remainingSessionTime === 0) {\n            clearInterval(this.decrementLogoutWarningInterval);\n        }\n    },\n\n    /**\n     * Hides the logout warning modal.\n     */\n    hideLogoutWarningModal: function(quick) {\n        this.showingLogoutWarningModal = false;\n\n        if (this.logoutWarningModal) {\n            if (quick) {\n                this.logoutWarningModal.quickHide();\n            } else {\n                this.logoutWarningModal.hide();\n            }\n\n            if (this.decrementLogoutWarningInterval) {\n                clearInterval(this.decrementLogoutWarningInterval);\n            }\n        }\n    },\n\n    /**\n     * Shows the login modal.\n     */\n    showLoginModal: function() {\n        var quickShow;\n\n        if (this.showingLogoutWarningModal) {\n            this.hideLogoutWarningModal(true);\n            quickShow = true;\n        } else {\n            quickShow = false;\n        }\n\n        this.showingLoginModal = true;\n\n        if (!this.loginModal) {\n            var $form = $('<form id=\"loginmodal\" class=\"modal alert fitted\"/>'),\n                $body = $('<div class=\"body\"><h2>' + Craft.t('app', 'Your session has ended.') + '</h2><p>' + Craft.t('app', 'Enter your password to log back in.') + '</p></div>').appendTo($form),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<div/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$loginBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Login'),\n            }).appendTo($buttonContainer);\n            this.$loginErrorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.loginModal = new Garnish.Modal($form, {\n                autoShow: false,\n                closeOtherModals: false,\n                hideOnEsc: false,\n                hideOnShadeClick: false,\n                shadeClass: 'modal-shade dark loginmodalshade',\n                onFadeIn: () => {\n                    if (!Garnish.isMobileBrowser(true)) {\n                        // Auto-focus the password input\n                        setTimeout(() => {\n                            this.$passwordInput.trigger('focus');\n                        }, 100);\n                    }\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($form, 'submit', 'login');\n        }\n\n        if (quickShow) {\n            this.loginModal.quickShow();\n        } else {\n            this.loginModal.show();\n        }\n    },\n\n    /**\n     * Hides the login modal.\n     */\n    hideLoginModal: function(quick) {\n        this.showingLoginModal = false;\n\n        if (this.loginModal) {\n            if (quick) {\n                this.loginModal.quickHide();\n            } else {\n                this.loginModal.hide();\n            }\n        }\n    },\n\n    logout: function() {\n        $.get({\n            url: Craft.getActionUrl('users/logout'),\n            dataType: 'json',\n            success: () => {\n                Craft.redirectTo('');\n            },\n        });\n    },\n\n    renewSession: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        this.hideLogoutWarningModal();\n        this.checkRemainingSessionTime(true);\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$loginBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$loginBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    login: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.validatePassword()) {\n            this.$passwordSpinner.removeClass('hidden');\n            this.clearLoginError();\n\n            if (typeof Craft.csrfTokenValue !== 'undefined') {\n                // Check the auth status one last time before sending this off,\n                // in case the user has already logged back in from another window/tab\n                this.submitLoginIfLoggedOut = true;\n                this.checkRemainingSessionTime();\n            } else {\n                this.submitLogin();\n            }\n        }\n    },\n\n    submitLogin: function() {\n        var data = {\n            loginName: Craft.username,\n            password: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/login', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.hideLoginModal();\n                    this.checkRemainingSessionTime();\n                } else {\n                    this.showLoginError(response.error);\n                    Garnish.shake(this.loginModal.$container);\n\n                    if (!Garnish.isMobileBrowser(true)) {\n                        this.$passwordInput.trigger('focus');\n                    }\n                }\n            } else {\n                this.showLoginError();\n            }\n        });\n    },\n\n    showLoginError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$loginErrorPara.text(error);\n        this.loginModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showLoginError('');\n    }\n}, {\n    checkInterval: 60,\n    minSafeSessionTime: 120\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * CP class\n */\nCraft.CP = Garnish.Base.extend({\n    authManager: null,\n\n    $nav: null,\n    $mainContainer: null,\n    $alerts: null,\n    $crumbs: null,\n    $notificationContainer: null,\n    $main: null,\n    $primaryForm: null,\n    $headerContainer: null,\n    $header: null,\n    $mainContent: null,\n    $details: null,\n    $sidebarContainer: null,\n    $sidebar: null,\n    $contentContainer: null,\n    $edition: null,\n\n    $confirmUnloadForms: null,\n    $deltaForms: null,\n    $collapsibleTables: null,\n\n    fixedHeader: false,\n\n    tabManager: null,\n\n    enableQueue: true,\n    totalJobs: 0,\n    jobInfo: null,\n    displayedJobInfo: null,\n    displayedJobInfoUnchanged: 1,\n    trackJobProgressTimeout: null,\n    jobProgressIcon: null,\n\n    checkingForUpdates: false,\n    forcingRefreshOnUpdatesCheck: false,\n    includingDetailsOnUpdatesCheck: false,\n    checkForUpdatesCallbacks: null,\n\n    init: function() {\n        // Is this session going to expire?\n        if (Craft.remainingSessionTime !== 0) {\n            this.authManager = new Craft.AuthManager();\n        }\n\n        // Find all the key elements\n        this.$nav = $('#nav');\n        this.$mainContainer = $('#main-container');\n        this.$alerts = $('#alerts');\n        this.$crumbs = $('#crumbs');\n        this.$notificationContainer = $('#notifications');\n        this.$main = $('#main');\n        this.$primaryForm = $('#main-form');\n        this.$headerContainer = $('#header-container');\n        this.$header = $('#header');\n        this.$mainContent = $('#main-content');\n        this.$details = $('#details');\n        this.$sidebarContainer = $('#sidebar-container');\n        this.$sidebar = $('#sidebar');\n        this.$contentContainer = $('#content-container');\n        this.$collapsibleTables = $('table.collapsible');\n\n        this.updateSidebarMenuLabel();\n\n        // Swap any instruction text with info icons\n        let $allInstructions = this.$details.find('.meta > .field > .instructions');\n\n        for (let i = 0; i < $allInstructions.length; i++) {\n            let $instructions = $allInstructions.eq(i);\n            let $label = $instructions.siblings('.heading').children('label');\n            $('<span/>', {\n                'class': 'info',\n                'html': $instructions.children().html()\n            }).appendTo($label);\n            $instructions.remove();\n        }\n\n        if (this.$header.length) {\n            this.addListener(Garnish.$win, 'scroll', 'updateFixedHeader');\n            this.updateFixedHeader();\n        }\n\n        Garnish.$doc.ready(() => {\n            // Update responsive tables on window resize\n            this.addListener(Garnish.$win, 'resize', ev => {\n                // Ignore element resizes\n                if (ev.target === window) {\n                    this.handleWindowResize();\n                }\n            });\n            this.handleWindowResize();\n\n            // Fade the notification out two seconds after page load\n            var $errorNotifications = this.$notificationContainer.children('.error'),\n                $otherNotifications = this.$notificationContainer.children(':not(.error)');\n\n            $errorNotifications.delay(Craft.CP.notificationDuration * 2).velocity('fadeOut');\n            $otherNotifications.delay(Craft.CP.notificationDuration).velocity('fadeOut');\n\n            // Wait a frame before initializing any confirm-unload forms,\n            // so other JS that runs on ready() has a chance to initialize\n            Garnish.requestAnimationFrame(this.initSpecialForms.bind(this));\n        });\n\n        // Alerts\n        if (this.$alerts.length) {\n            this.initAlerts();\n        }\n\n        // Toggles\n        this.addListener($('#nav-toggle'), 'click', 'toggleNav');\n        this.addListener($('#sidebar-toggle'), 'click', 'toggleSidebar');\n\n        // Does this page have a primary form?\n        if (!this.$primaryForm.length) {\n            this.$primaryForm = $('form[data-saveshortcut]:first');\n        }\n\n        // Does the primary form support the save shortcut?\n        if (this.$primaryForm.length && Garnish.hasAttr(this.$primaryForm, 'data-saveshortcut')) {\n            let shortcuts = [];\n            let actions = this.$primaryForm.data('actions');\n            if (typeof actions === 'undefined') {\n                shortcuts.push([\n                    {\n                        keyCode: Garnish.S_KEY,\n                        ctrl: true,\n                    }, {\n                        redirect: this.$primaryForm.data('saveshortcut-redirect'),\n                        retainScroll: Garnish.hasAttr(this.$primaryForm, 'saveshortcut-scroll'),\n                    }\n                ]);\n            } else {\n                for (let i = 0; i < actions.length; i++) {\n                    let action = actions[i];\n                    if (!action.shortcut) {\n                        continue;\n                    }\n                    shortcuts.push([\n                        {\n                            keyCode: Garnish.S_KEY,\n                            ctrl: true,\n                            shift: !!action.shift,\n                        }, {\n                            action: action.action,\n                            redirect: action.redirect,\n                            confirm: action.confirm,\n                            params: action.params,\n                            data: action.data,\n                            retainScroll: action.retainScroll,\n                        }\n                    ]);\n                }\n            }\n            for (let i = 0; i < shortcuts.length; i++) {\n                Garnish.shortcutManager.registerShortcut(shortcuts[i][0], () => {\n                    this.submitPrimaryForm(shortcuts[i][1]);\n                });\n            }\n        }\n\n        this.initTabs();\n\n        // Should we match the previous scroll position?\n        let scrollY = Craft.getLocalStorage('scrollY');\n        if (typeof scrollY !== 'undefined') {\n            Craft.removeLocalStorage('scrollY');\n            Garnish.$doc.ready(() => {\n                Garnish.requestAnimationFrame(() => {\n                    window.scrollTo(0, scrollY);\n                });\n            });\n        }\n\n        if ($.isTouchCapable()) {\n            this.$mainContainer.on('focus', 'input, textarea, .focusable-input', this._handleInputFocus.bind(this));\n            this.$mainContainer.on('blur', 'input, textarea, .focusable-input', this._handleInputBlur.bind(this));\n        }\n    },\n\n    initSpecialForms: function() {\n        // Look for forms that we should watch for changes on\n        this.$confirmUnloadForms = $('form[data-confirm-unload]');\n        this.$deltaForms = $('form[data-delta]');\n\n        if (!this.$confirmUnloadForms.length) {\n            return;\n        }\n\n        var $forms = this.$confirmUnloadForms.add(this.$deltaForms);\n        var $form, serialized;\n\n        for (var i = 0; i < $forms.length; i++) {\n            $form = $forms.eq(i);\n            if (!$form.data('initialSerializedValue')) {\n                if (typeof $form.data('serializer') === 'function') {\n                    serialized = $form.data('serializer')();\n                } else {\n                    serialized = $form.serialize();\n                }\n                $form.data('initialSerializedValue', serialized);\n            }\n            this.addListener($form, 'submit', function(ev) {\n                if (Garnish.hasAttr($form, 'data-confirm-unload')) {\n                    this.removeListener(Garnish.$win, 'beforeunload');\n                }\n                if (Garnish.hasAttr($form, 'data-delta')) {\n                    ev.preventDefault();\n                    var serialized;\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    var data = Craft.findDeltaData($form.data('initialSerializedValue'), serialized, Craft.deltaNames);\n                    Craft.createForm(data)\n                        .appendTo(Garnish.$bod)\n                        .submit();\n                }\n            });\n        }\n\n        this.addListener(Garnish.$win, 'beforeunload', function(ev) {\n            var confirmUnload = false;\n            var $form, serialized;\n            if (typeof Craft.livePreview !== 'undefined' && Craft.livePreview.inPreviewMode) {\n                confirmUnload = true;\n            } else {\n                for (var i = 0; i < this.$confirmUnloadForms.length; i++) {\n                    $form = this.$confirmUnloadForms.eq(i);\n                    if (typeof $form.data('serializer') === 'function') {\n                        serialized = $form.data('serializer')();\n                    } else {\n                        serialized = $form.serialize();\n                    }\n                    if ($form.data('initialSerializedValue') !== serialized) {\n                        confirmUnload = true;\n                        break;\n                    }\n                }\n            }\n\n            if (confirmUnload) {\n                var message = Craft.t('app', 'Any changes will be lost if you leave this page.');\n\n                if (ev) {\n                    ev.originalEvent.returnValue = message;\n                } else {\n                    window.event.returnValue = message;\n                }\n\n                return message;\n            }\n        });\n    },\n\n    _handleInputFocus: function() {\n        this.updateFixedHeader();\n    },\n\n    _handleInputBlur: function() {\n        this.updateFixedHeader();\n    },\n\n    /**\n     * Submits a form.\n     * @param {Object} [options]\n     * @param {string} [options.action] The `action` param value override\n     * @param {string} [options.redirect] The `redirect` param value override\n     * @param {string} [options.confirm] A confirmation message that should be shown to the user before submit\n     * @param {Object} [options.params] Additional params that should be added to the form, defined as name/value pairs\n     * @param {Object} [options.data] Additional data to be passed to the submit event\n     * @param {boolean} [options.retainScroll] Whether the scroll position should be stored and reapplied on the next page load\n     */\n    submitPrimaryForm: function(options) {\n        // Give other stuff on the page a chance to prepare\n        this.trigger('beforeSaveShortcut');\n\n        if (typeof options !== 'object' || !$.isPlainObject(options)) {\n            options = {};\n        }\n\n        if (!options.redirect) {\n            options.redirect = this.$primaryForm.data('saveshortcut-redirect');\n        }\n\n        if (!options.data) {\n            options.data = {};\n        }\n        options.data.saveShortcut = true;\n\n        Craft.submitForm(this.$primaryForm, options);\n    },\n\n    updateSidebarMenuLabel: function() {\n        var $item = this.$sidebar.find('a.sel:first');\n        var $label = $item.children('.label');\n        $('#selected-sidebar-item-label').text($label.length ? $label.text() : $item.text());\n        Garnish.$bod.removeClass('showing-sidebar');\n    },\n\n    toggleNav: function() {\n        Garnish.$bod.toggleClass('showing-nav');\n    },\n\n    toggleSidebar: function() {\n        Garnish.$bod.toggleClass('showing-sidebar');\n    },\n\n    initTabs: function() {\n        if (this.tabManager) {\n            this.tabManager.destroy();\n            this.tabManager = null;\n        }\n\n        const $tabs = $('#tabs');\n        if (!$tabs.length) {\n            return;\n        }\n\n        this.tabManager = new Craft.Tabs($tabs);\n\n        this.tabManager.on('selectTab', ev => {\n            const href = ev.$tab.attr('href');\n\n            // Show its content area\n            if (href.charAt(0) === '#') {\n                $(href).removeClass('hidden');\n            }\n\n            // Trigger a resize event to update any UI components that are listening for it\n            Garnish.$win.trigger('resize');\n\n            // Fixes Redactor fixed toolbars on previously hidden panes\n            Garnish.$doc.trigger('scroll');\n\n            // If there is a revision menu, set its links to this tab ID\n            if (href && href.charAt(0) === '#') {\n                const menuBtn = $('#context-btn').menubtn().data('menubtn');\n                if (menuBtn) {\n                    for (let i = 0; i < menuBtn.menu.$options.length; i++) {\n                        let a = menuBtn.menu.$options[i];\n                        if (a.href) {\n                            a.href = a.href.match(/^[^#]*/)[0] + href;\n                        }\n                    }\n                }\n            }\n\n            if (typeof history !== 'undefined') {\n                // Delay changing the hash so it doesn't cause the browser to jump on page load\n                Garnish.requestAnimationFrame(() => {\n                    history.replaceState(undefined, undefined, href);\n                });\n            }\n        });\n\n        this.tabManager.on('deselectTab', ev => {\n            if (ev.$tab.attr('href').charAt(0) === '#') {\n                // Hide its content area\n                $(ev.$tab.attr('href')).addClass('hidden');\n            }\n        });\n\n        if (window.LOCATION_HASH) {\n            const $tab = this.tabManager.$tabs.filter(`[href=\"#${window.LOCATION_HASH}\"]`);\n            if ($tab.length) {\n                this.tabManager.selectTab($tab);\n            }\n        }\n    },\n\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsContainer() {\n        return this.tabManager ? this.tabManager.$container : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabsList() {\n        return this.tabManager ? this.tabManager.$ul : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $tabs() {\n        return this.tabManager ? this.tabManager.$ul.find('> li') : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $selectedTab() {\n        return this.tabManager ? this.tabManager.$selectedTab : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get selectedTabIndex() {\n        return this.tabManager ? this.tabManager.$tabs.index(this.tabManager.$selectedTab) : undefined;\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    get $focusableTab() {\n        return this.tabManager ? this.tabManager.$focusableTab : undefined;\n    },\n    /**\n     * @param {object} tab\n     * @deprecated in 3.7.0\n     */\n    selectTab: function(tab) {\n        if (this.tabManager) {\n            this.tabManager.selectTab(tab);\n        }\n    },\n    /**\n     * @deprecated in 3.7.0\n     */\n    deselectTab: function() {\n        if (this.tabManager) {\n            this.tabManager.deselectTab();\n        }\n    },\n\n    handleWindowResize: function() {\n        this.updateResponsiveTables();\n    },\n\n    updateResponsiveTables: function() {\n        for (this.updateResponsiveTables._i = 0; this.updateResponsiveTables._i < this.$collapsibleTables.length; this.updateResponsiveTables._i++) {\n            this.updateResponsiveTables._$table = this.$collapsibleTables.eq(this.updateResponsiveTables._i);\n            this.updateResponsiveTables._containerWidth = this.updateResponsiveTables._$table.parent().width();\n            this.updateResponsiveTables._check = false;\n\n            if (this.updateResponsiveTables._containerWidth > 0) {\n                // Is this the first time we've checked this table?\n                if (typeof this.updateResponsiveTables._$table.data('lastContainerWidth') === 'undefined') {\n                    this.updateResponsiveTables._check = true;\n                } else {\n                    this.updateResponsiveTables._isCollapsed = this.updateResponsiveTables._$table.hasClass('collapsed');\n\n                    // Getting wider?\n                    if (this.updateResponsiveTables._containerWidth > this.updateResponsiveTables._$table.data('lastContainerWidth')) {\n                        if (this.updateResponsiveTables._isCollapsed) {\n                            this.updateResponsiveTables._$table.removeClass('collapsed');\n                            this.updateResponsiveTables._check = true;\n                        }\n                    } else if (!this.updateResponsiveTables._isCollapsed) {\n                        this.updateResponsiveTables._check = true;\n                    }\n                }\n\n                // Are we checking the table width?\n                if (this.updateResponsiveTables._check) {\n                    if (this.updateResponsiveTables._$table.width() - 30 > this.updateResponsiveTables._containerWidth) {\n                        this.updateResponsiveTables._$table.addClass('collapsed');\n                    }\n                }\n\n                // Remember the container width for next time\n                this.updateResponsiveTables._$table.data('lastContainerWidth', this.updateResponsiveTables._containerWidth);\n            }\n        }\n    },\n\n    updateFixedHeader: function() {\n        // Have we scrolled passed the top of #main?\n        if (this.$main.length && this.$headerContainer[0].getBoundingClientRect().top < 0) {\n            if (!this.fixedHeader) {\n                var headerHeight = this.$headerContainer.height();\n\n                // Hard-set the minimum content container height\n                this.$contentContainer.css('min-height', 'calc(100vh - ' + (headerHeight + 14 + 48 - 1) + 'px)');\n\n                // Hard-set the header container height\n                this.$headerContainer.height(headerHeight);\n                Garnish.$bod.addClass('fixed-header');\n\n                // Fix the sidebar and details pane positions if they are taller than #content-container\n                var contentHeight = this.$contentContainer.outerHeight();\n                var $detailsHeight = this.$details.outerHeight();\n                var css = {\n                    top: headerHeight + 'px',\n                    'max-height': 'calc(100vh - ' + headerHeight + 'px)'\n                };\n                this.$sidebar.addClass('fixed').css(css);\n                this.$details.addClass('fixed').css(css);\n                this.fixedHeader = true;\n            }\n        } else if (this.fixedHeader) {\n            this.$headerContainer.height('auto');\n            Garnish.$bod.removeClass('fixed-header');\n            this.$contentContainer.css('min-height', '');\n            this.$sidebar.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.$details.removeClass('fixed').css({\n                top: '',\n                'max-height': ''\n            });\n            this.fixedHeader = false;\n        }\n    },\n\n    /**\n     * Dispays a notification.\n     *\n     * @param {string} type\n     * @param {string} message\n     */\n    displayNotification: function(type, message) {\n        var notificationDuration = Craft.CP.notificationDuration;\n\n        if (['cp-error', 'error'].includes(type)) {\n            notificationDuration *= 2;\n            icon = 'alert';\n            label = Craft.t('app', 'Error');\n        } else {\n            icon = 'info';\n            label = Craft.t('app', 'Notice');\n        }\n\n        var $notification = $(`\n            <div class=\"notification ${ type.replace('cp-', '') }\">\n                <span data-icon=\"${ icon }\" aria-label=\"${ label }\"></span>\n                ${ message }\n            </div>\n            `)\n            .appendTo(this.$notificationContainer);\n\n        var fadedMargin = -($notification.outerWidth() / 2) + 'px';\n\n        $notification\n            .hide()\n            .css({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin})\n            .velocity({opacity: 1, 'margin-left': '2px', 'margin-right': '2px'}, {display: 'inline-block', duration: 'fast'})\n            .delay(notificationDuration)\n            .velocity({opacity: 0, 'margin-left': fadedMargin, 'margin-right': fadedMargin}, {\n                complete: function() {\n                    $notification.remove();\n                }\n            });\n\n        this.trigger('displayNotification', {\n            notificationType: type,\n            message: message\n        });\n    },\n\n    /**\n     * Displays a notice.\n     *\n     * @param {string} message\n     */\n    displayNotice: function(message) {\n        this.displayNotification('notice', message);\n    },\n\n    /**\n     * Displays an error.\n     *\n     * @param {string} message\n     */\n    displayError: function(message) {\n        if (!message) {\n            message = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.displayNotification('error', message);\n    },\n\n    fetchAlerts: function() {\n        var data = {\n            path: Craft.path\n        };\n\n        Craft.queueActionRequest('app/get-cp-alerts', data, this.displayAlerts.bind(this));\n    },\n\n    displayAlerts: function(alerts) {\n        this.$alerts.remove();\n\n        if (Garnish.isArray(alerts) && alerts.length) {\n            this.$alerts = $('<ul id=\"alerts\"/>').prependTo($('#page-container'));\n\n            for (var i = 0; i < alerts.length; i++) {\n                $(`<li><span data-icon=\"alert\" aria-label=\"${ Craft.t('app', 'Error') }\"></span> ${ alerts[i] }</li>`).appendTo(this.$alerts);\n            }\n\n            var height = this.$alerts.outerHeight();\n            this.$alerts.css('margin-top', -height).velocity({'margin-top': 0}, 'fast');\n\n            this.initAlerts();\n        }\n    },\n\n    initAlerts: function() {\n        // Are there any shunnable alerts?\n        var $shunnableAlerts = this.$alerts.find('a[class^=\"shun:\"]');\n\n        for (var i = 0; i < $shunnableAlerts.length; i++) {\n            this.addListener($shunnableAlerts[i], 'click', ev => {\n                ev.preventDefault();\n\n                var $link = $(ev.currentTarget);\n\n                var data = {\n                    message: $link.prop('className').substr(5)\n                };\n\n                Craft.queueActionRequest('app/shun-cp-alert', data, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        if (response.success) {\n                            $link.parent().remove();\n                        } else {\n                            this.displayError(response.error);\n                        }\n                    }\n                });\n            });\n        }\n    },\n\n    checkForUpdates: function(forceRefresh, includeDetails, callback) {\n        // Make 'includeDetails' optional\n        if (typeof includeDetails === 'function') {\n            callback = includeDetails;\n            includeDetails = false;\n        }\n\n        // If forceRefresh == true, we're currently checking for updates, and not currently forcing a refresh,\n        // then just set a new callback that re-checks for updates when the current one is done.\n        if (this.checkingForUpdates && (\n            (forceRefresh === true && !this.forcingRefreshOnUpdatesCheck) ||\n            (includeDetails === true && !this.includingDetailsOnUpdatesCheck)\n        )) {\n            var realCallback = callback;\n            callback = () => {\n                this.checkForUpdates(forceRefresh, includeDetails, realCallback);\n            };\n        }\n\n        // Callback function?\n        if (typeof callback === 'function') {\n            if (!Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                this.checkForUpdatesCallbacks = [];\n            }\n\n            this.checkForUpdatesCallbacks.push(callback);\n        }\n\n        if (!this.checkingForUpdates) {\n            this.checkingForUpdates = true;\n            this.forcingRefreshOnUpdatesCheck = (forceRefresh === true);\n            this.includingDetailsOnUpdatesCheck = (includeDetails === true);\n\n            this._checkForUpdates(forceRefresh, includeDetails)\n                .then(info => {\n                    this.updateUtilitiesBadge();\n                    this.checkingForUpdates = false;\n\n                    if (Garnish.isArray(this.checkForUpdatesCallbacks)) {\n                        var callbacks = this.checkForUpdatesCallbacks;\n                        this.checkForUpdatesCallbacks = null;\n\n                        for (var i = 0; i < callbacks.length; i++) {\n                            callbacks[i](info);\n                        }\n                    }\n\n                    this.trigger('checkForUpdates', {\n                        updateInfo: info\n                    });\n                });\n        }\n    },\n\n    _checkForUpdates: function(forceRefresh, includeDetails) {\n        return new Promise((resolve, reject) => {\n            if (!forceRefresh) {\n                this._checkForCachedUpdates(includeDetails)\n                    .then(info => {\n                        if (info.cached !== false) {\n                            resolve(info);\n                        }\n\n                        this._getUpdates(includeDetails)\n                            .then(info => {\n                                resolve(info);\n                            });\n                    });\n            } else {\n                this._getUpdates(includeDetails)\n                    .then(info => {\n                        resolve(info);\n                    });\n            }\n        });\n    },\n\n    _checkForCachedUpdates: function(includeDetails) {\n        return new Promise(function(resolve, reject) {\n            var data = {\n                onlyIfCached: true,\n                includeDetails: includeDetails,\n            };\n            Craft.postActionRequest('app/check-for-updates', data, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    resolve({cached: false});\n                }\n            });\n        });\n    },\n\n    _getUpdates: function(includeDetails) {\n        return new Promise((resolve, reject) => {\n            Craft.sendApiRequest('GET', 'updates')\n                .then(updates => {\n                    this._cacheUpdates(updates, includeDetails).then(resolve);\n                })\n                .catch(e => {\n                    this._cacheUpdates({}).then(resolve);\n                });\n        });\n    },\n\n    _cacheUpdates: function(updates, includeDetails) {\n        return new Promise(function(resolve, reject) {\n            Craft.postActionRequest('app/cache-updates', {\n                updates: updates,\n                includeDetails: includeDetails,\n            }, function(info, textStatus) {\n                if (textStatus === 'success') {\n                    resolve(info);\n                } else {\n                    reject();\n                }\n            }, {\n                contentType: 'json'\n            });\n        });\n    },\n\n    updateUtilitiesBadge: function() {\n        var $utilitiesLink = $('#nav-utilities').find('> a:not(.sel)');\n\n        // Ignore if there is no (non-selected) Utilities nav item\n        if (!$utilitiesLink.length) {\n            return;\n        }\n\n        Craft.queueActionRequest('app/get-utilities-badge-count', response => {\n            // Get the existing utility nav badge, if any\n            var $badge = $utilitiesLink.children('.badge');\n\n            if (response.badgeCount) {\n                if (!$badge.length) {\n                    $badge = $('<span class=\"badge\"/>').appendTo($utilitiesLink);\n                }\n                $badge.text(response.badgeCount);\n            } else if ($badge.length) {\n                $badge.remove();\n            }\n        });\n    },\n\n    runQueue: function() {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        if (Craft.runQueueAutomatically) {\n            Craft.queueActionRequest('queue/run', (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this.trackJobProgress(false, true);\n                }\n            });\n        } else {\n            this.trackJobProgress(false, true);\n        }\n    },\n\n    trackJobProgress: function(delay, force) {\n        if (force && this.trackJobProgressTimeout) {\n            clearTimeout(this.trackJobProgressTimeout);\n            this.trackJobProgressTimeout = null;\n        }\n\n        // Ignore if we're already tracking jobs, or the queue is disabled\n        if (this.trackJobProgressTimeout || !this.enableQueue) {\n            return;\n        }\n\n        if (delay === true) {\n            // Determine the delay based on how long the displayed job info has remained unchanged\n            var timeout = Math.min(60000, this.displayedJobInfoUnchanged * 500);\n            this.trackJobProgressTimeout = setTimeout(this._trackJobProgressInternal.bind(this), timeout);\n        } else {\n            this._trackJobProgressInternal();\n        }\n    },\n\n    _trackJobProgressInternal: function() {\n        Craft.queueActionRequest('queue/get-job-info?limit=50&dontExtendSession=1', (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.trackJobProgressTimeout = null;\n                this.totalJobs = response.total;\n                this.setJobInfo(response.jobs);\n\n                if (this.jobInfo.length) {\n                    // Check again after a delay\n                    this.trackJobProgress(true);\n                }\n            }\n        });\n    },\n\n    setJobInfo: function(jobInfo) {\n        if (!this.enableQueue) {\n            return;\n        }\n\n        this.jobInfo = jobInfo;\n\n        // Update the displayed job info\n        var oldInfo = this.displayedJobInfo;\n        this.displayedJobInfo = this.getDisplayedJobInfo();\n\n        // Same old same old?\n        if (\n            oldInfo &&\n            this.displayedJobInfo &&\n            oldInfo.id === this.displayedJobInfo.id &&\n            oldInfo.progress === this.displayedJobInfo.progress &&\n            oldInfo.progressLabel === this.displayedJobInfo.progressLabel &&\n            oldInfo.status === this.displayedJobInfo.status\n        ) {\n            this.displayedJobInfoUnchanged++;\n        } else {\n            // Reset the counter\n            this.displayedJobInfoUnchanged = 1;\n        }\n\n        this.updateJobIcon();\n\n        // Fire a setJobInfo event\n        this.trigger('setJobInfo');\n    },\n\n    /**\n     * Returns info for the job that should be displayed in the CP sidebar\n     */\n    getDisplayedJobInfo: function() {\n        if (!this.enableQueue) {\n            return null;\n        }\n\n        // Set the status preference order\n        var statuses = [\n            Craft.CP.JOB_STATUS_RESERVED,\n            Craft.CP.JOB_STATUS_FAILED,\n            Craft.CP.JOB_STATUS_WAITING\n        ];\n\n        for (var i = 0; i < statuses.length; i++) {\n            for (var j = 0; j < this.jobInfo.length; j++) {\n                if (\n                    this.jobInfo[j].status === statuses[i] &&\n                    (statuses[i] !== Craft.CP.JOB_STATUS_WAITING || !this.jobInfo[j].delay)\n                ) {\n                    return this.jobInfo[j];\n                }\n            }\n        }\n\n        return null;\n    },\n\n    updateJobIcon: function() {\n        if (!this.enableQueue || !this.$nav.length) {\n            return;\n        }\n\n        if (this.displayedJobInfo) {\n            if (!this.jobProgressIcon) {\n                this.jobProgressIcon = new JobProgressIcon();\n            }\n\n            if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_RESERVED || this.displayedJobInfo.status === Craft.CP.JOB_STATUS_WAITING) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.setDescription(this.displayedJobInfo.description, this.displayedJobInfo.progressLabel);\n                this.jobProgressIcon.setProgress(this.displayedJobInfo.progress);\n            } else if (this.displayedJobInfo.status === Craft.CP.JOB_STATUS_FAILED) {\n                this.jobProgressIcon.showFailMode(Craft.t('app', 'Failed'));\n            }\n        } else {\n            if (this.jobProgressIcon) {\n                this.jobProgressIcon.hideFailMode();\n                this.jobProgressIcon.complete();\n                delete this.jobProgressIcon;\n            }\n        }\n    },\n\n    /**\n     * Returns the active site for the control panel\n     *\n     * @return {number}\n     */\n    getSiteId: function() {\n        // If the old BaseElementIndex.siteId value is in localStorage, go aheand and remove & return that\n        let siteId = Craft.getLocalStorage('BaseElementIndex.siteId');\n        if (typeof siteId !== 'undefined') {\n            Craft.removeLocalStorage('BaseElementIndex.siteId');\n            this.setSiteId(siteId);\n            return siteId;\n        }\n        return Craft.getCookie('siteId');\n    },\n\n    /**\n     * Sets the active site for the control panel\n     * @param {number} siteId\n     */\n    setSiteId: function(siteId) {\n        Craft.setCookie('siteId', siteId, {\n            maxAge: 31536000 // 1 year\n        });\n    }\n}, {\n    //maxWidth: 1051, //1024,\n    notificationDuration: 2000,\n\n    JOB_STATUS_WAITING: 1,\n    JOB_STATUS_RESERVED: 2,\n    JOB_STATUS_DONE: 3,\n    JOB_STATUS_FAILED: 4\n});\n\nGarnish.$scrollContainer = Garnish.$win;\nCraft.cp = new Craft.CP();\n\n/**\n * Job progress icon class\n */\nvar JobProgressIcon = Garnish.Base.extend({\n    $li: null,\n    $a: null,\n    $label: null,\n    $progressLabel: null,\n\n    progress: null,\n    failMode: false,\n\n    _$bgCanvas: null,\n    _$staticCanvas: null,\n    _$hoverCanvas: null,\n    _$failCanvas: null,\n\n    _staticCtx: null,\n    _hoverCtx: null,\n    _canvasSize: null,\n    _arcPos: null,\n    _arcRadius: null,\n    _lineWidth: null,\n\n    _arcStartPos: 0,\n    _arcEndPos: 0,\n    _arcStartStepSize: null,\n    _arcEndStepSize: null,\n    _arcStep: null,\n    _arcStepTimeout: null,\n    _arcAnimateCallback: null,\n\n    _progressBar: null,\n\n    init: function() {\n        this.$li = $('<li/>').appendTo(Craft.cp.$nav.children('ul'));\n        this.$a = $('<a/>', {\n            id: 'job-icon',\n            href: Craft.canAccessQueueManager ? Craft.getUrl('utilities/queue-manager') : null,\n        }).appendTo(this.$li);\n        this.$canvasContainer = $('<span class=\"icon\"/>').appendTo(this.$a);\n        var $labelContainer = $('<span class=\"label\"/>').appendTo(this.$a);\n        this.$label = $('<span/>').appendTo($labelContainer);\n        this.$progressLabel = $('<span class=\"progress-label\"/>').appendTo($labelContainer).hide();\n\n        let m = (window.devicePixelRatio > 1 ? 2 : 1);\n        this._canvasSize = 18 * m;\n        this._arcPos = this._canvasSize / 2;\n        this._arcRadius = 7 * m;\n        this._lineWidth = 3 * m;\n\n        this._$bgCanvas = this._createCanvas('bg', '#61666b');\n        this._$staticCanvas = this._createCanvas('static', '#d7d9db');\n        this._$hoverCanvas = this._createCanvas('hover', '#fff');\n        this._$failCanvas = this._createCanvas('fail', '#da5a47').hide();\n\n        this._staticCtx = this._$staticCanvas[0].getContext('2d');\n        this._hoverCtx = this._$hoverCanvas[0].getContext('2d');\n\n        this._drawArc(this._$bgCanvas[0].getContext('2d'), 0, 1);\n        this._drawArc(this._$failCanvas[0].getContext('2d'), 0, 1);\n    },\n\n    setDescription: function(description, progressLabel) {\n        this.$a.attr('title', description);\n        this.$label.text(description);\n        if (progressLabel) {\n            this.$progressLabel.text(progressLabel).show();\n        } else {\n            this.$progressLabel.hide();\n        }\n    },\n\n    setProgress: function(progress) {\n        if (progress == 0) {\n            this._$staticCanvas.hide();\n            this._$hoverCanvas.hide();\n        } else {\n            this._$staticCanvas.show();\n            this._$hoverCanvas.show();\n            if (this.progress && progress > this.progress) {\n                this._animateArc(0, progress / 100);\n            } else {\n                this._setArc(0, progress / 100);\n            }\n        }\n\n        this.progress = progress;\n    },\n\n    complete: function() {\n        this._animateArc(0, 1, () => {\n            this._$bgCanvas.velocity('fadeOut');\n\n            this._animateArc(1, 1, () => {\n                this.$a.remove();\n                this.destroy();\n            });\n        });\n    },\n\n    showFailMode: function(message) {\n        if (this.failMode) {\n            return;\n        }\n\n        this.failMode = true;\n        this.progress = null;\n\n        this._$bgCanvas.hide();\n        this._$staticCanvas.hide();\n        this._$hoverCanvas.hide();\n        this._$failCanvas.show();\n\n        this.setDescription(message);\n    },\n\n    hideFailMode: function() {\n        if (!this.failMode) {\n            return;\n        }\n\n        this.failMode = false;\n\n        this._$bgCanvas.show();\n        this._$staticCanvas.show();\n        this._$hoverCanvas.show();\n        this._$failCanvas.hide();\n    },\n\n    _createCanvas: function(id, color) {\n        var $canvas = $('<canvas id=\"job-icon-' + id + '\" width=\"' + this._canvasSize + '\" height=\"' + this._canvasSize + '\"/>').appendTo(this.$canvasContainer),\n            ctx = $canvas[0].getContext('2d');\n\n        ctx.strokeStyle = color;\n        ctx.lineWidth = this._lineWidth;\n        ctx.lineCap = 'round';\n        return $canvas;\n    },\n\n    _setArc: function(startPos, endPos) {\n        this._arcStartPos = startPos;\n        this._arcEndPos = endPos;\n\n        this._drawArc(this._staticCtx, startPos, endPos);\n        this._drawArc(this._hoverCtx, startPos, endPos);\n    },\n\n    _drawArc: function(ctx, startPos, endPos) {\n        ctx.clearRect(0, 0, this._canvasSize, this._canvasSize);\n        ctx.beginPath();\n        ctx.arc(this._arcPos, this._arcPos, this._arcRadius, (1.5 + (startPos * 2)) * Math.PI, (1.5 + (endPos * 2)) * Math.PI);\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    _animateArc: function(targetStartPos, targetEndPos, callback) {\n        if (this._arcStepTimeout) {\n            clearTimeout(this._arcStepTimeout);\n        }\n\n        this._arcStep = 0;\n        this._arcStartStepSize = (targetStartPos - this._arcStartPos) / 10;\n        this._arcEndStepSize = (targetEndPos - this._arcEndPos) / 10;\n        this._arcAnimateCallback = callback;\n        this._takeNextArcStep();\n    },\n\n    _takeNextArcStep: function() {\n        this._setArc(this._arcStartPos + this._arcStartStepSize, this._arcEndPos + this._arcEndStepSize);\n\n        this._arcStep++;\n\n        if (this._arcStep < 10) {\n            this._arcStepTimeout = setTimeout(this._takeNextArcStep.bind(this), 50);\n        } else if (this._arcAnimateCallback) {\n            this._arcAnimateCallback();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category index class\n */\nCraft.CategoryIndex = Craft.BaseElementIndex.extend({\n    editableGroups: null,\n    $newCategoryBtnGroup: null,\n    $newCategoryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible groups the user has permission to create new categories in\n        this.editableGroups = [];\n\n        for (var i = 0; i < Craft.editableCategoryGroups.length; i++) {\n            var group = Craft.editableCategoryGroups[i];\n\n            if (this.getSourceByKey('group:' + group.uid)) {\n                this.editableGroups.push(group);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific category group in the URL?\n        if (this.settings.context === 'index' && typeof defaultGroupHandle !== 'undefined') {\n            for (var i = 0; i < this.$sources.length; i++) {\n                var $source = $(this.$sources[i]);\n\n                if ($source.data('handle') === defaultGroupHandle) {\n                    return $source.data('key');\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        // Get the handle of the selected source\n        var selectedSourceHandle = this.$source.data('handle');\n\n        var i, href, label;\n\n        // Update the New Category button\n        // ---------------------------------------------------------------------\n\n        if (this.editableGroups.length) {\n            // Remove the old button, if there is one\n            if (this.$newCategoryBtnGroup) {\n                this.$newCategoryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a group that they have permission to create categories in\n            var selectedGroup;\n\n            if (selectedSourceHandle) {\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    if (this.editableGroups[i].handle === selectedSourceHandle) {\n                        selectedGroup = this.editableGroups[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newCategoryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New category\" button, and a dropdown of the other groups (if any).\n            // Otherwise only show a menu button\n            if (selectedGroup) {\n                href = this._getGroupTriggerHref(selectedGroup);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New category') : Craft.t('app', 'New {group} category', {group: selectedGroup.name}));\n                this.$newCategoryBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newCategoryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newCategoryBtn, 'click', function(ev) {\n                        this._openCreateCategoryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.editableGroups.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newCategoryBtnGroup);\n                }\n            } else {\n                this.$newCategoryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New category'),\n                }).appendTo(this.$newCategoryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.editableGroups.length; i++) {\n                    var group = this.editableGroups[i];\n\n                    if (this.settings.context === 'index' || group !== selectedGroup) {\n                        href = this._getGroupTriggerHref(group);\n                        label = (this.settings.context === 'index' ? group.name : Craft.t('app', 'New {group} category', {group: group.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newCategoryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateCategoryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newCategoryBtnGroup);\n        }\n\n        // Update the URL if we're on the Categories index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'categories';\n\n            if (selectedSourceHandle) {\n                uri += '/' + selectedSourceHandle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getGroupTriggerHref: function(group) {\n        if (this.settings.context === 'index') {\n            var uri = 'categories/' + group.handle + '/new';\n            if (this.siteId && this.siteId != Craft.primarySiteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        uri += '/' + Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri) + '\"';\n        } else {\n            return 'data-id=\"' + group.id + '\"';\n        }\n    },\n\n    _openCreateCategoryModal: function(groupId) {\n        if (this.$newCategoryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the group\n        var group;\n\n        for (var i = 0; i < this.editableGroups.length; i++) {\n            if (this.editableGroups[i].id == groupId) {\n                group = this.editableGroups[i];\n                break;\n            }\n        }\n\n        if (!group) {\n            return;\n        }\n\n        this.$newCategoryBtn.addClass('inactive');\n        var newCategoryBtnText = this.$newCategoryBtn.text();\n        this.$newCategoryBtn.text(Craft.t('app', 'New {group} category', {group: group.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newCategoryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                groupId: groupId\n            },\n            onHideHud: () => {\n                this.$newCategoryBtn.removeClass('inactive').text(newCategoryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right group is selected\n                var groupSourceKey = 'group:' + group.uid;\n\n                if (this.sourceKey !== groupSourceKey) {\n                    this.selectSourceByKey(groupSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Category', Craft.CategoryIndex);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Category Select input\n */\nCraft.CategorySelectInput = Craft.BaseElementSelectInput.extend({\n    setSettings: function() {\n        this.base.apply(this, arguments);\n        this.settings.sortable = false;\n    },\n\n    getModalSettings: function() {\n        var settings = this.base();\n        settings.hideOnSelect = false;\n        return settings;\n    },\n\n    getElements: function() {\n        return this.$elementsContainer.find('.element');\n    },\n\n    onModalSelect: function(elements) {\n        // Disable the modal\n        this.modal.disable();\n        this.modal.disableCancelBtn();\n        this.modal.disableSelectBtn();\n        this.modal.showFooterSpinner();\n\n        // Get the new category HTML\n        var selectedCategoryIds = this.getSelectedElementIds();\n\n        for (var i = 0; i < elements.length; i++) {\n            selectedCategoryIds.push(elements[i].id);\n        }\n\n        var data = {\n            categoryIds: selectedCategoryIds,\n            siteId: elements[0].siteId,\n            id: this.settings.id,\n            name: this.settings.name,\n            branchLimit: this.settings.branchLimit,\n            selectionLabel: this.settings.selectionLabel\n        };\n\n        Craft.postActionRequest('elements/get-categories-input-html', data, (response, textStatus) => {\n            this.modal.enable();\n            this.modal.enableCancelBtn();\n            this.modal.enableSelectBtn();\n            this.modal.hideFooterSpinner();\n\n            if (textStatus === 'success') {\n                var $newInput = $(response.html),\n                    $newElementsContainer = $newInput.children('.elements');\n\n                this.$elementsContainer.replaceWith($newElementsContainer);\n                this.$elementsContainer = $newElementsContainer;\n                this.resetElements();\n\n                var filteredElements = [];\n\n                for (var i = 0; i < elements.length; i++) {\n                    var element = elements[i],\n                        $element = this.getElementById(element.id);\n\n                    if ($element) {\n                        this.animateElementIntoPlace(element.$element, $element);\n                        filteredElements.push(element);\n                    }\n                }\n\n                this.updateDisabledElementsInModal();\n                this.modal.hide();\n                this.onSelectElements(filteredElements);\n            }\n        });\n    },\n\n    removeElement: function($element) {\n        // Find any descendants this category might have\n        var $allCategories = $element.add($element.parent().siblings('ul').find('.element'));\n\n        // Remove our record of them all at once\n        this.removeElements($allCategories);\n\n        // Animate them away one at a time\n        for (var i = 0; i < $allCategories.length; i++) {\n            this._animateCategoryAway($allCategories, i);\n        }\n    },\n\n    _animateCategoryAway: function($allCategories, i) {\n        var callback;\n\n        // Is this the last one?\n        if (i === $allCategories.length - 1) {\n            callback = () => {\n                var $li = $allCategories.first().parent().parent(),\n                    $ul = $li.parent();\n\n                if ($ul[0] === this.$elementsContainer[0] || $li.siblings().length) {\n                    $li.remove();\n                } else {\n                    $ul.remove();\n                }\n            };\n        }\n\n        var func = () => {\n            this.animateElementAway($allCategories.eq(i), callback);\n        };\n\n        if (i === 0) {\n            func();\n        } else {\n            setTimeout(func, 100 * i);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Craft Charts\n */\n\nCraft.charts = {};\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.DataTable\n */\nCraft.charts.DataTable = Garnish.Base.extend({\n    columns: null,\n    rows: null,\n\n    init: function(data) {\n        let columns = data.columns;\n        let rows = data.rows;\n\n        rows.forEach(d => {\n            $.each(d, function(cellIndex) {\n                var column = columns[cellIndex];\n\n                var parseTime;\n\n                switch (column.type) {\n                    case 'date':\n                        parseTime = d3.timeParse('%Y-%m-%d');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'datetime':\n                        parseTime = d3.timeParse('%Y-%m-%d %H:00:00');\n                        d[cellIndex] = parseTime(d[cellIndex]);\n                        break;\n\n                    case 'percent':\n                        d[cellIndex] = d[cellIndex] / 100;\n                        break;\n\n                    case 'number':\n                        d[cellIndex] = +d[cellIndex];\n                        break;\n\n                    default:\n                    // do nothing\n                }\n            });\n        });\n\n        this.columns = columns;\n        this.rows = rows;\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Tip\n */\n\nCraft.charts.Tip = Garnish.Base.extend({\n    $container: null,\n    $tip: null,\n\n    init: function($container) {\n        this.$container = $container;\n\n        this.$tip = $('<div class=\"tooltip\"></div>').appendTo(this.$container);\n\n        this.hide();\n    },\n\n    setContent: function(html) {\n        this.$tip.html(html);\n    },\n\n    setPosition: function(position) {\n        this.$tip.css('left', `${position.left}px`);\n        this.$tip.css('top', `${position.top}px`);\n    },\n\n    show: function() {\n        this.$tip.css('display', 'block');\n    },\n\n    hide: function() {\n        this.$tip.css('display', 'none');\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.BaseChart\n */\nCraft.charts.BaseChart = Garnish.Base.extend({\n    $container: null,\n    $chart: null,\n\n    chartBaseClass: 'cp-chart',\n    dataTable: null,\n\n    formatLocale: null,\n    timeFormatLocale: null,\n    orientation: null,\n\n    svg: null,\n    width: null,\n    height: null,\n\n    init: function(container, settings) {\n        this.$container = container;\n\n        this.setSettings(Craft.charts.BaseChart.defaults);\n        this.setSettings(settings);\n\n        var globalSettings = {\n            formats: window.d3Formats,\n            formatLocaleDefinition: window.d3FormatLocaleDefinition,\n            timeFormatLocaleDefinition: window.d3TimeFormatLocaleDefinition\n        };\n\n        this.setSettings(globalSettings);\n\n        d3.select(window).on('resize', () => {\n            this.resize();\n        });\n    },\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend(true, {}, baseSettings, defaults, settings);\n    },\n\n    draw: function(dataTable, settings) {\n        // Settings and chart attributes\n\n        this.setSettings(settings);\n\n        this.dataTable = dataTable;\n        this.formatLocale = d3.formatLocale(this.settings.formatLocaleDefinition);\n        this.timeFormatLocale = d3.timeFormatLocale(this.settings.timeFormatLocaleDefinition);\n        this.orientation = this.settings.orientation;\n\n        // Set (or reset) the chart element\n\n        if (this.$chart) {\n            this.$chart.remove();\n        }\n\n        var className = this.chartBaseClass;\n\n        if (this.settings.chartClass) {\n            className += ' ' + this.settings.chartClass;\n        }\n\n        this.$chart = $(`<div class=\"${className}\" />`).appendTo(this.$container);\n    },\n\n    resize: function() {\n        this.draw(this.dataTable, this.settings);\n    },\n\n    onAfterDrawTicks: function() {\n        // White border for ticks' text\n        $('.tick', this.$chart).each(function(tickKey, tick) {\n            var $tickText = $('text', tick);\n\n            var $clone = $tickText.clone();\n            $clone.appendTo(tick);\n\n            $tickText.attr('stroke', '#ffffff');\n            $tickText.attr('stroke-width', 3);\n        });\n    }\n}, {\n    defaults: {\n        formatLocaleDefinition: null,\n        timeFormatLocaleDefinition: null,\n        formats: {\n            numberFormat: ',.2f',\n            percentFormat: ',.2%',\n            currencyFormat: '$,.2f',\n            shortDateFormats: {\n                day: '%-m/%-d',\n                month: '%-m/%y',\n                year: '%Y'\n            }\n        },\n        margin: {top: 0, right: 0, bottom: 0, left: 0},\n        chartClass: null,\n        colors: ['#0594D1', '#DE3800', '#FF9A00', '#009802', '#9B009B']\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Area\n */\nCraft.charts.Area = Craft.charts.BaseChart.extend({\n    tip: null,\n    drawingArea: null,\n\n    init: function(container, settings) {\n        this.base(container, Craft.charts.Area.defaults);\n\n        this.setSettings(settings);\n    },\n\n    draw: function(dataTable, settings) {\n        this.base(dataTable, settings);\n\n        if (this.tip) {\n            this.tip = null;\n        }\n\n        var margin = this.getChartMargin();\n\n        this.width = this.$chart.width() - margin.left - margin.right;\n        this.height = this.$chart.height() - margin.top - margin.bottom;\n\n        // Append SVG to chart element\n\n        var svg = {\n            width: this.width + (margin.left + margin.right),\n            height: this.height + (margin.top + margin.bottom),\n            translateX: (this.orientation !== 'rtl' ? (margin.left) : (margin.right)),\n            translateY: margin.top\n        };\n\n        this.svg = d3.select(this.$chart.get(0)).append('svg')\n            .attr('width', svg.width)\n            .attr('height', svg.height);\n\n        this.drawingArea = this.svg.append('g')\n            .attr('transform', `translate(${svg.translateX},${svg.translateY})`);\n\n        // Draw elements\n\n        this.drawTicks();\n        this.drawAxes();\n        this.drawChart();\n        this.drawTipTriggers();\n    },\n\n    drawTicks: function() {\n        // Draw X ticks\n\n        var x = this.getX(true);\n        var xTicks = 3;\n        var xAxis = d3.axisBottom(x)\n            .tickFormat(this.getXFormatter())\n            .ticks(xTicks);\n\n        this.drawingArea.append('g')\n            .attr('class', 'x ticks-axis')\n            .attr('transform', `translate(0, ${this.height})`)\n            .call(xAxis);\n\n        // Draw Y ticks\n\n        var y = this.getY();\n        var yTicks = 2;\n        var yAxis;\n\n        if (this.orientation !== 'rtl') {\n            yAxis = d3.axisLeft(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .call(yAxis);\n        } else {\n            yAxis = d3.axisRight(y)\n                .tickFormat(this.getYFormatter())\n                .tickValues(this.getYTickValues())\n                .ticks(yTicks);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y ticks-axis')\n                .attr('transform', `translate(${this.width},0)`)\n                .call(yAxis);\n        }\n\n        // On after draw ticks\n\n        this.onAfterDrawTicks();\n    },\n\n    drawAxes: function() {\n        if (this.settings.xAxis.showAxis) {\n            var x = this.getX();\n            var xAxis = d3.axisBottom(x).ticks(0).tickSizeOuter(0);\n            this.drawingArea.append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0, ${this.height})`)\n                .call(xAxis);\n        }\n\n        if (this.settings.yAxis.showAxis) {\n            var y = this.getY();\n            var chartPadding = 0;\n            var yAxis;\n\n            if (this.orientation === 'rtl') {\n                yAxis = d3.axisLeft(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${this.width - chartPadding}, 0)`)\n                    .call(yAxis);\n            } else {\n                yAxis = d3.axisRight(y).ticks(0);\n                this.drawingArea.append('g')\n                    .attr('class', 'y axis')\n                    .attr('transform', `translate(${chartPadding}, 0)`)\n                    .call(yAxis);\n            }\n        }\n    },\n\n    drawChart: function() {\n        var x = this.getX(true);\n        var y = this.getY();\n\n        // X & Y grid lines\n\n        if (this.settings.xAxis.gridlines) {\n            var xLineAxis = d3.axisBottom(x);\n\n            this.drawingArea.append('g')\n                .attr('class', 'x grid-line')\n                .attr('transform', `translate(0,${this.height})`)\n                .call(xLineAxis\n                    .tickSize(-this.height, 0, 0)\n                    .tickFormat('')\n                );\n        }\n\n        var yTicks = 2;\n\n        if (this.settings.yAxis.gridlines) {\n            var yLineAxis = d3.axisLeft(y);\n\n            this.drawingArea.append('g')\n                .attr('class', 'y grid-line')\n                .attr('transform', 'translate(0 , 0)')\n                .call(yLineAxis\n                    .tickSize(-(this.width), 0)\n                    .tickFormat('')\n                    .tickValues(this.getYTickValues())\n                    .ticks(yTicks)\n                );\n        }\n\n        // Line\n\n        var line = d3.line()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-line')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', 'none')\n            .style('stroke', this.settings.colors[0])\n            .style('stroke-width', '3px')\n            .attr('d', line);\n\n        // Area\n\n        var area = d3.area()\n            .x(function(d) {\n                return x(d[0]);\n            })\n            .y0(this.height)\n            .y1(function(d) {\n                return y(d[1]);\n            });\n\n        this.drawingArea\n            .append('g')\n            .attr('class', 'chart-area')\n            .append('path')\n            .datum(this.dataTable.rows)\n            .style('fill', this.settings.colors[0])\n            .style('fill-opacity', '0.3')\n            .attr('d', area);\n\n        // Plots\n\n        if (this.settings.plots) {\n            this.drawingArea.append('g')\n                .attr('class', 'plots')\n                .selectAll('circle')\n                .data(this.dataTable.rows)\n                .enter()\n                .append('circle')\n                .style('fill', this.settings.colors[0])\n                .attr('class', (d, index) => `plot plot-${index}`)\n                .attr('r', 4)\n                .attr('cx', d => x(d[0]))\n                .attr('cy', d => y(d[1]));\n        }\n    },\n\n    drawTipTriggers: function() {\n        if (this.settings.tips) {\n            if (!this.tip) {\n                this.tip = new Craft.charts.Tip(this.$chart);\n            }\n\n            // Define xAxisTickInterval\n\n            var chartMargin = this.getChartMargin();\n            var tickSizeOuter = 6;\n            var length = this.drawingArea.select('.x path.domain').node().getTotalLength() - chartMargin.left - chartMargin.right - tickSizeOuter * 2;\n            var xAxisTickInterval = length / (this.dataTable.rows.length - 1);\n\n            // Tip trigger width\n\n            var tipTriggerWidth = Math.max(0, xAxisTickInterval);\n\n            // Draw triggers\n\n            var x = this.getX(true);\n            var y = this.getY();\n\n            this.drawingArea.append('g')\n                .attr('class', 'tip-triggers')\n                .selectAll('rect')\n                .data(this.dataTable.rows)\n                .enter().append('rect')\n                .attr('class', 'tip-trigger')\n                .style('fill', 'transparent')\n                .style('fill-opacity', '1')\n                .attr('width', tipTriggerWidth)\n                .attr('height', this.height)\n                .attr('x', d => x(d[0]) - tipTriggerWidth / 2)\n                .on('mouseover', (d, index) => {\n                    // Expand plot\n\n                    this.drawingArea.select('.plot-' + index).attr('r', 5);\n\n                    // Set tip content\n\n                    var $content = $('<div />');\n                    var $xValue = $('<div class=\"x-value\" />').appendTo($content);\n                    var $yValue = $('<div class=\"y-value\" />').appendTo($content);\n\n                    $xValue.html(this.getXFormatter()(d[0]));\n                    $yValue.html(this.getYFormatter()(d[1]));\n\n                    var content = $content.get(0);\n\n                    this.tip.setContent(content);\n\n                    // Set tip position\n\n                    var margin = this.getChartMargin();\n\n                    var offset = 24;\n                    var top = (y(d[1]) + offset);\n                    var left;\n\n                    if (this.orientation !== 'rtl') {\n                        left = (x(d[0]) + margin.left + offset);\n\n                        var calcLeft = (this.$chart.offset().left + left + this.tip.$tip.width());\n                        var maxLeft = this.$chart.offset().left + this.$chart.width() - offset;\n\n                        if (calcLeft > maxLeft) {\n                            left = x(d[0]) - (this.tip.$tip.width() + offset);\n                        }\n                    } else {\n                        left = (x(d[0]) - (this.tip.$tip.width() + margin.left + offset));\n                    }\n\n                    if (left < 0) {\n                        left = (x(d[0]) + margin.left + offset);\n                    }\n\n                    var position = {\n                        top: top,\n                        left: left\n                    };\n\n                    this.tip.setPosition(position);\n\n                    // Show tip\n\n                    this.tip.show();\n                })\n                .on('mouseout', (d, index) => {\n                    // Unexpand Plot\n                    this.drawingArea.select('.plot-' + index).attr('r', 4);\n\n                    // Hide tip\n                    this.tip.hide();\n                });\n        }\n    },\n\n    getChartMargin: function() {\n        var margin = this.settings.margin;\n\n        // Estimate the max width of y ticks and set it as the left margin\n\n        var values = this.getYTickValues();\n        var yTicksMaxWidth = 0;\n\n        $.each(values, (key, value) => {\n            var characterWidth = 8;\n\n            var formatter = this.getYFormatter();\n\n            var formattedValue = formatter(value);\n            var computedTickWidth = formattedValue.length * characterWidth;\n\n            if (computedTickWidth > yTicksMaxWidth) {\n                yTicksMaxWidth = computedTickWidth;\n            }\n        });\n\n        yTicksMaxWidth += 10;\n\n        margin.left = yTicksMaxWidth;\n\n        return margin;\n    },\n\n    getX: function(padded) {\n        var xDomainMin = d3.min(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomainMax = d3.max(this.dataTable.rows, function(d) {\n            return d[0];\n        });\n\n        var xDomain = [xDomainMin, xDomainMax];\n\n        if (this.orientation === 'rtl') {\n            xDomain = [xDomainMax, xDomainMin];\n        }\n\n        var left = 0;\n        var right = 0;\n\n        if (padded) {\n            left = 0;\n            right = 0;\n        }\n\n        var x = d3.scaleTime().range([left, (this.width - right)]);\n\n        x.domain(xDomain);\n\n        return x;\n    },\n\n    getY: function() {\n        var yDomain = [0, this.getYMaxValue()];\n\n        var y = d3.scaleLinear().range([this.height, 0]);\n\n        y.domain(yDomain);\n\n        return y;\n    },\n\n    getXFormatter: function() {\n        var formatter;\n\n        if (this.settings.xAxis.formatter !== $.noop) {\n            formatter = this.settings.xAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getTimeFormatter(this.timeFormatLocale, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYFormatter: function() {\n        var formatter;\n\n        if (this.settings.yAxis.formatter !== $.noop) {\n            formatter = this.settings.yAxis.formatter(this);\n        } else {\n            formatter = Craft.charts.utils.getNumberFormatter(this.formatLocale, this.dataTable.columns[1].type, this.settings);\n        }\n\n        return formatter;\n    },\n\n    getYMaxValue: function() {\n        return d3.max(this.dataTable.rows, function(d) {\n            return d[1];\n        });\n    },\n\n    getYTickValues: function() {\n        var maxValue = this.getYMaxValue();\n\n        if (maxValue > 1) {\n            return [(maxValue / 2), maxValue];\n        } else {\n            return [0, maxValue];\n        }\n    }\n}, {\n    defaults: {\n        chartClass: 'area',\n        margin: {top: 25, right: 5, bottom: 25, left: 0},\n        plots: true,\n        tips: true,\n        xAxis: {\n            gridlines: false,\n            showAxis: true,\n            formatter: $.noop\n        },\n        yAxis: {\n            gridlines: true,\n            showAxis: false,\n            formatter: $.noop\n        }\n    }\n});\n\n// ---------------------------------------------------------------------\n\n/**\n * Class Craft.charts.Utils\n */\nCraft.charts.utils = {\n    getDuration: function(seconds) {\n        var secondsNum = parseInt(seconds, 10);\n\n        var duration = {\n            hours: (Math.floor(secondsNum / 3600)),\n            minutes: (Math.floor((secondsNum - (duration.hours * 3600)) / 60)),\n            seconds: (secondsNum - (duration.hours * 3600) - (duration.minutes * 60))\n        };\n\n        if (duration.hours < 10) {\n            duration.hours = `0${duration.hours}`;\n        }\n\n        if (duration.minutes < 10) {\n            duration.minutes = `0${duration.minutes}`;\n        }\n\n        if (duration.seconds < 10) {\n            duration.seconds = `0${duration.seconds}`;\n        }\n\n        return `${duration.hours}:${duration.minutes}:${duration.seconds}`;\n    },\n\n    getTimeFormatter: function(timeFormatLocale, chartSettings) {\n        switch (chartSettings.dataScale) {\n            case 'year':\n                return timeFormatLocale.format('%Y');\n\n            case 'month':\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.month);\n\n            case 'hour':\n                return timeFormatLocale.format(`${chartSettings.formats.shortDateFormats.day} %H:00:00`);\n\n            default:\n                return timeFormatLocale.format(chartSettings.formats.shortDateFormats.day);\n        }\n    },\n\n    getNumberFormatter: function(formatLocale, type, chartSettings) {\n        switch (type) {\n            case 'currency':\n                return formatLocale.format(chartSettings.formats.currencyFormat);\n\n            case 'percent':\n                return formatLocale.format(chartSettings.formats.percentFormat);\n\n            case 'time':\n                return Craft.charts.utils.getDuration;\n\n            case 'number':\n                return formatLocale.format(chartSettings.formats.numberFormat);\n        }\n    }\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Color input\n */\nCraft.ColorInput = Garnish.Base.extend({\n    $container: null,\n    $input: null,\n    $colorContainer: null,\n    $colorPreview: null,\n    $colorInput: null,\n\n    init: function(container) {\n        this.$container = $(container);\n        this.$input = this.$container.find('.color-input');\n        this.$colorContainer = this.$container.children('.color');\n        this.$colorPreview = this.$colorContainer.children('.color-preview');\n\n        this.createColorInput();\n        this.handleTextChange();\n\n        this.addListener(this.$input, 'input', 'handleTextChange');\n    },\n\n    createColorInput: function() {\n        var input = document.createElement('input');\n        input.setAttribute('type', 'color');\n\n        if (input.type !== 'color') {\n            // The browser doesn't support input[type=color]\n            return;\n        }\n\n        this.$colorContainer.removeClass('static');\n        this.$colorInput = $(input)\n            .addClass('color-preview-input')\n            .attr({\n                'aria-controls': this.$input.attr('id'),\n                'aria-label': Craft.t('app', 'Color picker'),\n            })\n            .appendTo(this.$colorPreview);\n\n        this.addListener(this.$colorInput, 'click', function (ev) {\n            ev.stopPropagation();\n        });\n\n        this.addListener(this.$colorContainer, 'click', function() {\n            this.$colorInput.trigger('click');\n        });\n\n        this.addListener(this.$colorInput, 'input', 'updateColor');\n    },\n\n    updateColor: function() {\n        this.$input.val(this.$colorInput.val());\n        this.handleTextChange();\n    },\n\n    handleTextChange: function() {\n        let val = this.$input.val();\n\n        if (val !== (val = Craft.trim(val))) {\n            this.$input.val(val);\n        }\n\n        // Chop off the #\n        if (val.length && val[0] === '#') {\n            val = val.substr(1);\n            this.$input.val(val);\n        }\n\n        // If empty, set the preview to transparent\n        if (!val.length) {\n            this.$colorPreview.css('background-color', '');\n            return;\n        }\n\n        // Now normalize it for the UI stuff\n        if (val.length === 3) {\n            val = val[0].repeat(2) + val[1].repeat(2) + val[2].repeat(2);\n        }\n\n        if (val.match(/^[0-9a-f]{6}$/i)) {\n            this.$colorPreview.css('background-color', `#${val}`);\n            if (this.$colorInput) {\n                this.$colorInput.val(`#${val}`);\n            }\n        } else {\n            this.$colorPreview.css('background-color', '');\n        }\n    },\n}, {\n    _browserSupportsColorInputs: null,\n\n    doesBrowserSupportColorInputs: function() {\n        if (Craft.ColorInput._browserSupportsColorInputs === null) {\n        }\n\n        return Craft.ColorInput._browserSupportsColorInputs;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Customize Sources modal\n */\nCraft.CustomizeSourcesModal = Garnish.Modal.extend({\n    elementIndex: null,\n    $elementIndexSourcesContainer: null,\n\n    $sidebar: null,\n    $sourcesContainer: null,\n    $sourceSettingsContainer: null,\n    $newHeadingBtn: null,\n    $footer: null,\n    $footerBtnContainer: null,\n    $saveBtn: null,\n    $cancelBtn: null,\n    $saveSpinner: null,\n    $loadingSpinner: null,\n\n    sourceSort: null,\n    sources: null,\n    selectedSource: null,\n    updateSourcesOnSave: false,\n\n    availableTableAttributes: null,\n\n    init: function(elementIndex, settings) {\n        this.base();\n\n        this.setSettings(settings, {\n            resizable: true\n        });\n\n        this.elementIndex = elementIndex;\n        this.$elementIndexSourcesContainer = this.elementIndex.$sidebar.children('nav').children('ul');\n\n        var $container = $('<form class=\"modal customize-sources-modal\"/>').appendTo(Garnish.$bod);\n\n        this.$sidebar = $('<div class=\"cs-sidebar block-types\"/>').appendTo($container);\n        this.$sourcesContainer = $('<div class=\"sources\">').appendTo(this.$sidebar);\n        this.$sourceSettingsContainer = $('<div class=\"source-settings\">').appendTo($container);\n\n        this.$footer = $('<div class=\"footer\"/>').appendTo($container);\n        this.$footerBtnContainer = $('<div class=\"buttons right\"/>').appendTo(this.$footer);\n        this.$cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo(this.$footerBtnContainer);\n        this.$saveSpinner = $('<div class=\"spinner hidden\"/>').appendTo(this.$footerBtnContainer);\n        this.$newHeadingBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn submit add icon',\n            text: Craft.t('app', 'New heading'),\n        }).appendTo($('<div class=\"buttons left secondary-buttons\"/>').appendTo(this.$footer));\n\n        this.$loadingSpinner = $('<div class=\"spinner\"/>').appendTo($container);\n\n        this.setContainer($container);\n        this.show();\n\n        var data = {\n            elementType: this.elementIndex.elementType\n        };\n\n        Craft.postActionRequest('element-index-settings/get-customize-sources-modal-data', data, (response, textStatus) => {\n            this.$loadingSpinner.remove();\n\n            if (textStatus === 'success') {\n                this.$saveBtn.removeClass('disabled');\n                this.buildModal(response);\n            }\n        });\n\n        this.addListener(this.$newHeadingBtn, 'click', 'handleNewHeadingBtnClick');\n        this.addListener(this.$cancelBtn, 'click', 'hide');\n        this.addListener(this.$saveBtn, 'click', 'save');\n        this.addListener(this.$container, 'submit', 'save');\n    },\n\n    buildModal: function(response) {\n        // Store the available table attribute options\n        this.availableTableAttributes = response.availableTableAttributes;\n\n        // Create the source item sorter\n        this.sourceSort = new Garnish.DragSort({\n            handle: '.move',\n            axis: 'y',\n            onSortChange: () => {\n                this.updateSourcesOnSave = true;\n            },\n        });\n\n        // Create the sources\n        this.sources = [];\n\n        for (var i = 0; i < response.sources.length; i++) {\n            var source = this.addSource(response.sources[i]);\n            this.sources.push(source);\n        }\n\n        if (!this.selectedSource && typeof this.sources[0] !== 'undefined') {\n            this.sources[0].select();\n        }\n    },\n\n    addSource: function(sourceData) {\n        var $item = $('<div class=\"customize-sources-item\"/>').appendTo(this.$sourcesContainer);\n        var $itemLabel = $('<div class=\"label\"/>').appendTo($item);\n        var $itemInput = $('<input type=\"hidden\"/>').appendTo($item);\n        $('<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\" role=\"button\"></a>').appendTo($item);\n\n        var source;\n\n        // Is this a heading?\n        if (typeof sourceData.heading !== 'undefined') {\n            $item.addClass('heading');\n            $itemInput.attr('name', 'sourceOrder[][heading]');\n            source = new Craft.CustomizeSourcesModal.Heading(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.heading);\n        } else {\n            $itemInput.attr('name', 'sourceOrder[][key]').val(sourceData.key);\n            source = new Craft.CustomizeSourcesModal.Source(this, $item, $itemLabel, $itemInput, sourceData);\n            source.updateItemLabel(sourceData.label);\n\n            // Select this by default?\n            if ((this.elementIndex.sourceKey + '/').substr(0, sourceData.key.length + 1) === sourceData.key + '/') {\n                source.select();\n            }\n        }\n\n        this.sourceSort.addItems($item);\n\n        return source;\n    },\n\n    handleNewHeadingBtnClick: function() {\n        var source = this.addSource({\n            heading: ''\n        });\n\n        Garnish.scrollContainerToElement(this.$sidebar, source.$item);\n\n        source.select();\n        this.updateSourcesOnSave = true;\n    },\n\n    save: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (this.$saveBtn.hasClass('disabled') || !this.$saveSpinner.hasClass('hidden')) {\n            return;\n        }\n\n        this.$saveSpinner.removeClass('hidden');\n        var data = this.$container.serialize() + '&elementType=' + this.elementIndex.elementType;\n\n        Craft.postActionRequest('element-index-settings/save-customize-sources-modal-settings', data, (response, textStatus) => {\n            this.$saveSpinner.addClass('hidden');\n\n            if (textStatus === 'success' && response.success) {\n                // Have any changes been made to the source list?\n                if (this.updateSourcesOnSave) {\n                    if (this.$elementIndexSourcesContainer.length) {\n                        var $lastSource = null,\n                            $pendingHeading;\n\n                        for (var i = 0; i < this.sourceSort.$items.length; i++) {\n                            var $item = this.sourceSort.$items.eq(i),\n                                source = $item.data('source'),\n                                $indexSource = source.getIndexSource();\n\n                            if (!$indexSource) {\n                                continue;\n                            }\n\n                            if (source.isHeading()) {\n                                $pendingHeading = $indexSource;\n                            } else {\n                                if ($pendingHeading) {\n                                    this.appendSource($pendingHeading, $lastSource);\n                                    $lastSource = $pendingHeading;\n                                    $pendingHeading = null;\n                                }\n\n                                this.appendSource($indexSource, $lastSource);\n                                $lastSource = $indexSource;\n                            }\n                        }\n\n                        // Remove any additional sources (most likely just old headings)\n                        if ($lastSource) {\n                            var $extraSources = $lastSource.nextAll();\n                            this.elementIndex.sourceSelect.removeItems($extraSources);\n                            $extraSources.remove();\n                        }\n                    }\n                }\n\n                // If a source is selected, have the element index select that one by default on the next request\n                if (this.selectedSource && this.selectedSource.sourceData.key) {\n                    this.elementIndex.selectSourceByKey(this.selectedSource.sourceData.key);\n                    this.elementIndex.updateElements();\n                }\n\n                Craft.cp.displayNotice(Craft.t('app', 'Source settings saved'));\n                this.hide();\n            } else {\n                var error = (textStatus === 'success' && response.error ? response.error : Craft.t('app', 'A server error occurred.'));\n                Craft.cp.displayError(error);\n            }\n        });\n    },\n\n    appendSource: function($source, $lastSource) {\n        if (!$lastSource) {\n            $source.prependTo(this.$elementIndexSourcesContainer);\n        } else {\n            $source.insertAfter($lastSource);\n        }\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.sources.length; i++) {\n            this.sources[i].destroy();\n        }\n\n        delete this.sources;\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.BaseSource = Garnish.Base.extend({\n    modal: null,\n\n    $item: null,\n    $itemLabel: null,\n    $itemInput: null,\n    $settingsContainer: null,\n\n    sourceData: null,\n\n    init: function(modal, $item, $itemLabel, $itemInput, sourceData) {\n        this.modal = modal;\n        this.$item = $item;\n        this.$itemLabel = $itemLabel;\n        this.$itemInput = $itemInput;\n        this.sourceData = sourceData;\n\n        this.$item.data('source', this);\n\n        this.addListener(this.$item, 'click', 'select');\n    },\n\n    isHeading: function() {\n        return false;\n    },\n\n    isSelected: function() {\n        return (this.modal.selectedSource === this);\n    },\n\n    select: function() {\n        if (this.isSelected()) {\n            return;\n        }\n\n        if (this.modal.selectedSource) {\n            this.modal.selectedSource.deselect();\n        }\n\n        this.$item.addClass('sel');\n        this.modal.selectedSource = this;\n\n        if (!this.$settingsContainer) {\n            this.$settingsContainer = this.createSettings()\n                .appendTo(this.modal.$sourceSettingsContainer);\n        } else {\n            this.$settingsContainer.removeClass('hidden');\n        }\n\n        this.modal.$sourceSettingsContainer.scrollTop(0);\n    },\n\n    createSettings: function() {\n        return $('<div/>');\n    },\n\n    getIndexSource: function() {\n    },\n\n    deselect: function() {\n        this.$item.removeClass('sel');\n        this.modal.selectedSource = null;\n        this.$settingsContainer.addClass('hidden');\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.text(val);\n    },\n\n    destroy: function() {\n        this.$item.data('source', null);\n        this.base();\n    }\n});\n\nCraft.CustomizeSourcesModal.Source = Craft.CustomizeSourcesModal.BaseSource.extend({\n    createSettings: function() {\n        let $settings = $('<div/>').append(Craft.ui.createTextField({\n            label: Craft.t('app', 'Header Column Heading'),\n            id: 'defaultHeaderColHeading' + Math.floor(Math.random() * 100000),\n            name: `sources[${this.sourceData.key}][headerColHeading]`,\n            value: this.sourceData.headerColHeading,\n            placeholder: this.sourceData.defaultHeaderColHeading,\n        }));\n\n        if (this.sourceData.tableAttributes.length) {\n            $settings.append(this.createTableColumnsField());\n        }\n\n        return $settings;\n    },\n\n    createTableColumnsField: function() {\n        // Create the title column option\n        let [firstKey, firstLabel] = this.sourceData.tableAttributes[0];\n        let $titleColumnCheckbox = this.createTableColumnOption(firstKey, firstLabel, true, true);\n\n        // Create the rest of the options\n        let $columnCheckboxes = $('<div/>');\n        let selectedAttributes = [firstKey];\n\n        $('<input type=\"hidden\" name=\"sources[' + this.sourceData.key + '][tableAttributes][]\" value=\"\"/>').appendTo($columnCheckboxes);\n\n        // Add the selected columns, in the selected order\n        for (let i = 1; i < this.sourceData.tableAttributes.length; i++) {\n            let [key, label] = this.sourceData.tableAttributes[i];\n            $columnCheckboxes.append(this.createTableColumnOption(key, label, false, true));\n            selectedAttributes.push(key);\n        }\n\n        // Add the rest\n        let availableTableAttributes = this.modal.availableTableAttributes.slice(0);\n        availableTableAttributes.push(...this.sourceData.availableTableAttributes);\n\n        for (let i = 0; i < availableTableAttributes.length; i++) {\n            let [key, label] = availableTableAttributes[i];\n            if (!Craft.inArray(key, selectedAttributes)) {\n                $columnCheckboxes.append(this.createTableColumnOption(key, label, false, false));\n            }\n        }\n\n        new Garnish.DragSort($columnCheckboxes.children(), {\n            handle: '.move',\n            axis: 'y'\n        });\n\n        return Craft.ui.createField($([$titleColumnCheckbox[0], $columnCheckboxes[0]]), {\n            label: Craft.t('app', 'Table Columns'),\n            instructions: Craft.t('app', 'Choose which table columns should be visible for this source, and in which order.')\n        });\n    },\n\n    createTableColumnOption: function(key, label, first, checked) {\n        var $option = $('<div class=\"customize-sources-table-column\"/>')\n            .append('<div class=\"icon move\"/>')\n            .append(\n                Craft.ui.createCheckbox({\n                    label: Craft.escapeHtml(label),\n                    name: 'sources[' + this.sourceData.key + '][tableAttributes][]',\n                    value: key,\n                    checked: checked,\n                    disabled: first\n                })\n            );\n\n        if (first) {\n            $option.children('.move').addClass('disabled');\n        }\n\n        return $option;\n    },\n\n    getIndexSource: function() {\n        var $source = this.modal.elementIndex.getSourceByKey(this.sourceData.key);\n\n        if ($source) {\n            return $source.closest('li');\n        }\n    }\n});\n\nCraft.CustomizeSourcesModal.Heading = Craft.CustomizeSourcesModal.BaseSource.extend({\n    $labelField: null,\n    $labelInput: null,\n    $deleteBtn: null,\n\n    isHeading: function() {\n        return true;\n    },\n\n    select: function() {\n        this.base();\n        this.$labelInput.trigger('focus');\n    },\n\n    createSettings: function() {\n        let $settings = $('<div/>');\n\n        this.$labelField = Craft.ui.createTextField({\n            label: Craft.t('app', 'Heading'),\n            instructions: Craft.t('app', 'This can be left blank if you just want an unlabeled separator.'),\n            value: this.sourceData.heading\n        }).appendTo($settings);\n\n        this.$labelInput = this.$labelField.find('.text');\n\n        $settings.append('<hr/>');\n\n        this.$deleteBtn = $('<a class=\"error delete\"/>').text(Craft.t('app', 'Delete heading'))\n            .appendTo($settings);\n\n        this.addListener(this.$labelInput, 'input', 'handleLabelInputChange');\n        this.addListener(this.$deleteBtn, 'click', 'deleteHeading');\n\n        return $settings;\n    },\n\n    handleLabelInputChange: function() {\n        this.updateItemLabel(this.$labelInput.val());\n        this.modal.updateSourcesOnSave = true;\n    },\n\n    updateItemLabel: function(val) {\n        this.$itemLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>') + '&nbsp;');\n        this.$itemInput.val(val);\n    },\n\n    deleteHeading: function() {\n        this.modal.sourceSort.removeItems(this.$item);\n        this.modal.sources.splice($.inArray(this, this.modal.sources), 1);\n        this.modal.updateSourcesOnSave = true;\n\n        if (this.isSelected()) {\n            this.deselect();\n\n            if (this.modal.sources.length) {\n                this.modal.sources[0].select();\n            }\n        }\n\n        this.$item.remove();\n        this.$settingsContainer.remove();\n        this.destroy();\n    },\n\n    getIndexSource: function() {\n        var label = (this.$labelInput ? this.$labelInput.val() : this.sourceData.heading);\n        return $('<li class=\"heading\"/>').append($('<span/>').text(label));\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * DataTableSorter\n */\nCraft.DataTableSorter = Garnish.DragSort.extend({\n    $table: null,\n\n    init: function(table, settings) {\n        this.$table = $(table);\n        var $rows = this.$table.children('tbody').children(':not(.filler)');\n\n        settings = $.extend({}, Craft.DataTableSorter.defaults, settings);\n\n        settings.container = this.$table.children('tbody');\n        settings.helper = this.getHelper.bind(this);\n        settings.caboose = '<tr/>';\n        settings.axis = Garnish.Y_AXIS;\n        settings.magnetStrength = 4;\n        settings.helperLagBase = 1.5;\n\n        this.base($rows, settings);\n    },\n\n    getHelper: function($helperRow) {\n        var $helper = $('<div class=\"' + this.settings.helperClass + '\"/>').appendTo(Garnish.$bod),\n            $table = $('<table/>').appendTo($helper),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the table width and classes\n        $table.width(this.$table.width());\n        $table.prop('className', this.$table.prop('className'));\n\n        // Copy the column widths\n        var $firstRow = this.$table.find('tr:first'),\n            $cells = $firstRow.children(),\n            $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            $($helperCells[i]).width($($cells[i]).width());\n        }\n\n        return $helper;\n    }\n}, {\n    defaults: {\n        handle: '.move',\n        helperClass: 'datatablesorthelper'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Delete User Modal\n */\nCraft.DeleteUserModal = Garnish.Modal.extend({\n    id: null,\n    userId: null,\n\n    $deleteActionRadios: null,\n    $deleteSpinner: null,\n\n    userSelect: null,\n    _deleting: false,\n\n    init: function(userId, settings) {\n        this.id = Math.floor(Math.random() * 1000000000);\n        this.userId = userId;\n        settings = $.extend(Craft.DeleteUserModal.defaults, settings);\n\n        let $form = $(\n            '<form class=\"modal fitted deleteusermodal\" method=\"post\" accept-charset=\"UTF-8\">' +\n            Craft.getCsrfInput() +\n            '<input type=\"hidden\" name=\"action\" value=\"users/delete-user\"/>' +\n            (!Garnish.isArray(this.userId) ? '<input type=\"hidden\" name=\"userId\" value=\"' + this.userId + '\"/>' : '') +\n            (settings.redirect ? '<input type=\"hidden\" name=\"redirect\" value=\"' + settings.redirect + '\"/>' : '') +\n            '</form>'\n        ).appendTo(Garnish.$bod);\n        let $body = $(\n            '<div class=\"body\">' +\n            '<div class=\"content-summary\">' +\n            '<p>' + Craft.t('app', 'What do you want to do with their content?') + '</p>' +\n            '<ul class=\"bullets\"></ul>' +\n            '</div>' +\n            '<div class=\"options\">' +\n            '<label><input type=\"radio\" name=\"contentAction\" value=\"transfer\"/> ' + Craft.t('app', 'Transfer it to:') + '</label>' +\n            '<div id=\"transferselect' + this.id + '\" class=\"elementselect\">' +\n            '<div class=\"elements\"></div>' +\n            '<button type=\"button\" class=\"btn add icon dashed\">' + Craft.t('app', 'Choose a user') + '</button>' +\n            '</div>' +\n            '</div>' +\n            '<div>' +\n            '<label class=\"error\"><input type=\"radio\" name=\"contentAction\" value=\"delete\"/> ' + Craft.t('app', 'Delete their content') + '</label>' +\n            '</div>' +\n            '</div>'\n        ).appendTo($form);\n        let $buttons = $('<div class=\"buttons right\"/>').appendTo($body);\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo($buttons);\n\n        if (settings.contentSummary.length) {\n            for (let i = 0; i < settings.contentSummary.length; i++) {\n                $body.find('ul').append($('<li/>', {text: settings.contentSummary[i]}));\n            }\n        } else {\n            $body.find('ul').remove();\n        }\n\n        this.$deleteActionRadios = $body.find('input[type=radio]');\n        this.$deleteSubmitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: this._submitBtnLabel(false),\n        }).appendTo($buttons);\n        this.$deleteSpinner = $('<div class=\"spinner hidden\"/>').appendTo($buttons);\n\n        var idParam;\n\n        if (Garnish.isArray(this.userId)) {\n            idParam = ['and'];\n\n            for (let i = 0; i < this.userId.length; i++) {\n                idParam.push('not ' + this.userId[i]);\n            }\n        } else {\n            idParam = 'not ' + this.userId;\n        }\n\n        this.userSelect = new Craft.BaseElementSelectInput({\n            id: 'transferselect' + this.id,\n            name: 'transferContentTo',\n            elementType: 'craft\\\\elements\\\\User',\n            criteria: {\n                id: idParam\n            },\n            limit: 1,\n            modalSettings: {\n                closeOtherModals: false\n            },\n            onSelectElements: () => {\n                this.updateSizeAndPosition();\n\n                if (!this.$deleteActionRadios.first().prop('checked')) {\n                    this.$deleteActionRadios.first().trigger('click');\n                } else {\n                    this.validateDeleteInputs();\n                }\n            },\n            onRemoveElements: this.validateDeleteInputs.bind(this),\n            selectable: false,\n            editable: false\n        });\n\n        this.addListener($cancelBtn, 'click', 'hide');\n\n        this.addListener(this.$deleteActionRadios, 'change', 'validateDeleteInputs');\n        this.addListener($form, 'submit', 'handleSubmit');\n\n        this.base($form, settings);\n    },\n\n    _submitBtnLabel: function(withContent) {\n        let message = withContent\n            ? 'Delete {num, plural, =1{user} other{users}} and content'\n            : 'Delete {num, plural, =1{user} other{users}}';\n\n        return Craft.t('app', message, {\n            num: Garnish.isArray(this.userId) ? this.userId.length : 1,\n        });\n    },\n\n    validateDeleteInputs: function() {\n        var validates = false;\n\n        if (this.$deleteActionRadios.eq(1).prop('checked')) {\n            validates = true;\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(true));\n        } else {\n            this.$deleteSubmitBtn.text(this._submitBtnLabel(false));\n            if (this.$deleteActionRadios.eq(0).prop('checked')) {\n                validates = !!this.userSelect.totalSelected;\n            }\n        }\n\n        this.updateSizeAndPosition();\n\n        if (validates) {\n            this.$deleteSubmitBtn.removeClass('disabled');\n        } else {\n            this.$deleteSubmitBtn.addClass('disabled');\n        }\n\n        return validates;\n    },\n\n    handleSubmit: function(ev) {\n        if (this._deleting || !this.validateDeleteInputs()) {\n            ev.preventDefault();\n            return;\n        }\n\n        this.$deleteSubmitBtn.addClass('active');\n        this.$deleteSpinner.removeClass('hidden');\n        this.disable();\n        this.userSelect.disable();\n        this._deleting = true;\n\n        // Let the onSubmit callback prevent the form from getting submitted\n        try {\n            if (this.settings.onSubmit() === false) {\n                ev.preventDefault();\n            }\n        } catch (e) {\n            ev.preventDefault();\n            this.$deleteSpinner.addClass('hidden');\n            throw e;\n        }\n    },\n\n    onFadeIn: function() {\n        // Auto-focus the first radio\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$deleteActionRadios.first().trigger('focus');\n        }\n\n        this.base();\n    }\n}, {\n    defaults: {\n        contentSummary: [],\n        onSubmit: $.noop,\n        redirect: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Monitor\n */\nCraft.DraftEditor = Garnish.Base.extend({\n    $revisionBtn: null,\n    $revisionLabel: null,\n    $spinner: null,\n    $expandSiteStatusesBtn: null,\n    $statusIcon: null,\n\n    $editMetaBtn: null,\n    metaHud: null,\n    $nameTextInput: null,\n    $saveMetaBtn: null,\n\n    $siteStatusPane: null,\n    $globalLightswitch: null,\n    $siteLightswitches: null,\n    $addlSiteField: null,\n\n    siteIds: null,\n    newSiteIds: null,\n\n    lastSerializedValue: null,\n    listeningForChanges: false,\n    pauseLevel: 0,\n    timeout: null,\n    saving: false,\n    cancelToken: null,\n    ignoreFailedRequest: false,\n    queue: null,\n    submittingForm: false,\n\n    duplicatedElements: null,\n    errors: null,\n\n    openingPreview: false,\n    preview: null,\n    previewToken: null,\n    createdProvisionalDraft: false,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.DraftEditor.defaults);\n\n        this.queue = [];\n        this.duplicatedElements = {};\n\n        this.siteIds = Object.keys(this.settings.siteStatuses).map(siteId => {\n            return parseInt(siteId)\n        });\n\n        this.$revisionBtn = $('#context-btn');\n        this.$revisionLabel = $('#revision-label');\n        this.$spinner = $('#revision-spinner');\n        this.$expandSiteStatusesBtn = $('#expand-status-btn');\n        this.$statusIcon = $('#revision-status');\n\n        if (this.settings.canEditMultipleSites) {\n            this.addListener(this.$expandSiteStatusesBtn, 'click', 'expandSiteStatuses');\n        }\n\n        if (this.settings.previewTargets.length) {\n            if (this.settings.enablePreview) {\n                this.addListener($('#preview-btn'), 'click', 'openPreview');\n            }\n\n            const $shareBtn = $('#share-btn');\n\n            if (this.settings.previewTargets.length === 1) {\n                this.addListener($shareBtn, 'click', function() {\n                    this.openShareLink(this.settings.previewTargets[0].url);\n                });\n            } else {\n                this.createShareMenu($shareBtn);\n            }\n        }\n\n        // If this is a revision, we're done here\n        if (this.settings.revisionId) {\n            return;\n        }\n\n        // Override the serializer to use our own\n        Craft.cp.$primaryForm.data('serializer', () => this.serializeForm(true));\n\n        this.addListener(Craft.cp.$primaryForm, 'submit', 'handleFormSubmit');\n\n        if (this.settings.isProvisionalDraft) {\n            this.initForProvisionalDraft();\n        } else if (this.settings.draftId && !this.settings.isUnpublishedDraft) {\n            this.initForDraft();\n        } else if (!this.settings.canUpdateSource) {\n            // Override the save shortcut to create a draft too\n            this.addListener(Craft.cp.$primaryForm, 'submit.saveShortcut', ev => {\n                if (ev.saveShortcut) {\n                    ev.preventDefault();\n                    this.createDraft();\n                    this.removeListener(Craft.cp.$primaryForm, 'submit.saveShortcut');\n                }\n            });\n        }\n\n        this.listenForChanges();\n\n        this.addListener(this.$statusIcon, 'click', () => {\n            this.showStatusHud(this.$statusIcon);\n        });\n    },\n\n    listenForChanges: function() {\n        if (this.listeningForChanges || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        this.listeningForChanges = true;\n\n        this.addListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup', function(ev) {\n            if ($(ev.target).is(this.statusIcons())) {\n                return;\n            }\n            clearTimeout(this.timeout);\n            // If they are typing, wait half a second before checking the form\n            if (['keypress', 'keyup', 'change'].includes(ev.type)) {\n                this.timeout = setTimeout(this.checkForm.bind(this), 500);\n            } else {\n                this.checkForm();\n            }\n        });\n    },\n\n    stopListeningForChanges: function() {\n        if (!this.listeningForChanges) {\n            return;\n        }\n\n        this.removeListener(Garnish.$bod, 'keypress,keyup,change,focus,blur,click,mousedown,mouseup');\n        clearTimeout(this.timeout);\n        this.listeningForChanges = false;\n    },\n\n    pause: function() {\n        this.pauseLevel++;\n        this.stopListeningForChanges();\n    },\n\n    resume: function() {\n        if (this.pauseLevel === 0) {\n            throw 'Craft.DraftEditor::resume() should only be called after pause().';\n        }\n\n        // Only actually resume operation if this has been called the same\n        // number of times that pause() was called\n        this.pauseLevel--;\n        if (this.pauseLevel === 0) {\n            this.checkForm();\n            this.listenForChanges();\n        }\n    },\n\n    initForProvisionalDraft: function() {\n        let $button = $('#discard-changes');\n        if (!$button.length) {\n            $button = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu.$container.find('#discard-changes') : null;\n        }\n        if ($button && $button.length) {\n            this.addListener($button, 'click', () => {\n                if (confirm(Craft.t('app', 'Are you sure you want to discard your changes?'))) {\n                    Craft.submitForm(Craft.cp.$primaryForm, {\n                        action: this.settings.deleteDraftAction,\n                        redirect: this.settings.hashedCpEditUrl,\n                        params: {\n                            draftId: this.settings.draftId,\n                            provisional: this.settings.isProvisionalDraft,\n                        },\n                    });\n                }\n            });\n        }\n    },\n\n    initForDraft: function() {\n        // Create the edit draft button\n        this.createEditMetaBtn();\n\n        if (this.settings.canUpdateSource) {\n            Garnish.shortcutManager.registerShortcut({\n                keyCode: Garnish.S_KEY,\n                ctrl: true,\n                alt: true\n            }, () => {\n                Craft.submitForm(Craft.cp.$primaryForm, {\n                    action: this.settings.publishDraftAction,\n                    redirect: this.settings.hashedCpEditUrl,\n                });\n            }, 0);\n        }\n    },\n\n    expandSiteStatuses: function() {\n        this.removeListener(this.$expandSiteStatusesBtn, 'click');\n        this.$expandSiteStatusesBtn.velocity({opacity: 0}, 'fast', () => {\n            this.$expandSiteStatusesBtn.remove();\n        });\n\n        const $enabledForSiteField = $(`#enabledForSite-${this.settings.siteId}-field`);\n        this.$siteStatusPane = $enabledForSiteField.parent();\n\n        // If this is a revision, just show the site statuses statically and be done\n        if (this.settings.revisionId) {\n            this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n            return;\n        }\n\n        $enabledForSiteField.addClass('nested');\n        const $globalField = Craft.ui.createLightswitchField({\n            id: 'enabled',\n            label: Craft.t('app', 'Enabled'),\n            name: 'enabled',\n        }).insertBefore($enabledForSiteField);\n        $globalField.find('label').css('font-weight', 'bold');\n        this.$globalLightswitch = $globalField.find('.lightswitch');\n\n        if (!this.settings.revisionId) {\n            this._showField($globalField);\n        }\n\n        // Figure out what the \"Enabled everywhere\" lightswitch would have been set to when the page first loaded\n        const originalEnabledValue = (this.settings.enabled && !Craft.inArray(false, this.settings.siteStatuses))\n            ? '1'\n            : (this.settings.enabledForSite ? '-' : '');\n        const originalSerializedStatus = encodeURIComponent(`enabledForSite[${this.settings.siteId}]`) +\n            '=' + (this.settings.enabledForSite ? '1' : '');\n\n        this.$siteLightswitches = $enabledForSiteField.find('.lightswitch')\n            .on('change', this._updateGlobalStatus.bind(this));\n\n        this._getOtherSupportedSites().forEach(s => this._createSiteStatusField(s));\n\n        let serializedStatuses = `enabled=${originalEnabledValue}`;\n        for (let i = 0; i < this.$siteLightswitches.length; i++) {\n            const $input = this.$siteLightswitches.eq(i).data('lightswitch').$input;\n            serializedStatuses += '&' + encodeURIComponent($input.attr('name')) + '=' + $input.val();\n        }\n\n        Craft.cp.$primaryForm.data('initialSerializedValue',\n            Craft.cp.$primaryForm.data('initialSerializedValue').replace(originalSerializedStatus, serializedStatuses));\n\n        // Are there additional sites that can be added?\n        if (this.settings.addlSiteIds && this.settings.addlSiteIds.length) {\n            this._createAddlSiteField();\n        }\n\n        this.$globalLightswitch.on('change', this._updateSiteStatuses.bind(this));\n        this._updateGlobalStatus();\n    },\n\n    /**\n     * @returns {Array}\n     */\n    _getOtherSupportedSites: function() {\n        return Craft.sites.filter(s => s.id != this.settings.siteId && this.siteIds.includes(s.id));\n    },\n\n    _showField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .height(0)\n            .velocity({height}, 'fast', () => {\n                $field.css({\n                    overflow: '',\n                    height: '',\n                });\n            });\n    },\n\n    _removeField: function($field) {\n        const height = $field.height();\n        $field\n            .css('overflow', 'hidden')\n            .velocity({height: 0}, 'fast', () => {\n                $field.remove();\n            });\n    },\n\n    _updateGlobalStatus: function() {\n        let allEnabled = true, allDisabled = true;\n        this.$siteLightswitches.each(function() {\n            const enabled = $(this).data('lightswitch').on;\n            if (enabled) {\n                allDisabled = false;\n            } else {\n                allEnabled = false;\n            }\n            if (!allEnabled && !allDisabled) {\n                return false;\n            }\n        });\n        if (allEnabled) {\n            this.$globalLightswitch.data('lightswitch').turnOn(true);\n        } else if (allDisabled) {\n            this.$globalLightswitch.data('lightswitch').turnOff(true);\n        } else {\n            this.$globalLightswitch.data('lightswitch').turnIndeterminate(true);\n        }\n    },\n\n    _updateSiteStatuses: function() {\n        const enabled = this.$globalLightswitch.data('lightswitch').on;\n        this.$siteLightswitches.each(function() {\n            if (enabled) {\n                $(this).data('lightswitch').turnOn(true);\n            } else {\n                $(this).data('lightswitch').turnOff(true);\n            }\n        });\n    },\n\n    _createSiteStatusField: function(site) {\n        const $field = Craft.ui.createLightswitchField({\n            id: `enabledForSite-${site.id}`,\n            label: Craft.t('app', 'Enabled for {site}', {site: site.name}),\n            name: `enabledForSite[${site.id}]`,\n            on: this.settings.siteStatuses.hasOwnProperty(site.id)\n                ? this.settings.siteStatuses[site.id]\n                : true,\n            disabled: !!this.settings.revisionId,\n        });\n\n        if (this.$addlSiteField) {\n            $field.insertBefore(this.$addlSiteField);\n        } else {\n            $field.appendTo(this.$siteStatusPane);\n        }\n\n        if (!this.settings.revisionId) {\n            $field.addClass('nested');\n            const $lightswitch = $field.find('.lightswitch')\n                .on('change', this._updateGlobalStatus.bind(this));\n            this.$siteLightswitches = this.$siteLightswitches.add($lightswitch);\n        }\n\n        this._showField($field);\n\n        return $field;\n    },\n\n    _createAddlSiteField: function() {\n        const addlSites = Craft.sites.filter(s => {\n            return !this.siteIds.includes(s.id) && this.settings.addlSiteIds.includes(s.id);\n        });\n\n        if (!addlSites.length) {\n            return;\n        }\n\n        const $addlSiteSelectContainer = Craft.ui.createSelect({\n            options: [\n                {label: Craft.t('app', 'Add a site…')},\n                ...addlSites.map(s => {\n                    return {label: s.name, value: s.id};\n                }),\n            ],\n        }).addClass('fullwidth');\n\n        this.$addlSiteField = Craft.ui.createField($addlSiteSelectContainer, {})\n            .addClass('nested add')\n            .appendTo(this.$siteStatusPane);\n\n        const $addlSiteSelect = $addlSiteSelectContainer.find('select');\n\n        $addlSiteSelect.on('change', () => {\n            const siteId = parseInt($addlSiteSelect.val());\n            const site = Craft.sites.find(s => s.id === siteId);\n\n            if (!site) {\n                return;\n            }\n\n            this._createSiteStatusField(site);\n\n            $addlSiteSelect\n                .val('')\n                .find(`option[value=\"${siteId}\"]`).remove();\n\n            if (this.newSiteIds === null) {\n                this.newSiteIds = [];\n            }\n\n            this.siteIds.push(siteId);\n            this.newSiteIds.push(siteId);\n\n            // Was that the last site?\n            if ($addlSiteSelect.find('option').length === 1) {\n                this._removeField(this.$addlSiteField);\n            }\n        });\n\n        this._showField(this.$addlSiteField);\n    },\n\n    showStatusHud: function(target) {\n        let bodyHtml;\n\n        if (this.errors === null) {\n            bodyHtml = `<p>${this._saveSuccessMessage()}</p>`;\n        } else {\n            bodyHtml = `<p class=\"error\">${this._saveFailMessage()}</p>`;\n\n            if (this.errors.length) {\n                bodyHtml += '<ul class=\"errors\">' +\n                    this.errors.map(e => `<li>${Craft.escapeHtml(e)}</li>`).join('') +\n                    '</ul>';\n            }\n        }\n\n        const hud = new Garnish.HUD(target, bodyHtml, {\n            onHide: function() {\n                hud.destroy();\n            }\n        });\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveSuccessMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes have been stored.')\n            : Craft.t('app', 'The draft has been saved.');\n    },\n\n    /**\n     * @return {string}\n     */\n    _saveFailMessage: function() {\n        return (this.settings.isProvisionalDraft || this.settings.isUnpublishedDraft)\n            ? Craft.t('app', 'Your changes could not be stored.')\n            : Craft.t('app', 'The draft could not be saved.');\n    },\n\n    spinners: function() {\n        return this.preview\n            ? this.$spinner.add(this.preview.$spinner)\n            : this.$spinner;\n    },\n\n    statusIcons: function() {\n        return this.preview\n            ? this.$statusIcon.add(this.preview.$statusIcon)\n            : this.$statusIcon;\n    },\n\n    createEditMetaBtn: function() {\n        this.$editMetaBtn = $('<button/>', {\n            type: 'button',\n            'class': 'btn edit icon',\n            title: Craft.t('app', 'Edit draft settings'),\n        }).appendTo($('#context-btngroup'));\n        this.addListener(this.$editMetaBtn, 'click', 'showMetaHud');\n    },\n\n    createShareMenu: function($shareBtn) {\n        $shareBtn.addClass('menubtn');\n\n        const $menu = $('<div/>', {'class': 'menu'}).insertAfter($shareBtn);\n        const $ul = $('<ul/>').appendTo($menu);\n\n        this.settings.previewTargets.forEach(target => {\n            const $li = $('<li/>').appendTo($ul);\n            const $a = $('<a/>', {\n                text: target.label,\n            }).appendTo($li);\n            this.addListener($a, 'click', () => {\n                this.openShareLink(target.url);\n            });\n        });\n    },\n\n    getPreviewToken: function() {\n        return new Promise((resolve, reject) => {\n            if (this.previewToken) {\n                resolve(this.previewToken);\n                return;\n            }\n\n            Craft.sendActionRequest('POST', 'preview/create-token', {\n                data: {\n                    elementType: this.settings.elementType,\n                    sourceId: this.settings.sourceId,\n                    siteId: this.settings.siteId,\n                    draftId: this.settings.draftId,\n                    revisionId: this.settings.revisionId,\n                    provisional: this.settings.isProvisionalDraft,\n                },\n            }).then(response => {\n                this.previewToken = response.data.token;\n                resolve(this.previewToken);\n            }).catch(reject);\n        });\n    },\n\n    getTokenizedPreviewUrl: function(url, randoParam) {\n        return new Promise((resolve, reject) => {\n            const params = {};\n\n            if (randoParam || !this.settings.isLive) {\n                // Randomize the URL so CDNs don't return cached pages\n                params[randoParam || 'x-craft-preview'] = Craft.randomString(10);\n            }\n\n            if (this.settings.siteToken) {\n                params[Craft.siteToken] = this.settings.siteToken;\n            }\n\n            // No need for a token if we're looking at a live element\n            if (this.settings.isLive) {\n                resolve(Craft.getUrl(url, params));\n                return;\n            }\n\n            this.getPreviewToken().then(function(token) {\n                params[Craft.tokenParam] = token;\n                resolve(Craft.getUrl(url, params));\n            }).catch(reject);\n        });\n    },\n\n    openShareLink: function(url) {\n        this.getTokenizedPreviewUrl(url).then(function(url) {\n            window.open(url);\n        });\n    },\n\n    getPreview: function() {\n        if (!this.preview) {\n            this.preview = new Craft.Preview(this);\n        }\n        return this.preview;\n    },\n\n    openPreview: function() {\n        return new Promise((resolve, reject) => {\n            this.openingPreview = true;\n            this.ensureIsDraftOrRevision(true)\n                .then(() => {\n                    this.getPreview().open();\n                    this.openingPreview = false;\n                    resolve();\n                })\n                .catch(reject);\n        })\n    },\n\n    ensureIsDraftOrRevision: function(onlyIfChanged) {\n        return new Promise((resolve, reject) => {\n            if (!this.settings.draftId && !this.settings.revisionId) {\n                if (\n                    onlyIfChanged &&\n                    this.serializeForm(true) === Craft.cp.$primaryForm.data('initialSerializedValue')\n                ) {\n                    resolve();\n                    return;\n                }\n\n                this.createDraft()\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                resolve();\n            }\n        });\n    },\n\n    serializeForm: function(removeActionParams) {\n        let data = Craft.cp.$primaryForm.serialize();\n\n        if (this.isPreviewActive()) {\n            // Replace the temp input with the preview form data\n            data = data.replace('__PREVIEW_FIELDS__=1', this.preview.$editor.serialize());\n        }\n\n        if (removeActionParams && !this.settings.isUnpublishedDraft) {\n            // Remove action and redirect params\n            data = data.replace(/&action=[^&]*/, '');\n            data = data.replace(/&redirect=[^&]*/, '');\n        }\n\n        return data;\n    },\n\n    checkForm: function(force) {\n        // If this isn't a draft and there's no active preview, then there's nothing to check\n        if (this.settings.revisionId || this.pauseLevel > 0 || !Craft.autosaveDrafts || !this.settings.saveDraftAction) {\n            return;\n        }\n\n        clearTimeout(this.timeout);\n        this.timeout = null;\n\n        // Has anything changed?\n        const data = this.serializeForm(true);\n        if (force || data !== (this.lastSerializedValue || Craft.cp.$primaryForm.data('initialSerializedValue'))) {\n            const provisional = (!this.settings.draftId || this.settings.isProvisionalDraft) && !this.settings.revisionId;\n            this.saveDraft(data, provisional);\n        }\n    },\n\n    isPreviewActive: function() {\n        return this.preview && this.preview.isActive;\n    },\n\n    createDraft: function() {\n        return new Promise((resolve, reject) => {\n            this.saveDraft(this.serializeForm(true))\n                .then(resolve)\n                .catch(reject);\n        });\n    },\n\n    /**\n     * @param {object} data\n     * @returns {Promise<unknown>}\n     */\n    saveDraft: function(data) {\n        return new Promise((resolve, reject) => {\n            // Ignore if we're already submitting the main form\n            if (this.submittingForm) {\n                reject();\n                return;\n            }\n\n            if (this.saving) {\n                this.queue.push(() => {\n                    this.checkForm()\n                });\n                return;\n            }\n\n            this.lastSerializedValue = data;\n            this.saving = true;\n            this.errors = null;\n            this.cancelToken = axios.CancelToken.source();\n            this.spinners().removeClass('hidden');\n\n            this.statusIcons()\n                .velocity('stop')\n                .css('opacity', '')\n                .removeClass('invisible checkmark-icon alert-icon fade-out')\n                .addClass('hidden');\n\n            if (this.$saveMetaBtn) {\n                this.$saveMetaBtn.addClass('active');\n            }\n\n            // Prep the data to be saved, keeping track of the first input name for each delta group\n            let modifiedFieldNames = [];\n            let preparedData = this.prepareData(data, (deltaName, params)  => {\n                if (!this.settings.isUnpublishedDraft && params.length) {\n                    modifiedFieldNames.push(decodeURIComponent(params[0].split('=')[0]));\n                }\n            });\n\n            // Are we saving a provisional draft?\n            if (this.settings.isProvisionalDraft || !this.settings.draftId) {\n                preparedData += '&provisional=1';\n            }\n\n            Craft.sendActionRequest('POST', this.settings.saveDraftAction, {\n                cancelToken: this.cancelToken.token,\n                headers: {\n                    'content-type': 'application/x-www-form-urlencoded',\n                },\n                data: preparedData,\n            }).then(response => {\n                this._afterSaveRequest();\n\n                if (response.data.errors) {\n                    this.errors = response.data.errors;\n                    this._showFailStatus();\n                    reject();\n                }\n\n                const createdProvisionalDraft = !this.settings.draftId;\n\n                if (createdProvisionalDraft) {\n                    this.settings.isProvisionalDraft = true;\n                    this.createdProvisionalDraft = true;\n                }\n\n                if (response.data.title) {\n                    $('#header h1').text(response.data.title);\n                }\n\n                if (response.data.docTitle) {\n                    document.title = response.data.docTitle;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        this.$revisionLabel.append(\n                            $('<span/>', {\n                                class: 'extralight',\n                                text: ` — ${Craft.t('app', 'Edited')}`,\n                            })\n                        );\n                    }\n                } else {\n                    this.$revisionLabel.text(response.data.draftName);\n                    this.settings.draftName = response.data.draftName;\n                }\n\n                let revisionMenu = this.$revisionBtn.data('menubtn') ? this.$revisionBtn.data('menubtn').menu : null;\n\n                // Did we just add a site?\n                if (this.newSiteIds) {\n                    // Do we need to create the revision menu?\n                    if (!revisionMenu) {\n                        this.$revisionBtn.removeClass('disabled').addClass('menubtn');\n                        new Garnish.MenuBtn(this.$revisionBtn);\n                        revisionMenu = this.$revisionBtn.data('menubtn').menu;\n                        revisionMenu.$container.removeClass('hidden');\n                    }\n                    this.newSiteIds.forEach(siteId => {\n                        const $option = revisionMenu.$options.filter(`[data-site-id=${siteId}]`);\n                        $option.find('.status').removeClass('disabled').addClass('enabled');\n                        const $li = $option.parent().removeClass('hidden');\n                        $li.closest('.site-group').removeClass('hidden');\n                    });\n                    revisionMenu.$container.find('.revision-hr').removeClass('hidden');\n                    this.newSiteIds = null;\n                }\n\n                if (this.settings.isProvisionalDraft) {\n                    if (createdProvisionalDraft) {\n                        // Replace the action\n                        const $actionInput = $('#action').attr('value', this.settings.publishDraftAction);\n\n                        // Update the editor settings\n                        this.settings.draftId = response.data.draftId;\n                        this.settings.isLive = false;\n                        this.previewToken = null;\n\n                        if (revisionMenu) {\n                            // Add edited description to the “Current” option\n                            revisionMenu.$container.find('#current-revision').append(\n                                $('<div/>', {\n                                    class: 'edited-desc',\n                                }).append(\n                                    $('<p/>', {\n                                        text: Craft.t('app', 'Showing your unsaved changes.'),\n                                    })\n                                ).append(\n                                    $('<button/>', {\n                                        id: 'discard-changes',\n                                        class: 'btn',\n                                        text: Craft.t('app', 'Discard changes'),\n                                    })\n                                )\n                            );\n                        }\n\n                        this.initForProvisionalDraft();\n                    }\n                } else if (revisionMenu) {\n                    revisionMenu.$options.filter('.sel').find('.draft-name').text(response.data.draftName);\n                    revisionMenu.$options.filter('.sel').find('.draft-meta').text(response.data.creator\n                        ? Craft.t('app', 'Saved {timestamp} by {creator}', {\n                            timestamp: response.data.timestamp,\n                            creator: response.data.creator\n                        })\n                        : Craft.t('app', 'Saved {timestamp}', {\n                            timestamp: response.data.timestamp,\n                        })\n                    );\n                }\n\n                // Did the controller send us updated preview targets?\n                if (\n                    response.data.previewTargets &&\n                    JSON.stringify(response.data.previewTargets) !== JSON.stringify(this.settings.previewTargets)\n                ) {\n                    this.updatePreviewTargets(response.data.previewTargets);\n                }\n\n                this.afterUpdate(data);\n\n                if (createdProvisionalDraft) {\n                    this.trigger('createProvisionalDraft');\n                }\n\n                if (this.$nameTextInput) {\n                    this.checkMetaValues();\n                }\n\n                for (const oldId in response.data.duplicatedElements) {\n                    if (oldId != this.settings.sourceId && response.data.duplicatedElements.hasOwnProperty(oldId)) {\n                        this.duplicatedElements[oldId] = response.data.duplicatedElements[oldId];\n                    }\n                }\n\n                // Add missing field modified indicators\n                const selectors = response.data.modifiedAttributes.map(attr => `[name=\"${attr}\"],[name^=\"${attr}[\"]`)\n                    .concat(modifiedFieldNames.map(name => `[name=\"${name}\"]`));\n\n                const $fields = $(selectors.join(',')).closest('.field:not(:has(> .status-badge))');\n                for (let i = 0; i < $fields.length; i++) {\n                    $fields.eq(i).prepend(\n                        $('<div/>', {\n                            class: 'status-badge modified',\n                            title: Craft.t('app', 'This field has been modified.'),\n                            'aria-label': Craft.t('app', 'This field has been modified.'),\n                        })\n                    );\n                }\n\n                resolve();\n            }).catch(() => {\n                this._afterSaveRequest();\n\n                if (!this.ignoreFailedRequest) {\n                    this.errors = [];\n                    this._showFailStatus();\n                    reject();\n                }\n\n                this.ignoreFailedRequest = false;\n            });\n        });\n    },\n\n    _afterSaveRequest: function() {\n        this.spinners().addClass('hidden');\n        if (this.$saveMetaBtn) {\n            this.$saveMetaBtn.removeClass('active');\n        }\n        this.saving = false;\n    },\n\n    _showFailStatus: function() {\n        this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden checkmark-icon')\n            .addClass('alert-icon')\n            .attr('title', this._saveFailMessage());\n    },\n\n    /**\n     * @param {string} data\n     * @param {function} [deltaCallback] Callback function that should be passed to `Craft.findDeltaData()`\n     * @returns {string}\n     */\n    prepareData: function(data, deltaCallback) {\n        // Swap out element IDs with their duplicated ones\n        data = this.swapDuplicatedElementIds(data);\n\n        // Add the draft info\n        if (this.settings.draftId) {\n            data += `&draftId=${this.settings.draftId}`;\n            if (this.settings.isProvisionalDraft) {\n                data += '&provisional=1';\n            }\n        }\n\n        if (this.settings.draftName !== null) {\n            data += `&draftName=${this.settings.draftName}`;\n        }\n\n        // Filter out anything that hasn't changed\n        const initialData = this.swapDuplicatedElementIds(Craft.cp.$primaryForm.data('initialSerializedValue') || '');\n        return Craft.findDeltaData(initialData, data, this.getDeltaNames(), deltaCallback);\n    },\n\n    /**\n     * @param {string} data\n     * @returns {string}\n     */\n    swapDuplicatedElementIds: function(data) {\n        const idsRE = Object.keys(this.duplicatedElements).join('|');\n        if (idsRE === '') {\n            return data;\n        }\n        const lb = encodeURIComponent('[');\n        const rb = encodeURIComponent(']');\n        // Keep replacing field IDs until data stops changing\n        while (true) {\n            if (data === (\n                data = data\n                    // &fields[...][X]\n                    .replace(new RegExp(`(&fields${lb}[^=]+${rb}${lb})(${idsRE})(${rb})`, 'g'), (m, pre, id, post) => {\n                        return pre + this.duplicatedElements[id] + post;\n                    })\n                    // &fields[...=X\n                    .replace(new RegExp(`(&fields${lb}[^=]+=)(${idsRE})\\\\b`, 'g'), (m, pre, id) => {\n                        return pre + this.duplicatedElements[id];\n                    })\n            )) {\n                break;\n            }\n        }\n        return data;\n    },\n\n    getDeltaNames: function() {\n        const deltaNames = Craft.deltaNames.slice(0);\n        for (let i = 0; i < deltaNames.length; i++) {\n            for (const oldId in this.duplicatedElements) {\n                if (this.duplicatedElements.hasOwnProperty(oldId)) {\n                    deltaNames[i] = deltaNames[i].replace('][' + oldId + ']', '][' + this.duplicatedElements[oldId] + ']');\n                }\n            }\n        }\n        return deltaNames;\n    },\n\n    updatePreviewTargets: function(previewTargets) {\n        previewTargets.forEach(newTarget => {\n            const currentTarget = this.settings.previewTargets.find(t => t.label === newTarget.label);\n            if (currentTarget) {\n                currentTarget.url = newTarget.url;\n            }\n        });\n    },\n\n    afterUpdate: function(data) {\n        Craft.cp.$primaryForm.data('initialSerializedValue', data);\n        Craft.initialDeltaValues = {};\n        const $statusIcons = this.statusIcons()\n            .velocity('stop')\n            .css('opacity', '')\n            .removeClass('hidden')\n            .addClass('checkmark-icon')\n            .attr('title', this._saveSuccessMessage());\n\n        if (!Craft.autosaveDrafts) {\n            // Fade the icon out after a couple seconds, since it won't be accurate as content continues to change\n            $statusIcons\n                .velocity('stop')\n                .velocity({\n                    opacity: 0,\n                }, {\n                    delay: 2000,\n                    complete: () => {\n                        $statusIcons.addClass('hidden');\n                    },\n                });\n        }\n\n        this.trigger('update');\n\n        this.nextInQueue();\n    },\n\n    nextInQueue: function() {\n        if (this.queue.length) {\n            this.queue.shift()();\n        }\n    },\n\n    showMetaHud: function() {\n        if (!this.metaHud) {\n            this.createMetaHud();\n            this.onMetaHudShow();\n        } else {\n            this.metaHud.show();\n        }\n\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$nameTextInput.trigger('focus');\n        }\n    },\n\n    createMetaHud: function() {\n        const $hudBody = $('<div/>');\n\n        // Add the Name field\n        const $nameField = $('<div class=\"field\"><div class=\"heading\"><label for=\"draft-name\">' + Craft.t('app', 'Draft Name') + '</label></div></div>').appendTo($hudBody);\n        const $nameInputContainer = $('<div class=\"input\"/>').appendTo($nameField);\n        this.$nameTextInput = $('<input type=\"text\" class=\"text fullwidth\" id=\"draft-name\"/>').appendTo($nameInputContainer).val(this.settings.draftName);\n\n        // HUD footer\n        const $footer = $('<div class=\"hud-footer flex flex-center\"/>').appendTo($hudBody);\n\n        $('<div class=\"flex-grow\"></div>').appendTo($footer);\n        this.$saveMetaBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'Save'),\n        }).appendTo($footer);\n\n        this.metaHud = new Garnish.HUD(this.$editMetaBtn, $hudBody, {\n            onSubmit: this.saveMeta.bind(this)\n        });\n\n        this.addListener(this.$nameTextInput, 'input', 'checkMetaValues');\n\n        this.metaHud.on('show', this.onMetaHudShow.bind(this));\n        this.metaHud.on('hide', this.onMetaHudHide.bind(this));\n        this.metaHud.on('escape', this.onMetaHudEscape.bind(this));\n    },\n\n    onMetaHudShow: function() {\n        this.$editMetaBtn.addClass('active');\n    },\n\n    onMetaHudHide: function() {\n        this.$editMetaBtn.removeClass('active');\n    },\n\n    onMetaHudEscape: function() {\n        this.$nameTextInput.val(this.settings.draftName);\n    },\n\n    checkMetaValues: function() {\n        if (\n            this.$nameTextInput.val() &&\n            this.$nameTextInput.val() !== this.settings.draftName\n        ) {\n            this.$saveMetaBtn.removeClass('disabled');\n            return true;\n        }\n\n        this.$saveMetaBtn.addClass('disabled');\n        return false;\n    },\n\n    shakeMetaHud: function() {\n        Garnish.shake(this.metaHud.$hud);\n    },\n\n    saveMeta: function() {\n        if (!this.checkMetaValues()) {\n            this.shakeMetaHud();\n            return;\n        }\n\n        this.settings.draftName = this.$nameTextInput.val();\n\n        this.metaHud.hide();\n        this.checkForm(true);\n    },\n\n    handleFormSubmit: function(ev) {\n        ev.preventDefault();\n\n        // Prevent double form submits\n        if (this.submittingForm) {\n            return;\n        }\n\n        // If this a draft and was this a normal save (either via submit button or save shortcut),\n        // then trigger an autosave\n        if (\n            this.settings.draftId &&\n            !this.settings.isProvisionalDraft &&\n            (typeof ev.autosave === 'undefined' || ev.autosave) &&\n            (ev.saveShortcut || (ev.customTrigger && ev.customTrigger.data('action') === this.settings.saveDraftAction))\n        ) {\n            this.checkForm(true);\n            return;\n        }\n\n        // Prevent the normal unload confirmation dialog\n        Craft.cp.$confirmUnloadForms = Craft.cp.$confirmUnloadForms.not(Craft.cp.$primaryForm);\n\n        // Abort the current save request if there is one\n        if (this.cancelToken) {\n            this.ignoreFailedRequest = true;\n            this.cancelToken.cancel();\n        }\n\n        // Duplicate the form with normalized data\n        const data = this.prepareData(this.serializeForm(false));\n        const $form = Craft.createForm(data);\n\n        $form.appendTo(Garnish.$bod);\n        $form.submit();\n        this.submittingForm = true;\n    },\n}, {\n    defaults: {\n        elementType: null,\n        sourceId: null,\n        siteId: null,\n        isUnpublishedDraft: false,\n        enabled: false,\n        enabledForSite: false,\n        isLive: false,\n        isProvisionalDraft: false,\n        siteStatuses: null,\n        addlSiteIds: [],\n        cpEditUrl: null,\n        draftId: null,\n        revisionId: null,\n        draftName: null,\n        canEditMultipleSites: false,\n        canUpdateSource: false,\n        saveDraftAction: null,\n        deleteDraftAction: null,\n        publishDraftAction: null,\n        hashedCpEditUrl: null,\n        hashedAddAnotherRedirectUrl: null,\n        enablePreview: false,\n        previewTargets: [],\n        siteToken: null,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.DynamicGenerator = Craft.BaseInputGenerator.extend({\n    callback: $.noop,\n\n    init: function(source, target, callback) {\n        this.callback = callback;\n        this.base(source, target);\n    },\n\n    generateTargetValue: function(sourceVal) {\n        return this.callback(sourceVal);\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Editable table class\n */\nCraft.EditableTable = Garnish.Base.extend({\n    initialized: false,\n\n    id: null,\n    baseName: null,\n    columns: null,\n    sorter: null,\n    biggestId: -1,\n\n    $table: null,\n    $tbody: null,\n    $addRowBtn: null,\n\n    rowCount: 0,\n    hasMaxRows: false,\n    hasMinRows: false,\n\n    radioCheckboxes: null,\n\n    init: function(id, baseName, columns, settings) {\n        this.id = id;\n        this.baseName = baseName;\n        this.columns = columns;\n        this.setSettings(settings, Craft.EditableTable.defaults);\n        this.radioCheckboxes = {};\n\n        this.$table = $('#' + id);\n        this.$tbody = this.$table.children('tbody');\n        this.rowCount = this.$tbody.find('tr').length;\n\n        // Is this already an editable table?\n        if (this.$table.data('editable-table')) {\n            Garnish.log('Double-instantiating an editable table on an element');\n            this.$table.data('editable-table').destroy();\n        }\n\n        this.$table.data('editable-table', this);\n\n        this.sorter = new Craft.DataTableSorter(this.$table, {\n            helperClass: 'editabletablesorthelper',\n            copyDraggeeInputValuesToHelper: true\n        });\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            // Give everything a chance to initialize\n            setTimeout(this.initializeIfVisible.bind(this), 500);\n        }\n\n        if (this.settings.minRows && this.rowCount < this.settings.minRows) {\n            for (var i = this.rowCount; i < this.settings.minRows; i++) {\n                this.addRow()\n            }\n        }\n    },\n\n    isVisible: function() {\n        return (this.$table.parent().height() > 0);\n    },\n\n    initialize: function() {\n        if (this.initialized) {\n            return false;\n        }\n\n        this.initialized = true;\n        this.removeListener(Garnish.$win, 'resize');\n\n        var $rows = this.$tbody.children();\n\n        for (var i = 0; i < $rows.length; i++) {\n            this.createRowObj($rows[i]);\n        }\n\n        this.$addRowBtn = this.$table.next('.add');\n        this.updateAddRowButton();\n        this.addListener(this.$addRowBtn, 'activate', 'addRow');\n        return true;\n    },\n    initializeIfVisible: function() {\n        this.removeListener(Garnish.$win, 'resize');\n\n        if (this.isVisible()) {\n            this.initialize();\n        } else {\n            this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n        }\n    },\n    updateAddRowButton: function() {\n        if (!this.canAddRow()) {\n            this.$addRowBtn.css('opacity', '0.2');\n            this.$addRowBtn.css('pointer-events', 'none');\n        } else {\n            this.$addRowBtn.css('opacity', '1');\n            this.$addRowBtn.css('pointer-events', 'auto');\n        }\n    },\n    canDeleteRow: function() {\n        return (this.rowCount > this.settings.minRows);\n    },\n    deleteRow: function(row) {\n        if (!this.canDeleteRow()) {\n            return;\n        }\n\n        this.sorter.removeItems(row.$tr);\n        row.$tr.remove();\n\n        this.rowCount--;\n\n        this.updateAddRowButton();\n        if (this.rowCount === 0) {\n            this.$table.addClass('hidden');\n        }\n\n        // onDeleteRow callback\n        this.settings.onDeleteRow(row.$tr);\n\n        row.destroy();\n    },\n    canAddRow: function() {\n        if (this.settings.staticRows) {\n            return false;\n        }\n\n        if (this.settings.maxRows) {\n            return (this.rowCount < this.settings.maxRows);\n        }\n\n        return true;\n    },\n    addRow: function(focus, prepend) {\n        if (!this.canAddRow()) {\n            return;\n        }\n\n        var rowId = this.settings.rowIdPrefix + (this.biggestId + 1),\n            $tr = this.createRow(rowId, this.columns, this.baseName, $.extend({}, this.settings.defaultValues));\n\n        if (prepend) {\n            $tr.prependTo(this.$tbody);\n        } else {\n            $tr.appendTo(this.$tbody);\n        }\n\n        var row = this.createRowObj($tr);\n        this.sorter.addItems($tr);\n\n        // Focus the first input in the row\n        if (focus !== false) {\n            $tr.find('input:visible,textarea:visible,select:visible').first().trigger('focus');\n        }\n\n        this.rowCount++;\n        this.updateAddRowButton();\n        this.$table.removeClass('hidden');\n\n        // onAddRow callback\n        this.settings.onAddRow($tr);\n\n        return row;\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        return Craft.EditableTable.createRow(rowId, columns, baseName, values);\n    },\n\n    createRowObj: function($tr) {\n        return new Craft.EditableTable.Row(this, $tr);\n    },\n\n    focusOnPrevRow: function($tr, tdIndex, blurTd) {\n        var $prevTr = $tr.prev('tr');\n        var prevRow;\n\n        if ($prevTr.length) {\n            prevRow = $prevTr.data('editable-table-row');\n        } else {\n            prevRow = this.addRow(false, true);\n        }\n\n        // Focus on the same cell in the previous row\n        if (!prevRow) {\n            return;\n        }\n\n        if (!prevRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(prevRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($prevTr) {\n                this.focusOnPrevRow($prevTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', prevRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    focusOnNextRow: function($tr, tdIndex, blurTd) {\n        var $nextTr = $tr.next('tr');\n        var nextRow;\n\n        if ($nextTr.length) {\n            nextRow = $nextTr.data('editable-table-row');\n        } else {\n            nextRow = this.addRow(false);\n        }\n\n        // Focus on the same cell in the next row\n        if (!nextRow) {\n            return;\n        }\n\n        if (!nextRow.$tds[tdIndex]) {\n            return;\n        }\n\n        if ($(nextRow.$tds[tdIndex]).hasClass('disabled')) {\n            if ($nextTr) {\n                this.focusOnNextRow($nextTr, tdIndex, blurTd);\n            }\n            return;\n        }\n\n        var $input = $('textarea,input.text', nextRow.$tds[tdIndex]);\n        if ($input.length) {\n            $(blurTd).trigger('blur');\n            $input.trigger('focus');\n        }\n    },\n\n    importData: function(data, row, tdIndex) {\n        let lines = data.split(/\\r?\\n|\\r/);\n        for (let i = 0; i < lines.length; i++) {\n            let values = lines[i].split(\"\\t\");\n            for (let j = 0; j < values.length; j++) {\n                let value = values[j];\n                row.$tds.eq(tdIndex + j).find('textarea,input[type!=hidden]')\n                    .val(value)\n                    .trigger('input');\n            }\n\n            // move onto the next row\n            let $nextTr = row.$tr.next('tr');\n            if ($nextTr.length) {\n                row = $nextTr.data('editable-table-row');\n            } else {\n                row = this.addRow(false);\n            }\n        }\n    },\n}, {\n    textualColTypes: ['color', 'date', 'email', 'multiline', 'number', 'singleline', 'template', 'time', 'url'],\n    defaults: {\n        rowIdPrefix: '',\n        defaultValues: {},\n        staticRows: false,\n        minRows: null,\n        maxRows: null,\n        onAddRow: $.noop,\n        onDeleteRow: $.noop\n    },\n\n    createRow: function(rowId, columns, baseName, values) {\n        var $tr = $('<tr/>', {\n            'data-id': rowId\n        });\n\n        for (var colId in columns) {\n            if (!columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            var col = columns[colId],\n                value = (typeof values[colId] !== 'undefined' ? values[colId] : ''),\n                $cell;\n\n            if (col.type === 'heading') {\n                $cell = $('<th/>', {\n                    'scope': 'row',\n                    'class': col['class'],\n                    'html': value\n                });\n            } else {\n                var name = baseName + '[' + rowId + '][' + colId + ']';\n\n                $cell = $('<td/>', {\n                    'class': `${col.class} ${col.type}-cell`,\n                    'width': col.width\n                });\n\n                if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                    $cell.addClass('textual');\n                }\n\n                if (col.code) {\n                    $cell.addClass('code');\n                }\n\n                switch (col.type) {\n                    case 'checkbox':\n                        $('<div class=\"checkbox-wrapper\"/>')\n                            .append(Craft.ui.createCheckbox({\n                                    name: name,\n                                    value: col.value || '1',\n                                    checked: !!value\n                                })\n                            )\n                            .appendTo($cell);\n                        break;\n\n                    case 'color':\n                        Craft.ui.createColorInput({\n                            name: name,\n                            value: value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'date':\n                        Craft.ui.createDateInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'lightswitch':\n                        Craft.ui.createLightswitch({\n                            name: name,\n                            value: col.value || '1',\n                            on: !!value,\n                            small: true\n                        }).appendTo($cell);\n                        break;\n\n                    case 'select':\n                        Craft.ui.createSelect({\n                            name: name,\n                            options: col.options,\n                            value: value || (function() {\n                                for (var key in col.options) {\n                                    if (col.options.hasOwnProperty(key) && col.options[key].default) {\n                                        return typeof col.options[key].value !== 'undefined' ? col.options[key].value : key;\n                                    }\n                                }\n                                return null;\n                            })(),\n                            'class': 'small'\n                        }).appendTo($cell);\n                        break;\n\n                    case 'time':\n                        Craft.ui.createTimeInput({\n                            name: name,\n                            value: value\n                        }).appendTo($cell);\n                        break;\n\n                    case 'email':\n                    case 'url':\n                        Craft.ui.createTextInput({\n                            name: name,\n                            value: value,\n                            type: col.type,\n                            placeholder: col.placeholder || null,\n                        }).appendTo($cell);\n                        break;\n\n                    default:\n                        $('<textarea/>', {\n                            'name': name,\n                            'rows': col.rows || 1,\n                            'val': value,\n                            'placeholder': col.placeholder\n                        }).appendTo($cell);\n                }\n            }\n\n            $cell.appendTo($tr);\n        }\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'move icon',\n                'title': Craft.t('app', 'Reorder')\n            })\n        ).appendTo($tr);\n\n        $('<td/>', {\n            'class': 'thin action'\n        }).append(\n            $('<a/>', {\n                'class': 'delete icon',\n                'title': Craft.t('app', 'Delete')\n            })\n        ).appendTo($tr);\n\n        return $tr;\n    }\n});\n\n/**\n * Editable table row class\n */\nCraft.EditableTable.Row = Garnish.Base.extend({\n    table: null,\n    id: null,\n    niceTexts: null,\n\n    $tr: null,\n    $tds: null,\n    tds: null,\n    $textareas: null,\n    $deleteBtn: null,\n\n    init: function(table, tr) {\n        this.table = table;\n        this.$tr = $(tr);\n        this.$tds = this.$tr.children();\n        this.tds = [];\n        this.id = this.$tr.attr('data-id');\n\n        this.$tr.data('editable-table-row', this);\n\n        // Get the row ID, sans prefix\n        var id = parseInt(this.id.substr(this.table.settings.rowIdPrefix.length));\n\n        if (id > this.table.biggestId) {\n            this.table.biggestId = id;\n        }\n\n        this.$textareas = $();\n        this.niceTexts = [];\n        var textareasByColId = {};\n\n        var i = 0;\n        var colId, col, td, $textarea, $checkbox;\n\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n            td = this.tds[colId] = this.$tds[i];\n\n            if (Craft.inArray(col.type, Craft.EditableTable.textualColTypes)) {\n                $textarea = $('textarea', td);\n                this.$textareas = this.$textareas.add($textarea);\n\n                this.addListener($textarea, 'focus', 'onTextareaFocus');\n                this.addListener($textarea, 'mousedown', 'ignoreNextTextareaFocus');\n\n                this.niceTexts.push(new Garnish.NiceText($textarea, {\n                    onHeightChange: this.onTextareaHeightChange.bind(this)\n                }));\n\n                this.addListener($textarea, 'keypress', {tdIndex: i, type: col.type}, 'handleKeypress');\n                this.addListener($textarea, 'input', {type: col.type}, 'validateValue');\n                $textarea.trigger('input');\n\n                if (col.type !== 'multiline') {\n                    this.addListener($textarea, 'paste', {tdIndex: i, type: col.type}, 'handlePaste');\n                }\n\n                textareasByColId[colId] = $textarea;\n            } else if (col.type === 'checkbox') {\n                $checkbox = $('input[type=\"checkbox\"]', td);\n\n                if (col.radioMode) {\n                    if (typeof this.table.radioCheckboxes[colId] === 'undefined') {\n                        this.table.radioCheckboxes[colId] = [];\n                    }\n                    this.table.radioCheckboxes[colId].push($checkbox[0]);\n                    this.addListener($checkbox, 'change', {colId}, 'onRadioCheckboxChange');\n                }\n\n                if (col.toggle) {\n                    this.addListener($checkbox, 'change', {colId}, function(ev) {\n                        this.applyToggleCheckbox(ev.data.colId);\n                    });\n                }\n            }\n\n            if (!$(td).hasClass('disabled')) {\n                this.addListener(td, 'click', {td}, function(ev) {\n                    if (ev.target === ev.data.td) {\n                        $(ev.data.td).find('textarea,input,select,.lightswitch').focus();\n                    }\n                });\n            }\n\n            i++;\n        }\n\n        // Now that all of the text cells have been nice-ified, let's normalize the heights\n        this.onTextareaHeightChange();\n\n        // See if we need to apply any checkbox toggles now that we've indexed all the TDs\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n            col = this.table.columns[colId];\n            if (col.type === 'checkbox' && col.toggle) {\n                this.applyToggleCheckbox(colId);\n            }\n        }\n\n        // Now look for any autopopulate columns\n        for (colId in this.table.columns) {\n            if (!this.table.columns.hasOwnProperty(colId)) {\n                continue;\n            }\n\n            col = this.table.columns[colId];\n\n            if (col.autopopulate && typeof textareasByColId[col.autopopulate] !== 'undefined' && !textareasByColId[colId].val()) {\n                new Craft.HandleGenerator(textareasByColId[colId], textareasByColId[col.autopopulate], {\n                    allowNonAlphaStart: true\n                });\n            }\n        }\n\n        var $deleteBtn = this.$tr.children().last().find('.delete');\n        this.addListener($deleteBtn, 'click', 'deleteRow');\n\n        var $inputs = this.$tr.find('input,textarea,select,.lightswitch');\n        this.addListener($inputs, 'focus', function(ev) {\n            $(ev.currentTarget).closest('td:not(.disabled)').addClass('focus');\n        });\n        this.addListener($inputs, 'blur', function(ev) {\n            $(ev.currentTarget).closest('td').removeClass('focus');\n        });\n    },\n\n    onTextareaFocus: function(ev) {\n        this.onTextareaHeightChange();\n\n        var $textarea = $(ev.currentTarget);\n\n        if ($textarea.data('ignoreNextFocus')) {\n            $textarea.data('ignoreNextFocus', false);\n            return;\n        }\n\n        setTimeout(function() {\n            Craft.selectFullValue($textarea);\n        }, 0);\n    },\n\n    onRadioCheckboxChange: function(ev) {\n        if (ev.currentTarget.checked) {\n            for (var i = 0; i < this.table.radioCheckboxes[ev.data.colId].length; i++) {\n                var checkbox = this.table.radioCheckboxes[ev.data.colId][i];\n                checkbox.checked = (checkbox === ev.currentTarget);\n            }\n        }\n    },\n\n    applyToggleCheckbox: function(checkboxColId) {\n        var checkboxCol = this.table.columns[checkboxColId];\n        var checked = $('input[type=\"checkbox\"]', this.tds[checkboxColId]).prop('checked');\n        var colId, colIndex, neg;\n        for (var i = 0; i < checkboxCol.toggle.length; i++) {\n            colId = checkboxCol.toggle[i];\n            colIndex = this.table.colum;\n            neg = colId[0] === '!';\n            if (neg) {\n                colId = colId.substr(1);\n            }\n            if ((checked && !neg) || (!checked && neg)) {\n                $(this.tds[colId])\n                    .removeClass('disabled')\n                    .find('textarea, input').prop('disabled', false);\n            } else {\n                $(this.tds[colId])\n                    .addClass('disabled')\n                    .find('textarea, input').prop('disabled', true);\n            }\n        }\n    },\n\n    ignoreNextTextareaFocus: function(ev) {\n        $.data(ev.currentTarget, 'ignoreNextFocus', true);\n    },\n\n    handleKeypress: function(ev) {\n        var keyCode = ev.keyCode ? ev.keyCode : ev.charCode;\n        var ctrl = Garnish.isCtrlKeyPressed(ev);\n\n        // Going to the next/previous row?\n        if (keyCode === Garnish.RETURN_KEY && (ev.data.type !== 'multiline' || ctrl)) {\n            ev.preventDefault();\n            if (ev.shiftKey) {\n                this.table.focusOnPrevRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            } else {\n                this.table.focusOnNextRow(this.$tr, ev.data.tdIndex, ev.currentTarget);\n            }\n            return;\n        }\n\n        // Was this an invalid number character?\n        if (ev.data.type === 'number' && !ctrl && !Craft.inArray(keyCode, Craft.EditableTable.Row.numericKeyCodes)) {\n            ev.preventDefault();\n        }\n    },\n\n    handlePaste: function(ev) {\n        let data = Craft.trim(ev.originalEvent.clipboardData.getData('Text'), ' \\n\\r');\n        if (!data.match(/[\\t\\r\\n]/)) {\n            return;\n        }\n        ev.preventDefault();\n        this.table.importData(data, this, ev.data.tdIndex);\n    },\n\n    validateValue: function(ev) {\n        if (ev.data.type === 'multiline') {\n            return;\n        }\n\n        var safeValue;\n\n        if (ev.data.type === 'number') {\n            // Only grab the number at the beginning of the value (if any)\n            var match = ev.currentTarget.value.match(/^\\s*(-?[\\d\\\\.]*)/);\n\n            if (match !== null) {\n                safeValue = match[1];\n            } else {\n                safeValue = '';\n            }\n        } else {\n            // Just strip any newlines\n            safeValue = ev.currentTarget.value.replace(/[\\r\\n]/g, '');\n        }\n\n        if (safeValue !== ev.currentTarget.value) {\n            ev.currentTarget.value = safeValue;\n        }\n    },\n\n    onTextareaHeightChange: function() {\n        // Keep all the textareas' heights in sync\n        var tallestTextareaHeight = -1;\n\n        for (var i = 0; i < this.niceTexts.length; i++) {\n            if (this.niceTexts[i].height > tallestTextareaHeight) {\n                tallestTextareaHeight = this.niceTexts[i].height;\n            }\n        }\n\n        this.$textareas.css('min-height', tallestTextareaHeight);\n\n        // If the <td> is still taller, go with that instead\n        var tdHeight = this.$textareas.filter(':visible').first().parent().height();\n\n        if (tdHeight > tallestTextareaHeight) {\n            this.$textareas.css('min-height', tdHeight);\n        }\n    },\n\n    deleteRow: function() {\n        this.table.deleteRow(this);\n    }\n}, {\n    numericKeyCodes: [9 /* (tab) */, 8 /* (delete) */, 37, 38, 39, 40 /* (arrows) */, 45, 91 /* (minus) */, 46, 190 /* period */, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 /* (0-9) */]\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Element Action Trigger\n */\nCraft.ElementActionTrigger = Garnish.Base.extend({\n    maxLevels: null,\n    newChildUrl: null,\n    $trigger: null,\n    $selectedItems: null,\n    triggerEnabled: true,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ElementActionTrigger.defaults);\n\n        this.$trigger = $('#' + settings.type.replace(/[\\[\\]\\\\]+/g, '-') + '-actiontrigger');\n\n        // Do we have a custom handler?\n        if (this.settings.activate) {\n            // Prevent the element index's click handler\n            this.$trigger.data('custom-handler', true);\n\n            // Is this a custom trigger?\n            if (this.$trigger.prop('nodeName') === 'FORM') {\n                this.addListener(this.$trigger, 'submit', 'handleTriggerActivation');\n            } else {\n                this.addListener(this.$trigger, 'click', 'handleTriggerActivation');\n            }\n        }\n\n        this.updateTrigger();\n        Craft.elementIndex.on('selectionChange', this.updateTrigger.bind(this));\n    },\n\n    updateTrigger: function() {\n        // Ignore if the last element was just unselected\n        if (Craft.elementIndex.getSelectedElements().length === 0) {\n            return;\n        }\n\n        if (this.validateSelection()) {\n            this.enableTrigger();\n        } else {\n            this.disableTrigger();\n        }\n    },\n\n    /**\n     * Determines if this action can be performed on the currently selected elements.\n     *\n     * @return boolean\n     */\n    validateSelection: function() {\n        var valid = true;\n        this.$selectedItems = Craft.elementIndex.getSelectedElements();\n\n        if (!this.settings.batch && this.$selectedItems.length > 1) {\n            valid = false;\n        } else if (typeof this.settings.validateSelection === 'function') {\n            valid = this.settings.validateSelection(this.$selectedItems);\n        }\n\n        return valid;\n    },\n\n    enableTrigger: function() {\n        if (this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.removeClass('disabled');\n        this.triggerEnabled = true;\n    },\n\n    disableTrigger: function() {\n        if (!this.triggerEnabled) {\n            return;\n        }\n\n        this.$trigger.addClass('disabled');\n        this.triggerEnabled = false;\n    },\n\n    handleTriggerActivation: function(ev) {\n        ev.preventDefault();\n        ev.stopPropagation();\n\n        if (this.triggerEnabled) {\n            this.settings.activate(this.$selectedItems);\n        }\n    }\n}, {\n    defaults: {\n        type: null,\n        batch: true,\n        validateSelection: null,\n        activate: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Base Element Index View\n */\nCraft.ElementThumbLoader = Garnish.Base.extend({\n    queue: null,\n    workers: [],\n\n    init: function() {\n        this.queue = [];\n\n        for (var i = 0; i < 3; i++) {\n            this.workers.push(new Craft.ElementThumbLoader.Worker(this));\n        }\n    },\n\n    load: function($elements) {\n        // Only immediately load the visible images\n        let $thumbs = $elements.find('.elementthumb');\n        for (let i = 0; i < $thumbs.length; i++) {\n            let $thumb = $thumbs.eq(i);\n            let $scrollParent = $thumb.scrollParent();\n            if (this.isVisible($thumb, $scrollParent)) {\n                this.addToQueue($thumb[0]);\n            } else {\n                let key = 'thumb' + Math.floor(Math.random() * 1000000);\n                Craft.ElementThumbLoader.invisibleThumbs[key] = [this, $thumb, $scrollParent];\n                $scrollParent.on(`scroll.${key}`, {\n                    $thumb: $thumb,\n                    $scrollParent: $scrollParent,\n                    key: key,\n                }, (ev) => {\n                    if (this.isVisible(ev.data.$thumb, ev.data.$scrollParent)) {\n                        delete Craft.ElementThumbLoader.invisibleThumbs[ev.data.key];\n                        $scrollParent.off(`scroll.${ev.data.key}`);\n                        this.addToQueue(ev.data.$thumb[0]);\n                    }\n                });\n            }\n        }\n    },\n\n    addToQueue: function(thumb) {\n        this.queue.push(thumb);\n\n        // See if there are any inactive workers\n        for (var i = 0; i < this.workers.length; i++) {\n            if (!this.workers[i].active) {\n                this.workers[i].loadNext();\n            }\n        }\n    },\n\n    isVisible: function($thumb, $scrollParent) {\n        let thumbOffset = $thumb.offset().top;\n        let scrollParentOffset, scrollParentHeight;\n        if ($scrollParent[0] === document) {\n            scrollParentOffset = $scrollParent.scrollTop();\n            scrollParentHeight = Garnish.$win.height();\n        } else {\n            scrollParentOffset = $scrollParent.offset().top;\n            scrollParentHeight = $scrollParent.height();\n        }\n        return thumbOffset > scrollParentOffset && thumbOffset < scrollParentOffset + scrollParentHeight + 1000;\n    },\n\n    destroy: function() {\n        for (var i = 0; i < this.workers.length; i++) {\n            this.workers[i].destroy();\n        }\n\n        this.base();\n    }\n}, {\n    invisibleThumbs: {},\n    retryAll: function() {\n        for (let key in Craft.ElementThumbLoader.invisibleThumbs) {\n            let [queue, $thumb, $scrollParent] = Craft.ElementThumbLoader.invisibleThumbs[key];\n            delete Craft.ElementThumbLoader.invisibleThumbs[key];\n            $scrollParent.off(`scroll.${key}`);\n            queue.load($thumb.parent());\n        }\n    }\n});\n\nCraft.ElementThumbLoader.Worker = Garnish.Base.extend({\n    loader: null,\n    active: false,\n\n    init: function(loader) {\n        this.loader = loader;\n    },\n\n    loadNext: function() {\n        var container = this.loader.queue.shift();\n        if (typeof container === 'undefined') {\n            this.active = false;\n            return;\n        }\n\n        this.active = true;\n        var $container = $(container);\n        if ($container.find('img').length) {\n            this.loadNext();\n            return;\n        }\n        var $img = $('<img/>', {\n            sizes: $container.attr('data-sizes'),\n            srcset: $container.attr('data-srcset'),\n            alt: ''\n        });\n        this.addListener($img, 'load,error', 'loadNext');\n        $img.appendTo($container);\n        picturefill({\n            elements: [$img[0]]\n        });\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Form\n */\nCraft.ElevatedSessionForm = Garnish.Base.extend({\n    $form: null,\n    inputs: null,\n\n    init: function(form, inputs) {\n        this.$form = $(form);\n\n        // Only check specific inputs?\n        if (typeof inputs !== 'undefined') {\n            this.inputs = [];\n            inputs = $.makeArray(inputs);\n\n            for (var i = 0; i < inputs.length; i++) {\n                var $inputs = $(inputs[i]);\n\n                for (var j = 0; j < $inputs.length; j++) {\n                    var $input = $inputs.eq(j);\n\n                    this.inputs.push({\n                        input: $input,\n                        val: Garnish.getInputPostVal($input)\n                    });\n                }\n            }\n        }\n\n        this.addListener(this.$form, 'submit', 'handleFormSubmit');\n    },\n\n    handleFormSubmit: function(ev) {\n        // Ignore if we're in the middle of getting the elevated session timeout\n        if (Craft.elevatedSessionManager.fetchingTimeout) {\n            ev.preventDefault();\n            ev.stopImmediatePropagation();\n            return;\n        }\n\n        // Are we only interested in certain inputs?\n        if (this.inputs) {\n            var inputsChanged = false;\n            var $input;\n\n            for (var i = 0; i < this.inputs.length; i++) {\n                $input = this.inputs[i].input;\n                // Is this a password input?\n                if ($input.data('passwordInput')) {\n                    $input = $input.data('passwordInput').$currentInput;\n                }\n\n                // Has this input's value changed?\n                if (Garnish.getInputPostVal($input) !== this.inputs[i].val) {\n                    inputsChanged = true;\n                    break;\n                }\n            }\n\n            if (!inputsChanged) {\n                // No need to interrupt the submit\n                return;\n            }\n        }\n\n        // Prevent the form from submitting until the user has an elevated session\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n        Craft.elevatedSessionManager.requireElevatedSession(this.submitForm.bind(this));\n    },\n\n    submitForm: function() {\n        // Don't let handleFormSubmit() interrupt this time\n        this.disable();\n        this.$form.trigger('submit');\n        this.enable();\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Elevated Session Manager\n */\nCraft.ElevatedSessionManager = Garnish.Base.extend({\n    fetchingTimeout: false,\n\n    passwordModal: null,\n    $passwordInput: null,\n    $passwordSpinner: null,\n    $submitBtn: null,\n    $errorPara: null,\n\n    callback: null,\n\n    /**\n     * Requires that the user has an elevated session.\n     *\n     * @param {function} callback The callback function that should be called once the user has an elevated session\n     */\n    requireElevatedSession: function(callback) {\n        this.callback = callback;\n\n        // Check the time remaining on the user's elevated session (if any)\n        this.fetchingTimeout = true;\n\n        Craft.postActionRequest('users/get-elevated-session-timeout', (response, textStatus) => {\n            this.fetchingTimeout = false;\n\n            if (textStatus === 'success') {\n                // Is there still enough time left or has it been disabled?\n                if (response.timeout === false || response.timeout >= Craft.ElevatedSessionManager.minSafeElevatedSessionTimeout) {\n                    this.callback();\n                } else {\n                    // Show the password modal\n                    this.showPasswordModal();\n                }\n            }\n        });\n    },\n\n    showPasswordModal: function() {\n        if (!this.passwordModal) {\n            var $passwordModal = $('<form id=\"elevatedsessionmodal\" class=\"modal secure fitted\"/>'),\n                $body = $('<div class=\"body\"><p>' + Craft.t('app', 'Enter your password to continue.') + '</p></div>').appendTo($passwordModal),\n                $inputContainer = $('<div class=\"inputcontainer\">').appendTo($body),\n                $inputsFlexContainer = $('<div class=\"flex\"/>').appendTo($inputContainer),\n                $passwordContainer = $('<div class=\"flex-grow\"/>').appendTo($inputsFlexContainer),\n                $buttonContainer = $('<td/>').appendTo($inputsFlexContainer),\n                $passwordWrapper = $('<div class=\"passwordwrapper\"/>').appendTo($passwordContainer);\n\n            this.$passwordInput = $('<input type=\"password\" class=\"text password fullwidth\" placeholder=\"' + Craft.t('app', 'Password') + '\" autocomplete=\"current-password\"/>').appendTo($passwordWrapper);\n            this.$passwordSpinner = $('<div class=\"spinner hidden\"/>').appendTo($inputContainer);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit disabled',\n                text: Craft.t('app', 'Submit'),\n            }).appendTo($buttonContainer);\n            this.$errorPara = $('<p class=\"error\"/>').appendTo($body);\n\n            this.passwordModal = new Garnish.Modal($passwordModal, {\n                closeOtherModals: false,\n                onFadeIn: () => {\n                    setTimeout(this.focusPasswordInput.bind(this), 100);\n                },\n                onFadeOut: () => {\n                    this.$passwordInput.val('');\n                },\n            });\n\n            new Craft.PasswordInput(this.$passwordInput, {\n                onToggleInput: $newPasswordInput => {\n                    this.$passwordInput = $newPasswordInput;\n                },\n            });\n\n            this.addListener(this.$passwordInput, 'input', 'validatePassword');\n            this.addListener($passwordModal, 'submit', 'submitPassword');\n        } else {\n            this.passwordModal.show();\n        }\n    },\n\n    focusPasswordInput: function() {\n        if (!Garnish.isMobileBrowser(true)) {\n            this.$passwordInput.trigger('focus');\n        }\n    },\n\n    validatePassword: function() {\n        if (this.$passwordInput.val().length >= 6) {\n            this.$submitBtn.removeClass('disabled');\n            return true;\n        } else {\n            this.$submitBtn.addClass('disabled');\n            return false;\n        }\n    },\n\n    submitPassword: function(ev) {\n        if (ev) {\n            ev.preventDefault();\n        }\n\n        if (!this.validatePassword()) {\n            return;\n        }\n\n        this.$passwordSpinner.removeClass('hidden');\n        this.clearLoginError();\n\n        var data = {\n            currentPassword: this.$passwordInput.val()\n        };\n\n        Craft.postActionRequest('users/start-elevated-session', data, (response, textStatus) => {\n            this.$passwordSpinner.addClass('hidden');\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    this.passwordModal.hide();\n                    this.callback();\n                } else {\n                    this.showPasswordError(response.message || Craft.t('app', 'Incorrect password.'));\n                    Garnish.shake(this.passwordModal.$container);\n                    this.focusPasswordInput();\n                }\n            } else {\n                this.showPasswordError();\n            }\n        });\n    },\n\n    showPasswordError: function(error) {\n        if (error === null || typeof error === 'undefined') {\n            error = Craft.t('app', 'A server error occurred.');\n        }\n\n        this.$errorPara.text(error);\n        this.passwordModal.updateSizeAndPosition();\n    },\n\n    clearLoginError: function() {\n        this.showPasswordError('');\n    }\n}, {\n    minSafeElevatedSessionTimeout: 5\n});\n\n// Instantiate it\nCraft.elevatedSessionManager = new Craft.ElevatedSessionManager();\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Entry index class\n */\nCraft.EntryIndex = Craft.BaseElementIndex.extend({\n    publishableSections: null,\n    $newEntryBtnGroup: null,\n    $newEntryBtn: null,\n\n    init: function(elementType, $container, settings) {\n        this.on('selectSource', this.updateButton.bind(this));\n        this.on('selectSite', this.updateButton.bind(this));\n        this.base(elementType, $container, settings);\n    },\n\n    afterInit: function() {\n        // Find which of the visible sections the user has permission to create new entries in\n        this.publishableSections = [];\n\n        for (var i = 0; i < Craft.publishableSections.length; i++) {\n            var section = Craft.publishableSections[i];\n\n            if (this.getSourceByKey('section:' + section.uid)) {\n                this.publishableSections.push(section);\n            }\n        }\n\n        this.base();\n    },\n\n    getDefaultSourceKey: function() {\n        // Did they request a specific section in the URL?\n        if (this.settings.context === 'index' && typeof defaultSectionHandle !== 'undefined') {\n            if (defaultSectionHandle === 'singles') {\n                return 'singles';\n            } else {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultSectionHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n        }\n\n        return this.base();\n    },\n\n    updateButton: function() {\n        if (!this.$source) {\n            return;\n        }\n\n        var handle;\n\n        // Get the handle of the selected source\n        if (this.$source.data('key') === 'singles') {\n            handle = 'singles';\n        } else {\n            handle = this.$source.data('handle');\n        }\n\n        // Update the New Entry button\n        // ---------------------------------------------------------------------\n\n        var i, href, label;\n\n        if (this.publishableSections.length) {\n            // Remove the old button, if there is one\n            if (this.$newEntryBtnGroup) {\n                this.$newEntryBtnGroup.remove();\n            }\n\n            // Determine if they are viewing a section that they have permission to create entries in\n            var selectedSection;\n\n            if (handle) {\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    if (this.publishableSections[i].handle === handle) {\n                        selectedSection = this.publishableSections[i];\n                        break;\n                    }\n                }\n            }\n\n            this.$newEntryBtnGroup = $('<div class=\"btngroup submit\"/>');\n            var $menuBtn;\n\n            // If they are, show a primary \"New entry\" button, and a dropdown of the other sections (if any).\n            // Otherwise only show a menu button\n            if (selectedSection) {\n                href = this._getSectionTriggerHref(selectedSection);\n                label = (this.settings.context === 'index' ? Craft.t('app', 'New entry') : Craft.t('app', 'New {section} entry', {section: selectedSection.name}));\n                this.$newEntryBtn = $('<a class=\"btn submit add icon\" ' + href + ' role=\"button\" tabindex=\"0\">' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newEntryBtnGroup);\n\n                if (this.settings.context !== 'index') {\n                    this.addListener(this.$newEntryBtn, 'click', function(ev) {\n                        this._openCreateEntryModal(ev.currentTarget.getAttribute('data-id'));\n                    });\n                }\n\n                if (this.publishableSections.length > 1) {\n                    $menuBtn = $('<button/>', {\n                        type: 'button',\n                        class: 'btn submit menubtn',\n                    }).appendTo(this.$newEntryBtnGroup);\n                }\n            } else {\n                this.$newEntryBtn = $menuBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn submit add icon menubtn',\n                    text: Craft.t('app', 'New entry'),\n                }).appendTo(this.$newEntryBtnGroup);\n            }\n\n            if ($menuBtn) {\n                var menuHtml = '<div class=\"menu\"><ul>';\n\n                for (i = 0; i < this.publishableSections.length; i++) {\n                    var section = this.publishableSections[i];\n\n                    if (\n                        (this.settings.context === 'index' && $.inArray(this.siteId, section.sites) !== -1) ||\n                        (this.settings.context !== 'index' && section !== selectedSection)\n                    ) {\n                        href = this._getSectionTriggerHref(section);\n                        label = (this.settings.context === 'index' ? section.name : Craft.t('app', 'New {section} entry', {section: section.name}));\n                        menuHtml += '<li><a ' + href + '>' + Craft.escapeHtml(label) + '</a></li>';\n                    }\n                }\n\n                menuHtml += '</ul></div>';\n\n                $(menuHtml).appendTo(this.$newEntryBtnGroup);\n                var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                if (this.settings.context !== 'index') {\n                    menuBtn.on('optionSelect', ev => {\n                        this._openCreateEntryModal(ev.option.getAttribute('data-id'));\n                    });\n                }\n            }\n\n            this.addButton(this.$newEntryBtnGroup);\n        }\n\n        // Update the URL if we're on the Entries index\n        // ---------------------------------------------------------------------\n\n        if (this.settings.context === 'index' && typeof history !== 'undefined') {\n            var uri = 'entries';\n\n            if (handle) {\n                uri += '/' + handle;\n            }\n\n            history.replaceState({}, '', Craft.getUrl(uri));\n        }\n    },\n\n    _getSectionTriggerHref: function(section) {\n        if (this.settings.context === 'index') {\n            var uri = 'entries/' + section.handle + '/new';\n            let params = {};\n            if (this.siteId) {\n                for (var i = 0; i < Craft.sites.length; i++) {\n                    if (Craft.sites[i].id == this.siteId) {\n                        params.site = Craft.sites[i].handle;\n                    }\n                }\n            }\n            return 'href=\"' + Craft.getUrl(uri, params) + '\"';\n        } else {\n            return 'data-id=\"' + section.id + '\"';\n        }\n    },\n\n    _openCreateEntryModal: function(sectionId) {\n        if (this.$newEntryBtn.hasClass('loading')) {\n            return;\n        }\n\n        // Find the section\n        var section;\n\n        for (var i = 0; i < this.publishableSections.length; i++) {\n            if (this.publishableSections[i].id == sectionId) {\n                section = this.publishableSections[i];\n                break;\n            }\n        }\n\n        if (!section) {\n            return;\n        }\n\n        this.$newEntryBtn.addClass('inactive');\n        var newEntryBtnText = this.$newEntryBtn.text();\n        this.$newEntryBtn.text(Craft.t('app', 'New {section} entry', {section: section.name}));\n\n        Craft.createElementEditor(this.elementType, {\n            hudTrigger: this.$newEntryBtnGroup,\n            siteId: this.siteId,\n            attributes: {\n                sectionId: sectionId,\n                typeId: section.entryTypes[0].id,\n                enabled: section.canPublish ? 1 : 0,\n            },\n            onHideHud: () => {\n                this.$newEntryBtn.removeClass('inactive').text(newEntryBtnText);\n            },\n            onSaveElement: response => {\n                // Make sure the right section is selected\n                var sectionSourceKey = 'section:' + section.uid;\n\n                if (this.sourceKey !== sectionSourceKey) {\n                    this.selectSourceByKey(sectionSourceKey);\n                }\n\n                this.selectElementAfterUpdate(response.id);\n                this.updateElements();\n            },\n        });\n    }\n});\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\elements\\\\Entry', Craft.EntryIndex);\n","/** global: Craft */\n/** global: Garnish */\nCraft.FieldLayoutDesigner = Garnish.Base.extend({\n    $container: null,\n    $tabContainer: null,\n    $newTabBtn: null,\n    $sidebar: null,\n    $libraryToggle: null,\n    $selectedLibrary: null,\n    $fieldLibrary: null,\n    $uiLibrary: null,\n    $uiLibraryElements: null,\n    $fieldSearch: null,\n    $clearFieldSearchBtn: null,\n    $fieldGroups: null,\n    $fields: null,\n\n    tabGrid: null,\n    elementDrag: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.FieldLayoutDesigner.defaults);\n\n        let $workspace = this.$container.children('.fld-workspace');\n        this.$tabContainer = $workspace.children('.fld-tabs');\n        this.$newTabBtn = $workspace.children('.fld-new-tab-btn');\n        this.$sidebar = this.$container.children('.fld-sidebar');\n\n        this.$fieldLibrary = this.$selectedLibrary = this.$sidebar.children('.fld-field-library');\n        let $fieldSearchContainer = this.$fieldLibrary.children('.search');\n        this.$fieldSearch = $fieldSearchContainer.children('input');\n        this.$clearFieldSearchBtn = $fieldSearchContainer.children('.clear');\n        this.$fieldGroups = this.$sidebar.find('.fld-field-group');\n        this.$fields = this.$fieldGroups.children('.fld-element');\n        this.$uiLibrary = this.$sidebar.children('.fld-ui-library');\n        this.$uiLibraryElements = this.$uiLibrary.children();\n\n        // Set up the layout grids\n        this.tabGrid = new Craft.Grid(this.$tabContainer, {\n            itemSelector: '.fld-tab',\n            minColWidth: 24 * 11,\n            fillMode: 'grid',\n            snapToGrid: 24\n        });\n\n        let $tabs = this.$tabContainer.children();\n        for (let i = 0; i < $tabs.length; i++) {\n            this.initTab($($tabs[i]));\n        }\n\n        // create a placeholder input so *something* gets posted even if there are no tabs/elements\n        $('<input/>', {\n            type: 'hidden',\n            name: this.settings.elementPlacementInputName.replace('[__TAB_NAME__][]', ''),\n            value: '',\n        }).insertBefore(this.$container);\n\n        this.elementDrag = new Craft.FieldLayoutDesigner.ElementDrag(this);\n\n        if (this.settings.customizableTabs) {\n            this.tabDrag = new Craft.FieldLayoutDesigner.TabDrag(this);\n\n            this.addListener(this.$newTabBtn, 'activate', 'addTab');\n        }\n\n        // Set up the sidebar\n        if (this.settings.customizableUi) {\n            let $libraryPicker = this.$sidebar.children('.btngroup');\n            new Craft.Listbox($libraryPicker, {\n                onChange: $selectedOption => {\n                    this.$selectedLibrary.addClass('hidden');\n                    this.$selectedLibrary = this[`$${$selectedOption.data('library')}Library`]\n                        .removeClass('hidden');\n                },\n            });\n        }\n\n        this.addListener(this.$fieldSearch, 'input', () => {\n            let val = this.$fieldSearch.val().toLowerCase().replace(/['\"]/g, '');\n            if (!val) {\n                this.$fieldLibrary.find('.filtered').removeClass('filtered');\n                this.$clearFieldSearchBtn.addClass('hidden');\n                return;\n            }\n\n            this.$clearFieldSearchBtn.removeClass('hidden');\n            let $matches = this.$fields.filter(`[data-keywords*=\"${val}\"]`)\n                .add(this.$fieldGroups.filter(`[data-name*=\"${val}\"]`).children('.fld-element'))\n                .removeClass('filtered');\n            this.$fields.not($matches).addClass('filtered');\n\n            // hide any groups that don't have any results\n            for (let i = 0; i < this.$fieldGroups.length; i++) {\n                let $group = this.$fieldGroups.eq(i);\n                if ($group.find('.fld-element:not(.hidden):not(.filtered)').length) {\n                    $group.removeClass('filtered');\n                } else {\n                    $group.addClass('filtered');\n                }\n            }\n        });\n\n        this.addListener(this.$fieldSearch, 'keydown', ev => {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.$fieldSearch.val('').trigger('input');\n            }\n        });\n\n        // Clear the search when the X button is clicked\n        this.addListener(this.$clearFieldSearchBtn, 'click', () => {\n            this.$fieldSearch.val('').trigger('input');\n        });\n    },\n\n    initTab: function($tab) {\n        if (this.settings.customizableTabs) {\n            let $editBtn = $tab.find('.tabs .settings');\n            $('<div class=\"menu\" data-align=\"center\"/>')\n                .insertAfter($editBtn)\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'rename',\n                                text: Craft.t('app', 'Rename')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'remove',\n                                text: Craft.t('app', 'Remove')\n                            })))\n                )\n                .append($('<hr/>'))\n                .append(\n                    $('<ul/>')\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveLeft',\n                                text: Craft.t('app', 'Move to the left')\n                            })))\n                        .append($('<li/>')\n                            .append($('<a/>', {\n                                'data-action': 'moveRight',\n                                text: Craft.t('app', 'Move to the right')\n                            })))\n                );\n\n            let menuBtn = new Garnish.MenuBtn($editBtn, {\n                onOptionSelect: this.onTabOptionSelect.bind(this)\n            });\n            menuBtn.menu.on('show', () => {\n                if ($tab.prev('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveLeft]').addClass('disabled');\n                }\n\n                if ($tab.next('.fld-tab').length) {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').removeClass('disabled');\n                } else {\n                    menuBtn.menu.$container.find('[data-action=moveRight]').addClass('disabled');\n                }\n            });\n        }\n\n        // initialize the elements\n        let $elements = $tab.children('.fld-tabcontent').children();\n\n        for (let i = 0; i < $elements.length; i++) {\n            this.initElement($($elements[i]));\n        }\n    },\n\n    initElement: function($element) {\n        new Craft.FieldLayoutDesigner.Element(this, $element);\n    },\n\n    onTabOptionSelect: function(option) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        let $option = $(option);\n        let $tab = $option.data('menu').$anchor.parent().parent().parent();\n        let action = $option.data('action');\n\n        switch (action) {\n            case 'rename':\n                this.renameTab($tab);\n                break;\n            case 'remove':\n                this.removeTab($tab);\n                break;\n            case 'moveLeft':\n                let $prev = $tab.prev('.fld-tab');\n                if ($prev.length) {\n                    $tab.insertBefore($prev);\n                }\n                break;\n            case 'moveRight':\n                let $next = $tab.next('.fld-tab');\n                if ($next.length) {\n                    $tab.insertAfter($next);\n                }\n                break;\n        }\n    },\n\n    renameTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const $labelSpan = $tab.find('.tabs .tab span');\n        const oldName = $labelSpan.text();\n        const newName = this.promptForTabName(oldName);\n\n        if (newName && newName !== oldName) {\n            $labelSpan.text(newName);\n            $tab.find('.placement-input').attr('name', this.getElementPlacementInputName(newName));\n        }\n    },\n\n    promptForTabName: function(oldName) {\n        return Craft.escapeHtml(prompt(Craft.t('app', 'Give your tab a name.'), oldName));\n    },\n\n    removeTab: function($tab) {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        // Find all the fields in this tab\n        let $fields = $tab.find('.fld-element');\n\n        for (let i = 0; i < $fields.length; i++) {\n            let attribute = $($fields[i]).attr('data-attribute');\n            this.removeFieldByHandle(attribute);\n        }\n\n        this.tabGrid.removeItems($tab);\n        this.tabDrag.removeItems($tab);\n\n        $tab.remove();\n    },\n\n    removeField: function($field) {\n        let attribute = $field.attr('data-attribute');\n\n        $field.remove();\n\n        this.removeFieldByHandle(attribute);\n        this.tabGrid.refreshCols(true);\n    },\n\n    removeFieldByHandle: function(attribute) {\n        this.$fields.filter(`[data-attribute=\"${attribute}\"]:first`)\n            .removeClass('hidden')\n            .closest('.fld-field-group').removeClass('hidden');\n    },\n\n    addTab: function() {\n        if (!this.settings.customizableTabs) {\n            return;\n        }\n\n        const name = this.promptForTabName();\n        if (!name) {\n            return;\n        }\n\n        const $tab = $(`\n<div class=\"fld-tab\">\n  <div class=\"tabs\">\n    <div class=\"tab sel draggable\">\n      <span>${name}</span>\n      <a class=\"settings icon\" title=\"${Craft.t('app', 'Rename')}\"></a>\n    </div>\n  </div>\n  <div class=\"fld-tabcontent\"></div>\n</div>\n`)\n            .appendTo(this.$tabContainer);\n\n        this.tabGrid.addItems($tab);\n        this.tabDrag.addItems($tab);\n\n        this.initTab($tab);\n    },\n\n    getElementPlacementInputName: function(tabName) {\n        return this.settings.elementPlacementInputName.replace(/__TAB_NAME__/g, Craft.encodeUriComponent(tabName));\n    }\n}, {\n    defaults: {\n        customizableTabs: true,\n        customizableUi: true,\n        elementPlacementInputName: 'elementPlacements[__TAB_NAME__][]',\n        elementConfigInputName: 'elementConfigs[__ELEMENT_KEY__]',\n    }\n});\n\nCraft.FieldLayoutDesigner.Element = Garnish.Base.extend({\n    designer: null,\n    $container: null,\n    $placementInput: null,\n    $configInput: null,\n    $settingsContainer: null,\n    $editBtn: null,\n\n    config: null,\n    isField: false,\n    attribute: null,\n    requirable: false,\n    key: null,\n    hasCustomWidth: false,\n    hasSettings: false,\n    hud: null,\n\n    init: function(designer, $container) {\n        this.designer = designer;\n        this.$container = $container;\n        this.$container.data('fld-element', this);\n\n        this.config = this.$container.data('config');\n        if (!$.isPlainObject(this.config)) {\n            this.config = {};\n        }\n        this.config.type = this.$container.data('type');\n\n        this.isField = this.$container.hasClass('fld-field');\n        this.requirable = this.isField && Garnish.hasAttr(this.$container, 'data-requirable');\n        this.key = Craft.randomString(10);\n\n        if (this.isField) {\n            this.attribute = this.$container.data('attribute');\n        }\n\n        let settingsHtml = this.$container.data('settings-html');\n        let isRequired = this.requirable && this.$container.hasClass('fld-required');\n        this.hasCustomWidth = this.designer.settings.customizableUi && Garnish.hasAttr(this.$container, 'data-has-custom-width');\n        this.hasSettings = settingsHtml || this.requirable;\n\n        if (this.hasSettings) {\n            // swap the __ELEMENT_KEY__ placeholder for the actual element key\n            settingsHtml = settingsHtml ? settingsHtml.replace(/\\b__ELEMENT_KEY__\\b/g, this.key) : '';\n\n            // create the setting container\n            this.$settingsContainer = $('<div/>', {\n                class: 'hidden',\n            });\n\n            // create the edit button\n            this.$editBtn = $('<a/>', {\n                role: 'button',\n                tabindex: 0,\n                class: 'settings icon',\n                title: Craft.t('app', 'Edit')\n            });\n\n            this.$editBtn.on('click', () => {\n                if (!this.hud) {\n                    this.createSettingsHud(settingsHtml, isRequired);\n                } else {\n                    this.hud.show();\n                    this.hud.updateSizeAndPosition(true);\n                }\n            });\n        }\n\n        this.initUi();\n\n        // cleanup\n        this.$container.attr('data-config', null);\n        this.$container.attr('data-keywords', null);\n        this.$container.attr('data-settings-html', null);\n    },\n\n    initUi: function() {\n        this.$placementInput = $('<input/>', {\n            class: 'placement-input',\n            type: 'hidden',\n            name: '',\n            value: this.key,\n        }).appendTo(this.$container);\n        this.updatePlacementInput();\n\n        this.$configInput = $('<input/>', {\n            type: 'hidden',\n            name: this.designer.settings.elementConfigInputName.replace(/\\b__ELEMENT_KEY__\\b/g, this.key),\n        }).appendTo(this.$container);\n        this.updateConfigInput();\n\n        if (this.hasCustomWidth) {\n            let widthSlider = new Craft.SlidePicker(this.config.width || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.config.width = width;\n                    this.updateConfigInput();\n                }\n            });\n            widthSlider.$container.appendTo(this.$container);\n        }\n\n        if (this.hasSettings) {\n            this.$editBtn.appendTo(this.$container);\n        }\n    },\n\n    createSettingsHud: function(settingsHtml, isRequired) {\n        let bodyHtml = `\n<div class=\"fld-element-settings\">\n  ${settingsHtml}\n  <div class=\"hud-footer\">\n    <div class=\"buttons right\">\n      <button class=\"btn submit\" type=\"submit\">${Craft.t('app', 'Apply')}</button>\n      <div class=\"spinner hidden\"></div>\n    </div>\n  </div>\n</div>\n`;\n        this.hud = new Garnish.HUD(this.$container, bodyHtml, {\n            onShow: (e) => {\n                // Hold off a sec until it's positioned...\n                Garnish.requestAnimationFrame(() => {\n                    // Focus on the first text input\n                    this.hud.$main.find('.text:first').trigger('focus');\n                });\n            },\n            onSubmit: () => {\n                this.applyHudSettings();\n            }\n        });\n\n        Craft.initUiElements(this.hud.$main);\n\n        if (this.requirable) {\n            let $lightswitchField = Craft.ui.createLightswitchField({\n                label: Craft.t('app', 'Required'),\n                id: `${this.key}-required`,\n                name: 'required',\n                on: isRequired,\n            }).prependTo(this.hud.$main);\n        }\n\n        this.trigger('createSettingsHud');\n    },\n\n    applyHudSettings: function() {\n        this.hud.$body.serializeArray().forEach(({name, value}) => {\n            this.config[name] = value;\n        });\n        this.updateConfigInput();\n\n        // update the UI\n        let $spinner = this.hud.$body.find('.spinner').removeClass('hidden');\n\n        Craft.sendActionRequest('POST', 'fields/render-layout-element-selector', {\n            data: {\n                config: this.config,\n            }\n        }).then(response => {\n            $spinner.addClass('hidden');\n            this.$editBtn.detach();\n            this.$container.html($(response.data.html).html());\n            this.initUi();\n            this.updateRequiredClass();\n            this.hud.hide();\n        }).catch(e => {\n            // oh well, not worth fussing over\n            console.error(e);\n            $spinner.addClass('hidden');\n            this.updateRequiredClass();\n            this.hud.hide();\n        });\n    },\n\n    updatePlacementInput: function() {\n        let $tab = this.$container.closest('.fld-tab').find('.tab span');\n        if (!$tab.length) {\n            return;\n        }\n        let inputName = this.designer.getElementPlacementInputName($tab.text());\n        this.$placementInput.attr('name', inputName);\n    },\n\n    updateConfigInput: function() {\n        this.$configInput.val(JSON.stringify(this.config));\n    },\n\n    updateRequiredClass: function() {\n        if (!this.requirable) {\n            return;\n        }\n\n        if (this.config.required) {\n            this.$container.addClass('fld-required');\n        } else {\n            this.$container.removeClass('fld-required');\n        }\n    }\n});\n\nCraft.FieldLayoutDesigner.BaseDrag = Garnish.Drag.extend({\n    designer: null,\n    $insertion: null,\n    showingInsertion: false,\n    $caboose: null,\n\n    /**\n     * Constructor\n     */\n    init: function(designer, settings) {\n        this.designer = designer;\n        this.base(this.findItems(), settings);\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Create the insertion\n        this.$insertion = this.createInsertion();\n\n        // Add the caboose\n        this.$caboose = this.createCaboose();\n        this.$items = $().add(this.$items.add(this.$caboose));\n\n        Garnish.$bod.addClass('dragging');\n    },\n\n    removeCaboose: function() {\n        this.$items = this.$items.not(this.$caboose);\n        this.$caboose.remove();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.$insertion.insertBefore(this.$draggee);\n        this.$draggee.detach();\n        this.$items = $().add(this.$items.not(this.$draggee).add(this.$insertion));\n        this.showingInsertion = true;\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.$insertion.replaceWith(this.$draggee);\n        this.$items = $().add(this.$items.not(this.$insertion).add(this.$draggee));\n        this.showingInsertion = false;\n    },\n\n    /**\n     * Sets the item midpoints up front so we don't have to keep checking on every mouse move\n     */\n    setMidpoints: function() {\n        for (let i = 0; i < this.$items.length; i++) {\n            let $item = $(this.$items[i]);\n            let offset = $item.offset();\n\n            // Skip library elements\n            if ($item.hasClass('unused')) {\n                continue;\n            }\n\n            $item.data('midpoint', {\n                left: offset.left + $item.outerWidth() / 2,\n                top: offset.top + $item.outerHeight() / 2\n            });\n        }\n    },\n\n    /**\n     * Returns the closest item to the cursor.\n     */\n    getClosestItem: function() {\n        this.getClosestItem._closestItem = null;\n        this.getClosestItem._closestItemMouseDiff = null;\n\n        for (this.getClosestItem._i = 0; this.getClosestItem._i < this.$items.length; this.getClosestItem._i++) {\n            this.getClosestItem._$item = $(this.$items[this.getClosestItem._i]);\n\n            this.getClosestItem._midpoint = this.getClosestItem._$item.data('midpoint');\n            if (!this.getClosestItem._midpoint) {\n                continue;\n            }\n\n            this.getClosestItem._mouseDiff = Garnish.getDist(this.getClosestItem._midpoint.left, this.getClosestItem._midpoint.top, this.mouseX, this.mouseY);\n\n            if (this.getClosestItem._closestItem === null || this.getClosestItem._mouseDiff < this.getClosestItem._closestItemMouseDiff) {\n                this.getClosestItem._closestItem = this.getClosestItem._$item[0];\n                this.getClosestItem._closestItemMouseDiff = this.getClosestItem._mouseDiff;\n            }\n        }\n\n        return this.getClosestItem._closestItem;\n    },\n\n    checkForNewClosestItem: function() {\n        // Is there a new closest item?\n        this.checkForNewClosestItem._closestItem = this.getClosestItem();\n\n        if (this.checkForNewClosestItem._closestItem === this.$insertion[0]) {\n            return;\n        }\n\n        if (this.showingInsertion &&\n            ($.inArray(this.$insertion[0], this.$items) < $.inArray(this.checkForNewClosestItem._closestItem, this.$items)) &&\n            ($.inArray(this.checkForNewClosestItem._closestItem, this.$caboose) === -1)\n        ) {\n            this.$insertion.insertAfter(this.checkForNewClosestItem._closestItem);\n        } else {\n            this.$insertion.insertBefore(this.checkForNewClosestItem._closestItem);\n        }\n\n        this.$items = $().add(this.$items.add(this.$insertion));\n        this.showingInsertion = true;\n        this.designer.tabGrid.refreshCols(true);\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        if (this.showingInsertion) {\n            this.swapInsertionWithDraggee();\n        }\n\n        this.removeCaboose();\n\n        this.designer.tabGrid.refreshCols(true);\n\n        // return the helpers to the draggees\n        let offset = this.$draggee.offset();\n        if (!offset || (offset.top === 0 && offset.left === 0)) {\n            this.$draggee\n                .css({\n                    display: this.draggeeDisplay,\n                    visibility: 'visible',\n                    opacity: 0,\n                })\n                .velocity({opacity: 1}, Garnish.FX_DURATION);\n            this.helpers[0]\n                .velocity({opacity: 0}, Garnish.FX_DURATION, () => {\n                    this._showDraggee();\n                });\n        } else {\n            this.returnHelpersToDraggees();\n        }\n\n        this.base();\n\n        Garnish.$bod.removeClass('dragging');\n    }\n});\n\nCraft.FieldLayoutDesigner.TabDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    /**\n     * Constructor\n     */\n    init: function(designer) {\n        let settings = {\n            handle: '.tab'\n        };\n\n        this.base(designer, settings);\n    },\n\n    findItems: function() {\n        return this.designer.$tabContainer.find('> div.fld-tab');\n    },\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n        this.swapDraggeeWithInsertion();\n        this.setMidpoints();\n    },\n\n    swapDraggeeWithInsertion: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$draggee);\n        this.designer.tabGrid.addItems(this.$insertion);\n    },\n\n    swapInsertionWithDraggee: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$insertion);\n        this.designer.tabGrid.addItems(this.$draggee);\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.checkForNewClosestItem();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this.base();\n\n        // \"show\" the tab, but make it invisible\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: 'hidden',\n        });\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $('<div class=\"fld-tab fld-tab-caboose\"/>').appendTo(this.designer.$tabContainer);\n        this.designer.tabGrid.addItems($caboose);\n        return $caboose;\n    },\n\n    /**\n     * Removes the caboose\n     */\n    removeCaboose: function() {\n        this.base();\n        this.designer.tabGrid.removeItems(this.$caboose);\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        let $tab = this.$draggee.find('.tab');\n\n        return $(`\n<div class=\"fld-tab fld-insertion\" style=\"height: ${this.$draggee.height()}px;\">\n  <div class=\"tabs\"><div class=\"tab sel draggable\" style=\"width: ${$tab.width()}px; height: ${$tab.height()}px;\"></div></div>\n  <div class=\"fld-tabcontent\" style=\"height: ${this.$draggee.find('.fld-tabcontent').height()}px;\"></div>\n</div>\n`);\n    },\n});\n\nCraft.FieldLayoutDesigner.ElementDrag = Craft.FieldLayoutDesigner.BaseDrag.extend({\n    draggingLibraryElement: false,\n    draggingField: false,\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        this.base();\n\n        // Are we dragging an element from the library?\n        this.draggingLibraryElement = this.$draggee.hasClass('unused');\n\n        // Is it a field?\n        this.draggingField = this.$draggee.hasClass('fld-field');\n\n        // keep UI elements visible\n        if (this.draggingLibraryElement && !this.draggingField) {\n            this.$draggee.css({\n                display: this.draggeeDisplay,\n                visibility: 'visible',\n            });\n        }\n\n        // Swap the draggee with the insertion if dragging a selected item\n        if (!this.draggingLibraryElement) {\n            this.swapDraggeeWithInsertion();\n        }\n\n        this.setMidpoints();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        if (this.isDraggeeMandatory() || this.isHoveringOverTab()) {\n            this.checkForNewClosestItem();\n        } else if (this.showingInsertion) {\n            this.$insertion.remove();\n            this.$items = $().add(this.$items.not(this.$insertion));\n            this.showingInsertion = false;\n            this.designer.tabGrid.refreshCols(true);\n            this.setMidpoints();\n        }\n\n        this.base();\n    },\n\n    isDraggeeMandatory: function() {\n        return Garnish.hasAttr(this.$draggee, 'data-mandatory');\n    },\n\n    isHoveringOverTab: function() {\n        for (let i = 0; i < this.designer.tabGrid.$items.length; i++) {\n            if (Garnish.hitTest(this.mouseX, this.mouseY, this.designer.tabGrid.$items.eq(i))) {\n                return true;\n            }\n        }\n\n        return false;\n    },\n\n    findItems: function() {\n        // Return all of the used + unused fields\n        return this.designer.$tabContainer.find('.fld-element')\n            .add(this.designer.$sidebar.find('.fld-element'));\n    },\n\n    /**\n     * Creates the caboose\n     */\n    createCaboose: function() {\n        let $caboose = $();\n        let $fieldContainers = this.designer.$tabContainer.find('> .fld-tab > .fld-tabcontent');\n\n        for (let i = 0; i < $fieldContainers.length; i++) {\n            $caboose = $caboose.add($('<div/>').appendTo($fieldContainers[i]));\n        }\n\n        return $caboose;\n    },\n\n    /**\n     * Creates the insertion\n     */\n    createInsertion: function() {\n        return $(`<div class=\"fld-element fld-insertion\" style=\"height: ${this.$draggee.outerHeight()}px;\"/>`);\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        let showingInsertion = this.showingInsertion;\n        if (showingInsertion) {\n            if (this.draggingLibraryElement) {\n                // Create a new element based on that one\n                let $element = this.$draggee.clone().removeClass('unused');\n                this.designer.initElement($element);\n\n                if (this.draggingField) {\n                    // Hide the library field\n                    this.$draggee.css({visibility: 'inherit', display: 'field'}).addClass('hidden');\n\n                    // Hide the group too?\n                    if (this.$draggee.siblings('.fld-field:not(.hidden)').length === 0) {\n                        this.$draggee.closest('.fld-field-group').addClass('hidden');\n                    }\n                }\n\n                // Set this.$draggee to the clone, as if we were dragging that all along\n                this.$draggee = $element;\n\n                // Remember it for later\n                this.addItems($element);\n            }\n        } else if (!this.draggingLibraryElement) {\n            let $libraryElement = this.draggingField\n                ? this.designer.$fields.filter(`[data-attribute=\"${this.$draggee.data('attribute')}\"]:first`)\n                : this.designer.$uiLibraryElements.filter(`[data-type=\"${this.$draggee.data('type').replace(/\\\\/g, '\\\\\\\\')}\"]:first`);\n\n            if (this.draggingField) {\n                // show the field in the library\n                $libraryElement.removeClass('hidden');\n                $libraryElement.closest('.fld-field-group').removeClass('hidden');\n            }\n\n            // forget the original element\n            this.removeItems(this.$draggee);\n\n            // Set this.$draggee to the library element, as if we were dragging that all along\n            this.$draggee = $libraryElement;\n        }\n\n        this.base();\n\n        this.$draggee.css({\n            display: this.draggeeDisplay,\n            visibility: this.draggingField || showingInsertion ? 'hidden' : 'visible',\n        });\n\n        if (showingInsertion) {\n            this.$draggee.data('fld-element').updatePlacementInput();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * FieldToggle\n */\nCraft.FieldToggle = Garnish.Base.extend({\n    $toggle: null,\n    targetPrefix: null,\n    targetSelector: null,\n    reverseTargetSelector: null,\n\n    _$target: null,\n    _$reverseTarget: null,\n    type: null,\n\n    init: function(toggle) {\n        this.$toggle = $(toggle);\n\n        // Is this already a field toggle?\n        if (this.$toggle.data('fieldtoggle')) {\n            Garnish.log('Double-instantiating a field toggle on an element');\n            this.$toggle.data('fieldtoggle').destroy();\n        }\n\n        this.$toggle.data('fieldtoggle', this);\n\n        this.type = this.getType();\n\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.targetPrefix = (this.$toggle.attr('data-target-prefix') || '');\n        } else {\n            this.targetSelector = this.normalizeTargetSelector(this.$toggle.data('target'));\n            this.reverseTargetSelector = this.normalizeTargetSelector(this.$toggle.data('reverse-target'));\n        }\n\n        this.findTargets();\n\n        switch (this.type) {\n            case 'link':\n                this.addListener(this.$toggle, 'click', 'onToggleChange');\n                break;\n            case 'fieldset':\n                this.addListener(this.$toggle.find('input'), 'change', 'onToggleChange');\n                break;\n            default:\n                this.addListener(this.$toggle, 'change', 'onToggleChange');\n                this.onToggleChange();\n        }\n    },\n\n    normalizeTargetSelector: function(selector) {\n        if (selector && !selector.match(/^[#\\.]/)) {\n            selector = '#' + selector;\n        }\n\n        return selector;\n    },\n\n    getType: function() {\n        let nodeName = this.$toggle.prop('nodeName');\n        if (\n            (nodeName === 'INPUT' && this.$toggle.attr('type') === 'checkbox') ||\n            this.$toggle.attr('role') === 'checkbox' ||\n            this.$toggle.attr('role') === 'switch'\n        ) {\n            return 'checkbox';\n        }\n\n        switch (nodeName) {\n            case 'SELECT':\n                return 'select';\n            case 'A':\n                return 'link';\n            case 'FIELDSET':\n                return 'fieldset';\n        }\n\n        console.warn('Unexpected field toggle:', this.$toggle[0]);\n    },\n\n    findTargets: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            var toggleVal = this.getToggleVal();\n            this._$target = $(this.normalizeTargetSelector(this.targetPrefix + this.getToggleVal()));\n        } else {\n            if (this.targetSelector) {\n                this._$target = $(this.targetSelector);\n            }\n\n            if (this.reverseTargetSelector) {\n                this._$reverseTarget = $(this.reverseTargetSelector);\n            }\n        }\n    },\n\n    getToggleVal: function() {\n        if (this.type === 'checkbox') {\n            if (typeof this.$toggle.prop('checked') !== 'undefined') {\n                return this.$toggle.prop('checked');\n            }\n            return this.$toggle.attr('aria-checked') === 'true';\n        }\n\n        let postVal;\n        if (this.type === 'fieldset') {\n            postVal = this.$toggle.find('input:checked:first').val();\n        } else {\n            postVal = Garnish.getInputPostVal(this.$toggle);\n        }\n\n        // Normalize the value\n        return (typeof postVal === 'undefined' || postVal === null) ? null : postVal.replace(/[^\\w]+/g, '-');\n    },\n\n    onToggleChange: function() {\n        if (this.type === 'select' || this.type === 'fieldset') {\n            this.hideTarget(this._$target);\n            this.findTargets();\n            this.showTarget(this._$target);\n        } else {\n            this.findTargets();\n\n            if (this.type === 'link') {\n                this.onToggleChange._show = this.$toggle.hasClass('collapsed') || !this.$toggle.hasClass('expanded');\n            } else {\n                this.onToggleChange._show = !!this.getToggleVal();\n            }\n\n            if (this.onToggleChange._show) {\n                this.showTarget(this._$target);\n                this.hideTarget(this._$reverseTarget);\n            } else {\n                this.hideTarget(this._$target);\n                this.showTarget(this._$reverseTarget);\n            }\n\n            delete this.onToggleChange._show;\n        }\n    },\n\n    showTarget: function($target) {\n        if ($target && $target.length) {\n            this.showTarget._currentHeight = $target.height();\n\n            $target.removeClass('hidden');\n\n            if (this.type !== 'select' && this.type !== 'fieldset') {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('collapsed');\n                    this.$toggle.addClass('expanded');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.prop('nodeName') !== 'SPAN') {\n                            $t.height('auto');\n                            this.showTarget._targetHeight = $t.height();\n                            $t.css({\n                                height: this.showTarget._currentHeight,\n                                overflow: 'hidden'\n                            });\n\n                            $t.velocity('stop');\n\n                            $t.velocity({height: this.showTarget._targetHeight}, 'fast', function() {\n                                $t.css({\n                                    height: '',\n                                    overflow: ''\n                                });\n                            });\n                        }\n                    })($target.eq(i));\n                }\n\n                delete this.showTarget._targetHeight;\n            }\n\n            delete this.showTarget._currentHeight;\n\n            // Trigger a resize event in case there are any grids in the target that need to initialize\n            Garnish.$win.trigger('resize');\n        }\n    },\n\n    hideTarget: function($target) {\n        if ($target && $target.length) {\n            if (this.type === 'select' || this.type === 'fieldset') {\n                $target.addClass('hidden');\n            } else {\n                if (this.type === 'link') {\n                    this.$toggle.removeClass('expanded');\n                    this.$toggle.addClass('collapsed');\n                }\n\n                for (let i = 0; i < $target.length; i++) {\n                    ($t => {\n                        if ($t.hasClass('hidden')) {\n                            return;\n                        }\n                        if ($t.prop('nodeName') === 'SPAN') {\n                            $t.addClass('hidden');\n                        } else {\n                            $t.css('overflow', 'hidden');\n                            $t.velocity('stop');\n                            $t.velocity({height: 0}, 'fast', function() {\n                                $t.addClass('hidden');\n                            });\n                        }\n                    })($target.eq(i));\n                }\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.Grid = Garnish.Base.extend({\n    $container: null,\n\n    $items: null,\n    items: null,\n    totalCols: null,\n    colGutterDrop: null,\n    colPctWidth: null,\n\n    possibleItemColspans: null,\n    possibleItemPositionsByColspan: null,\n\n    itemPositions: null,\n    itemColspansByPosition: null,\n\n    layouts: null,\n    layout: null,\n    itemHeights: null,\n    leftPadding: null,\n\n    _refreshingCols: false,\n    _refreshColsAfterRefresh: false,\n    _forceRefreshColsAfterRefresh: false,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n\n        // Is this already a grid?\n        if (this.$container.data('grid')) {\n            Garnish.log('Double-instantiating a grid on an element');\n            this.$container.data('grid').destroy();\n        }\n\n        this.$container.data('grid', this);\n\n        this.setSettings(settings, Craft.Grid.defaults);\n\n        // Set the refreshCols() proxy that container resizes will trigger\n        this.handleContainerHeightProxy = () => {\n            this.refreshCols(false, true);\n        };\n\n        this.$items = this.$container.children(this.settings.itemSelector);\n        this.setItems();\n        this.refreshCols(true, false);\n\n        Garnish.$doc.ready(() => {\n            this.refreshCols(false, false);\n        });\n    },\n\n    addItems: function(items) {\n        this.$items = $().add(this.$items.add(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    removeItems: function(items) {\n        this.$items = $().add(this.$items.not(items));\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    resetItemOrder: function() {\n        this.$items = $().add(this.$items);\n        this.setItems();\n        this.refreshCols(true, true);\n    },\n\n    setItems: function() {\n        this.setItems._ = {};\n\n        this.items = [];\n\n        for (this.setItems._.i = 0; this.setItems._.i < this.$items.length; this.setItems._.i++) {\n            this.items.push($(this.$items[this.setItems._.i]));\n        }\n\n        delete this.setItems._;\n    },\n\n    refreshCols: function(force) {\n        if (this._refreshingCols) {\n            this._refreshColsAfterRefresh = true;\n            if (force) {\n                this._forceRefreshColsAfterRefresh = true;\n            }\n            return;\n        }\n\n        this._refreshingCols = true;\n\n        if (!this.items.length) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.refreshCols._ = {};\n\n        // Check to see if the grid is actually visible\n        this.refreshCols._.oldHeight = this.$container[0].style.height;\n        this.$container[0].style.height = 1;\n        this.refreshCols._.scrollHeight = this.$container[0].scrollHeight;\n        this.$container[0].style.height = this.refreshCols._.oldHeight;\n\n        if (this.refreshCols._.scrollHeight === 0) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        if (this.settings.cols) {\n            this.refreshCols._.totalCols = this.settings.cols;\n        } else {\n            this.refreshCols._.totalCols = Math.floor(this.$container.width() / this.settings.minColWidth);\n\n            // If we're adding a new column, require an extra 20 pixels in case a scrollbar shows up\n            if (this.totalCols !== null && this.refreshCols._.totalCols > this.totalCols) {\n                this.refreshCols._.totalCols = Math.floor((this.$container.width() - 20) / this.settings.minColWidth)\n            }\n\n            if (this.settings.maxCols && this.refreshCols._.totalCols > this.settings.maxCols) {\n                this.refreshCols._.totalCols = this.settings.maxCols;\n            }\n        }\n\n        if (this.refreshCols._.totalCols === 0) {\n            this.refreshCols._.totalCols = 1;\n        }\n\n        // Same number of columns as before?\n        if (force !== true && this.totalCols === this.refreshCols._.totalCols) {\n            this.completeRefreshCols();\n            return;\n        }\n\n        this.totalCols = this.refreshCols._.totalCols;\n        this.colGutterDrop = this.settings.gutter * (this.totalCols - 1) / this.totalCols;\n\n        // Temporarily stop listening to container resizes\n        this.removeListener(this.$container, 'resize');\n\n        if (this.settings.fillMode === 'grid') {\n            this.refreshCols._.itemIndex = 0;\n\n            while (this.refreshCols._.itemIndex < this.items.length) {\n                // Append the next X items and figure out which one is the tallest\n                this.refreshCols._.tallestItemHeight = -1;\n                this.refreshCols._.colIndex = 0;\n\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.refreshCols._.itemHeight = this.items[this.refreshCols._.i].height('auto').height();\n\n                    if (this.refreshCols._.itemHeight > this.refreshCols._.tallestItemHeight) {\n                        this.refreshCols._.tallestItemHeight = this.refreshCols._.itemHeight;\n                    }\n\n                    this.refreshCols._.colIndex++;\n                }\n\n                if (this.settings.snapToGrid) {\n                    this.refreshCols._.remainder = this.refreshCols._.tallestItemHeight % this.settings.snapToGrid;\n\n                    if (this.refreshCols._.remainder) {\n                        this.refreshCols._.tallestItemHeight += this.settings.snapToGrid - this.refreshCols._.remainder;\n                    }\n                }\n\n                // Now set their heights to the tallest one\n                for (this.refreshCols._.i = this.refreshCols._.itemIndex; (this.refreshCols._.i < this.refreshCols._.itemIndex + this.totalCols && this.refreshCols._.i < this.items.length); this.refreshCols._.i++) {\n                    this.items[this.refreshCols._.i].height(this.refreshCols._.tallestItemHeight);\n                }\n\n                // set the this.refreshCols._.itemIndex pointer to the next one up\n                this.refreshCols._.itemIndex += this.totalCols;\n            }\n        } else {\n            this.removeListener(this.$items, 'resize');\n\n            // If there's only one column, sneak out early\n            if (this.totalCols === 1) {\n                this.$container.height('auto');\n                this.$items\n                    .show()\n                    .css({\n                        position: 'relative',\n                        width: 'auto',\n                        top: 0\n                    })\n                    .css(Craft.left, 0);\n            } else {\n                this.$items.css('position', 'absolute');\n                this.colPctWidth = (100 / this.totalCols);\n\n                // The setup\n\n                this.layouts = [];\n\n                this.itemPositions = [];\n                this.itemColspansByPosition = [];\n\n                // Figure out all of the possible colspans for each item,\n                // as well as all the possible positions for each item at each of its colspans\n\n                this.possibleItemColspans = [];\n                this.possibleItemPositionsByColspan = [];\n                this.itemHeightsByColspan = [];\n\n                for (this.refreshCols._.item = 0; this.refreshCols._.item < this.items.length; this.refreshCols._.item++) {\n                    this.possibleItemColspans[this.refreshCols._.item] = [];\n                    this.possibleItemPositionsByColspan[this.refreshCols._.item] = {};\n                    this.itemHeightsByColspan[this.refreshCols._.item] = {};\n\n                    this.refreshCols._.$item = this.items[this.refreshCols._.item].show();\n                    this.refreshCols._.positionRight = (this.refreshCols._.$item.data('position') === 'right');\n                    this.refreshCols._.positionLeft = (this.refreshCols._.$item.data('position') === 'left');\n                    this.refreshCols._.minColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('min-colspan') ? this.refreshCols._.$item.data('min-colspan') : 1));\n                    this.refreshCols._.maxColspan = (this.refreshCols._.$item.data('colspan') ? this.refreshCols._.$item.data('colspan') : (this.refreshCols._.$item.data('max-colspan') ? this.refreshCols._.$item.data('max-colspan') : this.totalCols));\n\n                    if (this.refreshCols._.minColspan > this.totalCols) {\n                        this.refreshCols._.minColspan = this.totalCols;\n                    }\n                    if (this.refreshCols._.maxColspan > this.totalCols) {\n                        this.refreshCols._.maxColspan = this.totalCols;\n                    }\n\n                    for (this.refreshCols._.colspan = this.refreshCols._.minColspan; this.refreshCols._.colspan <= this.refreshCols._.maxColspan; this.refreshCols._.colspan++) {\n                        // Get the height for this colspan\n                        this.refreshCols._.$item.css('width', this.getItemWidthCss(this.refreshCols._.colspan));\n                        this.itemHeightsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = this.refreshCols._.$item.outerHeight();\n\n                        this.possibleItemColspans[this.refreshCols._.item].push(this.refreshCols._.colspan);\n                        this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan] = [];\n\n                        if (this.refreshCols._.positionLeft) {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = 0;\n                        } else if (this.refreshCols._.positionRight) {\n                            this.refreshCols._.minPosition = this.totalCols - this.refreshCols._.colspan;\n                            this.refreshCols._.maxPosition = this.refreshCols._.minPosition;\n                        } else {\n                            this.refreshCols._.minPosition = 0;\n                            this.refreshCols._.maxPosition = this.totalCols - this.refreshCols._.colspan;\n                        }\n\n                        for (this.refreshCols._.position = this.refreshCols._.minPosition; this.refreshCols._.position <= this.refreshCols._.maxPosition; this.refreshCols._.position++) {\n                            this.possibleItemPositionsByColspan[this.refreshCols._.item][this.refreshCols._.colspan].push(this.refreshCols._.position);\n                        }\n                    }\n                }\n\n                // Find all the possible layouts\n\n                this.refreshCols._.colHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.totalCols; this.refreshCols._.i++) {\n                    this.refreshCols._.colHeights.push(0);\n                }\n\n                this.createLayouts(0, [], [], this.refreshCols._.colHeights, 0);\n\n                // Now find the layout that looks the best.\n\n                // First find the layouts with the highest number of used columns\n                this.refreshCols._.layoutTotalCols = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutTotalCols[this.refreshCols._.i] = 0;\n\n                    for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                        if (this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]) {\n                            this.refreshCols._.layoutTotalCols[this.refreshCols._.i]++;\n                        }\n                    }\n                }\n\n                this.refreshCols._.highestTotalCols = Math.max.apply(null, this.refreshCols._.layoutTotalCols);\n\n                // Filter out the ones that aren't using as many columns as they could be\n                for (this.refreshCols._.i = this.layouts.length - 1; this.refreshCols._.i >= 0; this.refreshCols._.i--) {\n                    if (this.refreshCols._.layoutTotalCols[this.refreshCols._.i] !== this.refreshCols._.highestTotalCols) {\n                        this.layouts.splice(this.refreshCols._.i, 1);\n                    }\n                }\n\n                // Find the layout(s) with the least overall height\n                this.refreshCols._.layoutHeights = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.layouts.length; this.refreshCols._.i++) {\n                    this.refreshCols._.layoutHeights.push(Math.max.apply(null, this.layouts[this.refreshCols._.i].colHeights));\n                }\n\n                this.refreshCols._.shortestHeight = Math.min.apply(null, this.refreshCols._.layoutHeights);\n                this.refreshCols._.shortestLayouts = [];\n                this.refreshCols._.emptySpaces = [];\n\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.refreshCols._.layoutHeights.length; this.refreshCols._.i++) {\n                    if (this.refreshCols._.layoutHeights[this.refreshCols._.i] === this.refreshCols._.shortestHeight) {\n                        this.refreshCols._.shortestLayouts.push(this.layouts[this.refreshCols._.i]);\n\n                        // Now get its total empty space, including any trailing empty space\n                        this.refreshCols._.emptySpace = this.layouts[this.refreshCols._.i].emptySpace;\n\n                        for (this.refreshCols._.j = 0; this.refreshCols._.j < this.totalCols; this.refreshCols._.j++) {\n                            this.refreshCols._.emptySpace += (this.refreshCols._.shortestHeight - this.layouts[this.refreshCols._.i].colHeights[this.refreshCols._.j]);\n                        }\n\n                        this.refreshCols._.emptySpaces.push(this.refreshCols._.emptySpace);\n                    }\n                }\n\n                // And the layout with the least empty space is...\n                this.layout = this.refreshCols._.shortestLayouts[$.inArray(Math.min.apply(null, this.refreshCols._.emptySpaces), this.refreshCols._.emptySpaces)];\n\n                // Set the item widths and left positions\n                for (this.refreshCols._.i = 0; this.refreshCols._.i < this.items.length; this.refreshCols._.i++) {\n                    this.refreshCols._.css = {\n                        width: this.getItemWidthCss(this.layout.colspans[this.refreshCols._.i])\n                    };\n                    this.refreshCols._.css[Craft.left] = this.getItemLeftPosCss(this.layout.positions[this.refreshCols._.i]);\n                    this.items[this.refreshCols._.i].css(this.refreshCols._.css);\n                }\n\n                // If every item is at position 0, then let them lay out au naturel\n                if (this.isSimpleLayout()) {\n                    this.$container.height('auto');\n                    this.$items.css({\n                        position: 'relative',\n                        top: 0,\n                        'margin-bottom': this.settings.gutter + 'px'\n                    });\n                } else {\n                    this.$items.css('position', 'absolute');\n\n                    // Now position the items\n                    this.positionItems();\n\n                    // Update the positions as the items' heigthts change\n                    this.addListener(this.$items, 'resize', 'onItemResize');\n                }\n            }\n        }\n\n        this.completeRefreshCols();\n\n        // Resume container resize listening\n        this.addListener(this.$container, 'resize', this.handleContainerHeightProxy);\n\n        this.onRefreshCols();\n    },\n\n    completeRefreshCols: function() {\n        // Delete the internal variable object\n        if (typeof this.refreshCols._ !== 'undefined') {\n            delete this.refreshCols._;\n        }\n\n        this._refreshingCols = false;\n\n        if (this._refreshColsAfterRefresh) {\n            var force = this._forceRefreshColsAfterRefresh;\n            this._refreshColsAfterRefresh = false;\n            this._forceRefreshColsAfterRefresh = false;\n\n            Garnish.requestAnimationFrame(() => {\n                this.refreshCols(force);\n            });\n        }\n    },\n\n    getItemWidth: function(colspan) {\n        return (this.colPctWidth * colspan);\n    },\n\n    getItemWidthCss: function(colspan) {\n        return 'calc(' + this.getItemWidth(colspan) + '% - ' + this.colGutterDrop + 'px)';\n    },\n\n    getItemWidthInPx: function(colspan) {\n        return this.getItemWidth(colspan) / 100 * this.$container.width() - this.colGutterDrop;\n    },\n\n    getItemLeftPosCss: function(position) {\n        return 'calc(' + '(' + this.getItemWidth(1) + '% + ' + (this.settings.gutter - this.colGutterDrop) + 'px) * ' + position + ')';\n    },\n\n    getItemLeftPosInPx: function(position) {\n        return (this.getItemWidth(1) / 100 * this.$container.width() + (this.settings.gutter - this.colGutterDrop)) * position;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        (new Craft.Grid.LayoutGenerator(this)).createLayouts(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace);\n    },\n\n    isSimpleLayout: function() {\n        this.isSimpleLayout._ = {};\n\n        for (this.isSimpleLayout._.i = 0; this.isSimpleLayout._.i < this.layout.positions.length; this.isSimpleLayout._.i++) {\n            if (this.layout.positions[this.isSimpleLayout._.i] !== 0) {\n                delete this.isSimpleLayout._;\n                return false;\n            }\n        }\n\n        delete this.isSimpleLayout._;\n        return true;\n    },\n\n    positionItems: function() {\n        this.positionItems._ = {};\n\n        this.positionItems._.colHeights = [];\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.totalCols; this.positionItems._.i++) {\n            this.positionItems._.colHeights.push(0);\n        }\n\n        for (this.positionItems._.i = 0; this.positionItems._.i < this.items.length; this.positionItems._.i++) {\n            this.positionItems._.endingCol = this.layout.positions[this.positionItems._.i] + this.layout.colspans[this.positionItems._.i] - 1;\n            this.positionItems._.affectedColHeights = [];\n\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.affectedColHeights.push(this.positionItems._.colHeights[this.positionItems._.col]);\n            }\n\n            this.positionItems._.top = Math.max.apply(null, this.positionItems._.affectedColHeights);\n            if (this.positionItems._.top > 0) {\n                this.positionItems._.top += this.settings.gutter;\n            }\n\n            this.items[this.positionItems._.i].css('top', this.positionItems._.top);\n\n            // Now add the new heights to those columns\n            for (this.positionItems._.col = this.layout.positions[this.positionItems._.i]; this.positionItems._.col <= this.positionItems._.endingCol; this.positionItems._.col++) {\n                this.positionItems._.colHeights[this.positionItems._.col] = this.positionItems._.top + this.itemHeightsByColspan[this.positionItems._.i][this.layout.colspans[this.positionItems._.i]];\n            }\n        }\n\n        // Set the container height\n        this.$container.height(Math.max.apply(null, this.positionItems._.colHeights));\n\n        delete this.positionItems._;\n    },\n\n    onItemResize: function(ev) {\n        this.onItemResize._ = {};\n\n        // Prevent this from bubbling up to the container, which has its own resize listener\n        ev.stopPropagation();\n\n        this.onItemResize._.item = $.inArray(ev.currentTarget, this.$items);\n\n        if (this.onItemResize._.item !== -1) {\n            // Update the height and reposition the items\n            this.onItemResize._.newHeight = this.items[this.onItemResize._.item].outerHeight();\n\n            if (this.onItemResize._.newHeight !== this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]]) {\n                this.itemHeightsByColspan[this.onItemResize._.item][this.layout.colspans[this.onItemResize._.item]] = this.onItemResize._.newHeight;\n                this.positionItems(false);\n            }\n        }\n\n        delete this.onItemResize._;\n    },\n\n    onRefreshCols: function() {\n        this.trigger('refreshCols');\n        this.settings.onRefreshCols();\n    }\n}, {\n    defaults: {\n        itemSelector: '.item',\n        cols: null,\n        maxCols: null,\n        minColWidth: 320,\n        gutter: 14,\n        fillMode: 'top',\n        colClass: 'col',\n        snapToGrid: null,\n\n        onRefreshCols: $.noop\n    }\n});\n\nCraft.Grid.LayoutGenerator = Garnish.Base.extend({\n    grid: null,\n    _: null,\n\n    init: function(grid) {\n        this.grid = grid;\n    },\n\n    createLayouts: function(item, prevPositions, prevColspans, prevColHeights, prevEmptySpace) {\n        this._ = {};\n\n        // Loop through all possible colspans\n        for (this._.c = 0; this._.c < this.grid.possibleItemColspans[item].length; this._.c++) {\n            this._.colspan = this.grid.possibleItemColspans[item][this._.c];\n\n            // Loop through all the possible positions for this colspan,\n            // and find the one that is closest to the top\n\n            this._.tallestColHeightsByPosition = [];\n\n            for (this._.p = 0; this._.p < this.grid.possibleItemPositionsByColspan[item][this._.colspan].length; this._.p++) {\n                this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n                this._.colHeightsForPosition = [];\n                this._.endingCol = this._.position + this._.colspan - 1;\n\n                for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                    this._.colHeightsForPosition.push(prevColHeights[this._.col]);\n                }\n\n                this._.tallestColHeightsByPosition[this._.p] = Math.max.apply(null, this._.colHeightsForPosition);\n            }\n\n            // And the shortest position for this colspan is...\n            this._.p = $.inArray(Math.min.apply(null, this._.tallestColHeightsByPosition), this._.tallestColHeightsByPosition);\n            this._.position = this.grid.possibleItemPositionsByColspan[item][this._.colspan][this._.p];\n\n            // Now log the colspan/position placement\n            this._.positions = prevPositions.slice(0);\n            this._.colspans = prevColspans.slice(0);\n            this._.colHeights = prevColHeights.slice(0);\n            this._.emptySpace = prevEmptySpace;\n\n            this._.positions.push(this._.position);\n            this._.colspans.push(this._.colspan);\n\n            // Add the new heights to those columns\n            this._.tallestColHeight = this._.tallestColHeightsByPosition[this._.p];\n            this._.endingCol = this._.position + this._.colspan - 1;\n\n            for (this._.col = this._.position; this._.col <= this._.endingCol; this._.col++) {\n                this._.emptySpace += this._.tallestColHeight - this._.colHeights[this._.col];\n                this._.colHeights[this._.col] = this._.tallestColHeight + this.grid.itemHeightsByColspan[item][this._.colspan];\n            }\n\n            // If this is the last item, create the layout\n            if (item === this.grid.items.length - 1) {\n                this.grid.layouts.push({\n                    positions: this._.positions,\n                    colspans: this._.colspans,\n                    colHeights: this._.colHeights,\n                    emptySpace: this._.emptySpace\n                });\n            } else {\n                // Dive deeper\n                this.grid.createLayouts(item + 1, this._.positions, this._.colspans, this._.colHeights, this._.emptySpace);\n            }\n        }\n\n        delete this._;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.HandleGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        var handle = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Remove inner-word punctuation\n        handle = handle.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        handle = handle.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        handle = Craft.asciiString(handle);\n\n        if (!this.settings.allowNonAlphaStart) {\n            // Handle must start with a letter\n            handle = handle.replace(/^[^a-z]+/, '');\n        }\n\n        // Get the \"words\"\n        var words = Craft.filterArray(handle.split(/[^a-z0-9]+/));\n        handle = '';\n\n        if (Craft.handleCasing === 'snake') {\n            return words.join('_');\n        }\n\n        // Make it camelCase\n        for (let i = 0; i < words.length; i++) {\n            if (Craft.handleCasing !== 'pascal' && i === 0) {\n                handle += words[i];\n            } else {\n                handle += words[i].charAt(0).toUpperCase() + words[i].substr(1);\n            }\n        }\n\n        return handle;\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n\n/**\n * Image upload class for user photos, site icon and logo.\n */\nCraft.ImageUpload = Garnish.Base.extend({\n    $container: null,\n    progressBar: null,\n    uploader: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.ImageUpload.defaults);\n        this.initImageUpload();\n    },\n\n    initImageUpload: function() {\n        this.$container = $(this.settings.containerSelector);\n        this.progressBar = new Craft.ProgressBar($('<div class=\"progress-shade\"></div>').appendTo(this.$container));\n\n        var options = {\n            url: Craft.getActionUrl(this.settings.uploadAction),\n            formData: this.settings.postParameters,\n            fileInput: this.$container.find(this.settings.fileInputSelector),\n            paramName: this.settings.uploadParamName\n        };\n\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            options.formData[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        options.events = {};\n        options.events.fileuploadstart = this._onUploadStart.bind(this);\n        options.events.fileuploadprogressall = this._onUploadProgress.bind(this);\n        options.events.fileuploaddone = this._onUploadComplete.bind(this);\n        options.events.fileuploadfail = this._onUploadError.bind(this);\n\n        this.uploader = new Craft.Uploader(this.$container, options);\n\n        this.initButtons();\n    },\n\n    initButtons: function() {\n        this.$container.find(this.settings.uploadButtonSelector).on('click', ev => {\n            this.$container.find(this.settings.fileInputSelector).trigger('click');\n        });\n\n        this.$container.find(this.settings.deleteButtonSelector).on('click', ev => {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this image?'))) {\n                $(ev.currentTarget).parent().append('<div class=\"blocking-modal\"></div>');\n                Craft.postActionRequest(this.settings.deleteAction, this.settings.postParameters, (response, textStatus) => {\n                    if (textStatus === 'success') {\n                        this.refreshImage(response);\n                    }\n                });\n            }\n        });\n    },\n\n    refreshImage: function(response) {\n        $(this.settings.containerSelector).replaceWith(response.html);\n        this.settings.onAfterRefreshImage(response);\n        this.initImageUpload();\n    },\n\n    /**\n     * On upload start.\n     */\n    _onUploadStart: function(event) {\n        this.progressBar.$progressBar.css({\n            top: Math.round(this.$container.outerHeight() / 2) - 6\n        });\n\n        this.$container.addClass('uploading');\n        this.progressBar.resetProgressBar();\n        this.progressBar.showProgressBar();\n    },\n\n    /**\n     * On upload progress.\n     */\n    _onUploadProgress: function(event, data) {\n        var progress = parseInt(data.loaded / data.total * 100, 10);\n        this.progressBar.setProgressPercentage(progress);\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadComplete: function(event, data) {\n        if (data.result.error) {\n            alert(data.result.error);\n        } else {\n            var html = $(data.result.html);\n            this.refreshImage(data.result);\n        }\n\n        // Last file\n        if (this.uploader.isLastUpload()) {\n            this.progressBar.hideProgressBar();\n            this.$container.removeClass('uploading');\n        }\n    },\n\n    /**\n     * On a file being uploaded.\n     */\n    _onUploadError: function(event, data) {\n        if (data.jqXHR.responseJSON.error) {\n            alert(data.jqXHR.responseJSON.error);\n            this.$container.removeClass('uploading');\n            this.progressBar.hideProgressBar();\n            this.progressBar.resetProgressBar();\n        }\n    }\n}, {\n    defaults: {\n        postParameters: {},\n        uploadAction: \"\",\n        deleteAction: \"\",\n        fileInputSelector: \"\",\n\n        onAfterRefreshImage: $.noop,\n        containerSelector: null,\n\n        uploadButtonSelector: null,\n        deleteButtonSelector: null,\n\n        uploadParamName: 'files'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Info icon class\n */\nCraft.InfoIcon = Garnish.Base.extend({\n    $icon: null,\n    content: null,\n    hud: null,\n\n    init: function(icon) {\n        this.$icon = $(icon);\n\n        if (this.$icon.data('infoicon')) {\n            Garnish.log('Double-instantiating an info icon on an element');\n            this.content = this.$icon.data('infoicon').content;\n            this.$icon.data('infoicon').destroy();\n        } else {\n            this.content = this.$icon.html();\n            this.$icon\n                .html('')\n                .attr({\n                    tabindex: 0,\n                    'role': 'button',\n                    'aria-label': Craft.t('app', 'Information'),\n                });\n        }\n\n        this.$icon.data('infoicon', this);\n\n        if (this.$icon[0].previousSibling && this.$icon[0].previousSibling.nodeType === Node.TEXT_NODE) {\n            // Make sure it's in a .nowrap container\n            const $parent = this.$icon.parent();\n            if (!$parent.hasClass('nowrap')) {\n                // Find the last word in the text\n                const m = this.$icon[0].previousSibling.nodeValue.match(/[^\\s\\-]+\\s*$/);\n                if (m) {\n                    this.$icon[0].previousSibling.nodeValue = this.$icon[0].previousSibling.nodeValue.substr(0, m.index);\n                    $('<span/>', {\n                        class: 'nowrap',\n                        html: m[0].replace(/\\s+$/, '') + ' ',\n                    })\n                        .insertAfter(this.$icon[0].previousSibling)\n                        .append(this.$icon);\n                }\n            }\n        }\n\n        this.addListener(this.$icon, 'click', ev => {\n            ev.preventDefault();\n            ev.stopPropagation();\n            this.showHud();\n        });\n\n        this.addListener(this.$icon, 'keydown', ev => {\n            if (!(this.hud && this.hud.showing) && [Garnish.SPACE_KEY, Garnish.RETURN_KEY].includes(ev.keyCode)) {\n                ev.preventDefault();\n                ev.stopPropagation();\n                this.showHud();\n            }\n        });\n    },\n\n    showHud: function(ev) {\n        if (!this.hud) {\n            this.hud = new Garnish.HUD(this.$icon, this.content, {\n                hudClass: 'hud info-hud',\n                closeOtherHUDs: false,\n                onShow: () => {\n                    Garnish.shortcutManager.registerShortcut(Garnish.SPACE_KEY, () => {\n                        this.hud.hide();\n                    });\n                },\n            });\n            Craft.initUiElements(this.hud.$body);\n        } else {\n            this.hud.show();\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Light Switch\n */\nCraft.LightSwitch = Garnish.Base.extend({\n    settings: null,\n    $outerContainer: null,\n    $innerContainer: null,\n    $input: null,\n    small: false,\n    on: false,\n    indeterminate: false,\n    dragger: null,\n\n    dragStartMargin: null,\n\n    init: function(outerContainer, settings) {\n        this.$outerContainer = $(outerContainer);\n\n        // Is this already a lightswitch?\n        if (this.$outerContainer.data('lightswitch')) {\n            Garnish.log('Double-instantiating a lightswitch on an element');\n            this.$outerContainer.data('lightswitch').destroy();\n        }\n\n        this.$outerContainer.data('lightswitch', this);\n\n        this.small = this.$outerContainer.hasClass('small');\n\n        this.setSettings(settings, Craft.LightSwitch.defaults);\n\n        this.$innerContainer = this.$outerContainer.find('.lightswitch-container:first');\n        this.$input = this.$outerContainer.find('input:first');\n\n        // If the input is disabled, go no further\n        if (this.$input.prop('disabled')) {\n            return;\n        }\n\n        this.on = this.$outerContainer.hasClass('on');\n        this.indeterminate = this.$outerContainer.hasClass('indeterminate');\n\n        this.addListener(this.$outerContainer, 'mousedown', '_onMouseDown');\n        this.addListener(this.$outerContainer, 'keydown', '_onKeyDown');\n\n        this.dragger = new Garnish.BaseDrag(this.$outerContainer, {\n            axis: Garnish.X_AXIS,\n            ignoreHandleSelector: null,\n            onDragStart: this._onDragStart.bind(this),\n            onDrag: this._onDrag.bind(this),\n            onDragStop: this._onDragStop.bind(this)\n        });\n\n        // Does the input have on/off labels?\n        let $wrapper = this.$outerContainer.parent('.lightswitch-inner-container');\n        if ($wrapper.length) {\n            this.addListener($wrapper.children('span[data-toggle=\"off\"]'), 'click', this.turnOff);\n            this.addListener($wrapper.children('span[data-toggle=\"on\"]'), 'click', this.turnOn);\n        }\n    },\n\n    turnOn: function(muteEvent) {\n        var changed = !this.on;\n\n        this.on = true;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.value);\n        this.$outerContainer.addClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'true');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnOff: function(muteEvent) {\n        var changed = this.on || this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = false;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin();\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val('');\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.removeClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'false');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    turnIndeterminate: function(muteEvent) {\n        var changed = !this.indeterminate;\n\n        this.on = false;\n        this.indeterminate = true;\n\n        this.$outerContainer.addClass('dragging');\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = this._getOffMargin() / 2;\n        this.$innerContainer.velocity('stop').velocity(animateCss, Craft.LightSwitch.animationDuration, this._onSettle.bind(this));\n\n        this.$input.val(this.settings.indeterminateValue);\n        this.$outerContainer.removeClass('on');\n        this.$outerContainer.addClass('indeterminate');\n        this.$outerContainer.attr('aria-checked', 'mixed');\n\n        if (changed && muteEvent !== true) {\n            this.onChange();\n        }\n    },\n\n    toggle: function() {\n        if (this.indeterminate || !this.on) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    onChange: function() {\n        this.trigger('change');\n        this.settings.onChange(this.on);\n        this.$outerContainer.trigger('change');\n    },\n\n    _onMouseDown: function() {\n        this.addListener(Garnish.$doc, 'mouseup', '_onMouseUp');\n    },\n\n    _onMouseUp: function() {\n        this.removeListener(Garnish.$doc, 'mouseup');\n\n        // Was this a click?\n        if (!this.dragger.dragging) {\n            this.toggle();\n        }\n    },\n\n    _onKeyDown: function(event) {\n        switch (event.keyCode) {\n            case Garnish.SPACE_KEY: {\n                this.toggle();\n                event.preventDefault();\n                break;\n            }\n            case Garnish.RIGHT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOn();\n                } else {\n                    this.turnOff();\n                }\n\n                event.preventDefault();\n                break;\n            }\n            case Garnish.LEFT_KEY: {\n                if (Craft.orientation === 'ltr') {\n                    this.turnOff();\n                } else {\n                    this.turnOn();\n                }\n\n                event.preventDefault();\n                break;\n            }\n        }\n    },\n\n    _getMargin: function() {\n        return parseInt(this.$innerContainer.css('margin-' + Craft.left));\n    },\n\n    _onDragStart: function() {\n        this.$outerContainer.addClass('dragging');\n        this.dragStartMargin = this._getMargin();\n    },\n\n    _onDrag: function() {\n        var margin;\n\n        if (Craft.orientation === 'ltr') {\n            margin = this.dragStartMargin + this.dragger.mouseDistX;\n        } else {\n            margin = this.dragStartMargin - this.dragger.mouseDistX;\n        }\n\n        if (margin < this._getOffMargin()) {\n            margin = this._getOffMargin();\n        } else if (margin > 0) {\n            margin = 0;\n        }\n\n        this.$innerContainer.css('margin-' + Craft.left, margin);\n    },\n\n    _onDragStop: function() {\n        var margin = this._getMargin();\n        console.log(margin);\n\n        if (margin > (this._getOffMargin() / 2)) {\n            this.turnOn();\n        } else {\n            this.turnOff();\n        }\n    },\n\n    _onSettle: function() {\n        this.$outerContainer.removeClass('dragging');\n    },\n\n    destroy: function() {\n        this.base();\n        this.dragger.destroy();\n    },\n\n    _getOffMargin: function() {\n        return (this.small ? -10 : -12);\n    }\n}, {\n    animationDuration: 100,\n    defaults: {\n        value: '1',\n        indeterminateValue: '-',\n        onChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Listbox\n */\nCraft.Listbox = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    selectedOptionIndex: null,\n\n    init: function(container, settings) {\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Listbox.defaults);\n\n        // Is this already a listbox?\n        if (this.$container.data('listbox')) {\n            Garnish.log('Double-instantiating a listbox on an element');\n            this.$container.data('listbox').destroy();\n        }\n\n        this.$container.data('listbox', this);\n        this.$options = this.$container.find('[role=option]');\n\n        // is there already a selected option?\n        this.$selectedOption = this.$options.filter('[aria-selected=true]');\n        if (this.$selectedOption.length) {\n            this.selectedOptionIndex = this.$options.index(this.$selectedOption);\n        } else {\n            this.$selectedOption = null;\n        }\n\n        this.addListener(this.$container, 'keydown', ev => {\n            switch (ev.keyCode) {\n                case Garnish.UP_KEY:\n                    this.selectPrev();\n                    ev.preventDefault();\n                    break;\n                case Garnish.DOWN_KEY:\n                    this.selectNext();\n                    ev.preventDefault();\n                    break;\n                case Garnish.LEFT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectPrev();\n                    } else {\n                        this.selectNext();\n                    }\n                    ev.preventDefault();\n                    break;\n                case Garnish.RIGHT_KEY:\n                    if (Craft.orientation === 'ltr') {\n                        this.selectNext();\n                    } else {\n                        this.selectPrev();\n                    }\n                    ev.preventDefault();\n                    break;\n            }\n        });\n\n        this.addListener(this.$options, 'click', ev => {\n            this.select(this.$options.index($(ev.currentTarget)));\n            ev.preventDefault();\n        });\n    },\n\n    select: function(index) {\n        if (index < 0 || index >= this.$options.length || index === this.selectedOptionIndex) {\n            return;\n        }\n\n        this.$selectedOption\n            .removeClass(this.settings.selectedClass)\n            .attr('aria-selected', 'false');\n\n        this.$selectedOption = this.$options.eq(index)\n            .addClass(this.settings.selectedClass)\n            .attr('aria-selected', 'true');\n\n        this.selectedOptionIndex = index;\n\n        this.settings.onChange(this.$selectedOption, index);\n        this.trigger('change', {\n            $selectedOption: this.$selectedOption,\n            selectedOptionIndex: index,\n        });\n    },\n\n    selectPrev: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex - 1);\n        }\n    },\n\n    selectNext: function() {\n        if (this.selectedOptionIndex === null) {\n            this.select(0);\n        } else {\n            this.select(this.selectedOptionIndex + 1);\n        }\n    },\n}, {\n    defaults: {\n        selectedClass: 'active',\n        focusClass: 'focus',\n        onChange: $.noop,\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Live Preview\n */\nCraft.LivePreview = Garnish.Base.extend({\n    $extraFields: null,\n    $trigger: null,\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $iframe: null,\n    $fieldPlaceholder: null,\n\n    previewUrl: null,\n    token: null,\n    basePostData: null,\n    inPreviewMode: false,\n    fields: null,\n    lastPostData: null,\n    updateIframeInterval: null,\n    loading: false,\n    checkAgain: false,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _slideInOnIframeLoad: false,\n    _forceUpdateIframeProxy: null,\n\n    _scrollX: null,\n    _scrollY: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(settings) {\n        this.setSettings(settings, Craft.LivePreview.defaults);\n\n        // Should preview requests use a specific URL?\n        // This won't affect how the request gets routed (the action param will override it),\n        // but it will allow the templates to change behavior based on the request URI.\n        if (this.settings.previewUrl) {\n            this.previewUrl = this.settings.previewUrl;\n        } else {\n            this.previewUrl = Craft.baseSiteUrl.replace(/\\/+$/, '') + '/';\n        }\n\n        // Load the preview over SSL if the current request is\n        if (document.location.protocol === 'https:') {\n            this.previewUrl = this.previewUrl.replace(/^http:/, 'https:');\n        }\n\n        // Set the base post data\n        this.basePostData = $.extend({}, this.settings.previewParams);\n\n        this._forceUpdateIframeProxy = this.forceUpdateIframe.bind(this);\n\n        // Find the DOM elements\n        this.$extraFields = $(this.settings.extraFields);\n        this.$trigger = $(this.settings.trigger);\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.LivePreview.defaultEditorWidth);\n\n        // Event Listeners\n        this.addListener(this.$trigger, 'activate', 'toggle');\n\n        Craft.cp.on('beforeSaveShortcut', () => {\n            if (this.inPreviewMode) {\n                this.moveFieldsBack();\n            }\n        });\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.LivePreview.minEditorWidthInPx) {\n            inPx = Craft.LivePreview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    toggle: function() {\n        if (this.inPreviewMode) {\n            this.exit();\n        } else {\n            this.enter();\n        }\n    },\n\n    enter: function() {\n        if (this.inPreviewMode) {\n            return;\n        }\n\n        if (!this.token) {\n            this.createToken();\n            return;\n        }\n\n        this.trigger('beforeEnter');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            let $saveBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn submit',\n                text: Craft.t('app', 'Save'),\n            }).appendTo($editorHeader);\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this)\n            });\n\n            this.addListener($closeBtn, 'click', 'exit');\n            this.addListener($saveBtn, 'click', 'save');\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Move all the fields into the editor rather than copying them\n        // so any JS that's referencing the elements won't break.\n        this.fields = [];\n        var $fields = $(this.settings.fields);\n\n        for (var i = 0; i < $fields.length; i++) {\n            var $field = $($fields[i]),\n                $clone = this._getClone($field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter($field);\n            $field.detach();\n            this.$fieldPlaceholder.replaceWith($clone);\n            $field.appendTo(this.$editor);\n\n            this.fields.push({\n                $field: $field,\n                $clone: $clone\n            });\n        }\n\n        if (this.updateIframe()) {\n            this._slideInOnIframeLoad = true;\n        } else {\n            this.slideIn();\n        }\n\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = true;\n        this.trigger('enter');\n    },\n\n    createToken: function() {\n        Craft.postActionRequest('live-preview/create-token', {\n            previewAction: this.settings.previewAction\n        }, (response, textStatus) => {\n            if (textStatus === 'success') {\n                this.token = response.token;\n                this.enter();\n            }\n        });\n    },\n\n    save: function() {\n        Craft.cp.submitPrimaryForm();\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.updateIframeInterval = setInterval(this.updateIframe.bind(this), 1000);\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.exit();\n                }\n            });\n        });\n    },\n\n    exit: function() {\n        if (!this.inPreviewMode) {\n            return;\n        }\n\n        this.trigger('beforeExit');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        if (this.updateIframeInterval) {\n            clearInterval(this.updateIframeInterval);\n        }\n\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n        });\n\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._forceUpdateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.inPreviewMode = false;\n        this.trigger('exit');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n    },\n\n    updateIframe: function(force) {\n        if (force) {\n            this.lastPostData = null;\n        }\n\n        if (!this.inPreviewMode) {\n            return false;\n        }\n\n        if (this.loading) {\n            this.checkAgain = true;\n            return false;\n        }\n\n        // Has the post data changed?\n        var postData = $.extend(Garnish.getPostData(this.$editor), Garnish.getPostData(this.$extraFields));\n\n        if (!this.lastPostData || !Craft.compare(postData, this.lastPostData, false)) {\n            this.lastPostData = postData;\n            this.loading = true;\n\n            var $doc = this.$iframe ? $(this.$iframe[0].contentWindow.document) : null;\n\n            this._scrollX = $doc ? $doc.scrollLeft() : 0;\n            this._scrollY = $doc ? $doc.scrollTop() : 0;\n\n            $.ajax({\n                url: this.previewUrl + (this.previewUrl.indexOf('?') !== -1 ? '&' : '?') + Craft.tokenParam + '=' + this.token,\n                method: 'POST',\n                data: $.extend({}, postData, this.basePostData),\n                headers: {\n                    'X-Craft-Token': this.token\n                },\n                xhrFields: {\n                    withCredentials: true\n                },\n                crossDomain: true,\n                success: this.handleSuccess.bind(this),\n                error: this.handleError.bind(this),\n            });\n\n            return true;\n        } else {\n            return false;\n        }\n    },\n\n    forceUpdateIframe: function() {\n        return this.updateIframe(true);\n    },\n\n    handleSuccess: function(data) {\n        var html = data +\n            '<script type=\"text/javascript\">window.scrollTo(' + this._scrollX + ', ' + this._scrollY + ');</script>';\n\n        // Create a new iframe\n        var $iframe = $('<iframe class=\"lp-preview\" frameborder=\"0\"/>');\n        if (this.$iframe) {\n            $iframe.insertBefore(this.$iframe);\n        } else {\n            $iframe.appendTo(this.$iframeContainer);\n        }\n\n        this.addListener($iframe, 'load', function() {\n            if (this.$iframe) {\n                this.$iframe.remove();\n            }\n            this.$iframe = $iframe;\n\n            if (this._slideInOnIframeLoad) {\n                this.slideIn();\n                this._slideInOnIframeLoad = false;\n            }\n\n            this.removeListener($iframe, 'load');\n        });\n\n        Garnish.requestAnimationFrame(() => {\n            $iframe[0].contentWindow.document.open();\n            $iframe[0].contentWindow.document.write(html);\n            $iframe[0].contentWindow.document.close();\n            this.onResponse();\n        });\n    },\n\n    handleError: function() {\n        this.onResponse();\n    },\n\n    onResponse: function() {\n        this.loading = false;\n\n        if (this.checkAgain) {\n            this.checkAgain = false;\n            this.updateIframe();\n        }\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n\n    defaults: {\n        trigger: '.livepreviewbtn',\n        fields: null,\n        extraFields: null,\n        previewUrl: null,\n        previewAction: null,\n        previewParams: {}\n    }\n});\n\nCraft.LivePreview.init = function(settings) {\n    Craft.livePreview = new Craft.LivePreview(settings);\n};\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Password Input\n */\nCraft.PasswordInput = Garnish.Base.extend({\n    $passwordWrapper: null,\n    $passwordInput: null,\n    $textInput: null,\n    $currentInput: null,\n\n    $showPasswordToggle: null,\n    showingPassword: null,\n\n    init: function(passwordInput, settings) {\n        this.$passwordInput = $(passwordInput);\n        this.$passwordWrapper = this.$passwordInput.parent('.passwordwrapper');\n        this.settings = $.extend({}, Craft.PasswordInput.defaults, settings);\n\n        // Is this already a password input?\n        if (this.$passwordInput.data('passwordInput')) {\n            Garnish.log('Double-instantiating a password input on an element');\n            this.$passwordInput.data('passwordInput').destroy();\n        }\n\n        this.$passwordInput.data('passwordInput', this);\n\n        this.$showPasswordToggle = $('<button type=\"button\" class=\"invisible\" />');\n        this.$showPasswordToggle.addClass('password-toggle');\n        this.$showPasswordToggle.insertAfter(this.$passwordInput);\n\n        this.initInputFocusEvents(this.$passwordInput);\n        this.addListener(this.$showPasswordToggle, 'click', 'onClick');\n        this.hidePassword();\n    },\n\n    setCurrentInput: function($input) {\n        if (this.$currentInput) {\n            // Swap the inputs, while preventing the focus animation\n            $input.insertAfter(this.$currentInput);\n            this.$currentInput.detach();\n            $input.trigger('focus');\n\n            // Restore the input value\n            $input.val(this.$currentInput.val());\n        }\n\n        this.$currentInput = $input;\n\n        this.addListener(this.$currentInput, 'keypress,keyup,change,blur', 'onInputChange');\n    },\n\n    updateToggleLabel: function(label) {\n        this.$showPasswordToggle.text(label);\n    },\n\n    initInputFocusEvents: function($input) {\n        this.addListener($input, 'focus', function() {\n            this.$passwordWrapper.addClass('focus');\n        });\n        this.addListener($input, 'blur', function() {\n            this.$passwordWrapper.removeClass('focus');\n        });\n    },\n\n    showPassword: function() {\n        if (this.showingPassword) {\n            return;\n        }\n\n        if (!this.$textInput) {\n            this.$textInput = this.$passwordInput.clone(true);\n            this.$textInput.attr('type', 'text');\n            this.initInputFocusEvents(this.$textInput);\n        }\n\n        this.setCurrentInput(this.$textInput);\n        this.updateToggleLabel(Craft.t('app', 'Hide'));\n        this.showingPassword = true;\n    },\n\n    hidePassword: function() {\n        // showingPassword could be null, which is acceptable\n        if (this.showingPassword === false) {\n            return;\n        }\n\n        this.setCurrentInput(this.$passwordInput);\n        this.updateToggleLabel(Craft.t('app', 'Show'));\n        this.showingPassword = false;\n\n        // Alt key temporarily shows the password\n        this.addListener(this.$passwordInput, 'keydown', 'onKeyDown');\n    },\n\n    togglePassword: function() {\n        if (this.showingPassword) {\n            this.hidePassword();\n        } else {\n            this.showPassword();\n        }\n\n        this.settings.onToggleInput(this.$currentInput);\n    },\n\n    onKeyDown: function(ev) {\n        if (ev.keyCode === Garnish.ALT_KEY && this.$currentInput.val()) {\n            this.showPassword();\n            this.$showPasswordToggle.addClass('invisible');\n            this.addListener(this.$textInput, 'keyup', 'onKeyUp');\n        }\n    },\n\n    onKeyUp: function(ev) {\n        ev.preventDefault();\n\n        if (ev.keyCode === Garnish.ALT_KEY) {\n            this.hidePassword();\n            this.$showPasswordToggle.removeClass('invisible');\n        }\n    },\n\n    onInputChange: function() {\n        if (this.$currentInput.val()) {\n            this.$showPasswordToggle.removeClass('invisible');\n        } else {\n            this.$showPasswordToggle.addClass('invisible');\n        }\n    },\n\n    onClick: function(ev) {\n        if (this.$currentInput[0].setSelectionRange) {\n            var selectionStart = this.$currentInput[0].selectionStart,\n                selectionEnd = this.$currentInput[0].selectionEnd;\n\n            this.togglePassword();\n            this.$currentInput[0].setSelectionRange(selectionStart, selectionEnd);\n        } else {\n            this.togglePassword();\n        }\n    }\n}, {\n    defaults: {\n        onToggleInput: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview\n */\nCraft.Preview = Garnish.Base.extend({\n    draftEditor: null,\n\n    $shade: null,\n    $editorContainer: null,\n    $editor: null,\n    $spinner: null,\n    $statusIcon: null,\n    $dragHandle: null,\n    $previewContainer: null,\n    $iframeContainer: null,\n    $previewHeader: null,\n    $targetBtn: null,\n    $targetMenu: null,\n    $deviceTypeContainer: null,\n    $orientationBtn: null,\n    $refreshBtn: null,\n    $deviceMask: null,\n    $devicePreviewContainer: null,\n    $iframe: null,\n    iframeLoaded: false,\n    $tempInput: null,\n    $fieldPlaceholder: null,\n\n    isActive: false,\n    isVisible: false,\n    activeTarget: 0,\n\n    isDeviceUpdating: false,\n    deviceAnimationTimeout: null,\n    currentDeviceType: 'desktop',\n    deviceOrientation: null,\n    deviceWidth: '',\n    deviceHeight: '',\n    deviceMaskDimensions: {\n        phone: {\n            width: 375,\n            height: 753\n        },\n        tablet: {\n            width: 768,\n            height: 1110\n        }\n    },\n\n    draftId: null,\n    url: null,\n    fields: null,\n\n    iframeHeight: null,\n    scrollTop: null,\n\n    dragger: null,\n    dragStartEditorWidth: null,\n\n    _updateIframeProxy: null,\n\n    _editorWidth: null,\n    _editorWidthInPx: null,\n\n    init: function(draftEditor) {\n        this.draftEditor = draftEditor;\n\n        this._updateIframeProxy = this.updateIframe.bind(this);\n\n        this.$tempInput = $('<input/>', {type: 'hidden', name: '__PREVIEW_FIELDS__', value: '1'});\n        this.$fieldPlaceholder = $('<div/>');\n\n        // Set the initial editor width\n        this.editorWidth = Craft.getLocalStorage('LivePreview.editorWidth', Craft.Preview.defaultEditorWidth);\n    },\n\n    get editorWidth() {\n        return this._editorWidth;\n    },\n\n    get editorWidthInPx() {\n        return this._editorWidthInPx;\n    },\n\n    set editorWidth(width) {\n        var inPx;\n\n        // Is this getting set in pixels?\n        if (width >= 1) {\n            inPx = width;\n            width /= Garnish.$win.width();\n        } else {\n            inPx = Math.round(width * Garnish.$win.width());\n        }\n\n        // Make sure it's no less than the minimum\n        if (inPx < Craft.Preview.minEditorWidthInPx) {\n            inPx = Craft.Preview.minEditorWidthInPx;\n            width = inPx / Garnish.$win.width();\n        }\n\n        this._editorWidth = width;\n        this._editorWidthInPx = inPx;\n    },\n\n    open: function() {\n        if (this.isActive) {\n            return;\n        }\n\n        this.isActive = true;\n        this.trigger('beforeOpen');\n\n        $(document.activeElement).trigger('blur');\n\n        if (!this.$editor) {\n            this.$shade = $('<div/>', {'class': 'modal-shade dark'}).appendTo(Garnish.$bod);\n            this.$previewContainer = $('<div/>', {'class': 'lp-preview-container'}).appendTo(Garnish.$bod);\n            this.$editorContainer = $('<div/>', {'class': 'lp-editor-container'}).appendTo(Garnish.$bod);\n\n            var $editorHeader = $('<header/>', {'class': 'flex'}).appendTo(this.$editorContainer);\n            this.$editor = $('<form/>', {'class': 'lp-editor'}).appendTo(this.$editorContainer);\n            this.$dragHandle = $('<div/>', {'class': 'lp-draghandle'}).appendTo(this.$editorContainer);\n            var $closeBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Close Preview'),\n            }).appendTo($editorHeader);\n            $('<div/>', {'class': 'flex-grow'}).appendTo($editorHeader);\n            this.$spinner = $('<div/>', {'class': 'spinner hidden', title: Craft.t('app', 'Saving')}).appendTo($editorHeader);\n            this.$statusIcon = $('<div/>', {'class': 'invisible'}).appendTo($editorHeader);\n\n            if (Craft.Pro) {\n                this.$previewHeader = $('<header/>', {'class': 'lp-preview-header'}).appendTo(this.$previewContainer);\n\n                // Preview targets\n                if (this.draftEditor.settings.previewTargets.length > 1) {\n                    this.$targetBtn = $('<button/>', {\n                        type: 'button',\n                        'class': 'btn menubtn',\n                        text: this.draftEditor.settings.previewTargets[0].label,\n                    }).appendTo(this.$previewHeader);\n                    this.$targetMenu = $('<div/>', {'class': 'menu lp-target-menu'}).insertAfter(this.$targetBtn);\n                    const $ul = $('<ul/>', {'class': 'padded'}).appendTo(this.$targetMenu);\n                    let $li, $a;\n                    for (let i = 0; i < this.draftEditor.settings.previewTargets.length; i++) {\n                        $li = $('<li/>').appendTo($ul)\n                        $a = $('<a/>', {\n                            data: {target: i},\n                            text: this.draftEditor.settings.previewTargets[i].label,\n                            'class': i === 0 ? 'sel' : null,\n                        }).appendTo($li);\n                    }\n                    new Garnish.MenuBtn(this.$targetBtn, {\n                        onOptionSelect: option => {\n                            this.switchTarget($(option).data('target'));\n                        },\n                    });\n\n                    $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                }\n\n                // Device type buttons\n                this.$deviceTypeContainer = $('<div/>', {\n                    class: 'btngroup lp-device-type',\n                    role: 'listbox',\n                    'aria-label': Craft.t('app', 'Device type'),\n                    tabindex: '0',\n                }).appendTo(this.$previewHeader);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--desktop active',\n                    title: Craft.t('app', 'Desktop'),\n                    'aria-label': Craft.t('app', 'Desktop'),\n                    'aria-selected': 'true',\n                    tabindex: '-1',\n                    data: {\n                        width: '',\n                        height: '',\n                        deviceType: 'desktop'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--tablet',\n                    title: Craft.t('app', 'Tablet'),\n                    'aria-label': Craft.t('app', 'Tablet'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 768,\n                        height: 1024,\n                        deviceType: 'tablet'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n                $('<button/>', {\n                    type: 'button',\n                    role: 'option',\n                    'class': 'btn lp-device-type-btn--phone',\n                    title: Craft.t('app', 'Mobile'),\n                    'aria-label': Craft.t('app', 'Mobile'),\n                    'aria-selected': 'false',\n                    tabindex: '-1',\n                    data: {\n                        width: 375,\n                        height: 667,\n                        deviceType: 'phone'\n                    }\n                }).appendTo(this.$deviceTypeContainer);\n\n                $('<div class=\"flex-grow\"/>').appendTo(this.$previewHeader);\n                const $buttonContainer = $('<div class=\"buttons\"/>').appendTo(this.$previewHeader);\n\n                // Orientation toggle\n                this.$orientationBtn = $('<button/>', {\n                    type: 'button',\n                    'class': 'btn disabled',\n                    'data-icon': 'rotate',\n                    disabled: '',\n                    'aria-hidden': '',\n                    'text': Craft.t('app', 'Rotate')\n                }).appendTo($buttonContainer);\n                this.addListener(this.$orientationBtn, 'click', 'switchOrientation');\n\n                // Refresh button\n                this.$refreshBtn = $('<button/>', {\n                    type: 'button',\n                    class: 'btn hidden',\n                    text: Craft.t('app', 'Refresh'),\n                    'data-icon': 'refresh',\n                }).appendTo($buttonContainer);\n                this._updateRefreshBtn();\n                this.addListener(this.$refreshBtn, 'click', () => {\n                    this.updateIframe(false, true);\n                });\n\n                // Get the last stored orientation\n                this.deviceOrientation = Craft.getLocalStorage('LivePreview.orientation');\n\n                // Device type button click handler\n                this.addListener($('.btn', this.$deviceTypeContainer), 'click', 'switchDeviceType');\n\n                // Device mask\n                this.$deviceMask = $('<div/>', {\n                    'class': 'lp-device-mask'\n                });\n            }\n\n            this.$iframeContainer = $('<div/>', {'class': 'lp-iframe-container'}).appendTo(this.$previewContainer);\n\n            if (this.$deviceMask) {\n                this.$iframeContainer.append(this.$deviceMask);\n            }\n\n            this.dragger = new Garnish.BaseDrag(this.$dragHandle, {\n                axis: Garnish.X_AXIS,\n                onDragStart: this._onDragStart.bind(this),\n                onDrag: this._onDrag.bind(this),\n                onDragStop: this._onDragStop.bind(this),\n            });\n\n            this.addListener($closeBtn, 'click', 'close');\n            this.addListener(this.$statusIcon, 'click', () => {\n                this.draftEditor.showStatusHud(this.$statusIcon);\n            });\n        }\n\n        // Set the sizes\n        this.handleWindowResize();\n        this.addListener(Garnish.$win, 'resize', 'handleWindowResize');\n\n        this.$editorContainer.css(Craft.left, -this.editorWidthInPx + 'px');\n        this.$previewContainer.css(Craft.right, -this.getIframeWidth());\n\n        // Find the fields, excluding nested fields\n        this.fields = [];\n        var $fields = $('#content .field').not($('#content .field .field'));\n\n        if ($fields.length) {\n            // Insert our temporary input before the first field so we know where to swap in the serialized form values\n            this.$tempInput.insertBefore($fields.get(0));\n\n            // Move all the fields into the editor rather than copying them\n            // so any JS that's referencing the elements won't break.\n            for (let i = 0; i < $fields.length; i++) {\n                let $field = $($fields[i]),\n                    $clone = this._getClone($field);\n\n                // It's important that the actual field is added to the DOM *after* the clone,\n                // so any radio buttons in the field get deselected from the clone rather than the actual field.\n                this.$fieldPlaceholder.insertAfter($field);\n                $field.detach();\n                this.$fieldPlaceholder.replaceWith($clone);\n                $field.appendTo(this.$editor);\n\n                this.fields.push({\n                    $field: $field,\n                    $clone: $clone\n                });\n            }\n        }\n\n        this.updateIframe();\n\n        this.draftEditor.on('update', this._updateIframeProxy);\n        Garnish.on(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.on(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.trigger('open');\n    },\n\n    _activeTarget: function() {\n        return this.draftEditor.settings.previewTargets[this.activeTarget];\n    },\n\n    _updateRefreshBtn: function() {\n        const target = this._activeTarget();\n        if (target.refresh !== 'undefined' && !target.refresh) {\n            this.$refreshBtn.removeClass('hidden');\n        } else {\n            this.$refreshBtn.addClass('hidden');\n        }\n    },\n\n    switchTarget: function(i) {\n        this.activeTarget = i;\n        this.$targetBtn.text(this.draftEditor.settings.previewTargets[i].label);\n        this.$targetMenu.find('a.sel').removeClass('sel');\n        this.$targetMenu.find('a').eq(i).addClass('sel');\n        this.updateIframe(true);\n        this._updateRefreshBtn();\n        this.trigger('switchTarget', {\n            previewTarget: this.draftEditor.settings.previewTargets[i],\n        });\n    },\n\n    handleWindowResize: function() {\n        // Reset the width so the min width is enforced\n        this.editorWidth = this.editorWidth;\n\n        // Update the editor/iframe sizes\n        this.updateWidths();\n    },\n\n    slideIn: function() {\n        if (!this.isActive || this.isVisible) {\n            return;\n        }\n\n        $('html').addClass('noscroll');\n        this.$shade.velocity('fadeIn');\n\n        this.$editorContainer.show().velocity('stop').animateLeft(0, 'slow', () => {\n            this.trigger('slideIn');\n            Garnish.$win.trigger('resize');\n        });\n\n        this.$previewContainer.show().velocity('stop').animateRight(0, 'slow', () => {\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.close();\n                }\n            });\n        });\n\n        this.isVisible = true;\n    },\n\n    close: function() {\n        if (!this.isActive || !this.isVisible) {\n            return;\n        }\n\n        this.trigger('beforeClose');\n\n        $('html').removeClass('noscroll');\n\n        this.removeListener(Garnish.$win, 'resize');\n        this.removeListener(Garnish.$bod, 'keyup');\n\n        // Remove our temporary input and move the preview fields back into place\n        this.$tempInput.detach();\n        this.moveFieldsBack();\n\n        this.$shade.delay(200).velocity('fadeOut');\n\n        this.$editorContainer.velocity('stop').animateLeft(-this.editorWidthInPx, 'slow', () => {\n            for (var i = 0; i < this.fields.length; i++) {\n                this.fields[i].$newClone.remove();\n            }\n            this.$editorContainer.hide();\n            this.trigger('slideOut');\n        });\n\n        this.$previewContainer.velocity('stop').animateRight(-this.getIframeWidth(), 'slow', () => {\n            this.$previewContainer.hide();\n            this.resetDevicePreview();\n        });\n\n        this.draftEditor.off('update', this._updateIframeProxy);\n        Garnish.off(Craft.BaseElementEditor, 'saveElement', this._updateIframeProxy);\n        Garnish.off(Craft.AssetImageEditor, 'save', this._updateIframeProxy);\n\n        Craft.ElementThumbLoader.retryAll();\n\n        this.isActive = false;\n        this.isVisible = false;\n        this.trigger('close');\n    },\n\n    moveFieldsBack: function() {\n        for (var i = 0; i < this.fields.length; i++) {\n            var field = this.fields[i];\n            field.$newClone = this._getClone(field.$field);\n\n            // It's important that the actual field is added to the DOM *after* the clone,\n            // so any radio buttons in the field get deselected from the clone rather than the actual field.\n            this.$fieldPlaceholder.insertAfter(field.$field);\n            field.$field.detach();\n            this.$fieldPlaceholder.replaceWith(field.$newClone);\n            field.$clone.replaceWith(field.$field);\n        }\n\n        Garnish.$win.trigger('resize');\n    },\n\n    getIframeWidth: function() {\n        return Garnish.$win.width() - this.editorWidthInPx;\n    },\n\n    updateWidths: function() {\n        this.$editorContainer.css('width', this.editorWidthInPx + 'px');\n        this.$previewContainer.width(this.getIframeWidth());\n        if (this._devicePreviewIsActive()) {\n            this.updateDevicePreview();\n        }\n    },\n\n    _useIframeResizer: function() {\n        return Craft.previewIframeResizerOptions !== false;\n    },\n\n    updateIframe: function(resetScroll, forceRefresh) {\n        if (!this.isActive) {\n            return false;\n        }\n\n        // Ignore non-boolean resetScroll values\n        resetScroll = resetScroll === true;\n\n        const target = this._activeTarget();\n        const refresh = !!(\n            forceRefresh ||\n            this.draftId !== (this.draftId = this.draftEditor.settings.draftId) ||\n            !this.$iframe ||\n            resetScroll ||\n            typeof target.refresh === 'undefined' ||\n            target.refresh\n        );\n\n        this.trigger('beforeUpdateIframe', {\n            previewTarget: target,\n            resetScroll: resetScroll,\n            refresh: refresh,\n        });\n\n        // If this is an existing preview target, make sure it wants to be refreshed automatically\n        if (!refresh) {\n            this.slideIn();\n            return;\n        }\n\n        this.draftEditor.getTokenizedPreviewUrl(target.url, 'x-craft-live-preview').then(url => {\n            // Maintain the current scroll position?\n            let sameHost;\n            if (resetScroll) {\n                this.scrollTop = null;\n            } else if (this.iframeLoaded && this.$iframe) {\n                if (this._useIframeResizer()) {\n                    this.iframeHeight = this.$iframe.height();\n                    this.scrollTop = this.$iframeContainer.scrollTop();\n                } else {\n                    sameHost = Craft.isSameHost(url);\n                    if (sameHost && this.$iframe[0].contentWindow) {\n                        this.scrollTop = $(this.$iframe[0].contentWindow.document).scrollTop();\n                    }\n                }\n            }\n\n            this.iframeLoaded = false;\n\n            var $iframe = $('<iframe/>', {\n                'class': 'lp-preview',\n                frameborder: 0,\n                src: url,\n            });\n\n            if (this.$iframe) {\n                this.$iframe.replaceWith($iframe);\n            } else {\n                $iframe.appendTo(this.$iframeContainer);\n            }\n\n            // If we’re on tablet/phone then wrap the iframe in our own container\n            // so we can keep all the iFrameResizer() stuff working\n            if (this._devicePreviewIsActive()) {\n                if (!this.$devicePreviewContainer) {\n                    this.$devicePreviewContainer = $('<div/>', {\n                        'class': 'lp-device-preview-container'\n                    });\n                    $iframe.wrap('<div class=\"lp-device-preview-container\"></div>');\n                    this.$devicePreviewContainer = this.$iframeContainer.find('.lp-device-preview-container');\n                }\n            }\n\n            // Keep the iframe height consistent with its content\n            if (this._useIframeResizer()) {\n                if (!resetScroll && this.iframeHeight !== null) {\n                    $iframe.height(this.iframeHeight);\n                    this.$iframeContainer.scrollTop(this.scrollTop);\n                }\n\n                iFrameResize($.extend({\n                    checkOrigin: false,\n                    // Allow iframe scrolling until we've successfully initialized the resizer\n                    scrolling: true,\n                    onInit: iframe => {\n                        this.iframeLoaded = true;\n                        this.iframeHeight = null;\n                        this.scrollTop = null;\n                        iframe.scrolling = 'no';\n                    },\n                }, Craft.previewIframeResizerOptions || {}), $iframe[0]);\n            } else {\n                $iframe.on('load', () => {\n                    this.iframeLoaded = true;\n                    if (!resetScroll && sameHost && this.scrollTop !== null) {\n                        $($iframe[0].contentWindow.document).scrollTop(this.scrollTop);\n                    }\n                });\n            }\n\n            this.url = url;\n            this.$iframe = $iframe;\n\n            if (this._devicePreviewIsActive()) {\n                this.updateDevicePreview();\n            }\n\n            this.trigger('afterUpdateIframe', {\n                previewTarget: this.draftEditor.settings.previewTargets[this.activeTarget],\n                $iframe: this.$iframe,\n            });\n\n            this.slideIn();\n        });\n    },\n\n    _devicePreviewIsActive: function() {\n        return this.currentDeviceType !== 'desktop';\n    },\n\n    switchDeviceType: function(ev) {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n\n        const $btn = $(ev.target);\n        const newDeviceType = $btn.data('deviceType');\n\n        // Bail if we’re just smashing the same button\n        if (newDeviceType === this.currentDeviceType) {\n            return false;\n        }\n\n        // Store new device type data\n        this.currentDeviceType = newDeviceType;\n        this.deviceWidth = $btn.data('width');\n        this.deviceHeight = $btn.data('height');\n\n        // Set the active state on the button\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n\n        $btn\n            .addClass('active')\n            .attr('aria-selected', 'true');\n\n        // Update or reset\n        if (this.currentDeviceType === 'desktop') {\n            this.resetDevicePreview();\n        } else {\n            this.$iframeContainer.addClass('lp-iframe-container--updating');\n            this.updateIframe();\n            this.updateDevicePreview();\n        }\n    },\n\n    switchOrientation: function()\n    {\n        if (this.isDeviceUpdating || !this._devicePreviewIsActive()) {\n            return false;\n        }\n\n        // Switch to whichever orientation is currently not stored\n        if (!this.deviceOrientation || this.deviceOrientation === 'portrait') {\n            this.deviceOrientation = 'landscape';\n        } else {\n            this.deviceOrientation = 'portrait';\n        }\n\n        // Store the new one\n        Craft.setLocalStorage('LivePreview.orientation', this.deviceOrientation);\n\n        // Allow the animation to take place\n        this.$iframeContainer.addClass('lp-iframe-container--animating');\n\n        // Update the device preview\n        this.updateDevicePreview();\n    },\n\n    updateDevicePreview: function()\n    {\n        if (this.isDeviceUpdating) {\n            return false;\n        }\n\n        this.isDeviceUpdating = true;\n\n        // Enable the orientation button\n        this.$orientationBtn\n            .removeClass('disabled')\n            .removeAttr('disabled')\n            .removeAttr('aria-hidden');\n\n        // Trigger the resized css mods\n        this.$iframeContainer.addClass('lp-iframe-container--has-device-preview');\n\n        // Add the tablet class if needed\n        if (this.currentDeviceType === 'tablet') {\n            this.$iframeContainer.addClass('lp-iframe-container--tablet');\n        } else {\n            this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n        }\n\n        // Figure out the best zoom\n        let hZoom = 1;\n        let wZoom = 1;\n        let zoom = 1;\n        let previewHeight = (this.$previewContainer.height() - 50) - 48; // 50px for the header bar and 24px clearance\n        let previewWidth = this.$previewContainer.width() - 48;\n        let maskHeight = this.deviceMaskDimensions[this.currentDeviceType].height;\n        let maskWidth = this.deviceMaskDimensions[this.currentDeviceType].width;\n\n        if (this.deviceOrientation === 'landscape') {\n            if (previewWidth < maskHeight) {\n                hZoom = previewWidth / maskHeight;\n            }\n            if (previewHeight < maskWidth) {\n                wZoom = previewHeight / maskWidth;\n            }\n        } else {\n            if (previewHeight < maskHeight) {\n                hZoom = previewHeight / maskHeight;\n            }\n            if (previewWidth < maskWidth) {\n                wZoom = previewWidth / maskWidth;\n            }\n        }\n\n        zoom = hZoom;\n        if (wZoom < hZoom) {\n            zoom = wZoom;\n        }\n\n        // Figure out the css values\n        const translate = -((100/zoom)/2);\n        const rotationDeg = this.deviceOrientation === 'landscape' ? '-90deg' : '0deg';\n\n        // Apply first to the device mask\n        this.$deviceMask.css({\n            width: this.deviceMaskDimensions[this.currentDeviceType].width + 'px',\n            height: this.deviceMaskDimensions[this.currentDeviceType].height + 'px',\n            transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%) rotate('+rotationDeg+')'\n        });\n\n        // After the animation duration we can update the iframe sizes and show it\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.deviceAnimationTimeout = setTimeout(() => {\n            // Then make the size change to the preview container\n            if (this.deviceOrientation === 'landscape') {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceHeight + 'px',\n                    height: this.deviceWidth + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: 0,\n                    marginLeft: '-' + (12*zoom) + 'px'\n                });\n            } else {\n                this.$devicePreviewContainer.css({\n                    width: this.deviceWidth + 'px',\n                    height: this.deviceHeight + 'px',\n                    transform: 'scale('+zoom+') translate('+translate+'%, '+translate+'%)',\n                    marginTop: '-' + (12*zoom) + 'px',\n                    marginLeft: 0\n                });\n            }\n\n            // Remove the animating class and show the iframe\n            this.$iframeContainer.removeClass('lp-iframe-container--animating');\n            this.$iframeContainer.removeClass('lp-iframe-container--updating');\n            this.isDeviceUpdating = false;\n\n        }, 300);\n    },\n\n    resetDevicePreview: function()\n    {\n        if (this.deviceAnimationTimeout) {\n            clearTimeout(this.deviceAnimationTimeout);\n        }\n        this.currentDeviceType = 'desktop';\n        this.$deviceTypeContainer.find('.btn')\n            .removeClass('active')\n            .attr('aria-selected', 'false');\n        this.$deviceTypeContainer.find('.lp-device-type-btn--desktop')\n            .addClass('active')\n            .attr('aria-selected', 'true');\n        this.$orientationBtn\n            .addClass('disabled')\n            .attr('disabled', '')\n            .attr('aria-hidden', '');\n        this.$iframeContainer.removeClass('lp-iframe-container--animating');\n        this.$iframeContainer.removeClass('lp-iframe-container--has-device-preview');\n        this.$iframeContainer.removeClass('lp-iframe-container--tablet');\n\n        // Flat out remove the iframe and let it get regenerated\n        if (this.$devicePreviewContainer) {\n            // If using iFrameResizer then remove the listeners first so we don’t get zombie instances\n            if (this._useIframeResizer()) {\n                this.$iframe[0].iFrameResizer.removeListeners();\n            }\n            this.$devicePreviewContainer.detach();\n            this.$devicePreviewContainer = null;\n            this.$iframe = null;\n            this.updateIframe();\n        }\n\n        this.isDeviceUpdating = false;\n    },\n\n    _getClone: function($field) {\n        var $clone = $field.clone();\n\n        // clone() won't account for input values that have changed since the original HTML set them\n        Garnish.copyInputValues($field, $clone);\n\n        // Remove any id= attributes\n        $clone.attr('id', '');\n        $clone.find('[id]').attr('id', '');\n\n        // Disable anything with a name attribute\n        $clone.find('[name]').prop('disabled', true);\n\n        return $clone;\n    },\n\n    _onDragStart: function() {\n        this.dragStartEditorWidth = this.editorWidthInPx;\n        this.$previewContainer.addClass('dragging');\n    },\n\n    _onDrag: function() {\n        if (Craft.orientation === 'ltr') {\n            this.editorWidth = this.dragStartEditorWidth + this.dragger.mouseDistX;\n        } else {\n            this.editorWidth = this.dragStartEditorWidth - this.dragger.mouseDistX;\n        }\n\n        this.updateWidths();\n    },\n\n    _onDragStop: function() {\n        this.$previewContainer.removeClass('dragging');\n        Craft.setLocalStorage('LivePreview.editorWidth', this.editorWidth);\n    }\n}, {\n    defaultEditorWidth: 0.33,\n    minEditorWidthInPx: 320,\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Preview File Modal\n */\nCraft.PreviewFileModal = Garnish.Modal.extend({\n    assetId: null,\n    $spinner: null,\n    elementSelect: null,\n    type: null,\n    loaded: null,\n    requestId: 0,\n\n    /**\n     * Initialize the preview file modal.\n     * @returns {*|void}\n     */\n    init: function(assetId, elementSelect, settings) {\n        settings = $.extend(this.defaultSettings, settings);\n\n        settings.onHide = this._onHide.bind(this);\n\n        if (Craft.PreviewFileModal.openInstance) {\n            var instance = Craft.PreviewFileModal.openInstance;\n\n            if (instance.assetId !== assetId) {\n                instance.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n                instance.elementSelect = elementSelect;\n            }\n\n            return this.destroy();\n        }\n\n        Craft.PreviewFileModal.openInstance = this;\n        this.elementSelect = elementSelect;\n\n        this.$container = $('<div class=\"modal previewmodal loading\"/>').appendTo(Garnish.$bod);\n\n        this.base(this.$container, $.extend({\n            resizable: true\n        }, settings));\n\n        // Cut the flicker, just show the nice person the preview.\n        if (this.$container) {\n            this.$container.velocity('stop');\n            this.$container.show().css('opacity', 1);\n\n            this.$shade.velocity('stop');\n            this.$shade.show().css('opacity', 1);\n        }\n\n        this.loadAsset(assetId, settings.startingWidth, settings.startingHeight);\n    },\n\n    /**\n     * When hiding, remove all traces and focus last focused element.\n     * @private\n     */\n    _onHide: function() {\n        Craft.PreviewFileModal.openInstance = null;\n        if (this.elementSelect) {\n            this.elementSelect.focusItem(this.elementSelect.$focusedItem);\n        }\n\n        this.$shade.remove();\n\n        return this.destroy();\n    },\n\n    /**\n     * Disappear immediately forever.\n     * @returns {boolean}\n     */\n    selfDestruct: function() {\n        var instance = Craft.PreviewFileModal.openInstance;\n\n        instance.hide();\n        instance.$shade.remove();\n        instance.destroy();\n\n        Craft.PreviewFileModal.openInstance = null;\n\n        return true;\n    },\n\n    /**\n     * Load an asset, using starting width and height, if applicable\n     * @param assetId\n     * @param startingWidth\n     * @param startingHeight\n     */\n    loadAsset: function(assetId, startingWidth, startingHeight) {\n        this.assetId = assetId;\n\n        this.$container.empty();\n        this.loaded = false;\n\n        this.desiredHeight = null;\n        this.desiredWidth = null;\n\n        var containerHeight = Garnish.$win.height() * 0.66;\n        var containerWidth = Math.min(containerHeight / 3 * 4, Garnish.$win.width() - this.settings.minGutter * 2);\n        containerHeight = containerWidth / 4 * 3;\n\n        if (startingWidth && startingHeight) {\n            var ratio = startingWidth / startingHeight;\n            containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n            containerHeight = Math.min(containerWidth / ratio, Garnish.$win.height() - this.settings.minGutter * 2);\n            containerWidth = containerHeight * ratio;\n\n            // This might actually have put width over the viewport limits, so doublecheck\n            if (containerWidth > Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2)) {\n                containerWidth = Math.min(startingWidth, Garnish.$win.width() - this.settings.minGutter * 2);\n                containerHeight = containerWidth / ratio;\n            }\n        }\n\n        this._resizeContainer(containerWidth, containerHeight);\n\n        this.$spinner = $('<div class=\"spinner centeralign\"></div>').appendTo(this.$container);\n        var top = (this.$container.height() / 2 - this.$spinner.height() / 2) + 'px',\n            left = (this.$container.width() / 2 - this.$spinner.width() / 2) + 'px';\n\n        this.$spinner.css({left: left, top: top, position: 'absolute'});\n        this.requestId++;\n\n        Craft.postActionRequest('assets/preview-file', {assetId: assetId, requestId: this.requestId}, (response, textStatus) => {\n            this.$container.removeClass('loading');\n            this.$spinner.remove();\n            this.loaded = true;\n\n            if (textStatus === 'success') {\n                if (response.success) {\n                    if (response.requestId != this.requestId) {\n                        return;\n                    }\n\n                    if (!response.previewHtml) {\n                        this.$container.addClass('zilch');\n                        this.$container.append($('<p/>', {text: Craft.t('app', 'No preview available.')}));\n                        return;\n                    }\n\n                    this.$container.removeClass('zilch');\n                    this.$container.append(response.previewHtml);\n                    Craft.appendHeadHtml(response.headHtml);\n                    Craft.appendFootHtml(response.footHtml);\n                } else {\n                    alert(response.error);\n\n                    this.hide();\n                }\n            }\n        });\n    },\n\n    /**\n     * Resize the container to specified dimensions\n     * @param containerWidth\n     * @param containerHeight\n     * @private\n     */\n    _resizeContainer: function(containerWidth, containerHeight) {\n        this.$container.css({\n            'width': containerWidth,\n            'min-width': containerWidth,\n            'max-width': containerWidth,\n            'height': containerHeight,\n            'min-height': containerHeight,\n            'max-height': containerHeight,\n            'top': (Garnish.$win.height() - containerHeight) / 2,\n            'left': (Garnish.$win.width() - containerWidth) / 2\n        });\n    }\n}, {\n    defaultSettings: {\n        startingWidth: null,\n        startingHeight: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.ProgressBar = Garnish.Base.extend({\n    $progressBar: null,\n    $innerProgressBar: null,\n    $progressBarStatus: null,\n\n    _itemCount: 0,\n    _processedItemCount: 0,\n    _displaySteps: false,\n\n    init: function($element, displaySteps) {\n        if (displaySteps) {\n            this._displaySteps = true;\n        }\n\n        this.$progressBar = $('<div class=\"progressbar pending hidden\"/>').appendTo($element);\n        this.$innerProgressBar = $('<div class=\"progressbar-inner\"/>').appendTo(this.$progressBar);\n        this.$progressBarStatus = $('<div class=\"progressbar-status hidden\" />').insertAfter(this.$progressBar);\n\n        this.resetProgressBar();\n    },\n\n    /**\n     * Reset the progress bar\n     */\n    resetProgressBar: function() {\n        // Since setting the progress percentage implies that there is progress to be shown\n        // It removes the pending class - we must add it back.\n        this.setProgressPercentage(100);\n        this.$progressBar.addClass('pending');\n\n        // Reset all the counters\n        this.setItemCount(1);\n        this.setProcessedItemCount(0);\n        this.$progressBarStatus.html('');\n\n        if (this._displaySteps) {\n            this.$progressBar.addClass('has-status');\n        }\n    },\n\n    /**\n     * Fade to invisible, hide it using a class and reset opacity to visible\n     */\n    hideProgressBar: function() {\n        this.$progressBar.fadeTo('fast', 0.01, () => {\n            this.$progressBar.addClass('hidden').fadeTo(1, 1, $.noop);\n        });\n    },\n\n    showProgressBar: function() {\n        this.$progressBar.removeClass('hidden');\n        this.$progressBarStatus.removeClass('hidden');\n    },\n\n    setItemCount: function(count) {\n        this._itemCount = count;\n    },\n\n    incrementItemCount: function(count) {\n        this._itemCount += count;\n    },\n\n    setProcessedItemCount: function(count) {\n        this._processedItemCount = count;\n    },\n\n    incrementProcessedItemCount: function(count) {\n        this._processedItemCount += count;\n    },\n\n    updateProgressBar: function() {\n        // Only fools would allow accidental division by zero.\n        this._itemCount = Math.max(this._itemCount, 1);\n\n        var width = Math.min(100, Math.round(100 * this._processedItemCount / this._itemCount));\n\n        this.setProgressPercentage(width);\n\n        if (this._displaySteps) {\n            this.$progressBarStatus.html(this._processedItemCount + ' / ' + this._itemCount);\n        }\n    },\n\n    setProgressPercentage: function(percentage, animate) {\n        if (percentage === 0) {\n            this.$progressBar.addClass('pending');\n        } else {\n            this.$progressBar.removeClass('pending');\n\n            if (animate) {\n                this.$innerProgressBar.velocity('stop').velocity({width: percentage + '%'}, 'fast');\n            } else {\n                this.$innerProgressBar.velocity('stop').width(percentage + '%');\n            }\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.PromptHandler = Garnish.Base.extend({\n    modal: null,\n    $modalContainerDiv: null,\n    $prompt: null,\n    $promptApplyToRemainingContainer: null,\n    $promptApplyToRemainingCheckbox: null,\n    $promptApplyToRemainingLabel: null,\n    $pomptChoices: null,\n\n    _prompts: [],\n    _promptBatchCallback: $.noop,\n    _promptBatchReturnData: [],\n    _promptBatchNum: 0,\n\n    resetPrompts: function() {\n        this._prompts = [];\n        this._promptBatchCallback = $.noop;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n    },\n\n    addPrompt: function(prompt) {\n        this._prompts.push(prompt);\n    },\n\n    getPromptCount: function() {\n        return this._prompts.length;\n    },\n\n    showBatchPrompts: function(callback) {\n        this._promptBatchCallback = callback;\n        this._promptBatchReturnData = [];\n        this._promptBatchNum = 0;\n\n        this._showNextPromptInBatch();\n    },\n\n    _showNextPromptInBatch: function() {\n        var prompt = this._prompts[this._promptBatchNum].prompt,\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        this._showPrompt(prompt.message, prompt.choices, this._handleBatchPromptSelection.bind(this), remainingInBatch);\n    },\n\n    /**\n     * Handles a prompt choice selection.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _handleBatchPromptSelection: function(choice, applyToRemaining) {\n        var prompt = this._prompts[this._promptBatchNum],\n            remainingInBatch = this._prompts.length - (this._promptBatchNum + 1);\n\n        // Record this choice\n        var choiceData = $.extend(prompt, {choice});\n        this._promptBatchReturnData.push(choiceData);\n\n        // Are there any remaining items in the batch?\n        if (remainingInBatch) {\n            // Get ready to deal with the next prompt\n            this._promptBatchNum++;\n\n            // Apply the same choice to the remaining items?\n            if (applyToRemaining) {\n                this._handleBatchPromptSelection(choice, true);\n            } else {\n                // Show the next prompt\n                this._showNextPromptInBatch();\n            }\n        } else {\n            // All done! Call the callback\n            if (typeof this._promptBatchCallback === 'function') {\n                this._promptBatchCallback(this._promptBatchReturnData);\n            }\n        }\n    },\n\n    /**\n     * Show the user prompt with a given message and choices, plus an optional \"Apply to remaining\" checkbox.\n     *\n     * @param {string} message\n     * @param {object} choices\n     * @param {function} callback\n     * @param {number} itemsToGo\n     */\n    _showPrompt: function(message, choices, callback, itemsToGo) {\n        this._promptCallback = callback;\n\n        if (this.modal === null) {\n            this.modal = new Garnish.Modal({closeOtherModals: false});\n        }\n\n        if (this.$modalContainerDiv === null) {\n            this.$modalContainerDiv = $('<div class=\"modal fitted prompt-modal\"></div>').addClass().appendTo(Garnish.$bod);\n        }\n\n        this.$prompt = $('<div class=\"body\"></div>').appendTo(this.$modalContainerDiv.empty());\n\n        this.$promptMessage = $('<p class=\"prompt-msg\"/>').appendTo(this.$prompt);\n\n        this.$promptChoices = $('<div class=\"options\"></div>').appendTo(this.$prompt);\n\n        this.$promptApplyToRemainingContainer = $('<label class=\"assets-applytoremaining\"/>').appendTo(this.$prompt).hide();\n        this.$promptApplyToRemainingCheckbox = $('<input type=\"checkbox\"/>').appendTo(this.$promptApplyToRemainingContainer);\n        this.$promptApplyToRemainingLabel = $('<span/>').appendTo(this.$promptApplyToRemainingContainer);\n\n        this.$promptButtons = $('<div class=\"buttons right\"/>').appendTo(this.$prompt);\n\n        this.modal.setContainer(this.$modalContainerDiv);\n\n        this.$promptMessage.html(message);\n\n        let $cancelBtn = $('<button/>', {\n            type: 'button',\n            class: 'btn',\n            text: Craft.t('app', 'Cancel'),\n        }).appendTo(this.$promptButtons);\n        let $submitBtn = $('<button/>', {\n            type: 'submit',\n            class: 'btn submit disabled',\n            text: Craft.t('app', 'OK'),\n        }).appendTo(this.$promptButtons);\n\n        for (var i = 0; i < choices.length; i++) {\n            var $radioButtonHtml = $('<div><label><input type=\"radio\" name=\"promptAction\" value=\"' + choices[i].value + '\"/> ' + choices[i].title + '</label></div>').appendTo(this.$promptChoices),\n                $radioButton = $radioButtonHtml.find('input');\n\n            this.addListener($radioButton, 'click', function() {\n                $submitBtn.removeClass('disabled');\n            });\n        }\n\n        this.addListener($submitBtn, 'activate', function(ev) {\n            var choice = $(ev.currentTarget).parents('.modal').find('input[name=promptAction]:checked').val(),\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        this.addListener($cancelBtn, 'activate', function() {\n            var choice = 'cancel',\n                applyToRemaining = this.$promptApplyToRemainingCheckbox.prop('checked');\n\n            this._selectPromptChoice(choice, applyToRemaining);\n        });\n\n        if (itemsToGo) {\n            this.$promptApplyToRemainingContainer.show();\n            this.$promptApplyToRemainingLabel.html(' ' + Craft.t('app', 'Apply this to the {number} remaining conflicts?', {number: itemsToGo}));\n        }\n\n        this.modal.show();\n        this.modal.removeListener(Garnish.Modal.$shade, 'click');\n        this.addListener(Garnish.Modal.$shade, 'click', '_cancelPrompt');\n    },\n\n    /**\n     * Handles when a user selects one of the prompt choices.\n     *\n     * @param choice\n     * @param applyToRemaining\n     * @private\n     */\n    _selectPromptChoice: function(choice, applyToRemaining) {\n        this.$prompt.fadeOut('fast', () => {\n            this.modal.hide();\n            this._promptCallback(choice, applyToRemaining);\n        });\n    },\n\n    /**\n     * Cancels the prompt.\n     */\n    _cancelPrompt: function() {\n        this._selectPromptChoice('cancel', true);\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.SlidePicker = Garnish.Base.extend({\n        min: null,\n        max: null,\n        totalSteps: null,\n        value: null,\n\n        $container: null,\n        $buttons: null,\n\n        init: function(value, settings) {\n            this.setSettings(settings, Craft.SlidePicker.defaults);\n\n            this.$container = $('<div/>', {\n                class: 'slide-picker',\n                role: 'slider',\n                tabindex: 0,\n            });\n\n            this.refresh();\n            this.setValue(value, false);\n\n            this.addListener(this.$container, 'keydown', ev => {\n                switch (ev.keyCode) {\n                    case Garnish.UP_KEY:\n                        this.setValue(this.value + this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.DOWN_KEY:\n                        this.setValue(this.value - this.settings.step);\n                        ev.preventDefault();\n                        break;\n                    case Garnish.RIGHT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value + this.settings.step);\n                        } else {\n                            this.setValue(this.value - this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                    case Garnish.LEFT_KEY:\n                        if (Craft.orientation === 'ltr') {\n                            this.setValue(this.value - this.settings.step);\n                        } else {\n                            this.setValue(this.value + this.settings.step);\n                        }\n                        ev.preventDefault();\n                        break;\n                }\n            });\n        },\n\n        refresh: function() {\n            // Figure out what the min/max values are\n            this.min = this._min();\n            this.max = this._max();\n            this.totalSteps = (this.max - this.min) / this.settings.step;\n\n            if (!Number.isInteger(this.totalSteps)) {\n                throw 'Invalid SlidePicker config';\n            }\n\n            if (this.$buttons) {\n                this.$buttons.remove();\n            }\n\n            this.$container.attr('aria-valuemin', this.min);\n            this.$container.attr('aria-valuemax', this.max);\n            this.$buttons = $();\n\n            // Create the buttons\n            for (let value = this.min; value <= this.max; value += this.settings.step) {\n                this.$buttons = this.$buttons.add($('<a/>', {\n                    title: this.settings.valueLabel(value),\n                    data: {value}\n                }));\n            }\n\n            this.$buttons.appendTo(this.$container);\n\n            if (this.value !== null) {\n                let value = this.value;\n                this.value = null;\n                this.setValue(value, false);\n            }\n\n            this.addListener(this.$buttons, 'mouseover', ev => {\n                this.$buttons.removeClass('active-hover last-active-hover');\n                $(ev.currentTarget)\n                    .addClass('active-hover last-active-hover')\n                    .prevAll().addClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'mouseout', () => {\n                this.$buttons.removeClass('active-hover');\n            });\n\n            this.addListener(this.$buttons, 'click', ev => {\n                this.setValue($.data(ev.currentTarget, 'value'));\n                ev.stopPropagation();\n                this.$container.focus();\n            });\n        },\n\n        setValue: function(value, triggerEvent) {\n            value = Math.max(Math.min(value, this.max), this.min);\n\n            if (this.value === (this.value = value)) {\n                return;\n            }\n\n            this.$container.attr({\n                'aria-valuenow': this.value,\n                'aria-valuetext': this.settings.valueLabel(this.value),\n            });\n\n            this.$buttons.removeClass('last-active active');\n            let $activeButton = this.$buttons.eq((this.value - this.min) / this.settings.step);\n            $activeButton.add($activeButton.prevAll()).addClass('active');\n            $activeButton.addClass('last-active');\n\n            if (triggerEvent !== false) {\n                this.settings.onChange(value);\n            }\n        },\n\n        _min: function() {\n            if (typeof this.settings.min === 'function') {\n                return this.settings.min();\n            }\n            return this.settings.min;\n        },\n\n        _max: function() {\n            if (typeof this.settings.max === 'function') {\n                return this.settings.max();\n            }\n            return this.settings.max;\n        },\n    }, {\n        defaults: {\n            min: 0,\n            max: 100,\n            step: 10,\n            valueLabel: null,\n            onChange: $.noop,\n        }\n    });\n})(jQuery);\n","/** global: Garnish */\n\nCraft.SlideRuleInput = Garnish.Base.extend({\n    $container: null,\n    $options: null,\n    $selectedOption: null,\n    $input: null,\n    value: null,\n\n    startPositionX: null,\n\n    init: function(id, settings) {\n        this.setSettings(settings, Craft.SlideRuleInput.defaultSettings);\n\n        this.value = 0;\n        this.graduationsMin = -70;\n        this.graduationsMax = 70;\n        this.slideMin = -45;\n        this.slideMax = 45;\n\n        this.$container = $('#' + id);\n        this.$overlay = $('<div class=\"overlay\"></div>').appendTo(this.$container);\n        this.$cursor = $('<div class=\"cursor\"></div>').appendTo(this.$container);\n        this.$graduations = $('<div class=\"graduations\"></div>').appendTo(this.$container);\n        this.$graduationsUl = $('<ul></ul>').appendTo(this.$graduations);\n\n        for (var i = this.graduationsMin; i <= this.graduationsMax; i++) {\n            var $li = $('<li class=\"graduation\" data-graduation=\"' + i + '\"><div class=\"label\">' + i + '</div></li>').appendTo(this.$graduationsUl);\n\n            if ((i % 5) === 0) {\n                $li.addClass('main-graduation');\n            }\n\n            if (i === 0) {\n                $li.addClass('selected');\n            }\n        }\n\n        this.$options = this.$container.find('.graduation');\n\n        this.addListener(this.$container, 'resize', this._handleResize.bind(this));\n        this.addListener(this.$container, 'tapstart', this._handleTapStart.bind(this));\n        this.addListener(Garnish.$bod, 'tapmove', this._handleTapMove.bind(this));\n        this.addListener(Garnish.$bod, 'tapend', this._handleTapEnd.bind(this));\n\n        // Set to zero\n\n        // this.setValue(0);\n\n        setTimeout(() => {\n            // (n -1) options because the border is placed on the left of the 10px box\n            this.graduationsCalculatedWidth = (this.$options.length - 1) * 10;\n            this.$graduationsUl.css('left', (-this.graduationsCalculatedWidth / 2) + this.$container.width() / 2);\n        }, 50);\n    },\n\n    _handleResize: function() {\n        var left = this.valueToPosition(this.value);\n        this.$graduationsUl.css('left', left);\n    },\n\n    _handleTapStart: function(ev, touch) {\n        ev.preventDefault();\n\n        this.startPositionX = touch.position.x;\n        this.startLeft = this.$graduationsUl.position().left;\n\n        this.dragging = true;\n        this.onStart();\n    },\n\n    _handleTapMove: function(ev, touch) {\n        if (this.dragging) {\n            ev.preventDefault();\n\n            var curX = this.startPositionX - touch.position.x;\n            var left = this.startLeft - curX;\n            var value = this.positionToValue(left);\n\n            this.setValue(value);\n\n            this.onChange();\n        }\n    },\n\n    setValue: function(value) {\n        var left = this.valueToPosition(value);\n        if (value < this.slideMin) {\n            value = this.slideMin;\n            left = this.valueToPosition(value);\n        } else if (value > this.slideMax) {\n            value = this.slideMax;\n            left = this.valueToPosition(value);\n        }\n\n        this.$graduationsUl.css('left', left);\n\n        if (value >= this.slideMin && value <= this.slideMax) {\n            this.$options.removeClass('selected');\n\n            $.each(this.$options, function(key, option) {\n                if ($(option).data('graduation') > 0) {\n                    if ($(option).data('graduation') <= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n                if ($(option).data('graduation') < 0) {\n                    if ($(option).data('graduation') >= value) {\n                        $(option).addClass('selected');\n                    }\n                }\n\n                if ($(option).data('graduation') == 0) {\n                    $(option).addClass('selected');\n                }\n            });\n        }\n\n        this.value = value;\n    },\n\n    _handleTapEnd: function(ev) {\n        if (this.dragging) {\n            ev.preventDefault();\n            this.dragging = false;\n            this.onEnd();\n        }\n    },\n\n    positionToValue: function(position) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return (((this.$graduations.width() / 2) + (position * -1)) / this.graduationsCalculatedWidth) * scaleMax - scaleMin;\n    },\n\n    valueToPosition: function(value) {\n        var scaleMin = (this.graduationsMin * -1);\n        var scaleMax = (this.graduationsMin - this.graduationsMax) * -1;\n\n        return -((value + scaleMin) * this.graduationsCalculatedWidth / scaleMax - this.$graduations.width() / 2);\n    },\n\n    onStart: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onStart(this);\n        }\n    },\n\n    onChange: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onChange(this);\n        }\n    },\n\n    onEnd: function() {\n        if (typeof this.settings.onChange === 'function') {\n            this.settings.onEnd(this);\n        }\n    },\n\n    defaultSettings: {\n        onStart: $.noop,\n        onChange: $.noop,\n        onEnd: $.noop\n    }\n});\n","(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Slide Picker\n     */\n    Craft.Slideout = Garnish.Base.extend({\n        $outerContainer: null,\n        $container: null,\n        $shade: null,\n        isOpen: false,\n\n        init: function(contents, settings) {\n            this.setSettings(settings, Craft.Slideout.defaults);\n\n            if (!Garnish.isMobileBrowser()) {\n                this.$shade = $('<div class=\"slideout-shade\"/>')\n                    .appendTo(Garnish.$bod);\n\n                if (this.settings.closeOnShadeClick) {\n                    this.addListener(this.$shade, 'click', ev => {\n                        ev.stopPropagation();\n                        this.close();\n                    });\n                }\n            }\n\n            this.$outerContainer = $('<div/>', {class: 'slideout-container hidden'});\n            this.$container = $(`<${this.settings.containerElement}/>`, this.settings.containerAttributes)\n                .addClass('slideout')\n                .append(contents)\n                .data('slideout', this)\n                .appendTo(this.$outerContainer);\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.addClass('so-mobile');\n            }\n\n            Craft.trapFocusWithin(this.$container);\n\n            if (this.settings.autoOpen) {\n                this.open();\n            }\n        },\n\n        open: function() {\n            if (this.isOpen) {\n                return;\n            }\n\n            this._cancelTransitionListeners();\n\n            // Move the shade + container to the end of <body> so they get the highest sub-z-indexes\n            if (this.$shade) {\n                this.$shade\n                    .appendTo(Garnish.$bod)\n                    .show();\n            }\n\n            this.$outerContainer\n                .appendTo(Garnish.$bod)\n                .removeClass('hidden');\n\n            if (Garnish.isMobileBrowser()) {\n                this.$container.css('top', '100vh');\n            } else {\n                this.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n            }\n\n            this.$container.one('transitionend.slideout', () => {\n                Craft.setFocusWithin(this.$container);\n            });\n\n            if (this.$shade) {\n                this.$shade[0].offsetWidth;\n                this.$shade.addClass('so-visible');\n            }\n\n            this.$container[0].offsetWidth;\n            Craft.Slideout.addPanel(this);\n\n            this.enable();\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.closeOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, () => {\n                    this.close();\n                });\n            }\n\n            this.isOpen = true;\n            this.trigger('open');\n        },\n\n        close: function() {\n            if (!this.isOpen) {\n                return;\n            }\n\n            this.trigger('beforeClose');\n            this.disable();\n            this.isOpen = false;\n\n            this._cancelTransitionListeners();\n\n            if (this.$shade) {\n                this.removeListener(this.$shade, 'click');\n                this.$shade\n                    .removeClass('so-visible')\n                    .one('transitionend.slideout', () => {\n                        this.$shade.hide();\n                    });\n            }\n\n            Craft.Slideout.removePanel(this);\n            Garnish.shortcutManager.removeLayer();\n            this.$container.one('transitionend.slideout', () => {\n                this.$outerContainer.addClass('hidden');\n                this.trigger('close');\n            });\n        },\n\n        _cancelTransitionListeners: function() {\n            if (this.$shade) {\n                this.$shade.off('transitionend.slideout');\n            }\n\n            this.$container.off('transitionend.slideout');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$shade) {\n                this.$shade.remove();\n                this.$shade = null;\n            }\n\n            this.$outerContainer.remove();\n            this.$outerContainer = null;\n            this.$container = null;\n\n            this.base();\n        },\n    }, {\n        defaults: {\n            containerElement: 'div',\n            containerAttributes: {},\n            autoOpen: true,\n            closeOnEsc: true,\n            closeOnShadeClick: true,\n        },\n        openPanels: [],\n        addPanel: function(panel) {\n            Craft.Slideout.openPanels.unshift(panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', 0);\n            } else {\n                Craft.Slideout.updateStyles();\n            }\n        },\n        removePanel: function(panel) {\n            Craft.Slideout.openPanels = Craft.Slideout.openPanels.filter(m => m !== panel);\n            if (Garnish.isMobileBrowser()) {\n                panel.$container.css('top', '100vh');\n            } else {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', '100vw');\n                Craft.Slideout.updateStyles();\n            }\n        },\n        updateStyles: function() {\n            const totalPanels = Craft.Slideout.openPanels.length;\n            Craft.Slideout.openPanels.forEach((panel, i) => {\n                panel.$container.css(Garnish.ltr ? 'left' : 'right', `${50 * ((totalPanels - i) / totalPanels)}vw`);\n            });\n\n            if (totalPanels !== 0) {\n                Garnish.$bod.addClass('no-scroll');\n            } else {\n                Garnish.$bod.removeClass('no-scroll');\n            }\n        },\n    });\n})(jQuery);\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Slug Generator\n */\nCraft.SlugGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(/<(.*?)>/g, '');\n\n        // Remove inner-word punctuation\n        sourceVal = sourceVal.replace(/['\"‘’“”\\[\\]\\(\\)\\{\\}:]/g, '');\n\n        // Make it lowercase\n        if (!Craft.allowUppercaseInSlug) {\n            sourceVal = sourceVal.toLowerCase();\n        }\n\n        if (Craft.limitAutoSlugsToAscii) {\n            // Convert extended ASCII characters to basic ASCII\n            sourceVal = Craft.asciiString(sourceVal, this.settings.charMap);\n        }\n\n        // Get the \"words\". Split on anything that is not alphanumeric.\n        // Reference: http://www.regular-expressions.info/unicode.html\n        var words = Craft.filterArray(XRegExp.matchChain(sourceVal, [XRegExp('[\\\\p{L}\\\\p{N}\\\\p{M}]+')]));\n\n        if (words.length) {\n            return words.join(Craft.slugWordSeparator);\n        } else {\n            return '';\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure class\n */\nCraft.Structure = Garnish.Base.extend({\n    id: null,\n\n    $container: null,\n    state: null,\n    structureDrag: null,\n\n    /**\n     * Init\n     */\n    init: function(id, container, settings) {\n        this.id = id;\n        this.$container = $(container);\n        this.setSettings(settings, Craft.Structure.defaults);\n\n        // Is this already a structure?\n        if (this.$container.data('structure')) {\n            Garnish.log('Double-instantiating a structure on an element');\n            this.$container.data('structure').destroy();\n        }\n\n        this.$container.data('structure', this);\n\n        this.state = {};\n\n        if (this.settings.storageKey) {\n            $.extend(this.state, Craft.getLocalStorage(this.settings.storageKey, {}));\n        }\n\n        if (typeof this.state.collapsedElementIds === 'undefined') {\n            this.state.collapsedElementIds = [];\n        }\n\n        var $parents = this.$container.find('ul').prev('.row');\n\n        for (var i = 0; i < $parents.length; i++) {\n            var $row = $($parents[i]),\n                $li = $row.parent(),\n                $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo($row);\n\n            if ($.inArray($row.children('.element').data('id'), this.state.collapsedElementIds) !== -1) {\n                $li.addClass('collapsed');\n            }\n\n            this.initToggle($toggle);\n        }\n\n        if (this.settings.sortable) {\n            this.structureDrag = new Craft.StructureDrag(this, this.settings.maxLevels);\n        }\n\n        if (this.settings.newChildUrl) {\n            this.initNewChildMenus(this.$container.find('.add'));\n        }\n    },\n\n    initToggle: function($toggle) {\n        $toggle.on('click', ev => {\n            var $li = $(ev.currentTarget).closest('li'),\n                elementId = $li.children('.row').find('.element:first').data('id'),\n                viewStateKey = $.inArray(elementId, this.state.collapsedElementIds);\n\n            if ($li.hasClass('collapsed')) {\n                $li.removeClass('collapsed');\n\n                if (viewStateKey !== -1) {\n                    this.state.collapsedElementIds.splice(viewStateKey, 1);\n                }\n            } else {\n                $li.addClass('collapsed');\n\n                if (viewStateKey === -1) {\n                    this.state.collapsedElementIds.push(elementId);\n                }\n            }\n\n            if (this.settings.storageKey) {\n                Craft.setLocalStorage(this.settings.storageKey, this.state);\n            }\n        });\n    },\n\n    initNewChildMenus: function($addBtns) {\n        this.addListener($addBtns, 'click', 'onNewChildMenuClick');\n    },\n\n    onNewChildMenuClick: function(ev) {\n        var $btn = $(ev.currentTarget);\n\n        if (!$btn.data('menubtn')) {\n            var elementId = $btn.parent().children('.element').data('id'),\n                newChildUrl = Craft.getUrl(this.settings.newChildUrl, 'parentId=' + elementId);\n\n            $('<div class=\"menu\"><ul><li><a href=\"' + newChildUrl + '\">' + Craft.t('app', 'New child') + '</a></li></ul></div>').insertAfter($btn);\n\n            var menuBtn = new Garnish.MenuBtn($btn);\n            menuBtn.showMenu();\n        }\n    },\n\n    getIndent: function(level) {\n        return Craft.Structure.baseIndent + (level - 1) * Craft.Structure.nestedIndent;\n    },\n\n    addElement: function($element) {\n        var $li = $('<li data-level=\"1\"/>').appendTo(this.$container),\n            $row = $('<div class=\"row\" style=\"margin-' + Craft.left + ': -' + Craft.Structure.baseIndent + 'px; padding-' + Craft.left + ': ' + Craft.Structure.baseIndent + 'px;\">').appendTo($li);\n\n        $row.append($element);\n\n        if (this.settings.sortable) {\n            $row.append('<a class=\"move icon\" title=\"' + Craft.t('app', 'Move') + '\"></a>');\n            this.structureDrag.addItems($li);\n        }\n\n        if (this.settings.newChildUrl) {\n            var $addBtn = $('<a class=\"add icon\" title=\"' + Craft.t('app', 'New child') + '\"></a>').appendTo($row);\n            this.initNewChildMenus($addBtn);\n        }\n\n        $row.css('margin-bottom', -30);\n        $row.velocity({'margin-bottom': 0}, 'fast');\n    },\n\n    removeElement: function($element) {\n        var $li = $element.parent().parent();\n\n        if (this.settings.sortable) {\n            this.structureDrag.removeItems($li);\n        }\n\n        var $parentUl;\n\n        if (!$li.siblings().length) {\n            $parentUl = $li.parent();\n        }\n\n        $li.css('visibility', 'hidden').velocity({marginBottom: -$li.height()}, 'fast', () => {\n            $li.remove();\n\n            if (typeof $parentUl !== 'undefined') {\n                this._removeUl($parentUl);\n            }\n        });\n    },\n\n    _removeUl: function($ul) {\n        $ul.siblings('.row').children('.toggle').remove();\n        $ul.remove();\n    }\n}, {\n    baseIndent: 8,\n    nestedIndent: 35,\n\n    defaults: {\n        storageKey: null,\n        sortable: false,\n        newChildUrl: null,\n        maxLevels: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Structure drag class\n */\nCraft.StructureDrag = Garnish.Drag.extend({\n    structure: null,\n    maxLevels: null,\n    draggeeLevel: null,\n\n    $helperLi: null,\n    $targets: null,\n    draggeeHeight: null,\n\n    init: function(structure, maxLevels) {\n        this.structure = structure;\n        this.maxLevels = maxLevels;\n\n        this.$insertion = $('<li class=\"draginsertion\"/>');\n\n        var $items = this.structure.$container.find('li');\n\n        this.base($items, {\n            handle: '.element:first, .move:first',\n            helper: this.getHelper.bind(this)\n        });\n    },\n\n    getHelper: function($helper) {\n        this.$helperLi = $helper;\n        var $ul = $('<ul class=\"structure draghelper\"/>').append($helper);\n        $helper.css('padding-' + Craft.left, this.$draggee.css('padding-' + Craft.left));\n        $helper.find('.move').removeAttr('title');\n        return $ul;\n    },\n\n    onDragStart: function() {\n        this.$targets = $();\n\n        // Recursively find each of the targets, in the order they appear to be in\n        this.findTargets(this.structure.$container);\n\n        // How deep does the rabbit hole go?\n        this.draggeeLevel = 0;\n        var $level = this.$draggee;\n        do {\n            this.draggeeLevel++;\n            $level = $level.find('> ul > li');\n        } while ($level.length);\n\n        // Collapse the draggee\n        this.draggeeHeight = this.$draggee.height();\n        this.$draggee.velocity({\n            height: 0\n        }, 'fast', () => {\n            this.$draggee.addClass('hidden');\n        });\n        this.base();\n\n        this.addListener(Garnish.$doc, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.ESC_KEY) {\n                this.cancelDrag();\n            }\n        });\n    },\n\n    findTargets: function($ul) {\n        var $lis = $ul.children().not(this.$draggee);\n\n        for (var i = 0; i < $lis.length; i++) {\n            var $li = $($lis[i]);\n            this.$targets = this.$targets.add($li.children('.row'));\n\n            if (!$li.hasClass('collapsed')) {\n                this.findTargets($li.children('ul'));\n            }\n        }\n    },\n\n    onDrag: function() {\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n            this.$insertion.remove();\n        }\n\n        // First let's find the closest target\n        this._.$closestTarget = null;\n        this._.closestTargetPos = null;\n        this._.closestTargetYDiff = null;\n        this._.closestTargetOffset = null;\n        this._.closestTargetHeight = null;\n\n        for (this._.i = 0; this._.i < this.$targets.length; this._.i++) {\n            this._.$target = $(this.$targets[this._.i]);\n            this._.targetOffset = this._.$target.offset();\n            this._.targetHeight = this._.$target.outerHeight();\n            this._.targetYMidpoint = this._.targetOffset.top + (this._.targetHeight / 2);\n            this._.targetYDiff = Math.abs(this.mouseY - this._.targetYMidpoint);\n\n            if (this._.i === 0 || (this.mouseY >= this._.targetOffset.top + 5 && this._.targetYDiff < this._.closestTargetYDiff)) {\n                this._.$closestTarget = this._.$target;\n                this._.closestTargetPos = this._.i;\n                this._.closestTargetYDiff = this._.targetYDiff;\n                this._.closestTargetOffset = this._.targetOffset;\n                this._.closestTargetHeight = this._.targetHeight;\n            } else {\n                // Getting colder\n                break;\n            }\n        }\n\n        if (!this._.$closestTarget) {\n            return;\n        }\n\n        // Are we hovering above the first row?\n        if (this._.closestTargetPos === 0 && this.mouseY < this._.closestTargetOffset.top + 5) {\n            this.$insertion.prependTo(this.structure.$container);\n        } else {\n            this._.$closestTargetLi = this._.$closestTarget.parent();\n            this._.closestTargetLevel = this._.$closestTargetLi.data('level');\n\n            // Is there a next row?\n            if (this._.closestTargetPos < this.$targets.length - 1) {\n                this._.$nextTargetLi = $(this.$targets[this._.closestTargetPos + 1]).parent();\n                this._.nextTargetLevel = this._.$nextTargetLi.data('level');\n            } else {\n                this._.$nextTargetLi = null;\n                this._.nextTargetLevel = null;\n            }\n\n            // Are we hovering between this row and the next one?\n            this._.hoveringBetweenRows = (this.mouseY >= this._.closestTargetOffset.top + this._.closestTargetHeight - 5);\n\n            /**\n             * Scenario 1: Both rows have the same level.\n             *\n             *     * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            if (this._.$nextTargetLi && this._.nextTargetLevel == this._.closestTargetLevel) {\n                if (this._.hoveringBetweenRows) {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel - 1)) {\n                        // Position the insertion after the closest target\n                        this.$insertion.insertAfter(this._.$closestTargetLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n\n            /**\n             * Scenario 2: Next row is a child of this one.\n             *\n             *     * Row 1\n             *     ----------------------\n             *         * Row 2\n             */\n\n            else if (this._.$nextTargetLi && this._.nextTargetLevel > this._.closestTargetLevel) {\n                if (!this.maxLevels || this.maxLevels >= (this._.nextTargetLevel + this.draggeeLevel - 1)) {\n                    if (this._.hoveringBetweenRows) {\n                        // Position the insertion as the first child of the closest target\n                        this.$insertion.insertBefore(this._.$nextTargetLi);\n                    } else {\n                        this._.$closestTarget.addClass('draghover');\n                        this.$insertion.appendTo(this._.$closestTargetLi.children('ul'));\n                    }\n                }\n            }\n\n            /**\n             * Scenario 3: Next row is a child of a parent node, or there is no next row.\n             *\n             *         * Row 1\n             *     ----------------------\n             *     * Row 2\n             */\n\n            else {\n                if (this._.hoveringBetweenRows) {\n                    // Determine which <li> to position the insertion after\n                    this._.draggeeX = this.mouseX - this.targetItemMouseDiffX;\n\n                    if (Craft.orientation === 'rtl') {\n                        this._.draggeeX += this.$helperLi.width();\n                    }\n\n                    this._.$parentLis = this._.$closestTarget.parentsUntil(this.structure.$container, 'li');\n                    this._.$closestParentLi = null;\n                    this._.closestParentLiXDiff = null;\n                    this._.closestParentLevel = null;\n\n                    for (this._.i = 0; this._.i < this._.$parentLis.length; this._.i++) {\n                        this._.$parentLi = $(this._.$parentLis[this._.i]);\n                        this._.parentLiX = this._.$parentLi.offset().left;\n\n                        if (Craft.orientation === 'rtl') {\n                            this._.parentLiX += this._.$parentLi.width();\n                        }\n\n                        this._.parentLiXDiff = Math.abs(this._.parentLiX - this._.draggeeX);\n                        this._.parentLevel = this._.$parentLi.data('level');\n\n                        if ((!this.maxLevels || this.maxLevels >= (this._.parentLevel + this.draggeeLevel - 1)) && (\n                            !this._.$closestParentLi || (\n                                this._.parentLiXDiff < this._.closestParentLiXDiff &&\n                                (!this._.$nextTargetLi || this._.parentLevel >= this._.nextTargetLevel)\n                            )\n                        )) {\n                            this._.$closestParentLi = this._.$parentLi;\n                            this._.closestParentLiXDiff = this._.parentLiXDiff;\n                            this._.closestParentLevel = this._.parentLevel;\n                        }\n                    }\n\n                    if (this._.$closestParentLi) {\n                        this.$insertion.insertAfter(this._.$closestParentLi);\n                    }\n                } else {\n                    if (!this.maxLevels || this.maxLevels >= (this._.closestTargetLevel + this.draggeeLevel)) {\n                        this._.$closestTarget.addClass('draghover');\n                    }\n                }\n            }\n        }\n    },\n\n    cancelDrag: function() {\n        this.$insertion.remove();\n\n        if (this._.$closestTarget) {\n            this._.$closestTarget.removeClass('draghover');\n        }\n\n        this.onMouseUp();\n    },\n\n    onDragStop: function() {\n        // Are we repositioning the draggee?\n        if (this._.$closestTarget && (this.$insertion.parent().length || this._.$closestTarget.hasClass('draghover'))) {\n            var $draggeeParent,\n                moved;\n\n            // Are we about to leave the draggee's original parent childless?\n            if (!this.$draggee.siblings().length) {\n                $draggeeParent = this.$draggee.parent();\n            }\n\n            if (this.$insertion.parent().length) {\n                // Make sure the insertion isn't right next to the draggee\n                var $closestSiblings = this.$insertion.next().add(this.$insertion.prev());\n\n                if ($.inArray(this.$draggee[0], $closestSiblings) === -1) {\n                    this.$insertion.replaceWith(this.$draggee);\n                    moved = true;\n                } else {\n                    this.$insertion.remove();\n                    moved = false;\n                }\n            } else {\n                var $ul = this._.$closestTargetLi.children('ul');\n\n                // Make sure this is a different parent than the draggee's\n                if (!$draggeeParent || !$ul.length || $ul[0] !== $draggeeParent[0]) {\n                    if (!$ul.length) {\n                        var $toggle = $('<div class=\"toggle\" title=\"' + Craft.t('app', 'Show/hide children') + '\"/>').prependTo(this._.$closestTarget);\n                        this.structure.initToggle($toggle);\n\n                        $ul = $('<ul>').appendTo(this._.$closestTargetLi);\n                    } else if (this._.$closestTargetLi.hasClass('collapsed')) {\n                        this._.$closestTarget.children('.toggle').trigger('click');\n                    }\n\n                    this.$draggee.appendTo($ul);\n                    moved = true;\n                } else {\n                    moved = false;\n                }\n            }\n\n            // Remove the class either way\n            this._.$closestTarget.removeClass('draghover');\n\n            if (moved) {\n                // Now deal with the now-childless parent\n                if ($draggeeParent) {\n                    this.structure._removeUl($draggeeParent);\n                }\n\n                // Has the level changed?\n                var newLevel = this.$draggee.parentsUntil(this.structure.$container, 'li').length + 1;\n\n                var animateCss;\n\n                if (newLevel != this.$draggee.data('level')) {\n                    // Correct the helper's padding if moving to/from level 1\n                    if (this.$draggee.data('level') == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = 38;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    } else if (newLevel == 1) {\n                        animateCss = {};\n                        animateCss['padding-' + Craft.left] = Craft.Structure.baseIndent;\n                        this.$helperLi.velocity(animateCss, 'fast');\n                    }\n\n                    this.setLevel(this.$draggee, newLevel);\n                }\n\n                // Make it real\n                var $element = this.$draggee.children('.row').children('.element');\n\n                var data = {\n                    structureId: this.structure.id,\n                    elementId: $element.data('id'),\n                    siteId: $element.data('site-id'),\n                    prevId: this.$draggee.prev().children('.row').children('.element').data('id'),\n                    parentId: this.$draggee.parent('ul').parent('li').children('.row').children('.element').data('id')\n                };\n\n                Craft.postActionRequest('structures/move-element', data, function(response, textStatus) {\n                    if (textStatus === 'success') {\n                        Craft.cp.displayNotice(Craft.t('app', 'New order saved.'));\n                    }\n                });\n            }\n        }\n\n        // Animate things back into place\n        this.$draggee.velocity('stop').removeClass('hidden').velocity({\n            height: this.draggeeHeight\n        }, 'fast', () => {\n            this.$draggee.css('height', 'auto');\n        });\n\n        this.returnHelpersToDraggees();\n\n        this.base();\n    },\n\n    setLevel: function($li, level) {\n        $li.data('level', level);\n\n        var indent = this.structure.getIndent(level);\n\n        var css = {};\n        css['margin-' + Craft.left] = '-' + indent + 'px';\n        css['padding-' + Craft.left] = indent + 'px';\n        this.$draggee.children('.row').css(css);\n\n        var $childLis = $li.children('ul').children();\n\n        for (var i = 0; i < $childLis.length; i++) {\n            this.setLevel($($childLis[i]), level + 1);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.StructureTableSorter = Garnish.DragSort.extend({\n    tableView: null,\n    structureId: null,\n    maxLevels: null,\n\n    _basePadding: null,\n    _helperMargin: null,\n\n    _$firstRowCells: null,\n    _$titleHelperCell: null,\n\n    _titleHelperCellOuterWidth: null,\n\n    _ancestors: null,\n    _updateAncestorsFrame: null,\n\n    _draggeeLevel: null,\n    _draggeeLevelDelta: null,\n    draggingLastElements: null,\n    _loadingDraggeeLevelDelta: false,\n\n    _targetLevel: null,\n    _targetLevelBounds: null,\n\n    _positionChanged: null,\n\n    /**\n     * Constructor\n     */\n    init: function(tableView, $elements, settings) {\n        this.tableView = tableView;\n        this.structureId = this.tableView.$table.data('structure-id');\n        this.maxLevels = parseInt(this.tableView.$table.attr('data-max-levels'));\n\n        this._basePadding = 14 + (this.tableView.elementIndex.actions ? 14 : 24); // see _elements/tableview/elements.html\n        this._helperMargin = this.tableView.elementIndex.actions ? 54 : 0;\n\n        settings = $.extend({}, Craft.StructureTableSorter.defaults, settings, {\n            handle: '.move',\n            collapseDraggees: true,\n            singleHelper: true,\n            helperSpacingY: 2,\n            magnetStrength: 4,\n            helper: this.getHelper.bind(this),\n            helperLagBase: 1.5,\n            axis: Garnish.Y_AXIS\n        });\n\n        this.base($elements, settings);\n    },\n\n    /**\n     * Returns the draggee rows (including any descendent rows).\n     */\n    findDraggee: function() {\n        this._draggeeLevel = this._targetLevel = this.$targetItem.data('level');\n        this._draggeeLevelDelta = 0;\n\n        var $draggee = $(this.$targetItem),\n            $nextRow = this.$targetItem.next();\n\n        while ($nextRow.length) {\n            // See if this row is a descendant of the draggee\n            var nextRowLevel = $nextRow.data('level');\n\n            if (nextRowLevel <= this._draggeeLevel) {\n                break;\n            }\n\n            // Is this the deepest descendant we've seen so far?\n            var nextRowLevelDelta = nextRowLevel - this._draggeeLevel;\n\n            if (nextRowLevelDelta > this._draggeeLevelDelta) {\n                this._draggeeLevelDelta = nextRowLevelDelta;\n            }\n\n            // Add it and prep the next row\n            $draggee = $draggee.add($nextRow);\n            $nextRow = $nextRow.next();\n        }\n\n        // Are we dragging the last elements on the page?\n        this.draggingLastElements = !$nextRow.length;\n\n        // Do we have a maxLevels to enforce,\n        // and does it look like this draggee has descendants we don't know about yet?\n        if (\n            this.maxLevels &&\n            this.draggingLastElements &&\n            this.tableView.getMorePending()\n        ) {\n            // Only way to know the true descendant level delta is to ask PHP\n            this._loadingDraggeeLevelDelta = true;\n\n            var data = this._getAjaxBaseData(this.$targetItem);\n\n            Craft.postActionRequest('structures/get-element-level-delta', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    this._loadingDraggeeLevelDelta = false;\n\n                    if (this.dragging) {\n                        this._draggeeLevelDelta = response.delta;\n                        this.drag(false);\n                    }\n                }\n            });\n        }\n\n        return $draggee;\n    },\n\n    /**\n     * Returns the drag helper.\n     */\n    getHelper: function($helperRow) {\n        var $outerContainer = $('<div class=\"elements datatablesorthelper\"/>').appendTo(Garnish.$bod),\n            $innerContainer = $('<div class=\"tableview\"/>').appendTo($outerContainer),\n            $table = $('<table class=\"data\"/>').appendTo($innerContainer),\n            $tbody = $('<tbody/>').appendTo($table);\n\n        $helperRow.appendTo($tbody);\n\n        // Copy the column widths\n        this._$firstRowCells = this.tableView.$elementContainer.children('tr:first').children();\n        var $helperCells = $helperRow.children();\n\n        for (var i = 0; i < $helperCells.length; i++) {\n            var $helperCell = $($helperCells[i]);\n\n            // Skip the checkbox cell\n            if ($helperCell.hasClass('checkbox-cell')) {\n                $helperCell.remove();\n                continue;\n            }\n\n            // Hard-set the cell widths\n            var $firstRowCell = $(this._$firstRowCells[i]);\n            var width = $firstRowCell[0].getBoundingClientRect().width;\n\n            $firstRowCell.css('width', width + 'px');\n            $helperCell.css('width', width + 'px');\n\n            // Is this the title cell?\n            if (Garnish.hasAttr($firstRowCell, 'data-titlecell')) {\n                this._$titleHelperCell = $helperCell;\n\n                var padding = parseInt($firstRowCell.css('padding-' + Craft.left));\n                this._titleHelperCellOuterWidth = width;\n\n                $helperCell.css('padding-' + Craft.left, this._basePadding);\n            }\n        }\n\n        return $outerContainer;\n    },\n\n    /**\n     * Returns whether the draggee can be inserted before a given item.\n     */\n    canInsertBefore: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item.prev(), $item) !== false);\n    },\n\n    /**\n     * Returns whether the draggee can be inserted after a given item.\n     */\n    canInsertAfter: function($item) {\n        if (this._loadingDraggeeLevelDelta) {\n            return false;\n        }\n\n        return (this._getLevelBounds($item, $item.next()) !== false);\n    },\n\n    // Events\n    // -------------------------------------------------------------------------\n\n    /**\n     * On Drag Start\n     */\n    onDragStart: function() {\n        // Get the initial set of ancestors, before the item gets moved\n        this._ancestors = this._getAncestors(this.$targetItem, this.$targetItem.data('level'));\n\n        // Set the initial target level bounds\n        this._setTargetLevelBounds();\n\n        // Check to see if we should load more elements now\n        this.tableView.maybeLoadMore();\n\n        this.base();\n    },\n\n    /**\n     * On Drag\n     */\n    onDrag: function() {\n        this.base();\n        this._updateIndent();\n    },\n\n    /**\n     * On Insertion Point Change\n     */\n    onInsertionPointChange: function() {\n        this._setTargetLevelBounds();\n        this._updateAncestorsBeforeRepaint();\n        this.base();\n    },\n\n    /**\n     * On Drag Stop\n     */\n    onDragStop: function() {\n        this._positionChanged = false;\n        this.base();\n\n        // Update the draggee's padding if the position just changed\n        // ---------------------------------------------------------------------\n\n        if (this._targetLevel != this._draggeeLevel) {\n            var levelDiff = this._targetLevel - this._draggeeLevel;\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                var $draggee = $(this.$draggee[i]),\n                    oldLevel = $draggee.data('level'),\n                    newLevel = oldLevel + levelDiff,\n                    padding = this._basePadding + this._getLevelIndent(newLevel);\n\n                $draggee.data('level', newLevel);\n                $draggee.find('.element').data('level', newLevel);\n                $draggee.children('[data-titlecell]:first').css('padding-' + Craft.left, padding);\n            }\n\n            this._positionChanged = true;\n        }\n\n        // Keep in mind this could have also been set by onSortChange()\n        if (this._positionChanged) {\n            // Tell the server about the new position\n            // -----------------------------------------------------------------\n\n            var data = this._getAjaxBaseData(this.$draggee);\n\n            // Find the previous sibling/parent, if there is one\n            var $prevRow = this.$draggee.first().prev();\n\n            while ($prevRow.length) {\n                var prevRowLevel = $prevRow.data('level');\n\n                if (prevRowLevel == this._targetLevel) {\n                    data.prevId = $prevRow.data('id');\n                    break;\n                }\n\n                if (prevRowLevel < this._targetLevel) {\n                    data.parentId = $prevRow.data('id');\n\n                    // Is this row collapsed?\n                    var $toggle = $prevRow.find('> th > .toggle');\n\n                    if (!$toggle.hasClass('expanded')) {\n                        // Make it look expanded\n                        $toggle.addClass('expanded');\n\n                        // Add a temporary row\n                        var $spinnerRow = this.tableView._createSpinnerRowAfter($prevRow);\n\n                        // Remove the target item\n                        if (this.tableView.elementSelect) {\n                            this.tableView.elementSelect.removeItems(this.$targetItem);\n                        }\n\n                        this.removeItems(this.$targetItem);\n                        this.$targetItem.remove();\n                        this.tableView._totalVisible--;\n                    }\n\n                    break;\n                }\n\n                $prevRow = $prevRow.prev();\n            }\n\n            Craft.postActionRequest('structures/move-element', data, (response, textStatus) => {\n                if (textStatus === 'success') {\n                    if (!response.success) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                        this.tableView.elementIndex.updateElements();\n                        return;\n                    }\n                    Craft.cp.displayNotice(Craft.t('app', 'New position saved.'));\n                    this.onPositionChange();\n\n                    // Were we waiting on this to complete so we can expand the new parent?\n                    if ($spinnerRow && $spinnerRow.parent().length) {\n                        $spinnerRow.remove();\n                        this.tableView._expandElement($toggle, true);\n                    }\n\n                    // See if we should run any pending tasks\n                    Craft.cp.runQueue();\n                }\n            });\n        }\n    },\n\n    onSortChange: function() {\n        if (this.tableView.elementSelect) {\n            this.tableView.elementSelect.resetItemOrder();\n        }\n\n        this._positionChanged = true;\n        this.base();\n    },\n\n    onPositionChange: function() {\n        Garnish.requestAnimationFrame(() => {\n            this.trigger('positionChange');\n            this.settings.onPositionChange();\n        });\n    },\n\n    onReturnHelpersToDraggees: function() {\n        this._$firstRowCells.css('width', '');\n\n        // If we were dragging the last elements on the page and ended up loading any additional elements in,\n        // there could be a gap between the last draggee item and whatever now comes after it.\n        // So remove the post-draggee elements and possibly load up the next batch.\n        if (this.draggingLastElements && this.tableView.getMorePending()) {\n            // Update the element index's record of how many items are actually visible\n            this.tableView._totalVisible += (this.newDraggeeIndexes[0] - this.oldDraggeeIndexes[0]);\n\n            var $postDraggeeItems = this.$draggee.last().nextAll();\n\n            if ($postDraggeeItems.length) {\n                this.removeItems($postDraggeeItems);\n                $postDraggeeItems.remove();\n                this.tableView.maybeLoadMore();\n            }\n        }\n\n        this.base();\n    },\n\n    /**\n     * Returns the min and max levels that the draggee could occupy between\n     * two given rows, or false if it’s not going to work out.\n     */\n    _getLevelBounds: function($prevRow, $nextRow) {\n        // Can't go any lower than the next row, if there is one\n        if ($nextRow && $nextRow.length) {\n            this._getLevelBounds._minLevel = $nextRow.data('level');\n        } else {\n            this._getLevelBounds._minLevel = 1;\n        }\n\n        // Can't go any higher than the previous row + 1\n        if ($prevRow && $prevRow.length) {\n            this._getLevelBounds._maxLevel = $prevRow.data('level') + 1;\n        } else {\n            this._getLevelBounds._maxLevel = 1;\n        }\n\n        // Does this structure have a max level?\n        if (this.maxLevels) {\n            // Make sure it's going to fit at all here\n            if (\n                this._getLevelBounds._minLevel != 1 &&\n                this._getLevelBounds._minLevel + this._draggeeLevelDelta > this.maxLevels\n            ) {\n                return false;\n            }\n\n            // Limit the max level if we have to\n            if (this._getLevelBounds._maxLevel + this._draggeeLevelDelta > this.maxLevels) {\n                this._getLevelBounds._maxLevel = this.maxLevels - this._draggeeLevelDelta;\n\n                if (this._getLevelBounds._maxLevel < this._getLevelBounds._minLevel) {\n                    this._getLevelBounds._maxLevel = this._getLevelBounds._minLevel;\n                }\n            }\n        }\n\n        return {\n            min: this._getLevelBounds._minLevel,\n            max: this._getLevelBounds._maxLevel\n        };\n    },\n\n    /**\n     * Determines the min and max possible levels at the current draggee's position.\n     */\n    _setTargetLevelBounds: function() {\n        this._targetLevelBounds = this._getLevelBounds(\n            this.$draggee.first().prev(),\n            this.$draggee.last().next()\n        );\n    },\n\n    /**\n     * Determines the target level based on the current mouse position.\n     */\n    _updateIndent: function(forcePositionChange) {\n        // Figure out the target level\n        // ---------------------------------------------------------------------\n\n        // How far has the cursor moved?\n        this._updateIndent._mouseDist = this.realMouseX - this.mousedownX;\n\n        // Flip that if this is RTL\n        if (Craft.orientation === 'rtl') {\n            this._updateIndent._mouseDist *= -1;\n        }\n\n        // What is that in indentation levels?\n        this._updateIndent._indentationDist = Math.round(this._updateIndent._mouseDist / Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // Combine with the original level to get the new target level\n        this._updateIndent._targetLevel = this._draggeeLevel + this._updateIndent._indentationDist;\n\n        // Contain it within our min/max levels\n        if (this._updateIndent._targetLevel < this._targetLevelBounds.min) {\n            this._updateIndent._indentationDist += (this._targetLevelBounds.min - this._updateIndent._targetLevel);\n            this._updateIndent._targetLevel = this._targetLevelBounds.min;\n        } else if (this._updateIndent._targetLevel > this._targetLevelBounds.max) {\n            this._updateIndent._indentationDist -= (this._updateIndent._targetLevel - this._targetLevelBounds.max);\n            this._updateIndent._targetLevel = this._targetLevelBounds.max;\n        }\n\n        // Has the target level changed?\n        if (this._targetLevel !== (this._targetLevel = this._updateIndent._targetLevel)) {\n            // Target level is changing, so update the ancestors\n            this._updateAncestorsBeforeRepaint();\n        }\n\n        // Update the UI\n        // ---------------------------------------------------------------------\n\n        // How far away is the cursor from the exact target level distance?\n        this._updateIndent._targetLevelMouseDiff = this._updateIndent._mouseDist - (this._updateIndent._indentationDist * Craft.StructureTableSorter.LEVEL_INDENT);\n\n        // What's the magnet impact of that?\n        this._updateIndent._magnetImpact = Math.round(this._updateIndent._targetLevelMouseDiff / 15);\n\n        // Put it on a leash\n        if (Math.abs(this._updateIndent._magnetImpact) > Craft.StructureTableSorter.MAX_GIVE) {\n            this._updateIndent._magnetImpact = (this._updateIndent._magnetImpact > 0 ? 1 : -1) * Craft.StructureTableSorter.MAX_GIVE;\n        }\n\n        // Apply the new margin/width\n        this._updateIndent._closestLevelMagnetIndent = this._getLevelIndent(this._targetLevel) + this._updateIndent._magnetImpact;\n        this.helpers[0].css('margin-' + Craft.left, this._updateIndent._closestLevelMagnetIndent + this._helperMargin);\n        this._$titleHelperCell.css('width', this._titleHelperCellOuterWidth - this._updateIndent._closestLevelMagnetIndent);\n    },\n\n    /**\n     * Returns the indent size for a given level\n     */\n    _getLevelIndent: function(level) {\n        return (level - 1) * Craft.StructureTableSorter.LEVEL_INDENT;\n    },\n\n    /**\n     * Returns the base data that should be sent with StructureController Ajax requests.\n     */\n    _getAjaxBaseData: function($row) {\n        return {\n            structureId: this.structureId,\n            elementId: $row.data('id'),\n            siteId: $row.find('.element:first').data('site-id')\n        };\n    },\n\n    /**\n     * Returns a row's ancestor rows\n     */\n    _getAncestors: function($row, targetLevel) {\n        this._getAncestors._ancestors = [];\n\n        if (targetLevel != 0) {\n            this._getAncestors._level = targetLevel;\n            this._getAncestors._$prevRow = $row.prev();\n\n            while (this._getAncestors._$prevRow.length) {\n                if (this._getAncestors._$prevRow.data('level') < this._getAncestors._level) {\n                    this._getAncestors._ancestors.unshift(this._getAncestors._$prevRow);\n                    this._getAncestors._level = this._getAncestors._$prevRow.data('level');\n\n                    // Did we just reach the top?\n                    if (this._getAncestors._level == 0) {\n                        break;\n                    }\n                }\n\n                this._getAncestors._$prevRow = this._getAncestors._$prevRow.prev();\n            }\n        }\n\n        return this._getAncestors._ancestors;\n    },\n\n    /**\n     * Prepares to have the ancestors updated before the screen is repainted.\n     */\n    _updateAncestorsBeforeRepaint: function() {\n        if (this._updateAncestorsFrame) {\n            Garnish.cancelAnimationFrame(this._updateAncestorsFrame);\n        }\n\n        this._updateAncestorsFrame = Garnish.requestAnimationFrame(this._updateAncestors.bind(this));\n    },\n\n    _updateAncestors: function() {\n        this._updateAncestorsFrame = null;\n\n        // Update the old ancestors\n        // -----------------------------------------------------------------\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._ancestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._ancestors[this._updateAncestors._i];\n\n            // One less descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') - 1);\n\n            // Is it now childless?\n            if (this._updateAncestors._$ancestor.data('descendants') == 0) {\n                // Remove its toggle\n                this._updateAncestors._$ancestor.find('> th > .toggle:first').remove();\n            }\n        }\n\n        // Update the new ancestors\n        // -----------------------------------------------------------------\n\n        this._updateAncestors._newAncestors = this._getAncestors(this.$targetItem, this._targetLevel);\n\n        for (this._updateAncestors._i = 0; this._updateAncestors._i < this._updateAncestors._newAncestors.length; this._updateAncestors._i++) {\n            this._updateAncestors._$ancestor = this._updateAncestors._newAncestors[this._updateAncestors._i];\n\n            // One more descendant now\n            this._updateAncestors._$ancestor.data('descendants', this._updateAncestors._$ancestor.data('descendants') + 1);\n\n            // Is this its first child?\n            if (this._updateAncestors._$ancestor.data('descendants') == 1) {\n                // Create its toggle\n                $('<span class=\"toggle expanded\" title=\"' + Craft.t('app', 'Show/hide children') + '\"></span>')\n                    .insertAfter(this._updateAncestors._$ancestor.find('> th .move:first'));\n            }\n        }\n\n        this._ancestors = this._updateAncestors._newAncestors;\n\n        delete this._updateAncestors._i;\n        delete this._updateAncestors._$ancestor;\n        delete this._updateAncestors._newAncestors;\n    }\n}, {\n    HELPER_MARGIN: 0,\n    LEVEL_INDENT: 44,\n    MAX_GIVE: 22,\n\n    defaults: {\n        onPositionChange: $.noop\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Table Element Index View\n */\nCraft.TableElementIndexView = Craft.BaseElementIndexView.extend({\n    $table: null,\n    $selectedSortHeader: null,\n\n    structureTableSort: null,\n\n    _totalVisiblePostStructureTableDraggee: null,\n    _morePendingPostStructureTableDraggee: false,\n\n    getElementContainer: function() {\n        // Save a reference to the table\n        this.$table = this.$container.find('table:first');\n        return this.$table.children('tbody:first');\n    },\n\n    afterInit: function() {\n        // Set the sort header\n        this.initTableHeaders();\n\n        // Create the Structure Table Sorter\n        if (\n            this.elementIndex.settings.context === 'index' &&\n            this.elementIndex.getSelectedSortAttribute() === 'structure' &&\n            Garnish.hasAttr(this.$table, 'data-structure-id')\n        ) {\n            this.structureTableSort = new Craft.StructureTableSorter(this, this.getAllElements());\n        } else {\n            this.structureTableSort = null;\n        }\n\n        // Handle expand/collapse toggles for Structures\n        if (this.elementIndex.getSelectedSortAttribute() === 'structure') {\n            this.addListener(this.$elementContainer, 'click', function(ev) {\n                var $target = $(ev.target);\n\n                if ($target.hasClass('toggle')) {\n                    if (this._collapseElement($target) === false) {\n                        this._expandElement($target);\n                    }\n                }\n            });\n        }\n    },\n\n    initTableHeaders: function() {\n        var selectedSortAttr = this.elementIndex.getSelectedSortAttribute(),\n            $tableHeaders = this.$table.children('thead').children().children('[data-attribute]');\n\n        for (var i = 0; i < $tableHeaders.length; i++) {\n            var $header = $tableHeaders.eq(i),\n                attr = $header.attr('data-attribute');\n\n            // Is this the selected sort attribute?\n            if (attr === selectedSortAttr) {\n                this.$selectedSortHeader = $header;\n                var selectedSortDir = this.elementIndex.getSelectedSortDirection();\n\n                $header\n                    .addClass('ordered ' + selectedSortDir)\n                    .on('click', this._handleSelectedSortHeaderClick.bind(this));\n            } else {\n                // Is this attribute sortable?\n                var $sortAttribute = this.elementIndex.getSortAttributeOption(attr);\n\n                if ($sortAttribute.length) {\n                    $header\n                        .addClass('orderable')\n                        .on('click', this._handleUnselectedSortHeaderClick.bind(this));\n                }\n            }\n        }\n    },\n\n    isVerticalList: function() {\n        return true;\n    },\n\n    getTotalVisible: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._totalVisiblePostStructureTableDraggee;\n        } else {\n            return this._totalVisible;\n        }\n    },\n\n    setTotalVisible: function(totalVisible) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._totalVisiblePostStructureTableDraggee = totalVisible;\n        } else {\n            this._totalVisible = totalVisible;\n        }\n    },\n\n    getMorePending: function() {\n        if (this._isStructureTableDraggingLastElements()) {\n            return this._morePendingPostStructureTableDraggee;\n        } else {\n            return this._morePending;\n        }\n    },\n\n    setMorePending: function(morePending) {\n        if (this._isStructureTableDraggingLastElements()) {\n            this._morePendingPostStructureTableDraggee = morePending;\n        } else {\n            this._morePending = this._morePendingPostStructureTableDraggee = morePending;\n        }\n    },\n\n    getLoadMoreParams: function() {\n        var params = this.base();\n\n        // If we are dragging the last elements on the page,\n        // tell the controller to only load elements positioned after the draggee.\n        if (this._isStructureTableDraggingLastElements()) {\n            params.criteria.positionedAfter = this.structureTableSort.$targetItem.data('id');\n        }\n\n        return params;\n    },\n\n    appendElements: function($newElements) {\n        this.base($newElements);\n\n        if (this.structureTableSort) {\n            this.structureTableSort.addItems($newElements);\n        }\n\n        Craft.cp.updateResponsiveTables();\n    },\n\n    createElementEditor: function($element) {\n        Craft.createElementEditor($element.data('type'), $element, {\n            params: {\n                includeTableAttributesForSource: this.elementIndex.sourceKey\n            },\n            onSaveElement: response => {\n                if (response.tableAttributes) {\n                    this._updateTableAttributes($element, response.tableAttributes);\n                }\n            },\n            elementIndex: this.elementIndex\n        });\n    },\n\n    _collapseElement: function($toggle, force) {\n        if (!force && !$toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.removeClass('expanded');\n\n        // Find and remove the descendant rows\n        var $row = $toggle.parent().parent(),\n            id = $row.data('id'),\n            level = $row.data('level'),\n            $nextRow = $row.next();\n\n        while ($nextRow.length) {\n            if (!Garnish.hasAttr($nextRow, 'data-spinnerrow')) {\n                if ($nextRow.data('level') <= level) {\n                    break;\n                }\n\n                if (this.elementSelect) {\n                    this.elementSelect.removeItems($nextRow);\n                }\n\n                if (this.structureTableSort) {\n                    this.structureTableSort.removeItems($nextRow);\n                }\n\n                this._totalVisible--;\n            }\n\n            var $nextNextRow = $nextRow.next();\n            $nextRow.remove();\n            $nextRow = $nextNextRow;\n        }\n\n        // Remember that this row should be collapsed\n        if (!this.elementIndex.instanceState.collapsedElementIds) {\n            this.elementIndex.instanceState.collapsedElementIds = [];\n        }\n\n        this.elementIndex.instanceState.collapsedElementIds.push(id);\n        this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n        // Bottom of the index might be viewable now\n        this.maybeLoadMore();\n    },\n\n    _expandElement: function($toggle, force) {\n        if (!force && $toggle.hasClass('expanded')) {\n            return false;\n        }\n\n        $toggle.addClass('expanded');\n\n        // Remove this element from our list of collapsed elements\n        if (this.elementIndex.instanceState.collapsedElementIds) {\n            var $row = $toggle.parent().parent(),\n                id = $row.data('id'),\n                index = $.inArray(id, this.elementIndex.instanceState.collapsedElementIds);\n\n            if (index !== -1) {\n                this.elementIndex.instanceState.collapsedElementIds.splice(index, 1);\n                this.elementIndex.setInstanceState('collapsedElementIds', this.elementIndex.instanceState.collapsedElementIds);\n\n                // Add a temporary row\n                var $spinnerRow = this._createSpinnerRowAfter($row);\n\n                // Load the nested elements\n                let data = $.extend(true, {}, this.settings.params);\n                data.criteria.descendantOf = id;\n\n                Craft.sendActionRequest('POST', this.settings.loadMoreElementsAction, {data}).then(response => {\n                    // Do we even care about this anymore?\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n\n                    let $newElements = $(response.data.html);\n\n                    // Are there more descendants we didn't get in this batch?\n                    let totalVisible = (this._totalVisible + $newElements.length);\n                    let morePending = (this.settings.batchSize && $newElements.length === this.settings.batchSize);\n\n                    if (morePending) {\n                        // Remove all the elements after it\n                        let $nextRows = $spinnerRow.nextAll();\n\n                        if (this.elementSelect) {\n                            this.elementSelect.removeItems($nextRows);\n                        }\n\n                        if (this.structureTableSort) {\n                            this.structureTableSort.removeItems($nextRows);\n                        }\n\n                        $nextRows.remove();\n                        totalVisible -= $nextRows.length;\n                    } else {\n                        // Maintain the current 'more' status\n                        morePending = this._morePending;\n                    }\n\n                    $spinnerRow.replaceWith($newElements);\n                    this.thumbLoader.load($newElements);\n\n                    if (this.elementIndex.actions || this.settings.selectable) {\n                        this.elementSelect.addItems($newElements.filter(':not(.disabled)'));\n                        this.elementIndex.updateActionTriggers();\n                    }\n\n                    if (this.structureTableSort) {\n                        this.structureTableSort.addItems($newElements);\n                    }\n\n                    Craft.appendHeadHtml(response.data.headHtml);\n                    Craft.appendFootHtml(response.data.footHtml);\n                    Craft.cp.updateResponsiveTables();\n\n                    this.setTotalVisible(totalVisible);\n                    this.setMorePending(morePending);\n\n                    // Is there room to load more right now?\n                    this.maybeLoadMore();\n                }).catch(e => {\n                    Craft.cp.displayError();\n                    if (!$spinnerRow.parent().length) {\n                        return;\n                    }\n                });\n            }\n        }\n    },\n\n    _createSpinnerRowAfter: function($row) {\n        return $(\n            '<tr data-spinnerrow>' +\n            '<td class=\"centeralign\" colspan=\"' + $row.children().length + '\">' +\n            '<div class=\"spinner\"/>' +\n            '</td>' +\n            '</tr>'\n        ).insertAfter($row);\n    },\n\n    _isStructureTableDraggingLastElements: function() {\n        return (\n            this.structureTableSort &&\n            this.structureTableSort.dragging &&\n            this.structureTableSort.draggingLastElements\n        );\n    },\n\n    _handleSelectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        // Reverse the sort direction\n        var selectedSortDir = this.elementIndex.getSelectedSortDirection(),\n            newSortDir = (selectedSortDir === 'asc' ? 'desc' : 'asc');\n\n        this.elementIndex.setSortDirection(newSortDir);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleUnselectedSortHeaderClick: function(ev) {\n        var $header = $(ev.currentTarget);\n\n        if ($header.hasClass('loading')) {\n            return;\n        }\n\n        var attr = $header.attr('data-attribute');\n\n        this.elementIndex.setSortAttribute(attr);\n        this._handleSortHeaderClick(ev, $header);\n    },\n\n    _handleSortHeaderClick: function(ev, $header) {\n        if (this.$selectedSortHeader) {\n            this.$selectedSortHeader.removeClass('ordered asc desc');\n        }\n\n        $header.removeClass('orderable').addClass('ordered loading');\n        this.elementIndex.storeSortAttributeAndDirection();\n        this.elementIndex.updateElements();\n\n        // No need for two spinners\n        this.elementIndex.setIndexAvailable();\n    },\n\n    _updateTableAttributes: function($element, tableAttributes) {\n        var $tr = $element.closest('tr');\n\n        for (var attr in tableAttributes) {\n            if (!tableAttributes.hasOwnProperty(attr)) {\n                continue;\n            }\n\n            $tr.children('[data-attr=\"' + attr + '\"]:first').html(tableAttributes[attr]);\n        }\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Tag select input\n */\nCraft.TagSelectInput = Craft.BaseElementSelectInput.extend({\n    searchTimeout: null,\n    searchMenu: null,\n\n    $container: null,\n    $elementsContainer: null,\n    $elements: null,\n    $addTagInput: null,\n    $spinner: null,\n\n    _ignoreBlur: false,\n\n    init: function(settings) {\n        // Normalize the settings\n        // ---------------------------------------------------------------------\n\n        // Are they still passing in a bunch of arguments?\n        if (!$.isPlainObject(settings)) {\n            // Loop through all of the old arguments and apply them to the settings\n            var normalizedSettings = {},\n                args = ['id', 'name', 'tagGroupId', 'sourceElementId'];\n\n            for (var i = 0; i < args.length; i++) {\n                if (typeof arguments[i] !== 'undefined') {\n                    normalizedSettings[args[i]] = arguments[i];\n                } else {\n                    break;\n                }\n            }\n\n            settings = normalizedSettings;\n        }\n\n        this.base($.extend({}, Craft.TagSelectInput.defaults, settings));\n\n        this.$addTagInput = this.$container.children('.add').children('.text');\n        this.$spinner = this.$addTagInput.next();\n\n        this.addListener(this.$addTagInput, 'input', () => {\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(this.searchForTags.bind(this), 500);\n        });\n\n        this.addListener(this.$addTagInput, 'keydown', function(ev) {\n            if (ev.keyCode === Garnish.RETURN_KEY) {\n                ev.preventDefault();\n            }\n\n            let $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        this.selectTag(this.searchMenu.$options.filter('.hover'));\n                    }\n                    return;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $nextOption = $hoverOption.parent().nextAll().find('a:not(.disabled)').first();\n                            if ($nextOption.length) {\n                                this.focusOption($nextOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(0));\n                        }\n                    }\n                    return;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n                    if (this.searchMenu) {\n                        let $hoverOption = this.searchMenu.$options.filter('.hover');\n                        if ($hoverOption.length) {\n                            let $prevOption = $hoverOption.parent().prevAll().find('a:not(.disabled)').last();\n                            if ($prevOption.length) {\n                                this.focusOption($prevOption);\n                            }\n                        } else {\n                            this.focusOption(this.searchMenu.$options.eq(this.searchMenu.$options.length - 1));\n                        }\n                    }\n                    return;\n                }\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'focus', function() {\n            if (this.searchMenu) {\n                this.searchMenu.show();\n            }\n        });\n\n        this.addListener(this.$addTagInput, 'blur', function() {\n            if (this._ignoreBlur) {\n                this._ignoreBlur = false;\n                return;\n            }\n\n            setTimeout(() => {\n                if (this.searchMenu) {\n                    this.searchMenu.hide();\n                }\n            }, 1);\n        });\n    },\n\n    focusOption: function($option) {\n        this.searchMenu.$options.removeClass('hover');\n        $option.addClass('hover');\n        this.searchMenu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n    },\n\n    // No \"add\" button\n    getAddElementsBtn: $.noop,\n\n    getElementSortAxis: function() {\n        return null;\n    },\n\n    searchForTags: function() {\n        if (this.searchMenu) {\n            this.killSearchMenu();\n        }\n\n        var val = this.$addTagInput.val();\n\n        if (val) {\n            this.$spinner.removeClass('hidden');\n\n            var excludeIds = [];\n\n            for (var i = 0; i < this.$elements.length; i++) {\n                var id = $(this.$elements[i]).data('id');\n\n                if (id) {\n                    excludeIds.push(id);\n                }\n            }\n\n            if (this.settings.sourceElementId) {\n                excludeIds.push(this.settings.sourceElementId);\n            }\n\n            var data = {\n                search: this.$addTagInput.val(),\n                tagGroupId: this.settings.tagGroupId,\n                excludeIds: excludeIds\n            };\n\n            Craft.postActionRequest('tags/search-for-tags', data, (response, textStatus) => {\n                // Just in case\n                if (this.searchMenu) {\n                    this.killSearchMenu();\n                }\n\n                this.$spinner.addClass('hidden');\n\n                if (textStatus === 'success') {\n                    var $menu = $('<div class=\"menu tagmenu\"/>').appendTo(Garnish.$bod),\n                        $ul = $('<ul/>').appendTo($menu);\n\n                    var $li;\n\n                    for (var i = 0; i < response.tags.length; i++) {\n                        $li = $('<li/>')\n                            .appendTo($ul);\n\n                        $('<a data-icon=\"tag\"/>')\n                            .appendTo($li)\n                            .text(response.tags[i].title)\n                            .data('id', response.tags[i].id)\n                            .addClass(response.tags[i].exclude ? 'disabled' : '');\n                    }\n\n                    if (!response.exactMatch) {\n                        $li = $('<li/>').appendTo($ul);\n                        $('<a data-icon=\"plus\"/>').appendTo($li).text(data.search);\n                    }\n\n                    $ul.find('a:not(.disabled):first').addClass('hover');\n\n                    this.searchMenu = new Garnish.Menu($menu, {\n                        attachToElement: this.$addTagInput,\n                        onOptionSelect: this.selectTag.bind(this)\n                    });\n\n                    this.addListener($menu, 'mousedown', () => {\n                        this._ignoreBlur = true;\n                    });\n\n                    this.searchMenu.show();\n                }\n            });\n        } else {\n            this.$spinner.addClass('hidden');\n        }\n    },\n\n    selectTag: function(option) {\n        var $option = $(option);\n\n        if ($option.hasClass('disabled')) {\n            return;\n        }\n\n        var id = $option.data('id');\n        var title = $option.text();\n\n        var $element = $('<div/>', {\n            'class': 'element small removable',\n            'data-id': id,\n            'data-site-id': this.settings.targetSiteId,\n            'data-label': title,\n            'data-editable': '1'\n        }).appendTo(this.$elementsContainer);\n\n        var $input = $('<input/>', {\n            'type': 'hidden',\n            'name': this.settings.name + '[]',\n            'value': id\n        }).appendTo($element);\n\n        $('<a/>', {\n            'class': 'delete icon',\n            'title': Craft.t('app', 'Remove')\n        }).appendTo($element);\n\n        var $titleContainer = $('<div/>', {\n            'class': 'label'\n        }).appendTo($element);\n\n        $('<span/>', {\n            'class': 'title',\n            text: title\n        }).appendTo($titleContainer);\n\n        var margin = -($element.outerWidth() + 10);\n        this.$addTagInput.css('margin-' + Craft.left, margin + 'px');\n\n        var animateCss = {};\n        animateCss['margin-' + Craft.left] = 0;\n        this.$addTagInput.velocity(animateCss, 'fast');\n\n        this.$elements = this.$elements.add($element);\n\n        this.addElements($element);\n\n        this.killSearchMenu();\n        this.$addTagInput.val('');\n        this.$addTagInput.trigger('focus');\n\n        if (!id) {\n            // We need to create the tag first\n            $element.addClass('loading disabled');\n\n            var data = {\n                groupId: this.settings.tagGroupId,\n                title: title\n            };\n\n            Craft.postActionRequest('tags/create-tag', data, (response, textStatus) => {\n                if (textStatus === 'success' && response.success) {\n                    $element.attr('data-id', response.id);\n                    $input.val(response.id);\n\n                    $element.removeClass('loading disabled');\n                } else {\n                    this.removeElement($element);\n\n                    if (textStatus === 'success') {\n                        // Some sort of validation error that still resulted in  a 200 response. Shouldn't be possible though.\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                }\n            });\n        }\n    },\n\n    killSearchMenu: function() {\n        this.searchMenu.hide();\n        this.searchMenu.destroy();\n        this.searchMenu = null;\n    }\n}, {\n    defaults: {\n        tagGroupId: null\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Thumb Element Index View\n */\nCraft.ThumbsElementIndexView = Craft.BaseElementIndexView.extend({\n    getElementContainer: function() {\n        return this.$container.children('ul');\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\nCraft.ui =\n    {\n        createTextInput: function(config) {\n            config = $.extend({\n                autocomplete: false,\n            }, config);\n            var $input = $('<input/>', {\n                attr: {\n                    'class': 'text',\n                    type: (config.type || 'text'),\n                    inputmode: config.inputmode,\n                    id: config.id,\n                    size: config.size,\n                    name: config.name,\n                    value: config.value,\n                    maxlength: config.maxlength,\n                    autofocus: this.getAutofocusValue(config.autofocus),\n                    autocomplete: typeof config.autocomplete === 'boolean' ? (config.autocomplete ? 'on' : 'off') : config.autocomplete,\n                    disabled: this.getDisabledValue(config.disabled),\n                    readonly: config.readonly,\n                    title: config.title,\n                    placeholder: config.placeholder,\n                    step: config.step,\n                    min: config.min,\n                    max: config.max\n                }\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n            if (config.placeholder) {\n                $input.addClass('nicetext');\n            }\n            if (config.type === 'password') {\n                $input.addClass('password');\n            }\n            if (config.disabled) {\n                $input.addClass('disabled');\n            }\n            if (!config.size) {\n                $input.addClass('fullwidth');\n            }\n\n            if (config.showCharsLeft && config.maxlength) {\n                $input\n                    .attr('data-show-chars-left')\n                    .css('padding-' + (Craft.orientation === 'ltr' ? 'right' : 'left'), (7.2 * config.maxlength.toString().length + 14) + 'px');\n            }\n\n            if (config.placeholder || config.showCharsLeft) {\n                new Garnish.NiceText($input);\n            }\n\n            if (config.type === 'password') {\n                return $('<div class=\"passwordwrapper\"/>').append($input);\n            } else {\n                return $input;\n            }\n        },\n\n        createTextField: function(config) {\n            if (!config.id) {\n                config.id = 'text' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextInput(config), config);\n        },\n\n        createCopyTextInput: function(config) {\n            let id = config.id || 'copytext' + Math.floor(Math.random() * 1000000000);\n            let buttonId = config.buttonId || `${id}-btn`;\n\n            let $container = $('<div/>', {\n                'class': 'copytext',\n            });\n\n            let $input = this.createTextInput($.extend({}, config, {\n                readonly: true,\n            })).appendTo($container);\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                id: buttonId,\n                'class': 'btn',\n                'data-icon': 'clipboard',\n                title: Craft.t('app', 'Copy to clipboard'),\n                'aria-label': Craft.t('app', 'Copy to clipboard'),\n            }).appendTo($container);\n\n            $btn.on('click', () => {\n                $input[0].select();\n                document.execCommand('copy');\n                Craft.cp.displayNotice(Craft.t('app', 'Copied to clipboard.'));\n                $container.trigger('copy');\n                $input[0].setSelectionRange(0, 0);\n            });\n\n            return $container;\n        },\n\n        createCopyTextField: function(config) {\n            if (!config.id) {\n                config.id = 'copytext' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCopyTextInput(config), config);\n        },\n\n        createCopyTextPrompt: function(config) {\n            let $container = $('<div/>', {\n                'class': 'modal fitted',\n            });\n            let $body = $('<div/>', {\n                'class': 'body',\n            }).appendTo($container);\n            this.createCopyTextField($.extend({\n                size: Math.max(Math.min(config.value.length, 50), 25),\n            }, config)).appendTo($body);\n            let modal = new Garnish.Modal($container, {\n                closeOtherModals: false,\n            });\n            $container.on('copy', () => {\n                modal.hide();\n            })\n            return $container;\n        },\n\n        createTextarea: function(config) {\n            var $textarea = $('<textarea/>', {\n                'class': 'text',\n                'rows': config.rows || 2,\n                'cols': config.cols || 50,\n                'id': config.id,\n                'name': config.name,\n                'maxlength': config.maxlength,\n                'autofocus': config.autofocus && !Garnish.isMobileBrowser(true),\n                'disabled': !!config.disabled,\n                'placeholder': config.placeholder,\n                'html': config.value\n            });\n\n            if (config.showCharsLeft) {\n                $textarea.attr('data-show-chars-left', '');\n            }\n\n            if (config.class) {\n                $textarea.addClass(config.class);\n            }\n\n            if (!config.size) {\n                $textarea.addClass('fullwidth');\n            }\n\n            return $textarea;\n        },\n\n        createTextareaField: function(config) {\n            if (!config.id) {\n                config.id = 'textarea' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTextarea(config), config);\n        },\n\n        createSelect: function(config) {\n            var $container = $('<div/>', {\n                'class': 'select'\n            });\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var $select = $('<select/>', {\n                'id': config.id,\n                'name': config.name,\n                'autofocus': config.autofocus && Garnish.isMobileBrowser(true),\n                'disabled': config.disabled,\n                'data-target-prefix': config.targetPrefix\n            }).appendTo($container);\n\n            // Normalize the options into an array\n            if ($.isPlainObject(config.options)) {\n                let options = [];\n                for (var key in config.options) {\n                    if (!config.options.hasOwnProperty(key)) {\n                        continue;\n                    }\n                    let option = config.options[key];\n                    if ($.isPlainObject(option)) {\n                        if (typeof option.optgroup !== 'undefined') {\n                            options.push(option);\n                        } else {\n                            options.push({\n                                label: option.label,\n                                value: typeof option.value !== 'undefined' ? option.value : key,\n                                disabled: typeof option.disabled !== 'undefined' ? option.disabled : false,\n                            });\n                        }\n                    } else {\n                        options.push({\n                            label: option,\n                            value: key,\n                        })\n                    }\n                }\n                config.options = options;\n            }\n\n            var $optgroup = null;\n\n            for (let i = 0; i < config.options.length; i++) {\n                let option = config.options[i];\n\n                // Starting a new <optgroup>?\n                if (typeof option.optgroup !== 'undefined') {\n                    $optgroup = $('<optgroup/>', {\n                        'label': option.label\n                    }).appendTo($select);\n                } else {\n                    $('<option/>', {\n                        'value': option.value,\n                        'selected': (option.value == config.value),\n                        'disabled': typeof option.disabled !== 'undefined' ? option.disabled : false,\n                        'html': option.label\n                    }).appendTo($optgroup || $select);\n                }\n            }\n\n            if (config.toggle) {\n                $select.addClass('fieldtoggle');\n                new Craft.FieldToggle($select);\n            }\n\n            return $container;\n        },\n\n        createSelectField: function(config) {\n            if (!config.id) {\n                config.id = 'select' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createSelect(config), config);\n        },\n\n        createCheckbox: function(config) {\n            var id = (config.id || 'checkbox' + Math.floor(Math.random() * 1000000000));\n\n            var $input = $('<input/>', {\n                type: 'checkbox',\n                value: (typeof config.value !== 'undefined' ? config.value : '1'),\n                id: id,\n                'class': 'checkbox',\n                name: config.name,\n                checked: (config.checked ? 'checked' : null),\n                autofocus: this.getAutofocusValue(config.autofocus),\n                disabled: this.getDisabledValue(config.disabled),\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.class) {\n                $input.addClass(config.class);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $input.addClass('fieldtoggle');\n                new Craft.FieldToggle($input);\n            }\n\n            var $label = $('<label/>', {\n                'for': id,\n                html: config.label,\n            });\n\n            // Should we include a hidden input first?\n            if (config.name && (config.name.length < 3 || config.name.substr(-2) !== '[]')) {\n                return $([\n                    $('<input/>', {\n                        type: 'hidden',\n                        name: config.name,\n                        value: ''\n                    })[0],\n                    $input[0],\n                    $label[0]\n                ]);\n            } else {\n                return $([\n                    $input[0],\n                    $label[0]\n                ]);\n            }\n        },\n\n        createCheckboxField: function(config) {\n            if (!config.id) {\n                config.id = 'checkbox' + Math.floor(Math.random() * 1000000000);\n            }\n\n            var $field = $('<div class=\"field checkboxfield\"/>', {\n                id: `${config.id}-field`,\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n            if (config.instructions) {\n                $field.addClass('has-instructions');\n            }\n\n            this.createCheckbox(config).appendTo($field);\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            return $field;\n        },\n\n        createCheckboxSelect: function(config) {\n            var $container = $('<fieldset class=\"checkbox-select\"/>');\n\n            if (config.class) {\n                $container.addClass(config.class);\n            }\n\n            var allValue, allChecked;\n\n            if (config.showAllOption) {\n                allValue = (config.allValue || '*');\n                allChecked = (config.values == allValue);\n\n                // Create the \"All\" checkbox\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        id: config.id,\n                        'class': 'all',\n                        label: '<b>' + (config.allLabel || Craft.t('app', 'All')) + '</b>',\n                        name: config.name,\n                        value: allValue,\n                        checked: allChecked,\n                        autofocus: config.autofocus\n                    })\n                );\n            } else {\n                allChecked = false;\n            }\n\n            // Create the actual options\n            for (var i = 0; i < config.options.length; i++) {\n                var option = config.options[i];\n\n                if (option.value == allValue) {\n                    continue;\n                }\n\n                $('<div/>').appendTo($container).append(\n                    this.createCheckbox({\n                        label: option.label,\n                        name: (config.name ? config.name + '[]' : null),\n                        value: option.value,\n                        checked: allChecked || (config.values || []).includes(option.value),\n                        disabled: allChecked\n                    })\n                );\n            }\n\n            new Garnish.CheckboxSelect($container);\n\n            return $container;\n        },\n\n        createCheckboxSelectField: function(config) {\n            config.fieldset = true;\n            if (!config.id) {\n                config.id = 'checkboxselect' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createCheckboxSelect(config), config);\n        },\n\n        createLightswitch: function(config) {\n            var value = config.value || '1';\n            var indeterminateValue = config.indeterminateValue || '-';\n\n            var $container = $('<button/>', {\n                'type': 'button',\n                'class': 'lightswitch',\n                'data-value': value,\n                'data-indeterminate-value': indeterminateValue,\n                id: config.id,\n                role: 'checkbox',\n                'aria-checked': config.on ? 'true' : (config.indeterminate ? 'mixed' : 'false'),\n                'aria-labelledby': config.labelId,\n                'data-target': config.toggle,\n                'data-reverse-target': config.reverseToggle\n            });\n\n            if (config.on) {\n                $container.addClass('on');\n            } else if (config.indeterminate) {\n                $container.addClass('indeterminate');\n            }\n\n            if (config.small) {\n                $container.addClass('small');\n            }\n\n            if (config.disabled) {\n                $container.addClass('disabled');\n            }\n\n            $(\n                '<div class=\"lightswitch-container\">' +\n                '<div class=\"handle\"></div>' +\n                '</div>'\n            ).appendTo($container);\n\n            if (config.name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: config.name,\n                    value: config.on ? value : (config.indeterminate ? indeterminateValue : ''),\n                    disabled: config.disabled\n                }).appendTo($container);\n            }\n\n            if (config.toggle || config.reverseToggle) {\n                $container.addClass('fieldtoggle');\n                new Craft.FieldToggle($container);\n            }\n\n            new Craft.LightSwitch($container, {\n                onChange: config.onChange || $.noop,\n            });\n\n            return $container;\n        },\n\n        createLightswitchField: function(config) {\n            if (!config.id) {\n                config.id = 'lightswitch' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createLightswitch(config), config)\n                .addClass('lightswitch-field');\n        },\n\n        createColorInput: function(config) {\n            const id = (config.id || 'color' + Math.floor(Math.random() * 1000000000));\n            const containerId = config.containerId || id + '-container';\n            const name = config.name || null;\n            const value = config.value || null;\n            const small = config.small || false;\n            const autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            const disabled = config.disabled || false;\n\n            const $container = $('<div/>', {\n                id: containerId,\n                class: 'flex color-container'\n            });\n\n            const $colorPreviewContainer = $('<div/>', {\n                class: 'color static' + (small ? ' small' : '')\n            }).appendTo($container);\n\n            const $colorPreview = $('<div/>', {\n                class: 'color-preview',\n                style: config.value ? {backgroundColor: config.value} : null\n            }).appendTo($colorPreviewContainer);\n\n            const $inputContainer = $('<div/>', {\n                class: 'color-input-container',\n            })\n                .append(\n                    $('<div/>', {\n                        class: 'color-hex-indicator light code',\n                        'aria-hidden': 'true',\n                        text: '#',\n                    })\n                )\n                .appendTo($container);\n\n            const $input = this.createTextInput({\n                id: id,\n                name: name,\n                value: Craft.ltrim(value, '#'),\n                size: 10,\n                'class': 'color-input',\n                autofocus: autofocus,\n                disabled: disabled,\n                'aria-label': Craft.t('app', 'Color hex value'),\n            }).appendTo($inputContainer);\n\n            new Craft.ColorInput($container);\n            return $container;\n        },\n\n        createColorField: function(config) {\n            config.fieldset = true;o\n            if (!config.id) {\n                config.id = 'color' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createColorInput(config), config);\n        },\n\n        createDateInput: function(config) {\n            var id = (config.id || 'date' + Math.floor(Math.random() * 1000000000)) + '-date';\n            var name = config.name || null;\n            var inputName = name ? name + '[date]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var formattedValue = value ? Craft.formatDate(value) : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'datewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                value: formattedValue,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"date\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.datepicker($.extend({\n                defaultDate: value || new Date()\n            }, Craft.datepickerOptions));\n\n            return $container;\n        },\n\n        createDateField: function(config) {\n            if (!config.id) {\n                config.id = 'date' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createDateInput(config), config);\n        },\n\n        createDateRangePicker: function(config) {\n            var now = new Date();\n            var today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            config = $.extend({\n                class: '',\n                options: [\n                    'today',\n                    'thisWeek',\n                    'thisMonth',\n                    'thisYear',\n                    'past7Days',\n                    'past30Days',\n                    'past90Days',\n                    'pastYear',\n                ],\n                onChange: $.noop,\n                selected: null,\n                startDate: null,\n                endDate: null,\n            }, config);\n\n            var $menu = $('<div/>', {'class': 'menu'});\n            var $ul = $('<ul/>', {'class': 'padded'}).appendTo($menu);\n            var $allOption = $('<a/>')\n                .addClass('sel')\n                .text(Craft.t('app', 'All'))\n                .data('handle', 'all');\n\n            $('<li/>')\n                .append($allOption)\n                .appendTo($ul);\n\n            var option;\n            var selectedOption;\n            for (var i = 0; i < config.options.length; i++) {\n                var handle = config.options[i];\n                switch (handle) {\n                    case 'today':\n                        option = {\n                            label: Craft.t('app', 'Today'),\n                            startDate: today,\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisWeek':\n                        var firstDayOffset = now.getDay() - Craft.datepickerOptions.firstDay;\n                        if (firstDayOffset < 0) {\n                            firstDayOffset += 7;\n                        }\n                        option = {\n                            label: Craft.t('app', 'This week'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - firstDayOffset),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisMonth':\n                        option = {\n                            label: Craft.t('app', 'This month'),\n                            startDate: new Date(now.getFullYear(), now.getMonth()),\n                            endDate: today,\n                        };\n                        break;\n                    case 'thisYear':\n                        option = {\n                            label: Craft.t('app', 'This year'),\n                            startDate: new Date(now.getFullYear(), 0),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past7Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 7}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 7),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past30Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 30}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 30),\n                            endDate: today,\n                        };\n                        break;\n                    case 'past90Days':\n                        option = {\n                            label: Craft.t('app', 'Past {num} days', {num: 90}),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 90),\n                            endDate: today,\n                        };\n                        break;\n                    case 'pastYear':\n                        option = {\n                            label: Craft.t('app', 'Past year'),\n                            startDate: new Date(now.getFullYear(), now.getMonth(), now.getDate() - 365),\n                            endDate: today,\n                        };\n                        break;\n                }\n\n                var $li = $('<li/>');\n                var $a = $('<a/>', {text: option.label})\n                    .data('handle', handle)\n                    .data('startDate', option.startDate)\n                    .data('endDate', option.endDate)\n                    .data('startTime', option.startDate ? option.startDate.getTime() : null)\n                    .data('endTime', option.endDate ? option.endDate.getTime() : null);\n\n                if (config.selected && handle == config.selected) {\n                    selectedOption = $a[0];\n                }\n\n                $li.append($a);\n                $li.appendTo($ul);\n            }\n\n            $('<hr/>').appendTo($menu);\n\n            var $flex = $('<div/>', {'class': 'flex flex-nowrap padded'}).appendTo($menu);\n            var $startDate = this.createDateField({label: Craft.t('app', 'From')}).appendTo($flex).find('input');\n            var $endDate = this.createDateField({label: Craft.t('app', 'To')}).appendTo($flex).find('input');\n\n            // prevent ESC keypresses in the date inputs from closing the menu\n            var $dateInputs = $startDate.add($endDate);\n            $dateInputs.on('keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY && $(this).data('datepicker').dpDiv.is(':visible')) {\n                    ev.stopPropagation();\n                }\n            });\n\n            // prevent clicks in the datepicker divs from closing the menu\n            $startDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n            $endDate.data('datepicker').dpDiv.on('mousedown', function(ev) {\n                ev.stopPropagation();\n            });\n\n            var menu = new Garnish.Menu($menu, {\n                onOptionSelect: function(option) {\n                    var $option = $(option);\n                    $btn.text($option.text());\n                    menu.setPositionRelativeToAnchor();\n                    $menu.find('.sel').removeClass('sel');\n                    $option.addClass('sel');\n\n                    // Update the start/end dates\n                    $startDate.datepicker('setDate', $option.data('startDate'));\n                    $endDate.datepicker('setDate', $option.data('endDate'));\n\n                    config.onChange($option.data('startDate') || null, $option.data('endDate') || null, $option.data('handle'));\n                }\n            });\n\n            $dateInputs.on('change', function() {\n                // Do the start & end dates match one of our options?\n                let startDate = $startDate.datepicker('getDate');\n                let endDate = $endDate.datepicker('getDate');\n                let startTime = startDate ? startDate.getTime() : null;\n                let endTime = endDate ? endDate.getTime() : null;\n\n                let $options = $ul.find('a');\n                let $option;\n                let foundOption = false;\n\n                for (let i = 0; i < $options.length; i++) {\n                    $option = $options.eq(i);\n                    if (\n                        startTime === ($option.data('startTime') || null) &&\n                        endTime === ($option.data('endTime') || null)\n                    ) {\n                        menu.selectOption($option[0]);\n                        foundOption = true;\n                        config.onChange(null, null, $option.data('handle'));\n                        break;\n                    }\n                }\n\n                if (!foundOption) {\n                    $menu.find('.sel').removeClass('sel');\n                    $flex.addClass('sel');\n\n                    if (!startTime && !endTime) {\n                        $btn.text(Craft.t('app', 'All'));\n                    } else if (startTime && endTime) {\n                        $btn.text($startDate.val() + ' - ' + $endDate.val());\n                    } else if (startTime) {\n                        $btn.text(Craft.t('app', 'From {date}', {date: $startDate.val()}));\n                    } else {\n                        $btn.text(Craft.t('app', 'To {date}', {date: $endDate.val()}));\n                    }\n                    menu.setPositionRelativeToAnchor();\n\n                    config.onChange(startDate, endDate, 'custom');\n                }\n            });\n\n            menu.on('hide', function() {\n                $startDate.datepicker('hide');\n                $endDate.datepicker('hide');\n            });\n\n            let btnClasses = 'btn menubtn';\n            if (config.class) {\n                btnClasses = btnClasses + ' ' + config.class;\n            }\n\n            let $btn = $('<button/>', {\n                type: 'button',\n                class: btnClasses,\n                'data-icon': 'date',\n                text: Craft.t('app', 'All'),\n            });\n\n            new Garnish.MenuBtn($btn, menu);\n\n            if (selectedOption) {\n                menu.selectOption(selectedOption);\n            }\n\n            if (config.startDate) {\n                $startDate.datepicker('setDate', config.startDate);\n            }\n\n            if (config.endDate) {\n                $endDate.datepicker('setDate', config.endDate);\n            }\n\n            if (config.startDate || config.endDate) {\n                $dateInputs.trigger('change');\n            }\n\n            return $btn;\n        },\n\n        createTimeInput: function(config) {\n            var id = (config.id || 'time' + Math.floor(Math.random() * 1000000000)) + '-time';\n            var name = config.name || null;\n            var inputName = name ? name + '[time]' : null;\n            var value = config.value && typeof config.value.getMonth === 'function' ? config.value : null;\n            var autofocus = config.autofocus && Garnish.isMobileBrowser(true);\n            var disabled = config.disabled || false;\n\n            var $container = $('<div/>', {\n                'class': 'timewrapper'\n            });\n\n            var $input = this.createTextInput({\n                id: id,\n                name: inputName,\n                placeholder: ' ',\n                autocomplete: false,\n                autofocus: autofocus,\n                disabled: disabled\n            }).appendTo($container);\n\n            $('<div data-icon=\"time\"></div>').appendTo($container);\n\n            if (name) {\n                $('<input/>', {\n                    type: 'hidden',\n                    name: name + '[timezone]',\n                    val: Craft.timezone\n                }).appendTo($container);\n            }\n\n            $input.timepicker(Craft.timepickerOptions);\n            if (value) {\n                $input.timepicker('setTime', value.getHours() * 3600 + value.getMinutes() * 60 + value.getSeconds());\n            }\n\n            return $container;\n        },\n\n        createTimeField: function(config) {\n            if (!config.id) {\n                config.id = 'time' + Math.floor(Math.random() * 1000000000);\n            }\n            return this.createField(this.createTimeInput(config), config);\n        },\n\n        createField: function(input, config) {\n            var label = (config.label && config.label !== '__blank__' ? config.label : null),\n                siteId = (Craft.isMultiSite && config.siteId ? config.siteId : null);\n\n            var $field = $(config.fieldset ? '<fieldset/>' : '<div/>', {\n                'class': 'field',\n                'id': config.fieldId || (config.id ? config.id + '-field' : null)\n            });\n\n            if (config.first) {\n                $field.addClass('first');\n            }\n\n            if (label) {\n                var $heading = $('<div class=\"heading\"/>').appendTo($field);\n\n                var $label = $(config.fieldset ? '<legend/>' : '<label/>', {\n                    'id': config.labelId || (config.id ? `${config.id}-${config.fieldset ? 'legend' : 'label'}` : null),\n                    'class': (config.required ? 'required' : null),\n                    'for': !config.fieldset && config.id,\n                    text: label\n                }).appendTo($heading);\n            }\n\n            if (config.instructions) {\n                $('<div class=\"instructions\"/>').text(config.instructions).appendTo($field);\n            }\n\n            $('<div class=\"input\"/>').append(input).appendTo($field);\n\n            if (config.warning) {\n                $('<p class=\"warning\"/>').text(config.warning).appendTo($field);\n            }\n\n            if (config.errors) {\n                this.addErrorsToField($field, config.errors);\n            }\n\n            return $field;\n        },\n\n        createErrorList: function(errors) {\n            var $list = $('<ul class=\"errors\"/>');\n\n            if (errors) {\n                this.addErrorsToList($list, errors);\n            }\n\n            return $list;\n        },\n\n        addErrorsToList: function($list, errors) {\n            for (var i = 0; i < errors.length; i++) {\n                $('<li/>').text(errors[i]).appendTo($list);\n            }\n        },\n\n        addErrorsToField: function($field, errors) {\n            if (!errors) {\n                return;\n            }\n\n            $field.addClass('has-errors');\n            $field.children('.input').addClass('errors');\n\n            var $errors = $field.children('ul.errors');\n\n            if (!$errors.length) {\n                $errors = this.createErrorList().appendTo($field);\n            }\n\n            this.addErrorsToList($errors, errors);\n        },\n\n        clearErrorsFromField: function($field) {\n            $field.removeClass('has-errors');\n            $field.children('.input').removeClass('errors');\n            $field.children('ul.errors').remove();\n        },\n\n        getAutofocusValue: function(autofocus) {\n            return (autofocus && !Garnish.isMobileBrowser(true) ? 'autofocus' : null);\n        },\n\n        getDisabledValue: function(disabled) {\n            return (disabled ? 'disabled' : null);\n        },\n    };\n","/** global: Craft */\n/** global: Garnish */\n/**\n * File Manager.\n */\nCraft.Uploader = Garnish.Base.extend({\n    uploader: null,\n    allowedKinds: null,\n    $element: null,\n    settings: null,\n    _rejectedFiles: {},\n    _extensionList: null,\n    _totalFileCounter: 0,\n    _validFileCounter: 0,\n\n    init: function($element, settings) {\n        this._rejectedFiles = {\"size\": [], \"type\": [], \"limit\": []};\n        this.$element = $element;\n        this.allowedKinds = null;\n        this._extensionList = null;\n        this._totalFileCounter = 0;\n        this._validFileCounter = 0;\n\n        settings = $.extend({}, Craft.Uploader.defaults, settings);\n\n        var events = settings.events;\n        delete settings.events;\n\n        if (settings.allowedKinds && settings.allowedKinds.length) {\n            if (typeof settings.allowedKinds === 'string') {\n                settings.allowedKinds = [settings.allowedKinds];\n            }\n\n            this.allowedKinds = settings.allowedKinds;\n            delete settings.allowedKinds;\n        }\n\n        settings.autoUpload = false;\n\n        this.uploader = this.$element.fileupload(settings);\n        for (var event in events) {\n            if (!events.hasOwnProperty(event)) {\n                continue;\n            }\n\n            this.uploader.on(event, events[event]);\n        }\n\n        this.settings = settings;\n\n        this.uploader.on('fileuploadadd', this.onFileAdd.bind(this));\n    },\n\n    /**\n     * Set uploader parameters.\n     */\n    setParams: function(paramObject) {\n        // If CSRF protection isn't enabled, these won't be defined.\n        if (typeof Craft.csrfTokenName !== 'undefined' && typeof Craft.csrfTokenValue !== 'undefined') {\n            // Add the CSRF token\n            paramObject[Craft.csrfTokenName] = Craft.csrfTokenValue;\n        }\n\n        this.uploader.fileupload('option', {formData: paramObject});\n    },\n\n    /**\n     * Get the number of uploads in progress.\n     */\n    getInProgress: function() {\n        return this.uploader.fileupload('active');\n    },\n\n    /**\n     * Return true, if this is the last upload.\n     */\n    isLastUpload: function() {\n        // Processing the last file or not processing at all.\n        return this.getInProgress() < 2;\n    },\n\n    /**\n     * Called on file add.\n     */\n    onFileAdd: function(e, data) {\n        e.stopPropagation();\n\n        var validateExtension = false;\n\n        if (this.allowedKinds) {\n            if (!this._extensionList) {\n                this._createExtensionList();\n            }\n\n            validateExtension = true;\n        }\n\n        // Make sure that file API is there before relying on it\n        data.process().done(() => {\n            var file = data.files[0];\n            var pass = true;\n            if (validateExtension) {\n                var matches = file.name.match(/\\.([a-z0-4_]+)$/i);\n                var fileExtension = matches[1];\n                if ($.inArray(fileExtension.toLowerCase(), this._extensionList) === -1) {\n                    pass = false;\n                    this._rejectedFiles.type.push('“' + file.name + '”');\n                }\n            }\n\n            if (file.size > this.settings.maxFileSize) {\n                this._rejectedFiles.size.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            // If the validation has passed for this file up to now, check if we're not hitting any limits\n            if (pass && typeof this.settings.canAddMoreFiles === 'function' && !this.settings.canAddMoreFiles(this._validFileCounter)) {\n                this._rejectedFiles.limit.push('“' + file.name + '”');\n                pass = false;\n            }\n\n            if (pass) {\n                this._validFileCounter++;\n                data.submit();\n            }\n\n            if (++this._totalFileCounter === data.originalFiles.length) {\n                this._totalFileCounter = 0;\n                this._validFileCounter = 0;\n                this.processErrorMessages();\n            }\n        });\n\n        return true;\n    },\n\n    /**\n     * Process error messages.\n     */\n    processErrorMessages: function() {\n        var str;\n\n        if (this._rejectedFiles.type.length) {\n            if (this._rejectedFiles.type.length === 1) {\n                str = \"The file {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            } else {\n                str = \"The files {files} could not be uploaded. The allowed file kinds are: {kinds}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.type.join(\", \"), kinds: this.allowedKinds.join(\", \")});\n            this._rejectedFiles.type = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.size.length) {\n            if (this._rejectedFiles.size.length === 1) {\n                str = \"The file {files} could not be uploaded, because it exceeds the maximum upload size of {size}.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because they exceeded the maximum upload size of {size}.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.size.join(\", \"), size: this.humanFileSize(Craft.maxUploadSize)});\n            this._rejectedFiles.size = [];\n            alert(str);\n        }\n\n        if (this._rejectedFiles.limit.length) {\n            if (this._rejectedFiles.limit.length === 1) {\n                str = \"The file {files} could not be uploaded, because the field limit has been reached.\";\n            } else {\n                str = \"The files {files} could not be uploaded, because the field limit has been reached.\";\n            }\n\n            str = Craft.t('app', str, {files: this._rejectedFiles.limit.join(\", \")});\n            this._rejectedFiles.limit = [];\n            alert(str);\n        }\n    },\n\n    humanFileSize: function(bytes) {\n        var threshold = 1024;\n\n        if (bytes < threshold) {\n            return bytes + ' B';\n        }\n\n        var units = ['kB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n\n        var u = -1;\n\n        do {\n            bytes = bytes / threshold;\n            ++u;\n        }\n        while (bytes >= threshold);\n\n        return bytes.toFixed(1) + ' ' + units[u];\n    },\n\n    _createExtensionList: function() {\n        this._extensionList = [];\n\n        for (var i = 0; i < this.allowedKinds.length; i++) {\n            var allowedKind = this.allowedKinds[i];\n\n            if (typeof Craft.fileKinds[allowedKind] !== 'undefined') {\n                for (var j = 0; j < Craft.fileKinds[allowedKind].extensions.length; j++) {\n                    var ext = Craft.fileKinds[allowedKind].extensions[j];\n                    this._extensionList.push(ext);\n                }\n            }\n        }\n    },\n\n    destroy: function() {\n        this.$element.fileupload('destroy');\n        this.base();\n    }\n}, {\n    defaults: {\n        dropZone: null,\n        pasteZone: null,\n        fileInput: null,\n        sequentialUploads: true,\n        maxFileSize: Craft.maxUploadSize,\n        allowedKinds: null,\n        events: {},\n        canAddMoreFiles: null,\n        headers: {'Accept': 'application/json;q=0.9,*/*;q=0.8'},\n        paramName: 'assets-upload'\n    }\n});\n","/** global: Craft */\n/** global: Garnish */\n/**\n * Handle Generator\n */\nCraft.UriFormatGenerator = Craft.BaseInputGenerator.extend({\n    generateTargetValue: function(sourceVal) {\n        // Remove HTML tags\n        sourceVal = sourceVal.replace(\"/<(.*?)>/g\", '');\n\n        // Make it lowercase\n        sourceVal = sourceVal.toLowerCase();\n\n        // Convert extended ASCII characters to basic ASCII\n        sourceVal = Craft.asciiString(sourceVal);\n\n        // Handle must start with a letter and end with a letter/number\n        sourceVal = sourceVal.replace(/^[^a-z]+/, '');\n        sourceVal = sourceVal.replace(/[^a-z0-9]+$/, '');\n\n        // Get the \"words\"\n        var words = Craft.filterArray(sourceVal.split(/[^a-z0-9]+/));\n\n        var uriFormat = words.join(Craft.slugWordSeparator);\n\n        if (uriFormat && this.settings.suffix) {\n            uriFormat += this.settings.suffix;\n        }\n\n        return uriFormat;\n    }\n});\n"]}