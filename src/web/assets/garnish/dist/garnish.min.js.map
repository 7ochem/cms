{"version":3,"sources":["../../../../../../garnishjs/lib/Base.js","../../../../../../garnishjs/src/Garnish.js","../../../../../../garnishjs/src/BaseDrag.js","../../../../../../garnishjs/src/CheckboxSelect.js","../../../../../../garnishjs/src/ContextMenu.js","../../../../../../garnishjs/src/CustomSelect.js","../../../../../../garnishjs/src/DisclosureMenu.js","../../../../../../garnishjs/src/Drag.js","../../../../../../garnishjs/src/DragDrop.js","../../../../../../garnishjs/src/DragMove.js","../../../../../../garnishjs/src/DragSort.js","../../../../../../garnishjs/src/EscManager.js","../../../../../../garnishjs/src/HUD.js","../../../../../../garnishjs/src/MenuBtn.js","../../../../../../garnishjs/src/MixedInput.js","../../../../../../garnishjs/src/Modal.js","../../../../../../garnishjs/src/NiceText.js","../../../../../../garnishjs/src/Select.js","../../../../../../garnishjs/src/SelectMenu.js","../../../../../../garnishjs/src/ShortcutManager.js","garnish.js"],"names":["$","getErd","erd","elementResizeDetectorMaker","callOnAdd","triggerResizeEvent","elem","trigger","Base","extend","_instance","_static","prototype","_prototyping","proto","this","call","base","constructor","klass","_constructing","apply","arguments","ancestor","forEach","implement","toString","valueOf","type","init","source","value","length","test","method","previous","returnValue","toSource","hidden","i","key","desc","Object","getOwnPropertyDescriptor","defineProperty","version","object","block","context","undefined","String","Garnish","$win","window","$doc","document","$bod","body","rtl","hasClass","ltr","$scrollContainer","DELETE_KEY","SHIFT_KEY","TAB_KEY","CTRL_KEY","ALT_KEY","RETURN_KEY","ESC_KEY","SPACE_KEY","LEFT_KEY","UP_KEY","RIGHT_KEY","DOWN_KEY","A_KEY","S_KEY","CMD_KEY","PRIMARY_CLICK","SECONDARY_CLICK","X_AXIS","Y_AXIS","FX_DURATION","TEXT_NODE","log","msg","console","_isMobileBrowser","_isMobileOrTabletBrowser","isMobileBrowser","detectTablets","a","navigator","userAgent","vendor","opera","RegExp","substr","isArray","val","Array","isJquery","jQuery","isString","hasAttr","attr","isTextNode","nodeType","getOffset","_offset","offset","top","scrollTop","left","scrollLeft","getDist","x1","y1","x2","y2","Math","sqrt","pow","hitTest","x","y","_$elem","_x1","_y1","_x2","outerWidth","_y2","outerHeight","isCursorOver","ev","pageX","pageY","copyTextStyles","target","$source","$target","css","fontFamily","fontSize","fontWeight","letterSpacing","lineHeight","textAlign","textIndent","whiteSpace","wordSpacing","wordWrap","getBodyScrollTop","_scrollTop","_maxScrollTop","height","requestAnimationFrame","raf","mozRequestAnimationFrame","webkitRequestAnimationFrame","fn","setTimeout","cancelAnimationFrame","cancel","mozCancelAnimationFrame","webkitCancelAnimationFrame","clearTimeout","id","scrollContainerToElement","container","$elem","$container","scrollParent","prop","elemScrollOffset","elemOffset","targetScrollTop","elemHeight","containerHeight","innerHeight","clientHeight","velocity","mobileHA","SHAKE_STEPS","SHAKE_STEP_DURATION","shake","startingPoint","parseInt","isNaN","_properties","getElement","makeArray","getInputBasename","name","replace","getInputPostVal","$input","findInputs","find","findFocusable","findCurrentFocus","getPostData","inputName","postData","arrayInputCounters","$inputs","eq","inputVal","isArrayInput","croppedName","substring","j","copyInputValues","$sourceInputs","$targetInputs","isCtrlKeyPressed","platform","match","metaKey","ctrlKey","_eventHandlers","_normalizeEvents","events","split","on","data","handler","push","namespace","off","eventHandler","splice","settings","_namespace","_$listeners","_disabled","floor","random","_listeners","noop","setSettings","defaults","baseSettings","_ev","_splitEvents","trim","_formatEvents","slice","join","addListener","func","bind","proxy","inArray","removeListener","removeAllListeners","disable","enable","destroy","event","special","activate","setup","namespaces","eventHandle","mousedown.garnish-activate","e","preventDefault","click.garnish-activate","keydown.garnish-activate","keyCode","addClass","removeClass","removeAttr","teardown","textchange","handle","el","args","delay","handleObj","targetData","delayTimeout","resize","listenTo","each","BaseDrag","$items","dragging","mousedownX","mousedownY","realMouseX","realMouseY","mouseX","mouseY","mouseDistX","mouseDistY","mouseOffsetX","mouseOffsetY","$targetItem","scrollProperty","scrollAxis","scrollDist","scrollProxy","scrollFrame","_","items","isPlainObject","addItems","allowDragging","startDragging","onDragStart","drag","didMouseMove","_scrollProperty","axis","_winScrollTop","_minMouseScrollY","windowScrollTargetSize","_scrollAxis","_scrollDist","round","_maxMouseScrollY","_winScrollLeft","_minMouseScrollX","_maxMouseScrollX","width","_scrollWindow","_cancelWindowScroll","onDrag","stopDragging","onDragStop","item","removeItems","add","index","_deinitItem","removeAllItems","_handleMouseDown","which","$handle","_getItemHandle","currentTarget","is","closest","ignoreHandleSelector","_handleMouseMove","_mouseDist","minMouseDist","_handleMouseUp","scrollPos","removeData","CheckboxSelect","$all","$options","$checkboxes","filter","not","onAllChange","isAllChecked","checked","disabled","ContextMenu","options","$menu","showingMenu","counter","buildMenu","menuClass","$ul","appendTo","hasOwnProperty","option","$li","$a","label","onClick","mousedown","hideMenu","showMenu","showing","show","shortcutManager","addLayer","registerShortcut","hide","removeLayer","CustomSelect","visible","$anchor","menuId","_windowWidth","_windowHeight","_windowScrollLeft","_windowScrollTop","_anchorOffset","_anchorWidth","_anchorHeight","_anchorOffsetRight","_anchorOffsetBottom","_menuWidth","_menuHeight","addOptions","$menuList","role","aria-hidden","attachToElement","anchor","stopPropagation","nodeName","optionKey","tabindex","selectOption","setPositionRelativeToAnchor","topClearance","bottomClearance","maxHeight","windowSpacing","min","align","_alignCenter","rightClearance","leftClearance","_alignRight","_alignLeft","opacity","display","duration","detach","onOptionSelect","selectedOption","right","Menu","DisclosureMenu","$trigger","$alignmentElement","$wrapper","_wrapperElementOffset","_alignmentElementOffset","_triggerWidth","_triggerHeight","triggerId","expanded","alignmentSelector","wrapper","addDisclosureMenuEventListeners","handleTriggerClick","handleKeypress","handleMousedown","focusElement","direction","newIndex","currentFocus","focusable","currentIndex","elementToFocus","focus","newTarget","triggerButton","newTargetIsInsideDisclosure","has","isExpanded","setContainerPosition","firstFocusableEl","getBoundingClientRect","bottom","topAdjustment","bottomAdjustment","bottomClearanceExists","leftAdjustment","rightAdjustment","Drag","targetItemWidth","targetItemHeight","targetItemPositionInDraggee","$draggee","otherItems","totalOtherItems","helpers","helperTargets","helperPositions","helperLagIncrement","updateHelperPosProxy","updateHelperPosFrame","lastMouseX","lastMouseY","_returningHelpersToDraggees","draggeeDisplay","setDraggee","findDraggee","_updateHelperPos","helperLagIncrementDividend","concat","toArray","singleHelper","_createHelper","removeDraggee","collapseDraggees","appendDraggee","$newDraggee","oldLength","newLength","draggeeVirtualMidpointX","draggeeVirtualMidpointY","getHelperTargetX","getHelperTargetY","returnHelpersToDraggees","$helper","visibility","callback","draggeeOffset","_showDraggee","onReturnHelpersToDraggees","$draggeeHelper","clone","copyDraggeeInputValuesToHelper","ceil","margin","pointer-events","helper","append","helperPos","_getHelperTarget","position","zIndex","helperBaseZindex","helperOpacity","_i","_j","_lag","helperLagBase","helperSpacingX","helperSpacingY","remove","DragDrop","$dropTargets","$activeDropTarget","updateDropTargets","dropTargets","_activeDropTarget","_elem","activeDropTargetClass","onDropTargetChange","fadeOutHelpers","complete","DragMove","DragSort","$heightedContainer","$insertion","insertionVisible","oldDraggeeIndexes","newDraggeeIndexes","closestItem","_midpointVersion","_$prevItem","createInsertion","insertion","magnetStrength","_draggeeOffsetX","_draggeeOffsetY","canInsertBefore","$item","canInsertAfter","_getDraggeeIndexes","moveTargetItemToFront","_getItemIndex","first","insertBefore","_placeInsertionWithDraggee","_clearMidpoints","parent","_removeInsertion","_getClosestItem","_updateInsertion","insertAfter","onSortChange","onInsertionPointChange","indexes","_closestItem","_testForClosestItem","_midpoint","_getItemMidpoint","_startXDist","_lastXDist","abs","_startYDist","_lastYDist","_$otherItem","prev","_xDist","_yDist","last","next","_repositionDraggee","get","_moveDraggeeToItem","_$item","prependTo","_mouseDistX","_mouseDistY","_closestItemMouseDistY","_closestItemMouseDistX","EscManager","handlers","escapeLatest","register","obj","unregister","pop","escManager","HUD","$fixedTriggerParent","$hud","$tip","$body","$header","$footer","$mainContainer","$main","$shade","orientation","updatingSizeAndPosition","windowWidth","windowHeight","mainWidth","mainHeight","bodyContents","onShow","onHide","onSubmit","activeHUDs","class","shadeClass","hudClass","tipClass","bodyClass","mainContainerClass","mainClass","updateBody","$parent","offsetParent","hideOnShadeClick","closeBtn","html","headerClass","footerClass","closeOtherHUDs","hudID","hideOnEsc","updateRecords","updateSizeAndPosition","changed","force","updateSizeAndPositionInternal","triggerWidth","triggerHeight","triggerOffset","windowScrollLeft","windowScrollTop","scrollContainerTriggerOffset","scrollContainerScrollLeft","scrollContainerScrollTop","hudBodyWidth","hudBodyHeight","overflow-x","overflow-y","clearances","orientations","relevantSize","triggerSpacing","tipClasses","maxHudBodyWidth","maxHudBodyHeight","minBodyWidth","minBodyHeight","triggerCenter","maxLeft","minLeft","tipLeft","tipWidth","maxTop","minTop","tipTop","toggle","submit","_handleSubmit","MenuBtn","$btn","menu","btn","menuAnchor","aria-controls","aria-haspopup","aria-expanded","onMenuHide","onBlur","contains","activeElement","onKeyDown","$option","$currentOption","click","focusOption","onMouseDown","MixedInput","elements","focussedElement","blurTimeout","getElementIndex","isText","onFocus","setFocus","setCarotPos","addTextElement","text","TextElement","addElement","focussedElementIndex","selectionStart","selectionEnd","preVal","postVal","newText","removeElement","$prevElem","$nextElem","prevElemVal","newVal","blurFocussedElement","focusPreviousElement","$from","focusNextElement","pos","parentInput","$stage","focussed","interval","padding","setWidth","getIndex","buildStage","getTextWidth","stageWidth","setInterval","checkInput","NiceText","clearInterval","getVal","setVal","onChange","Modal","dragger","desiredWidth","desiredHeight","resizeDragger","resizeStartWidth","resizeStartHeight","addAriaAttributes","setContainer","autoShow","instances","aria-modal","draggable","dragHandleSelector","resizable","$resizeDragHandle","_handleResizeStart","_handleResize","hideOutsideContent","modal","children","contentShouldBeHidden","ariaHide","resetOutsideContentVisibility","ariaSelector","jsAriaClass","jsAriaFalseClass","jsAriaTrueClass","ariaHiddenElements","element","ariaHiddenAttribute","tagName","visibleModal","closeOtherModals","moveFocusInto","onFadeIn","handleKeydown","shiftKey","quickShow","onFadeOut","triggerElement","quickHide","max","min-width","min-height","_width","getWidth","minGutter","_height","getHeight","_handleWindowResize","relativeElemPadding","$hint","$charsLeft","autoHeight","maxLength","showCharsLeft","showingHint","inputBoxSizing","minHeight","initialized","input","isVisible","initialize","getHeightForValue","updateHeight","hint","$hintContainer","charsLeftClass","updateCharsLeft","initializeIfVisible","showHint","hintFadeDuration","hideHint","onTextChange","border-top","border-right","border-bottom","border-left","padding-top","padding-right","padding-bottom","padding-left","-webkit-box-sizing","-moz-box-sizing","box-sizing","spaces","onHeightChange","updateHeightIfWidthChanged","_charsLeft","charsLeftHtml","negativeCharsLeftClass","charsLeft","Select","$selectedItems","$focusedItem","mousedownTarget","mouseUpTimeout","callbackFrame","$focusable","$first","$last","allowEmpty","checkboxMode","ignoreClick","deselectAll","getItemIndex","isSelected","selectItem","preventScroll","multi","setFocusableItem","focusItem","_selectItems","selectAll","selectRange","sliceFrom","sliceTo","deselectItem","_deselectItems","clearFirst","deselectOthers","toggleItem","_canDeselect","clearMouseUpTimeout","getFirstItem","getLastItem","isPreviousItem","isNextItem","getPreviousItem","getNextItem","getItemToTheLeft","horizontal","vertical","getClosestItem","getItemToTheRight","getItemAbove","getItemBelow","dir","step","axisProps","closestItemAxisProps","dirProps","closestItemDirectionProps","$thisItem","thisOffset","thisMidpoint","midpointOffset","midpointSizeFunc","otherRowPos","smallestMidpointDiff","$closestItem","$otherItem","otherOffset","isNextRow","rowOffset","otherMidpoint","midpointDiff","isWrongDirection","getFurthestItemToTheLeft","getFurthestItem","getFurthestItemToTheRight","getFurthestItemAbove","getFurthestItemBelow","$testItem","totalSelected","getTotalSelected","updateIndexes","itemsChanged","selectionChanged","selectedIndex","selectedClass","onSelectionChange","resetItemOrder","getSelectedItems","_actAsCheckbox","onMouseUp","<","b",">","SelectMenu","selected","build","_addSelectedOptionClass","select","dom","ul","className","setBtnText","$btnLabel","ulClass","ShortcutManager","shortcuts","layer","shortcut","_normalizeShortcut","JSON","stringify","unregisterShortcut","ctrl","shift","alt","triggerShortcut","altKey"],"mappings":"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","file":"garnish.min.js","sourcesContent":["/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n","/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (typeof Garnish !== 'undefined') {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    TAB_KEY: 9,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param {string} msg\n     */\n    log: function(msg) {\n        if (typeof console !== 'undefined' && typeof console.log === 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param {boolean} detectTablets\n     * @return {boolean}\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isString: function(val) {\n        return (typeof val === 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (typeof val !== 'undefined' && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param {object} elem\n     * @return {boolean}\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType === Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param {number} x1 The first coordinate's X position.\n     * @param {number} y1 The first coordinate's Y position.\n     * @param {number} x2 The second coordinate's X position.\n     * @param {number} y2 The second coordinate's Y position.\n     * @return {number}\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param {number}    x    The coordinate's X position.\n     * @param {number}    y    The coordinate's Y position.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param {object} ev   The mouse event object containing pageX and pageY properties.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param {object} source The source element. Can be either an actual element or a jQuery collection.\n     * @param {object} target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return {number}\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param {object} container Either an actual element or a jQuery collection.\n     * @param {object} elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        var $elem;\n\n        if (typeof elem === 'undefined') {\n            $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container);\n            $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] === Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        var elemScrollOffset;\n\n        if ($container[0] === window) {\n            elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] === window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] === window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param {object}  elem Either an actual element or a jQuery collection.\n     * @param {string} prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param {object} elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param {object} elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param {object} $input\n     * @return {(string|string[])}\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type === 'checkbox' || type === 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) !== '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the focusable elements within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findFocusable: function(container) {\n        return $(container).find(':focusable');\n    },\n\n    /**\n     * Returns the currently focused element\n     *\n     * @return {object}\n     */\n    findCurrentFocus: function() {\n        return $(':focus');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param {object} container\n     * @return {array}\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        var inputName;\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) === '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (typeof arrayInputCounters[croppedName] === 'undefined') {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if (typeof $targetInputs[i] === 'undefined') {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return {boolean} Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        return ev.ctrlKey;\n    },\n\n    _eventHandlers: [],\n\n    _normalizeEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] === 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    on: function(target, events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                target: target,\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(target, events, handler) {\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.target === target &&\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        // instance level event handlers\n        var i, handler, _ev;\n        for (i = 0; i < this._eventHandlers.length; i++) {\n            handler = this._eventHandlers[i];\n\n            if (handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n\n        // class level event handlers\n        for (i = 0; i < Garnish._eventHandlers.length; i++) {\n            handler = Garnish._eventHandlers[i];\n\n            if (this instanceof handler.target && handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (typeof func === 'undefined' && typeof data !== 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func === 'function') {\n            func = func.bind(this);\n        }\n        else {\n            func = this[func].bind(this);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                return func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) === -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (typeof erd === 'undefined') {\n        erd = elementResizeDetectorMaker({\n            callOnAdd: false\n        });\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n}\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this !== $elem[0] || e.keyCode !== Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode === Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val !== $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && typeof data.delay !== 'undefined' ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this === window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this === window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n","/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis !== Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = this._scrollWindow.bind(this);\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param {object} items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param {object} items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget !== ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle === 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle === 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle === 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                if (!this.options.hasOwnProperty(i)) {\n                    continue;\n                }\n\n                var option = this.options[i];\n\n                if (option === '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick === 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout(function() {\n                                $a.mousedown(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }.bind(this));\n                            }.bind(this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type === 'mousedown' && ev.which !== Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type === 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget === this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n            this.trigger('show');\n            Garnish.shortcutManager.addLayer();\n            Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hideMenu.bind(this));\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }.bind(this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n            this.trigger('hide');\n            Garnish.shortcutManager.removeLayer();\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n","/** global: Garnish */\n/**\n * Custom Select Menu\n */\nGarnish.CustomSelect = Garnish.Base.extend(\n  {\n    settings: null,\n    visible: false,\n\n    $container: null,\n    $options: null,\n    $anchor: null,\n\n    menuId: null,\n\n    _windowWidth: null,\n    _windowHeight: null,\n    _windowScrollLeft: null,\n    _windowScrollTop: null,\n\n    _anchorOffset: null,\n    _anchorWidth: null,\n    _anchorHeight: null,\n    _anchorOffsetRight: null,\n    _anchorOffsetBottom: null,\n\n    _menuWidth: null,\n    _menuHeight: null,\n\n    /**\n     * Constructor\n     */\n    init: function (container, settings) {\n      this.setSettings(settings, Garnish.CustomSelect.defaults);\n\n      this.$container = $(container);\n\n      this.$options = $();\n      this.addOptions(this.$container.find('a'));\n\n      // Menu List\n      this.menuId = 'menu' + this._namespace;\n      this.$menuList = $('ul', this.$container);\n      this.$menuList.attr({\n        role: 'listbox',\n        id: this.menuId,\n        'aria-hidden': 'true',\n      });\n\n      // Deprecated\n      if (this.settings.attachToElement) {\n        this.settings.anchor = this.settings.attachToElement;\n        Garnish.log(\n          \"The 'attachToElement' setting is deprecated. Use 'anchor' instead.\"\n        );\n      }\n\n      if (this.settings.anchor) {\n        this.$anchor = $(this.settings.anchor);\n      }\n\n      // Prevent clicking on the container from hiding the menu\n      this.addListener(this.$container, 'mousedown', function (ev) {\n        ev.stopPropagation();\n\n        if (ev.target.nodeName !== 'INPUT') {\n          // Prevent this from causing the menu button to blur\n          ev.preventDefault();\n        }\n      });\n    },\n\n    addOptions: function ($options) {\n      this.$options = this.$options.add($options);\n      $options.data('menu', this);\n\n      $options.each(\n        function (optionKey, option) {\n          $(option).attr({\n            role: 'option',\n            tabindex: '-1',\n            id: this.menuId + '-option-' + optionKey,\n          });\n        }.bind(this)\n      );\n\n      this.removeAllListeners($options);\n      this.addListener($options, 'click', function (ev) {\n        this.selectOption(ev.currentTarget);\n      });\n    },\n\n    setPositionRelativeToAnchor: function () {\n      this._windowWidth = Garnish.$win.width();\n      this._windowHeight = Garnish.$win.height();\n      this._windowScrollLeft = Garnish.$win.scrollLeft();\n      this._windowScrollTop = Garnish.$win.scrollTop();\n\n      this._anchorOffset = this.$anchor.offset();\n      this._anchorWidth = this.$anchor.outerWidth();\n      this._anchorHeight = this.$anchor.outerHeight();\n      this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n      this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n      this.$container.css('minWidth', 0);\n      this.$container.css(\n        'minWidth',\n        this._anchorWidth -\n          (this.$container.outerWidth() - this.$container.width())\n      );\n\n      this._menuWidth = this.$container.outerWidth();\n      this._menuHeight = this.$container.outerHeight();\n\n      // Is there room for the menu below the anchor?\n      var topClearance = this._anchorOffset.top - this._windowScrollTop,\n        bottomClearance =\n          this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n      if (\n        bottomClearance >= this._menuHeight ||\n        (topClearance < this._menuHeight && bottomClearance >= topClearance)\n      ) {\n        this.$container.css({\n          top: this._anchorOffsetBottom,\n          maxHeight: bottomClearance - this.settings.windowSpacing,\n        });\n      } else {\n        this.$container.css({\n          top:\n            this._anchorOffset.top -\n            Math.min(\n              this._menuHeight,\n              topClearance - this.settings.windowSpacing\n            ),\n          maxHeight: topClearance - this.settings.windowSpacing,\n        });\n      }\n\n      // Figure out how we're aliging it\n      var align = this.$container.data('align');\n\n      if (align !== 'left' && align !== 'center' && align !== 'right') {\n        align = 'left';\n      }\n\n      if (align === 'center') {\n        this._alignCenter();\n      } else {\n        // Figure out which options are actually possible\n        var rightClearance =\n            this._windowWidth +\n            this._windowScrollLeft -\n            (this._anchorOffset.left + this._menuWidth),\n          leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n        if ((align === 'right' && leftClearance >= 0) || rightClearance < 0) {\n          this._alignRight();\n        } else {\n          this._alignLeft();\n        }\n      }\n\n      delete this._windowWidth;\n      delete this._windowHeight;\n      delete this._windowScrollLeft;\n      delete this._windowScrollTop;\n      delete this._anchorOffset;\n      delete this._anchorWidth;\n      delete this._anchorHeight;\n      delete this._anchorOffsetRight;\n      delete this._anchorOffsetBottom;\n      delete this._menuWidth;\n      delete this._menuHeight;\n    },\n\n    show: function () {\n      if (this.visible) {\n        return;\n      }\n\n      // Move the menu to the end of the DOM\n      this.$container.appendTo(Garnish.$bod);\n\n      if (this.$anchor) {\n        this.setPositionRelativeToAnchor();\n      }\n\n      this.$container.velocity('stop');\n      this.$container.css({\n        opacity: 1,\n        display: 'block',\n      });\n\n      this.$menuList.attr('aria-hidden', 'false');\n\n      Garnish.shortcutManager\n        .addLayer()\n        .registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n\n      this.addListener(\n        Garnish.$scrollContainer,\n        'scroll',\n        'setPositionRelativeToAnchor'\n      );\n\n      this.visible = true;\n      this.trigger('show');\n    },\n\n    hide: function () {\n      if (!this.visible) {\n        return;\n      }\n\n      this.$menuList.attr('aria-hidden', 'true');\n\n      this.$container.velocity(\n        'fadeOut',\n        { duration: Garnish.FX_DURATION },\n        function () {\n          this.$container.detach();\n        }.bind(this)\n      );\n\n      Garnish.shortcutManager.removeLayer();\n      this.removeListener(Garnish.$scrollContainer, 'scroll');\n      this.visible = false;\n      this.trigger('hide');\n    },\n\n    selectOption: function (option) {\n      this.settings.onOptionSelect(option);\n      this.trigger('optionselect', { selectedOption: option });\n      this.hide();\n    },\n\n    _alignLeft: function () {\n      this.$container.css({\n        left: this._anchorOffset.left,\n        right: 'auto',\n      });\n    },\n\n    _alignRight: function () {\n      this.$container.css({\n        right:\n          this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n        left: 'auto',\n      });\n    },\n\n    _alignCenter: function () {\n      var left = Math.round(\n        this._anchorOffset.left + this._anchorWidth / 2 - this._menuWidth / 2\n      );\n\n      if (left < 0) {\n        left = 0;\n      }\n\n      this.$container.css('left', left);\n    },\n  },\n  {\n    defaults: {\n      anchor: null,\n      windowSpacing: 5,\n      onOptionSelect: $.noop,\n    },\n  }\n);\n\n/**\n * @deprecated\n */\nGarnish.Menu = Garnish.CustomSelect;\n","/** global: Garnish */\n/**\n * Disclosure Widget\n */\nGarnish.DisclosureMenu = Garnish.Base.extend(\n  {\n    settings: null,\n\n    $trigger: null,\n    $container: null,\n    $alignmentElement: null,\n    $wrapper: null,\n\n    _windowWidth: null,\n    _windowHeight: null,\n    _windowScrollLeft: null,\n    _windowScrollTop: null,\n\n    _wrapperElementOffset: null,\n    _alignmentElementOffset: null,\n    _triggerWidth: null,\n    _triggerHeight: null,\n\n    _menuWidth: null,\n    _menuHeight: null,\n\n    /**\n     * Constructor\n     */\n    init: function (trigger, settings) {\n      this.setSettings(settings, Garnish.DisclosureMenu.defaults);\n\n      this.$trigger = $(trigger);\n      var triggerId = this.$trigger.attr('aria-controls');\n      this.$container = $(\"#\" + triggerId);\n\n      if (!this.$container) return; /* Exit if no disclosure container is found */\n\n      // Get and store expanded state from trigger\n      var expanded = this.$trigger.attr('aria-expanded');\n\n      // If no expanded state exists on trigger, add for a11y\n      if (!expanded) {\n        this.$trigger.attr('aria-expanded', 'false');\n      }\n\n      // Capture additional alignment element\n      var alignmentSelector = this.$container.data('align-to');\n      if (alignmentSelector) {\n        this.$alignmentElement = $(alignmentSelector);\n      } else {\n        this.$alignmentElement = this.$trigger;\n      }\n\n      var wrapper = this.$container.closest('[data-wrapper]');\n      if (wrapper) {\n        this.$wrapper = wrapper;\n      }\n\n      this.addDisclosureMenuEventListeners();\n    },\n\n    addDisclosureMenuEventListeners: function() {\n      this.addListener(this.$trigger, 'click', function() {\n        this.handleTriggerClick();\n      });\n\n      this.addListener(this.$container, 'keydown', function(event) {\n        this.handleKeypress(event);\n      });\n\n      this.addListener(Garnish.$doc, 'mousedown', this.handleMousedown)\n    },\n\n    focusElement: function(direction) {\n      var currentFocus = $(':focus');\n\n      var focusable = Garnish.findFocusable(this.$container);\n\n      var currentIndex = focusable.index(currentFocus);\n      var newIndex;\n\n      if (direction === 'prev') {\n        newIndex = currentIndex - 1;\n      } else {\n        newIndex = currentIndex + 1;\n      }\n\n      if (newIndex >= 0 && newIndex < focusable.length) {\n        var elementToFocus = focusable[newIndex];\n        elementToFocus.focus();\n      }\n    },\n\n    handleMousedown: function (event) {\n      var newTarget = event.target;\n      var triggerButton = $(newTarget).closest('[data-disclosure-trigger]');\n      var newTargetIsInsideDisclosure = this.$container.has(newTarget).length > 0;\n\n      // If click target matches trigger element or disclosure child, do nothing\n      if ($(triggerButton).is(this.$trigger) || newTargetIsInsideDisclosure) {\n        return;\n      }\n\n      this.hide();\n    },\n\n    handleKeypress: function(event) {\n      var keyCode = event.keyCode;\n      \n      switch (keyCode) {\n        case Garnish.RIGHT_KEY:\n        case Garnish.DOWN_KEY:\n          event.preventDefault();\n          this.focusElement('next');\n          break;\n        case Garnish.LEFT_KEY:\n        case Garnish.UP_KEY:\n          event.preventDefault();\n          this.focusElement('prev');\n          break;\n        default:\n          break;\n      }\n    },\n\n    isExpanded: function () {\n      var isExpanded = this.$trigger.attr('aria-expanded');\n\n      return isExpanded === 'true';\n    },\n\n    handleTriggerClick: function() {\n      if (!this.isExpanded()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    },\n\n    show: function () {\n      if (this.isExpanded()) {\n        return;\n      }\n\n      this.setContainerPosition();\n      this.addListener(\n        Garnish.$scrollContainer,\n        'scroll',\n        'setContainerPosition'\n      );\n      \n      this.$container.velocity('stop');\n      this.$container.css({\n        opacity: 1,\n        display: 'block',\n      });\n\n      \n      // Set ARIA attribute for expanded\n      this.$trigger.attr('aria-expanded', 'true');\n\n      // Focus first focusable element\n      var firstFocusableEl = this.$container.find(':focusable')[0];\n      if (firstFocusableEl) {\n        firstFocusableEl.focus();\n      } else {\n        this.$container.attr('tabindex', '-1');\n        this.$container.focus();\n      }\n\n      this.trigger('show');\n      Garnish.shortcutManager.addLayer();\n      Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, function() {\n        this.hide();\n        this.$trigger.focus();\n      }.bind(this));\n    },\n\n    hide: function () {\n      if (!this.isExpanded()) {\n        return;\n      }\n\n      this.$container.velocity(\n        'fadeOut',\n        { duration: Garnish.FX_DURATION }\n      );\n\n      this.$trigger.attr('aria-expanded', 'false');\n\n      this.trigger('hide');\n      Garnish.shortcutManager.removeLayer();\n    },\n\n    setContainerPosition: function () {\n      this._windowWidth = Garnish.$win.width();\n      this._windowHeight = Garnish.$win.height();\n      this._windowScrollLeft = Garnish.$win.scrollLeft();\n      this._windowScrollTop = Garnish.$win.scrollTop();\n\n      this._alignmentElementOffset = this.$alignmentElement[0].getBoundingClientRect();\n\n      this._wrapperElementOffset = this.$wrapper[0].getBoundingClientRect();\n\n      this._triggerWidth = this.$trigger.outerWidth();\n\n      this.$container.css('minWidth', 0);\n      this.$container.css(\n        'minWidth',\n        this._triggerWidth -\n          (this.$container.outerWidth() - this.$container.width())\n      );\n\n      this._menuWidth = this.$container.outerWidth();\n      this._menuHeight = this.$container.outerHeight();\n\n      // Is there room for the menu below the trigger?\n      var topClearance = this._alignmentElementOffset.top,\n        bottomClearance = this._windowHeight - this._alignmentElementOffset.bottom;\n\n      // Find top/bottom offset relative to wrapper element\n      var topAdjustment = this._alignmentElementOffset.top - this._wrapperElementOffset.top;\n      var bottomAdjustment = this._alignmentElementOffset.bottom - this._wrapperElementOffset.bottom;\n\n      var bottomClearanceExists = \n        bottomClearance >= this._menuHeight ||\n        (topClearance < this._menuHeight && bottomClearance >= topClearance);\n      \n      if (bottomClearanceExists) {\n        this.$container.css({\n          top: 'calc(100% + ' + bottomAdjustment + 'px)',\n          bottom: 'unset',\n          maxHeight: bottomClearance - this.settings.windowSpacing,\n        });\n      } else {\n        this.$container.css({\n          bottom: 'calc(100% - ' + topAdjustment + 'px)',\n          top: 'unset',\n          maxHeight: topClearance - this.settings.windowSpacing,\n        });\n      }\n\n      // Figure out how we're aliging it\n      var align = this.$container.data('align');\n\n      if (align !== 'left' && align !== 'center' && align !== 'right') {\n        align = 'left';\n      }\n\n      if (align === 'center') {\n        this._alignCenter();\n      } else {\n        // Figure out which options are actually possible\n        var rightClearance =\n            this._windowWidth +\n            this._windowScrollLeft -\n            (this._alignmentElementOffset.left + this._menuWidth),\n          leftClearance = this._alignmentElementOffset.right - this._menuWidth;\n\n        if ((align === 'right' && leftClearance >= 0) || rightClearance < 0) {\n          this._alignRight();\n        } else {\n          this._alignLeft();\n        }\n      }\n\n      delete this._windowWidth;\n      delete this._windowHeight;\n      delete this._windowScrollLeft;\n      delete this._windowScrollTop;\n      delete this._wrapperElementOffset;\n      delete this._alignmentElementOffset;\n      delete this._triggerWidth;\n      delete this._triggerHeight;\n      delete this._menuWidth;\n      delete this._menuHeight;\n    },\n\n    _alignLeft: function () {\n      var leftAdjustment = this._alignmentElementOffset.left - this._wrapperElementOffset.left;\n\n      this.$container.css({\n        right: 'unset',\n        left: leftAdjustment + 'px',\n      });\n    },\n\n    _alignRight: function () {\n      var rightAdjustment = this._alignmentElementOffset.right - this._wrapperElementOffset.right;\n      \n      this.$container.css({\n        left: 'unset',\n        right: - rightAdjustment + 'px',\n      });\n    },\n\n    _alignCenter: function () {\n      var left = Math.round(this._triggerWidth / 2 - this._menuWidth / 2);\n      var leftAdjustment = this._alignmentElementOffset.left - this._wrapperElementOffset.left;\n\n      this.$container.css('left', left - leftAdjustment);\n    },\n  },\n  {\n    defaults: {\n      windowSpacing: 5,\n    },\n  }\n);\n","/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) === -1) {\n                    this.otherItems.push(item);\n                }\n            }\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = this._updateHelperPos.bind(this);\n            }\n\n            this.helperLagIncrement = this.helpers.length === 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n                var callback;\n\n                if (i === 0) {\n                    callback = this._showDraggee.bind(this);\n                }\n                else {\n                    callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper\n                .outerWidth(Math.ceil($draggee.outerWidth()))\n                .outerHeight(Math.ceil($draggee.outerHeight()))\n                .css({margin: 0, 'pointer-events': 'none'});\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper === 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets === 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget !== this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n","/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion === 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee !== 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') !== this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }.bind(this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem !== this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem !== this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') !== this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item !== this.$draggee[0] &&\n                    (!this.$insertion || item !== this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY === this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * ESC key manager class\n * @deprecated Use Garnish.ShortcutManager instead\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj === obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                var func;\n\n                if (typeof handler.func === 'function') {\n                    func = handler.func;\n                }\n                else {\n                    func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger === 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n","/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n\n        updatingSizeAndPosition: false,\n        windowWidth: null,\n        windowHeight: null,\n        scrollTop: null,\n        scrollLeft: null,\n        mainWidth: null,\n        mainHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (typeof Garnish.HUD.activeHUDs === 'undefined') {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass}).data('hud', this);\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') === 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') !== 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            // Hide the HUD until it gets positioned\n\t\t\tthis.$hud.css('opacity', 0);\n            this.show();\n            this.$hud.css('opacity', 1);\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n\n            if (this.settings.hideOnShadeClick) {\n                this.addListener(this.$shade, 'tap,click', 'hide');\n            }\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            this.addListener(this.$main, 'resize', 'updateSizeAndPosition');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'updateSizeAndPosition');\n            }\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    if (!Garnish.HUD.activeHUDs.hasOwnProperty(hudID)) {\n                        continue;\n                    }\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.$shade.show();\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n            }\n\n            this.onShow();\n            this.enable();\n\n            if (this.updateRecords()) {\n                // Prevent the browser from jumping\n                this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n                this.updateSizeAndPosition(true);\n            }\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateRecords: function() {\n            var changed = false;\n            changed = (this.windowWidth !== (this.windowWidth = Garnish.$win.width())) || changed;\n            changed = (this.windowHeight !== (this.windowHeight = Garnish.$win.height())) || changed;\n            changed = (this.scrollTop !== (this.scrollTop = Garnish.$scrollContainer.scrollTop())) || changed;\n            changed = (this.scrollLeft !== (this.scrollLeft = Garnish.$scrollContainer.scrollLeft())) || changed;\n            changed = (this.mainWidth !== (this.mainWidth = this.$main.outerWidth())) || changed;\n            changed = (this.mainHeight !== (this.mainHeight = this.$main.outerHeight())) || changed;\n            return changed;\n        },\n\n        updateSizeAndPosition: function(force) {\n            if (force === true || (this.updateRecords() && !this.updatingSizeAndPosition)) {\n                this.updatingSizeAndPosition = true;\n                Garnish.requestAnimationFrame(this.updateSizeAndPositionInternal.bind(this));\n            }\n        },\n\n        updateSizeAndPositionInternal: function() {\n            var triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: this.windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: this.windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation === 'top' || orientation === 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) === -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                maxHudBodyWidth = this.windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = this.windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.mainWidth > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.mainHeight > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n            var triggerCenter, left, top;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (this.windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing);\n                var minLeft = (windowScrollLeft + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2);\n                left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation === 'top') {\n                    top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (this.windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing);\n                var minTop = (windowScrollTop + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2);\n                top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation === 'left') {\n                    left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            this.updatingSizeAndPosition = false;\n            this.trigger('updateSizeAndPosition');\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            if (!this.showing) {\n                return;\n            }\n\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n\n            this.showing = false;\n            delete Garnish.HUD.activeHUDs[this._namespace];\n            Garnish.shortcutManager.removeLayer();\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$hud) {\n                this.$hud.remove();\n            }\n\n            if (this.$shade) {\n                this.$shade.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, menu, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(menu)) {\n                // (btn, settings)\n                settings = menu;\n                menu = null;\n            }\n\n            this.$btn = $(btn);\n            var $menu;\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                if (!menu) {\n                    $menu = this.$btn.data('menubtn').menu.$container;\n                }\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else if (!menu) {\n                $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = menu || new Garnish.CustomSelect($menu);\n            this.menu.$anchor = $(this.settings.menuAnchor || this.$btn);\n            this.menu.on('optionselect', function(ev) {\n                this.onOptionSelect(ev.selectedOption);\n            }.bind(this));\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'aria-controls': this.menu.menuId,\n                'aria-haspopup': 'listbox',\n                'aria-expanded': 'false'\n            });\n\n            this.menu.on('hide', this.onMenuHide.bind(this));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function() {\n            if (this.showingMenu) {\n                Garnish.requestAnimationFrame(function() {\n                    if (!$.contains(this.menu.$container.get(0), document.activeElement)) {\n                        this.hideMenu();\n                    }\n                }.bind(this));\n            }\n        },\n\n        onKeyDown: function(ev) {\n            var $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    const $currentOption = this.menu.$options.filter('.hover');\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        const $currentOption = this.menu.$options.filter('.hover');\n                        if ($currentOption.length > 0) {\n                            $currentOption.get(0).click();\n                        }\n                    } else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which !== Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev) || ev.target.nodeName === 'INPUT') {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }.bind(this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.$btn.attr('aria-expanded', 'false');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') === 'INPUT');\n        },\n\n        onFocus: function() {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (typeof index === 'undefined') {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (typeof this.elements[index] !== 'undefined') {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index === 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index === this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout(function() {\n                this.setFocus($elem);\n            }.bind(this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index !== -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout(function() {\n                    if (this.focussedElement === $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }.bind(this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval(this.checkInput.bind(this), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout(this.checkInput.bind(this), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') === this.val.length && this.$input.prop('selectionEnd') === this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n","/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                this.addAriaAttributes(container);\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        addAriaAttributes: function(container) {\n            $(container).attr({\n                'aria-modal': 'true',\n                'role': 'dialog',\n            });\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: this._handleResizeStart.bind(this),\n                    onDrag: this._handleResize.bind(this)\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        hideOutsideContent: function() {\n            // Hide body content from screen reader users\n            var modal = this;\n\n            Garnish.$bod.children().each(function() {\n                if (modal.contentShouldBeHidden(this)) {\n                    modal.ariaHide(this);\n                }\n            });\n        },\n\n        resetOutsideContentVisibility: function() {\n            var ariaSelector = '.' + this.settings.jsAriaClass + ', .' + this.settings.jsAriaFalseClass + ', .' + this.settings.jsAriaTrueClass;\n\n            var ariaHiddenElements = $(ariaSelector);\n            var modal = this;\n\n            // Go through each and restore to initial value\n            $(ariaHiddenElements).each(function() {\n                if ($(this).hasClass(modal.settings.jsAriaClass)) {\n                    $(this).removeClass(modal.settings.jsAriaClass);\n                    $(this).removeAttr('aria-hidden');\n                } else if ($(this).hasClass(modal.settings.jsAriaFalseClass)) {\n                    $(this).removeClass(modal.settings.jsAriaFalseClass);\n                    $(this).attr('aria-hidden', false);\n                } else if ($(this).hasClass(modal.settings.jsAriaTrueClass)) {\n                    $(this).removeClass(modal.settings.jsAriaTrueClass);\n                    $(this).attr('aria-hidden', true);\n                }\n            });\n        },\n\n        ariaHide: function(element) {\n            var ariaHiddenAttribute = $(element).attr('aria-hidden');\n\n            // Capture initial aria-hidden values in an applied class\n            if (!ariaHiddenAttribute) {\n                $(element).addClass(this.settings.jsAriaClass);\n            } else if (ariaHiddenAttribute === 'false') {\n                $(element).addClass(this.settings.jsAriaFalseClass);\n            } else if (ariaHiddenAttribute === 'true') {\n                $(element.addClass(this.settings.jsAriaTrueClass));\n            }\n\n            $(element).attr('aria-hidden', 'true');\n        },\n\n        contentShouldBeHidden: function(element) {\n            var hide = true;\n            var tagName = $(element).prop('tagName');\n\n            if (tagName === 'SCRIPT' || tagName === 'STYLE' || element === Garnish.Modal.visibleModal.$container.get(0)) {\n                hide = false;\n            }\n\n            return hide;\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal !== this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {\n                    duration: 50,\n                    complete: function() {\n                        this.$container.velocity('fadeIn', {\n                            complete: function() {\n                                this.updateSizeAndPosition();\n                                this.moveFocusInto();\n                                this.onFadeIn();\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                // Add keydown listener for focus trap\n                this.addListener(this.$container, 'keydown', 'handleKeydown');\n\n                this.addListener(Garnish.$win, 'resize', '_handleWindowResize');\n            }\n\n            this.enable();\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                Garnish.shortcutManager.addLayer();\n\n                if (this.settings.hideOnEsc) {\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n                }\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n\n            this.hideOutsideContent();\n        },\n\n        moveFocusInto: function() {\n            var focusable = Garnish.findFocusable(this.$container);\n\n            if (!focusable.length) return;\n\n            focusable.first().focus();\n        },\n\n        handleKeydown: function(event) {\n            if (event.keyCode !== Garnish.TAB_KEY) return;\n\n            var focusable = Garnish.findFocusable(this.$container);\n            var target = $(event.target);\n\n            if (event.shiftKey) { // Handle reverse TAB by looping to beginning of container\n                if (target.is(focusable.first())) {\n                    focusable.last().focus();\n                    event.preventDefault();\n                }\n            } else {\n                if (target.is(focusable.last())) {\n                    focusable.first().focus();\n                    event.preventDefault();\n                }\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            if (!this.visible) {\n                return;\n            }\n\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: this.onFadeOut.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                // Remove keydown listener for focus trap\n                this.removeListener(this.$container, 'keydown', 'handleKeydown');\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            if (this.settings.triggerElement) {\n                this.settings.triggerElement.focus();\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n            Garnish.shortcutManager.removeLayer();\n            this.trigger('hide');\n            this.resetOutsideContentVisibility();\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleWindowResize: function(ev) {\n            // ignore propagated resize events\n            if (ev.target === window) {\n                this.updateSizeAndPosition();\n            }\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.$shade) {\n                this.$shade.remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            triggerElement: null,\n            shadeClass: 'modal-shade',\n            jsAriaClass: 'garnish-js-aria',\n            jsAriaTrueClass: 'garnish-js-aria-true',\n            jsAriaFalseClass: 'garnish-js-aria-false',\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n","/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: false,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') === 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div aria-live=\"polite\" class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        onKeyDown: function(ev) {\n            // If Ctrl/Command + Return is pressed, submit the closest form\n            if (ev.keyCode === Garnish.RETURN_KEY && Garnish.isCtrlKeyPressed(ev)) {\n                ev.preventDefault();\n                this.$input.closest('form').submit();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbsp;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.html(Garnish.NiceText.charsLeftHtml(this.updateCharsLeft._charsLeft));\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        charsLeftHtml: function(charsLeft) {\n            return charsLeft;\n        },\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n        $focusedItem: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (typeof items === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function() {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) !== -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            var sliceFrom, sliceTo;\n\n            if (this.first < this.last) {\n                sliceFrom = this.first;\n                sliceTo = this.last + 1;\n            }\n            else {\n                sliceFrom = this.last;\n                sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            var step;\n\n            if (Garnish.rtl && axis === Garnish.X_AXIS) {\n                step = dirProps.step * -1;\n            }\n            else {\n                step = dirProps.step;\n            }\n\n            for (var i = index + step; (typeof this.$items[i] !== 'undefined'); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] !== otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                var $handle;\n\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle === 'object') {\n                        $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'string') {\n                        $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'function') {\n                        $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function() {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex !== -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.$focusedItem) {\n                this.setFocusableItem(this.$focusedItem);\n                this.focusItem(this.$focusedItem, true);\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param {object} $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            $item[0].focus({preventScroll: !!preventScroll});\n            this.$focusedItem = $item;\n            this.trigger('focusItem', {item: $item});\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget === this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout(function() {\n                        this.deselectOthers($item);\n                    }.bind(this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target !== ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n            var shiftKey = ev.shiftKey;\n\n            var anchor, $item;\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor === -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getLastItem();\n                        }\n                        else {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getFirstItem();\n                        }\n                        else {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey && !shiftKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true, false);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item, false);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true, false);\n                    }\n                }\n                else {\n                    // just set the new item to be focusable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                    this.$focusedItem = $item;\n                    this.trigger('focusItem', {item: $item});\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n\n            if (this.$focusedItem && this.$focusedItem[0] === item) {\n                this.$focusedItem = null;\n            }\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.CustomSelect.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings === 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected !== -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option === this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected !== -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n","/** global: Garnish */\n/**\n * Keyboard shortcut manager class\n *\n * This can be used to map keyboard events to the current UI \"layer\" (whether that's the base document,\n * a modal, an HUD, or a menu).\n */\nGarnish.ShortcutManager = Garnish.Base.extend(\n    {\n        shortcuts: null,\n        layer: 0,\n\n        init: function() {\n            this.shortcuts = [[]];\n            this.addListener(Garnish.$bod, 'keydown', 'triggerShortcut');\n        },\n\n        addLayer: function() {\n            this.layer++;\n            this.shortcuts.push([]);\n            return this;\n        },\n\n        removeLayer: function() {\n            if (this.layer === 0) {\n                throw 'Can’t remove the base layer.';\n            }\n            this.layer--;\n            this.shortcuts.pop();\n            return this;\n        },\n\n        registerShortcut: function(shortcut, callback, layer) {\n            shortcut = this._normalizeShortcut(shortcut);\n            if (typeof layer === 'undefined') {\n                layer = this.layer;\n            }\n            this.shortcuts[layer].push({\n                key: JSON.stringify(shortcut),\n                shortcut: shortcut,\n                callback: callback,\n            });\n            return this;\n        },\n\n        unregisterShortcut: function(shortcut, layer) {\n            shortcut = this._normalizeShortcut(shortcut);\n            var key = JSON.stringify(shortcut);\n            if (typeof layer === 'undefined') {\n                layer = this.layer;\n            }\n            for (var i = 0; i < this.shortcuts[layer].length; i++) {\n                if (this.shortcuts[layer][i].key === key) {\n                    this.shortcuts[layer].splice(i, 1);\n                    break;\n                }\n            }\n            return this;\n        },\n\n        _normalizeShortcut: function(shortcut) {\n            if (typeof shortcut === 'number') {\n                shortcut = {keyCode: shortcut};\n            }\n\n            if (typeof shortcut.keyCode !== 'number') {\n                throw 'Invalid shortcut';\n            }\n\n            return {\n                keyCode: shortcut.keyCode,\n                ctrl: !!shortcut.ctrl,\n                shift: !!shortcut.shift,\n                alt: !!shortcut.alt,\n            };\n        },\n\n        triggerShortcut: function(ev) {\n            var shortcut;\n            for (var i = 0; i < this.shortcuts[this.layer].length; i++) {\n                shortcut = this.shortcuts[this.layer][i].shortcut;\n                if (\n                    shortcut.keyCode === ev.keyCode &&\n                    shortcut.ctrl === Garnish.isCtrlKeyPressed(ev) &&\n                    shortcut.shift === ev.shiftKey &&\n                    shortcut.alt === ev.altKey\n                ) {\n                    ev.preventDefault();\n                    this.shortcuts[this.layer][i].callback(ev);\n                    break;\n                }\n            }\n        },\n    }\n);\n\nGarnish.shortcutManager = new Garnish.ShortcutManager();\n","/**\n * Garnish UI toolkit\n *\n * @copyright 2013 Pixel & Tonic, Inc.. All rights reserved.\n * @author    Brandon Kelly <brandon@pixelandtonic.com>\n * @version   0.1\n * @license   MIT\n */\n(function($){\n\n/*!\r\n\tBase.js, version 1.1a\r\n\tCopyright 2006-2010, Dean Edwards\r\n\tLicense: http://www.opensource.org/licenses/mit-license.php\r\n*/\r\n\r\nvar Base = function() {\r\n\t// dummy\r\n};\r\n\r\nBase.extend = function(_instance, _static) { // subclass\r\n\tvar extend = Base.prototype.extend;\r\n\r\n\t// build the prototype\r\n\tBase._prototyping = true;\r\n\tvar proto = new this;\r\n\textend.call(proto, _instance);\r\n\tproto.base = function() {\r\n\t\t// call this method from any other method to invoke that method's ancestor\r\n\t};\r\n\tdelete Base._prototyping;\r\n\r\n\t// create the wrapper for the constructor function\r\n\t//var constructor = proto.constructor.valueOf(); //-dean\r\n\tvar constructor = proto.constructor;\r\n\tvar klass = proto.constructor = function() {\r\n\t\tif (!Base._prototyping) {\r\n\t\t\tif (this._constructing || this.constructor == klass) { // instantiation\r\n\t\t\t\tthis._constructing = true;\r\n\t\t\t\tconstructor.apply(this, arguments);\r\n\t\t\t\tdelete this._constructing;\r\n\t\t\t} else if (arguments[0] != null) { // casting\r\n\t\t\t\treturn (arguments[0].extend || extend).call(arguments[0], proto);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\t// build the class interface\r\n\tklass.ancestor = this;\r\n\tklass.extend = this.extend;\r\n\tklass.forEach = this.forEach;\r\n\tklass.implement = this.implement;\r\n\tklass.prototype = proto;\r\n\tklass.toString = this.toString;\r\n\tklass.valueOf = function(type) {\r\n\t\t//return (type == \"object\") ? klass : constructor; //-dean\r\n\t\treturn (type == \"object\") ? klass : constructor.valueOf();\r\n\t};\r\n\textend.call(klass, _static);\r\n\t// class initialisation\r\n\tif (typeof klass.init == \"function\") klass.init();\r\n\treturn klass;\r\n};\r\n\r\nBase.prototype = {\r\n\textend: function(source, value) {\r\n\t\tif (arguments.length > 1) { // extending with a name/value pair\r\n\t\t\tvar ancestor = this[source];\r\n\t\t\tif (ancestor && (typeof value == \"function\") && // overriding a method?\r\n\t\t\t\t// the valueOf() comparison is to avoid circular references\r\n\t\t\t\t(!ancestor.valueOf || ancestor.valueOf() != value.valueOf()) &&\r\n\t\t\t\t/\\bbase\\b/.test(value)) {\r\n\t\t\t\t// get the underlying method\r\n\t\t\t\tvar method = value.valueOf();\r\n\t\t\t\t// override\r\n\t\t\t\tvalue = function() {\r\n\t\t\t\t\tvar previous = this.base || Base.prototype.base;\r\n\t\t\t\t\tthis.base = ancestor;\r\n\t\t\t\t\tvar returnValue = method.apply(this, arguments);\r\n\t\t\t\t\tthis.base = previous;\r\n\t\t\t\t\treturn returnValue;\r\n\t\t\t\t};\r\n\t\t\t\t// point to the underlying method\r\n\t\t\t\tvalue.valueOf = function(type) {\r\n\t\t\t\t\treturn (type == \"object\") ? value : method;\r\n\t\t\t\t};\r\n\t\t\t\tvalue.toString = Base.toString;\r\n\t\t\t}\r\n\t\t\tthis[source] = value;\r\n\t\t} else if (source) { // extending with an object literal\r\n\t\t\tvar extend = Base.prototype.extend;\r\n\t\t\t// if this object has a customised extend method then use it\r\n\t\t\tif (!Base._prototyping && typeof this != \"function\") {\r\n\t\t\t\textend = this.extend || extend;\r\n\t\t\t}\r\n\t\t\tvar proto = {toSource: null};\r\n\t\t\t// do the \"toString\" and other methods manually\r\n\t\t\tvar hidden = [\"constructor\", \"toString\", \"valueOf\"];\r\n\t\t\t// if we are prototyping then include the constructor\r\n\t\t\tvar i = Base._prototyping ? 0 : 1;\r\n\t\t\twhile (key = hidden[i++]) {\r\n\t\t\t\tif (source[key] != proto[key]) {\r\n\t\t\t\t\textend.call(this, key, source[key]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// copy each of the source object's properties to this object\r\n\t\t\tfor (var key in source) {\r\n\t\t\t\tif (!proto[key]) {\r\n\t\t\t\t\tvar desc = Object.getOwnPropertyDescriptor(source, key);\r\n\t\t\t\t\tif (typeof desc.value != typeof undefined) {\r\n\t\t\t\t\t\t// set the value normally in case it's a function that needs to be overwritten\r\n\t\t\t\t\t\textend.call(this, key, desc.value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// set it while maintaining the original descriptor settings\r\n\t\t\t\t\t\tObject.defineProperty(this, key, desc);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n};\r\n\r\n// initialise\r\nBase = Base.extend({\r\n\tconstructor: function() {\r\n\t\tthis.extend(arguments[0]);\r\n\t}\r\n}, {\r\n\tancestor: Object,\r\n\tversion: \"1.1\",\r\n\r\n\tforEach: function(object, block, context) {\r\n\t\tfor (var key in object) {\r\n\t\t\tif (this.prototype[key] === undefined) {\r\n\t\t\t\tblock.call(context, object[key], key, object);\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\timplement: function() {\r\n\t\tfor (var i = 0; i < arguments.length; i++) {\r\n\t\t\tif (typeof arguments[i] == \"function\") {\r\n\t\t\t\t// if it's a function, call it\r\n\t\t\t\targuments[i](this.prototype);\r\n\t\t\t} else {\r\n\t\t\t\t// add the interface using the extend method\r\n\t\t\t\tthis.prototype.extend(arguments[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t},\r\n\r\n\ttoString: function() {\r\n\t\treturn String(this.valueOf());\r\n\t}\r\n});\r\n\n/**\n * @namespace Garnish\n */\n\n// Bail if Garnish is already defined\nif (typeof Garnish !== 'undefined') {\n    throw 'Garnish is already defined!';\n}\n\nGarnish = {\n\n    // jQuery objects for common elements\n    $win: $(window),\n    $doc: $(document),\n    $bod: $(document.body)\n\n};\n\nGarnish.rtl = Garnish.$bod.hasClass('rtl');\nGarnish.ltr = !Garnish.rtl;\n\nGarnish = $.extend(Garnish, {\n\n    $scrollContainer: Garnish.$win,\n\n    // Key code constants\n    DELETE_KEY: 8,\n    SHIFT_KEY: 16,\n    TAB_KEY: 9,\n    CTRL_KEY: 17,\n    ALT_KEY: 18,\n    RETURN_KEY: 13,\n    ESC_KEY: 27,\n    SPACE_KEY: 32,\n    LEFT_KEY: 37,\n    UP_KEY: 38,\n    RIGHT_KEY: 39,\n    DOWN_KEY: 40,\n    A_KEY: 65,\n    S_KEY: 83,\n    CMD_KEY: 91,\n\n    // Mouse button constants\n    PRIMARY_CLICK: 1,\n    SECONDARY_CLICK: 3,\n\n    // Axis constants\n    X_AXIS: 'x',\n    Y_AXIS: 'y',\n\n    FX_DURATION: 100,\n\n    // Node types\n    TEXT_NODE: 3,\n\n    /**\n     * Logs a message to the browser's console, if the browser has one.\n     *\n     * @param {string} msg\n     */\n    log: function(msg) {\n        if (typeof console !== 'undefined' && typeof console.log === 'function') {\n            console.log(msg);\n        }\n    },\n\n    _isMobileBrowser: null,\n    _isMobileOrTabletBrowser: null,\n\n    /**\n     * Returns whether this is a mobile browser.\n     * Detection script courtesy of http://detectmobilebrowsers.com\n     *\n     * Last updated: 2014-11-24\n     *\n     * @param {boolean} detectTablets\n     * @return {boolean}\n     */\n    isMobileBrowser: function(detectTablets) {\n        var key = detectTablets ? '_isMobileOrTabletBrowser' : '_isMobileBrowser';\n\n        if (Garnish[key] === null) {\n            var a = navigator.userAgent || navigator.vendor || window.opera;\n            Garnish[key] = ((new RegExp('(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino' + (detectTablets ? '|android|ipad|playbook|silk' : ''), 'i')).test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)));\n        }\n\n        return Garnish[key];\n    },\n\n    /**\n     * Returns whether a variable is an array.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isArray: function(val) {\n        return (val instanceof Array);\n    },\n\n    /**\n     * Returns whether a variable is a jQuery collection.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isJquery: function(val) {\n        return (val instanceof jQuery);\n    },\n\n    /**\n     * Returns whether a variable is a string.\n     *\n     * @param {object} val\n     * @return {boolean}\n     */\n    isString: function(val) {\n        return (typeof val === 'string');\n    },\n\n    /**\n     * Returns whether an element has an attribute.\n     *\n     * @see http://stackoverflow.com/questions/1318076/jquery-hasattr-checking-to-see-if-there-is-an-attribute-on-an-element/1318091#1318091\n     */\n    hasAttr: function(elem, attr) {\n        var val = $(elem).attr(attr);\n        return (typeof val !== 'undefined' && val !== false);\n    },\n\n    /**\n     * Returns whether something is a text node.\n     *\n     * @param {object} elem\n     * @return {boolean}\n     */\n    isTextNode: function(elem) {\n        return (elem.nodeType === Garnish.TEXT_NODE);\n    },\n\n    /**\n     * Returns the offset of an element within the scroll container, whether that's the window or something else\n     */\n    getOffset: function(elem) {\n        this.getOffset._offset = $(elem).offset();\n\n        if (Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n            this.getOffset._offset.top += Garnish.$scrollContainer.scrollTop();\n            this.getOffset._offset.left += Garnish.$scrollContainer.scrollLeft();\n        }\n\n        return this.getOffset._offset;\n    },\n\n    /**\n     * Returns the distance between two coordinates.\n     *\n     * @param {number} x1 The first coordinate's X position.\n     * @param {number} y1 The first coordinate's Y position.\n     * @param {number} x2 The second coordinate's X position.\n     * @param {number} y2 The second coordinate's Y position.\n     * @return {number}\n     */\n    getDist: function(x1, y1, x2, y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    },\n\n    /**\n     * Returns whether an element is touching an x/y coordinate.\n     *\n     * @param {number}    x    The coordinate's X position.\n     * @param {number}    y    The coordinate's Y position.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    hitTest: function(x, y, elem) {\n        Garnish.hitTest._$elem = $(elem);\n        Garnish.hitTest._offset = Garnish.hitTest._$elem.offset();\n        Garnish.hitTest._x1 = Garnish.hitTest._offset.left;\n        Garnish.hitTest._y1 = Garnish.hitTest._offset.top;\n        Garnish.hitTest._x2 = Garnish.hitTest._x1 + Garnish.hitTest._$elem.outerWidth();\n        Garnish.hitTest._y2 = Garnish.hitTest._y1 + Garnish.hitTest._$elem.outerHeight();\n\n        return (x >= Garnish.hitTest._x1 && x < Garnish.hitTest._x2 && y >= Garnish.hitTest._y1 && y < Garnish.hitTest._y2);\n    },\n\n    /**\n     * Returns whether the cursor is touching an element.\n     *\n     * @param {object} ev   The mouse event object containing pageX and pageY properties.\n     * @param {object} elem Either an actual element or a jQuery collection.\n     * @return {boolean}\n     */\n    isCursorOver: function(ev, elem) {\n        return Garnish.hitTest(ev.pageX, ev.pageY, elem);\n    },\n\n    /**\n     * Copies text styles from one element to another.\n     *\n     * @param {object} source The source element. Can be either an actual element or a jQuery collection.\n     * @param {object} target The target element. Can be either an actual element or a jQuery collection.\n     */\n    copyTextStyles: function(source, target) {\n        var $source = $(source),\n            $target = $(target);\n\n        $target.css({\n            fontFamily: $source.css('fontFamily'),\n            fontSize: $source.css('fontSize'),\n            fontWeight: $source.css('fontWeight'),\n            letterSpacing: $source.css('letterSpacing'),\n            lineHeight: $source.css('lineHeight'),\n            textAlign: $source.css('textAlign'),\n            textIndent: $source.css('textIndent'),\n            whiteSpace: $source.css('whiteSpace'),\n            wordSpacing: $source.css('wordSpacing'),\n            wordWrap: $source.css('wordWrap')\n        });\n    },\n\n    /**\n     * Returns the body's real scrollTop, discarding any window banding in Safari.\n     *\n     * @return {number}\n     */\n    getBodyScrollTop: function() {\n        Garnish.getBodyScrollTop._scrollTop = document.body.scrollTop;\n\n        if (Garnish.getBodyScrollTop._scrollTop < 0) {\n            Garnish.getBodyScrollTop._scrollTop = 0;\n        }\n        else {\n            Garnish.getBodyScrollTop._maxScrollTop = Garnish.$bod.outerHeight() - Garnish.$win.height();\n\n            if (Garnish.getBodyScrollTop._scrollTop > Garnish.getBodyScrollTop._maxScrollTop) {\n                Garnish.getBodyScrollTop._scrollTop = Garnish.getBodyScrollTop._maxScrollTop;\n            }\n        }\n\n        return Garnish.getBodyScrollTop._scrollTop;\n    },\n\n    requestAnimationFrame: (function() {\n            var raf = (\n                window.requestAnimationFrame ||\n                window.mozRequestAnimationFrame ||\n                window.webkitRequestAnimationFrame ||\n                function(fn) {\n                    return window.setTimeout(fn, 20);\n                }\n            );\n\n            return function(fn) {\n                return raf(fn);\n            };\n        })(),\n\n    cancelAnimationFrame: (function() {\n            var cancel = (\n                window.cancelAnimationFrame ||\n                window.mozCancelAnimationFrame ||\n                window.webkitCancelAnimationFrame ||\n                window.clearTimeout\n            );\n\n            return function(id) {\n                return cancel(id);\n            };\n        })(),\n\n    /**\n     * Scrolls a container element to an element within it.\n     *\n     * @param {object} container Either an actual element or a jQuery collection.\n     * @param {object} elem      Either an actual element or a jQuery collection.\n     */\n    scrollContainerToElement: function(container, elem) {\n        var $elem;\n\n        if (typeof elem === 'undefined') {\n            $elem = $(container);\n            $container = $elem.scrollParent();\n        }\n        else {\n            var $container = $(container);\n            $elem = $(elem);\n        }\n\n        if ($container.prop('nodeName') === 'HTML' || $container[0] === Garnish.$doc[0]) {\n            $container = Garnish.$win;\n        }\n\n        var scrollTop = $container.scrollTop(),\n            elemOffset = $elem.offset().top;\n\n        var elemScrollOffset;\n\n        if ($container[0] === window) {\n            elemScrollOffset = elemOffset - scrollTop;\n        }\n        else {\n            elemScrollOffset = elemOffset - $container.offset().top;\n        }\n\n        var targetScrollTop = false;\n\n        // Is the element above the fold?\n        if (elemScrollOffset < 0) {\n            targetScrollTop = scrollTop + elemScrollOffset - 10;\n        }\n        else {\n            var elemHeight = $elem.outerHeight(),\n                containerHeight = ($container[0] === window ? window.innerHeight : $container[0].clientHeight);\n\n            // Is it below the fold?\n            if (elemScrollOffset + elemHeight > containerHeight) {\n                targetScrollTop = scrollTop + (elemScrollOffset - (containerHeight - elemHeight)) + 10;\n            }\n        }\n\n        if (targetScrollTop !== false) {\n            // Velocity only allows you to scroll to an arbitrary position if you're scrolling the main window\n            if ($container[0] === window) {\n                $('html').velocity('scroll', {\n                    offset: targetScrollTop + 'px',\n                    mobileHA: false\n                });\n            }\n            else {\n                $container.scrollTop(targetScrollTop);\n            }\n        }\n    },\n\n    SHAKE_STEPS: 10,\n    SHAKE_STEP_DURATION: 25,\n\n    /**\n     * Shakes an element.\n     *\n     * @param {object}  elem Either an actual element or a jQuery collection.\n     * @param {string} prop The property that should be adjusted (default is 'margin-left').\n     */\n    shake: function(elem, prop) {\n        var $elem = $(elem);\n\n        if (!prop) {\n            prop = 'margin-left';\n        }\n\n        var startingPoint = parseInt($elem.css(prop));\n        if (isNaN(startingPoint)) {\n            startingPoint = 0;\n        }\n\n        for (var i = 0; i <= Garnish.SHAKE_STEPS; i++) {\n            (function(i) {\n                setTimeout(function() {\n                    Garnish.shake._properties = {};\n                    Garnish.shake._properties[prop] = startingPoint + (i % 2 ? -1 : 1) * (10 - i);\n                    $elem.velocity(Garnish.shake._properties, Garnish.SHAKE_STEP_DURATION);\n                }, (Garnish.SHAKE_STEP_DURATION * i));\n            })(i);\n        }\n    },\n\n    /**\n     * Returns the first element in an array or jQuery collection.\n     *\n     * @param {object} elem\n     * @return mixed\n     */\n    getElement: function(elem) {\n        return $.makeArray(elem)[0];\n    },\n\n    /**\n     * Returns the beginning of an input's name= attribute value with any [bracktes] stripped out.\n     *\n     * @param {object} elem\n     * @return string|null\n     */\n    getInputBasename: function(elem) {\n        var name = $(elem).attr('name');\n\n        if (name) {\n            return name.replace(/\\[.*/, '');\n        }\n        else {\n            return null;\n        }\n    },\n\n    /**\n     * Returns an input's value as it would be POSTed.\n     * So unchecked checkboxes and radio buttons return null,\n     * and multi-selects whose name don't end in \"[]\" only return the last selection\n     *\n     * @param {object} $input\n     * @return {(string|string[])}\n     */\n    getInputPostVal: function($input) {\n        var type = $input.attr('type'),\n            val = $input.val();\n\n        // Is this an unchecked checkbox or radio button?\n        if ((type === 'checkbox' || type === 'radio')) {\n            if ($input.prop('checked')) {\n                return val;\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Flatten any array values whose input name doesn't end in \"[]\"\n        //  - e.g. a multi-select\n        else if (Garnish.isArray(val) && $input.attr('name').substr(-2) !== '[]') {\n            if (val.length) {\n                return val[val.length - 1];\n            }\n            else {\n                return null;\n            }\n        }\n\n        // Just return the value\n        else {\n            return val;\n        }\n    },\n\n    /**\n     * Returns the inputs within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findInputs: function(container) {\n        return $(container).find('input,text,textarea,select,button');\n    },\n\n    /**\n     * Returns the focusable elements within a container\n     *\n     * @param {object} container The container element. Can be either an actual element or a jQuery collection.\n     * @return {object}\n     */\n    findFocusable: function(container) {\n        return $(container).find(':focusable');\n    },\n\n    /**\n     * Returns the currently focused element\n     *\n     * @return {object}\n     */\n    findCurrentFocus: function() {\n        return $(':focus');\n    },\n\n    /**\n     * Returns the post data within a container.\n     *\n     * @param {object} container\n     * @return {array}\n     */\n    getPostData: function(container) {\n        var postData = {},\n            arrayInputCounters = {},\n            $inputs = Garnish.findInputs(container);\n\n        var inputName;\n\n        for (var i = 0; i < $inputs.length; i++) {\n            var $input = $inputs.eq(i);\n\n            if ($input.prop('disabled')) {\n                continue;\n            }\n\n            inputName = $input.attr('name');\n            if (!inputName) {\n                continue;\n            }\n\n            var inputVal = Garnish.getInputPostVal($input);\n            if (inputVal === null) {\n                continue;\n            }\n\n            var isArrayInput = (inputName.substr(-2) === '[]');\n\n            if (isArrayInput) {\n                // Get the cropped input name\n                var croppedName = inputName.substring(0, inputName.length - 2);\n\n                // Prep the input counter\n                if (typeof arrayInputCounters[croppedName] === 'undefined') {\n                    arrayInputCounters[croppedName] = 0;\n                }\n            }\n\n            if (!Garnish.isArray(inputVal)) {\n                inputVal = [inputVal];\n            }\n\n            for (var j = 0; j < inputVal.length; j++) {\n                if (isArrayInput) {\n                    inputName = croppedName + '[' + arrayInputCounters[croppedName] + ']';\n                    arrayInputCounters[croppedName]++;\n                }\n\n                postData[inputName] = inputVal[j];\n            }\n        }\n\n        return postData;\n    },\n\n    copyInputValues: function(source, target) {\n        var $sourceInputs = Garnish.findInputs(source),\n            $targetInputs = Garnish.findInputs(target);\n\n        for (var i = 0; i < $sourceInputs.length; i++) {\n            if (typeof $targetInputs[i] === 'undefined') {\n                break;\n            }\n\n            $targetInputs.eq(i).val(\n                $sourceInputs.eq(i).val()\n            );\n        }\n    },\n\n    /**\n     * Returns whether the \"Ctrl\" key is pressed (or ⌘ if this is a Mac) for a given keyboard event\n     *\n     * @param ev The keyboard event\n     *\n     * @return {boolean} Whether the \"Ctrl\" key is pressed\n     */\n    isCtrlKeyPressed: function(ev) {\n        if (window.navigator.platform.match(/Mac/)) {\n            // metaKey maps to ⌘ on Macs\n            return ev.metaKey;\n        }\n        return ev.ctrlKey;\n    },\n\n    _eventHandlers: [],\n\n    _normalizeEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(' ');\n        }\n\n        for (var i = 0; i < events.length; i++) {\n            if (typeof events[i] === 'string') {\n                events[i] = events[i].split('.');\n            }\n        }\n\n        return events;\n    },\n\n    on: function(target, events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                target: target,\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(target, events, handler) {\n        events = this._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.target === target &&\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    }\n});\n\n\n/**\n * Garnish base class\n */\nGarnish.Base = Base.extend({\n\n    settings: null,\n\n    _eventHandlers: null,\n    _namespace: null,\n    _$listeners: null,\n    _disabled: false,\n\n    constructor: function() {\n        this._eventHandlers = [];\n        this._namespace = '.Garnish' + Math.floor(Math.random() * 1000000000);\n        this._listeners = [];\n        this.init.apply(this, arguments);\n    },\n\n    init: $.noop,\n\n    setSettings: function(settings, defaults) {\n        var baseSettings = (typeof this.settings === 'undefined' ? {} : this.settings);\n        this.settings = $.extend({}, baseSettings, defaults, settings);\n    },\n\n    on: function(events, data, handler) {\n        if (typeof data === 'function') {\n            handler = data;\n            data = {};\n        }\n\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n            this._eventHandlers.push({\n                type: ev[0],\n                namespace: ev[1],\n                data: data,\n                handler: handler\n            });\n        }\n    },\n\n    off: function(events, handler) {\n        events = Garnish._normalizeEvents(events);\n\n        for (var i = 0; i < events.length; i++) {\n            var ev = events[i];\n\n            for (var j = this._eventHandlers.length - 1; j >= 0; j--) {\n                var eventHandler = this._eventHandlers[j];\n\n                if (\n                    eventHandler.type === ev[0] &&\n                    (!ev[1] || eventHandler.namespace === ev[1]) &&\n                    eventHandler.handler === handler\n                ) {\n                    this._eventHandlers.splice(j, 1);\n                }\n            }\n        }\n    },\n\n    trigger: function(type, data) {\n        var ev = {\n            type: type,\n            target: this\n        };\n\n        // instance level event handlers\n        var i, handler, _ev;\n        for (i = 0; i < this._eventHandlers.length; i++) {\n            handler = this._eventHandlers[i];\n\n            if (handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n\n        // class level event handlers\n        for (i = 0; i < Garnish._eventHandlers.length; i++) {\n            handler = Garnish._eventHandlers[i];\n\n            if (this instanceof handler.target && handler.type === type) {\n                _ev = $.extend({data: handler.data}, data, ev);\n                handler.handler(_ev);\n            }\n        }\n    },\n\n    _splitEvents: function(events) {\n        if (typeof events === 'string') {\n            events = events.split(',');\n\n            for (var i = 0; i < events.length; i++) {\n                events[i] = $.trim(events[i]);\n            }\n        }\n\n        return events;\n    },\n\n    _formatEvents: function(events) {\n        events = this._splitEvents(events).slice(0);\n\n        for (var i = 0; i < events.length; i++) {\n            events[i] += this._namespace;\n        }\n\n        return events.join(' ');\n    },\n\n    addListener: function(elem, events, data, func) {\n        var $elem = $(elem);\n\n        // Ignore if there aren't any elements\n        if (!$elem.length) {\n            return;\n        }\n\n        events = this._splitEvents(events);\n\n        // Param mapping\n        if (typeof func === 'undefined' && typeof data !== 'object') {\n            // (elem, events, func)\n            func = data;\n            data = {};\n        }\n\n        if (typeof func === 'function') {\n            func = func.bind(this);\n        }\n        else {\n            func = this[func].bind(this);\n        }\n\n        $elem.on(this._formatEvents(events), data, $.proxy(function() {\n            if (!this._disabled) {\n                return func.apply(this, arguments);\n            }\n        }, this));\n\n        // Remember that we're listening to this element\n        if ($.inArray(elem, this._listeners) === -1) {\n            this._listeners.push(elem);\n        }\n    },\n\n    removeListener: function(elem, events) {\n        $(elem).off(this._formatEvents(events));\n    },\n\n    removeAllListeners: function(elem) {\n        $(elem).off(this._namespace);\n    },\n\n    disable: function() {\n        this._disabled = true;\n    },\n\n    enable: function() {\n        this._disabled = false;\n    },\n\n    destroy: function() {\n        this.trigger('destroy');\n        this.removeAllListeners(this._listeners);\n    }\n});\n\n// Custom events\n// -----------------------------------------------------------------------------\n\nvar erd;\n\nfunction getErd() {\n    if (typeof erd === 'undefined') {\n        erd = elementResizeDetectorMaker({\n            callOnAdd: false\n        });\n    }\n\n    return erd;\n}\n\nfunction triggerResizeEvent(elem) {\n    $(elem).trigger('resize');\n}\n\n// Work them into jQuery's event system\n$.extend(jQuery.event.special, {\n    activate: {\n        setup: function(data, namespaces, eventHandle) {\n            var activateNamespace = this._namespace + '-activate';\n            var $elem = $(this);\n\n            $elem.on({\n                'mousedown.garnish-activate': function(e) {\n                    // Prevent buttons from getting focus on click\n                    e.preventDefault();\n                },\n                'click.garnish-activate': function(e) {\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.trigger('activate');\n                    }\n                },\n                'keydown.garnish-activate': function(e) {\n                    // Ignore if the event was bubbled up, or if it wasn't the space key\n                    if (this !== $elem[0] || e.keyCode !== Garnish.SPACE_KEY) {\n                        return;\n                    }\n\n                    e.preventDefault();\n\n                    if (!$elem.hasClass('disabled')) {\n                        $elem.addClass('active');\n\n                        Garnish.$doc.on('keyup.garnish-activate', function(e) {\n                            $elem.removeClass('active');\n\n                            if (e.keyCode === Garnish.SPACE_KEY) {\n                                e.preventDefault();\n                                $elem.trigger('activate');\n                            }\n\n                            Garnish.$doc.off('keyup.garnish-activate');\n                        });\n                    }\n                }\n            });\n\n            if (!$elem.hasClass('disabled')) {\n                $elem.attr('tabindex', '0');\n            } else {\n                $elem.removeAttr('tabindex');\n            }\n        },\n        teardown: function() {\n            $(this).off('.garnish-activate');\n        }\n    },\n\n    textchange: {\n        setup: function(data, namespaces, eventHandle) {\n            var $elem = $(this);\n            $elem.data('garnish-textchange-value', $elem.val());\n            $elem.on('keypress.garnish-textchange keyup.garnish-textchange change.garnish-textchange blur.garnish-textchange', function(e) {\n                var val = $elem.val();\n                if (val !== $elem.data('garnish-textchange-value')) {\n                    $elem.data('garnish-textchange-value', val);\n                    $elem.trigger('textchange');\n                }\n            });\n        },\n        teardown: function() {\n            $(this).off('.garnish-textchange');\n        },\n        handle: function(ev, data) {\n            var el = this;\n            var args = arguments;\n            var delay = data && typeof data.delay !== 'undefined' ? data.delay : (ev.data && ev.data.delay !== undefined ? ev.data.delay : null);\n            var handleObj = ev.handleObj;\n            var targetData = $.data(ev.target);\n\n            // Was this event configured with a delay?\n            if (delay) {\n                if (targetData.delayTimeout) {\n                    clearTimeout(targetData.delayTimeout);\n                }\n\n                targetData.delayTimeout = setTimeout(function() {\n                    handleObj.handler.apply(el, args);\n                }, delay);\n            } else {\n                return handleObj.handler.apply(el, args);\n            }\n        }\n    },\n\n    resize: {\n        setup: function(data, namespaces, eventHandle) {\n            // window is the only element that natively supports a resize event\n            if (this === window) {\n                return false;\n            }\n\n            $('> :last-child', this).addClass('last');\n            getErd().listenTo(this, triggerResizeEvent)\n        },\n        teardown: function() {\n            if (this === window) {\n                return false;\n            }\n\n            getErd().removeListener(this, triggerResizeEvent);\n        }\n    }\n});\n\n// Give them their own element collection chaining methods\njQuery.each(['activate', 'textchange', 'resize'], function(i, name) {\n    jQuery.fn[name] = function(data, fn) {\n        return arguments.length > 0 ?\n            this.on(name, null, data, fn) :\n            this.trigger(name);\n    };\n});\n\n/** global: Garnish */\n/**\n * Base drag class\n *\n * Does all the grunt work for manipulating elements via click-and-drag,\n * while leaving the actual element manipulation up to a subclass.\n */\nGarnish.BaseDrag = Garnish.Base.extend(\n    {\n        $items: null,\n\n        dragging: false,\n\n        mousedownX: null,\n        mousedownY: null,\n        realMouseX: null,\n        realMouseY: null,\n        mouseX: null,\n        mouseY: null,\n        mouseDistX: null,\n        mouseDistY: null,\n        mouseOffsetX: null,\n        mouseOffsetY: null,\n\n        $targetItem: null,\n\n        scrollProperty: null,\n        scrollAxis: null,\n        scrollDist: null,\n        scrollProxy: null,\n        scrollFrame: null,\n\n        _: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            this.settings = $.extend({}, Garnish.BaseDrag.defaults, settings);\n\n            this.$items = $();\n            this._ = {};\n\n            if (items) {\n                this.addItems(items);\n            }\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            return true;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            this.dragging = true;\n            this.onDragStart();\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            if (didMouseMove) {\n                // Is the mouse up against one of the window edges?\n                this.drag._scrollProperty = null;\n\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    // Scrolling up?\n                    this.drag._winScrollTop = Garnish.$win.scrollTop();\n                    this.drag._minMouseScrollY = this.drag._winScrollTop + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseY < this.drag._minMouseScrollY) {\n                        this.drag._scrollProperty = 'scrollTop';\n                        this.drag._scrollAxis = 'Y';\n                        this.drag._scrollDist = Math.round((this.mouseY - this.drag._minMouseScrollY) / 2);\n                    }\n                    else {\n                        // Scrolling down?\n                        this.drag._maxMouseScrollY = this.drag._winScrollTop + Garnish.$win.height() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseY > this.drag._maxMouseScrollY) {\n                            this.drag._scrollProperty = 'scrollTop';\n                            this.drag._scrollAxis = 'Y';\n                            this.drag._scrollDist = Math.round((this.mouseY - this.drag._maxMouseScrollY) / 2);\n                        }\n                    }\n                }\n\n                if (!this.drag._scrollProperty && this.settings.axis !== Garnish.Y_AXIS) {\n                    // Scrolling left?\n                    this.drag._winScrollLeft = Garnish.$win.scrollLeft();\n                    this.drag._minMouseScrollX = this.drag._winScrollLeft + Garnish.BaseDrag.windowScrollTargetSize;\n\n                    if (this.mouseX < this.drag._minMouseScrollX) {\n                        this.drag._scrollProperty = 'scrollLeft';\n                        this.drag._scrollAxis = 'X';\n                        this.drag._scrollDist = Math.round((this.mouseX - this.drag._minMouseScrollX) / 2);\n                    }\n                    else {\n                        // Scrolling right?\n                        this.drag._maxMouseScrollX = this.drag._winScrollLeft + Garnish.$win.width() - Garnish.BaseDrag.windowScrollTargetSize;\n\n                        if (this.mouseX > this.drag._maxMouseScrollX) {\n                            this.drag._scrollProperty = 'scrollLeft';\n                            this.drag._scrollAxis = 'X';\n                            this.drag._scrollDist = Math.round((this.mouseX - this.drag._maxMouseScrollX) / 2);\n                        }\n                    }\n                }\n\n                if (this.drag._scrollProperty) {\n                    // Are we starting to scroll now?\n                    if (!this.scrollProperty) {\n                        if (!this.scrollProxy) {\n                            this.scrollProxy = this._scrollWindow.bind(this);\n                        }\n\n                        if (this.scrollFrame) {\n                            Garnish.cancelAnimationFrame(this.scrollFrame);\n                            this.scrollFrame = null;\n                        }\n\n                        this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n                    }\n\n                    this.scrollProperty = this.drag._scrollProperty;\n                    this.scrollAxis = this.drag._scrollAxis;\n                    this.scrollDist = this.drag._scrollDist;\n                }\n                else {\n                    this._cancelWindowScroll();\n                }\n            }\n\n            this.onDrag();\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            this.dragging = false;\n            this.onDragStop();\n\n            // Clear the scroll animation\n            this._cancelWindowScroll();\n        },\n\n        /**\n         * Add Items\n         *\n         * @param {object} items Elements that should be draggable.\n         */\n        addItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure this element doesn't belong to another dragger\n                if ($.data(item, 'drag')) {\n                    Garnish.log('Element was added to more than one dragger');\n                    $.data(item, 'drag').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'drag', this);\n\n                // Add the listener\n                this.addListener(item, 'mousedown', '_handleMouseDown');\n            }\n\n            this.$items = this.$items.add(items);\n        },\n\n        /**\n         * Remove Items\n         *\n         * @param {object} items Elements that should no longer be draggable.\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStart');\n                this.settings.onDragStart();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('drag');\n                this.settings.onDrag();\n            }.bind(this));\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('dragStop');\n                this.settings.onDragStop();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Handle Mouse Down\n         */\n        _handleMouseDown: function(ev) {\n            // Ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Ignore if we already have a target\n            if (this.$targetItem) {\n                return;\n            }\n\n            // Ignore if they didn't actually click on the handle\n            var $target = $(ev.target),\n                $handle = this._getItemHandle(ev.currentTarget);\n\n            if (!$target.is($handle) && !$target.closest($handle).length) {\n                return;\n            }\n\n            // Make sure the target isn't a button (unless the button is the handle)\n            if (ev.currentTarget !== ev.target && this.settings.ignoreHandleSelector) {\n                if (\n                    $target.is(this.settings.ignoreHandleSelector) ||\n                    $target.closest(this.settings.ignoreHandleSelector).length\n                ) {\n                    return;\n                }\n            }\n\n            ev.preventDefault();\n\n            // Make sure that dragging is allowed right now\n            if (!this.allowDragging()) {\n                return;\n            }\n\n            // Capture the target\n            this.$targetItem = $(ev.currentTarget);\n\n            // Capture the current mouse position\n            this.mousedownX = this.mouseX = ev.pageX;\n            this.mousedownY = this.mouseY = ev.pageY;\n\n            // Capture the difference between the mouse position and the target item's offset\n            var offset = this.$targetItem.offset();\n            this.mouseOffsetX = ev.pageX - offset.left;\n            this.mouseOffsetY = ev.pageY - offset.top;\n\n            // Listen for mousemove, mouseup\n            this.addListener(Garnish.$doc, 'mousemove', '_handleMouseMove');\n            this.addListener(Garnish.$doc, 'mouseup', '_handleMouseUp');\n        },\n\n        _getItemHandle: function(item) {\n            if (this.settings.handle) {\n                if (typeof this.settings.handle === 'object') {\n                    return $(this.settings.handle);\n                }\n\n                if (typeof this.settings.handle === 'string') {\n                    return $(this.settings.handle, item);\n                }\n\n                if (typeof this.settings.handle === 'function') {\n                    return $(this.settings.handle(item));\n                }\n            }\n\n            return $(item);\n        },\n\n        /**\n         * Handle Mouse Move\n         */\n        _handleMouseMove: function(ev) {\n            ev.preventDefault();\n\n            this.realMouseX = ev.pageX;\n            this.realMouseY = ev.pageY;\n\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this.mouseX = ev.pageX;\n            }\n\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this.mouseY = ev.pageY;\n            }\n\n            this.mouseDistX = this.mouseX - this.mousedownX;\n            this.mouseDistY = this.mouseY - this.mousedownY;\n\n            if (!this.dragging) {\n                // Has the mouse moved far enough to initiate dragging yet?\n                this._handleMouseMove._mouseDist = Garnish.getDist(this.mousedownX, this.mousedownY, this.realMouseX, this.realMouseY);\n\n                if (this._handleMouseMove._mouseDist >= Garnish.BaseDrag.minMouseDist) {\n                    this.startDragging();\n                }\n            }\n\n            if (this.dragging) {\n                this.drag(true);\n            }\n        },\n\n        /**\n         * Handle Moues Up\n         */\n        _handleMouseUp: function(ev) {\n            // Unbind the document events\n            this.removeAllListeners(Garnish.$doc);\n\n            if (this.dragging) {\n                this.stopDragging();\n            }\n\n            this.$targetItem = null;\n        },\n\n        /**\n         * Scroll Window\n         */\n        _scrollWindow: function() {\n            this._.scrollPos = Garnish.$scrollContainer[this.scrollProperty]();\n            Garnish.$scrollContainer[this.scrollProperty](this._.scrollPos + this.scrollDist);\n\n            this['mouse' + this.scrollAxis] -= this._.scrollPos - Garnish.$scrollContainer[this.scrollProperty]();\n            this['realMouse' + this.scrollAxis] = this['mouse' + this.scrollAxis];\n\n            this.drag();\n\n            this.scrollFrame = Garnish.requestAnimationFrame(this.scrollProxy);\n        },\n\n        /**\n         * Cancel Window Scroll\n         */\n        _cancelWindowScroll: function() {\n            if (this.scrollFrame) {\n                Garnish.cancelAnimationFrame(this.scrollFrame);\n                this.scrollFrame = null;\n            }\n\n            this.scrollProperty = null;\n            this.scrollAxis = null;\n            this.scrollDist = null;\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            this.removeAllListeners(item);\n            $.removeData(item, 'drag');\n        }\n    },\n    {\n        minMouseDist: 1,\n        windowScrollTargetSize: 25,\n\n        defaults: {\n            handle: null,\n            axis: null,\n            ignoreHandleSelector: 'input, textarea, button, select, .btn',\n\n            onDragStart: $.noop,\n            onDrag: $.noop,\n            onDragStop: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Checkbox select class\n */\nGarnish.CheckboxSelect = Garnish.Base.extend(\n    {\n        $container: null,\n        $all: null,\n        $options: null,\n\n        init: function(container) {\n            this.$container = $(container);\n\n            // Is this already a checkbox select?\n            if (this.$container.data('checkboxSelect')) {\n                Garnish.log('Double-instantiating a checkbox select on an element');\n                this.$container.data('checkbox-select').destroy();\n            }\n\n            this.$container.data('checkboxSelect', this);\n\n            var $checkboxes = this.$container.find('input');\n            this.$all = $checkboxes.filter('.all:first');\n            this.$options = $checkboxes.not(this.$all);\n\n            this.addListener(this.$all, 'change', 'onAllChange');\n        },\n\n        onAllChange: function() {\n            var isAllChecked = this.$all.prop('checked');\n\n            this.$options.prop({\n                checked: isAllChecked,\n                disabled: isAllChecked\n            });\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('checkboxSelect');\n            this.base();\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Context Menu\n */\nGarnish.ContextMenu = Garnish.Base.extend(\n    {\n        $target: null,\n        options: null,\n        $menu: null,\n        showingMenu: false,\n\n        /**\n         * Constructor\n         */\n        init: function(target, options, settings) {\n            this.$target = $(target);\n\n            // Is this already a context menu target?\n            if (this.$target.data('contextmenu')) {\n                Garnish.log('Double-instantiating a context menu on an element');\n                this.$target.data('contextmenu').destroy();\n            }\n\n            this.$target.data('contextmenu', this);\n\n            this.options = options;\n            this.setSettings(settings, Garnish.ContextMenu.defaults);\n\n            Garnish.ContextMenu.counter++;\n\n            this.enable();\n        },\n\n        /**\n         * Build Menu\n         */\n        buildMenu: function() {\n            this.$menu = $('<div class=\"' + this.settings.menuClass + '\" style=\"display: none\" />');\n\n            var $ul = $('<ul/>').appendTo(this.$menu);\n\n            for (var i in this.options) {\n                if (!this.options.hasOwnProperty(i)) {\n                    continue;\n                }\n\n                var option = this.options[i];\n\n                if (option === '-') {\n                    // Create a new <ul>\n                    $('<hr/>').appendTo(this.$menu);\n                    $ul = $('<ul/>').appendTo(this.$menu);\n                }\n                else {\n                    var $li = $('<li></li>').appendTo($ul),\n                        $a = $('<a>' + option.label + '</a>').appendTo($li);\n\n                    if (typeof option.onClick === 'function') {\n                        // maintain the current $a and options.onClick variables\n                        (function($a, onClick) {\n                            setTimeout(function() {\n                                $a.mousedown(function(ev) {\n                                    this.hideMenu();\n                                    // call the onClick callback, with the scope set to the item,\n                                    // and pass it the event with currentTarget set to the item as well\n                                    onClick.call(this.currentTarget, $.extend(ev, {currentTarget: this.currentTarget}));\n                                }.bind(this));\n                            }.bind(this), 1);\n                        }).call(this, $a, option.onClick);\n                    }\n                }\n            }\n        },\n\n        /**\n         * Show Menu\n         */\n        showMenu: function(ev) {\n            // Ignore left mouse clicks\n            if (ev.type === 'mousedown' && ev.which !== Garnish.SECONDARY_CLICK) {\n                return;\n            }\n\n            if (ev.type === 'contextmenu') {\n                // Prevent the real context menu from showing\n                ev.preventDefault();\n            }\n\n            // Ignore if already showing\n            if (this.showing && ev.currentTarget === this.currentTarget) {\n                return;\n            }\n\n            this.currentTarget = ev.currentTarget;\n\n            if (!this.$menu) {\n                this.buildMenu();\n            }\n\n            this.$menu.appendTo(document.body);\n            this.$menu.show();\n            this.$menu.css({left: ev.pageX + 1, top: ev.pageY - 4});\n\n            this.showing = true;\n            this.trigger('show');\n            Garnish.shortcutManager.addLayer();\n            Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hideMenu.bind(this));\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'hideMenu');\n            }.bind(this), 0);\n        },\n\n        /**\n         * Hide Menu\n         */\n        hideMenu: function() {\n            this.removeListener(Garnish.$doc, 'mousedown');\n            this.$menu.hide();\n            this.showing = false;\n            this.trigger('hide');\n            Garnish.shortcutManager.removeLayer();\n        },\n\n        /**\n         * Enable\n         */\n        enable: function() {\n            this.addListener(this.$target, 'contextmenu,mousedown', 'showMenu');\n        },\n\n        /**\n         * Disable\n         */\n        disable: function() {\n            this.removeListener(this.$target, 'contextmenu,mousedown');\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$target.removeData('contextmenu');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuClass: 'menu'\n        },\n        counter: 0\n    }\n);\n\n/** global: Garnish */\n/**\n * Custom Select Menu\n */\nGarnish.CustomSelect = Garnish.Base.extend(\n  {\n    settings: null,\n    visible: false,\n\n    $container: null,\n    $options: null,\n    $anchor: null,\n\n    menuId: null,\n\n    _windowWidth: null,\n    _windowHeight: null,\n    _windowScrollLeft: null,\n    _windowScrollTop: null,\n\n    _anchorOffset: null,\n    _anchorWidth: null,\n    _anchorHeight: null,\n    _anchorOffsetRight: null,\n    _anchorOffsetBottom: null,\n\n    _menuWidth: null,\n    _menuHeight: null,\n\n    /**\n     * Constructor\n     */\n    init: function (container, settings) {\n      this.setSettings(settings, Garnish.CustomSelect.defaults);\n\n      this.$container = $(container);\n\n      this.$options = $();\n      this.addOptions(this.$container.find('a'));\n\n      // Menu List\n      this.menuId = 'menu' + this._namespace;\n      this.$menuList = $('ul', this.$container);\n      this.$menuList.attr({\n        role: 'listbox',\n        id: this.menuId,\n        'aria-hidden': 'true',\n      });\n\n      // Deprecated\n      if (this.settings.attachToElement) {\n        this.settings.anchor = this.settings.attachToElement;\n        Garnish.log(\n          \"The 'attachToElement' setting is deprecated. Use 'anchor' instead.\"\n        );\n      }\n\n      if (this.settings.anchor) {\n        this.$anchor = $(this.settings.anchor);\n      }\n\n      // Prevent clicking on the container from hiding the menu\n      this.addListener(this.$container, 'mousedown', function (ev) {\n        ev.stopPropagation();\n\n        if (ev.target.nodeName !== 'INPUT') {\n          // Prevent this from causing the menu button to blur\n          ev.preventDefault();\n        }\n      });\n    },\n\n    addOptions: function ($options) {\n      this.$options = this.$options.add($options);\n      $options.data('menu', this);\n\n      $options.each(\n        function (optionKey, option) {\n          $(option).attr({\n            role: 'option',\n            tabindex: '-1',\n            id: this.menuId + '-option-' + optionKey,\n          });\n        }.bind(this)\n      );\n\n      this.removeAllListeners($options);\n      this.addListener($options, 'click', function (ev) {\n        this.selectOption(ev.currentTarget);\n      });\n    },\n\n    setPositionRelativeToAnchor: function () {\n      this._windowWidth = Garnish.$win.width();\n      this._windowHeight = Garnish.$win.height();\n      this._windowScrollLeft = Garnish.$win.scrollLeft();\n      this._windowScrollTop = Garnish.$win.scrollTop();\n\n      this._anchorOffset = this.$anchor.offset();\n      this._anchorWidth = this.$anchor.outerWidth();\n      this._anchorHeight = this.$anchor.outerHeight();\n      this._anchorOffsetRight = this._anchorOffset.left + this._anchorHeight;\n      this._anchorOffsetBottom = this._anchorOffset.top + this._anchorHeight;\n\n      this.$container.css('minWidth', 0);\n      this.$container.css(\n        'minWidth',\n        this._anchorWidth -\n          (this.$container.outerWidth() - this.$container.width())\n      );\n\n      this._menuWidth = this.$container.outerWidth();\n      this._menuHeight = this.$container.outerHeight();\n\n      // Is there room for the menu below the anchor?\n      var topClearance = this._anchorOffset.top - this._windowScrollTop,\n        bottomClearance =\n          this._windowHeight + this._windowScrollTop - this._anchorOffsetBottom;\n\n      if (\n        bottomClearance >= this._menuHeight ||\n        (topClearance < this._menuHeight && bottomClearance >= topClearance)\n      ) {\n        this.$container.css({\n          top: this._anchorOffsetBottom,\n          maxHeight: bottomClearance - this.settings.windowSpacing,\n        });\n      } else {\n        this.$container.css({\n          top:\n            this._anchorOffset.top -\n            Math.min(\n              this._menuHeight,\n              topClearance - this.settings.windowSpacing\n            ),\n          maxHeight: topClearance - this.settings.windowSpacing,\n        });\n      }\n\n      // Figure out how we're aliging it\n      var align = this.$container.data('align');\n\n      if (align !== 'left' && align !== 'center' && align !== 'right') {\n        align = 'left';\n      }\n\n      if (align === 'center') {\n        this._alignCenter();\n      } else {\n        // Figure out which options are actually possible\n        var rightClearance =\n            this._windowWidth +\n            this._windowScrollLeft -\n            (this._anchorOffset.left + this._menuWidth),\n          leftClearance = this._anchorOffsetRight - this._menuWidth;\n\n        if ((align === 'right' && leftClearance >= 0) || rightClearance < 0) {\n          this._alignRight();\n        } else {\n          this._alignLeft();\n        }\n      }\n\n      delete this._windowWidth;\n      delete this._windowHeight;\n      delete this._windowScrollLeft;\n      delete this._windowScrollTop;\n      delete this._anchorOffset;\n      delete this._anchorWidth;\n      delete this._anchorHeight;\n      delete this._anchorOffsetRight;\n      delete this._anchorOffsetBottom;\n      delete this._menuWidth;\n      delete this._menuHeight;\n    },\n\n    show: function () {\n      if (this.visible) {\n        return;\n      }\n\n      // Move the menu to the end of the DOM\n      this.$container.appendTo(Garnish.$bod);\n\n      if (this.$anchor) {\n        this.setPositionRelativeToAnchor();\n      }\n\n      this.$container.velocity('stop');\n      this.$container.css({\n        opacity: 1,\n        display: 'block',\n      });\n\n      this.$menuList.attr('aria-hidden', 'false');\n\n      Garnish.shortcutManager\n        .addLayer()\n        .registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n\n      this.addListener(\n        Garnish.$scrollContainer,\n        'scroll',\n        'setPositionRelativeToAnchor'\n      );\n\n      this.visible = true;\n      this.trigger('show');\n    },\n\n    hide: function () {\n      if (!this.visible) {\n        return;\n      }\n\n      this.$menuList.attr('aria-hidden', 'true');\n\n      this.$container.velocity(\n        'fadeOut',\n        { duration: Garnish.FX_DURATION },\n        function () {\n          this.$container.detach();\n        }.bind(this)\n      );\n\n      Garnish.shortcutManager.removeLayer();\n      this.removeListener(Garnish.$scrollContainer, 'scroll');\n      this.visible = false;\n      this.trigger('hide');\n    },\n\n    selectOption: function (option) {\n      this.settings.onOptionSelect(option);\n      this.trigger('optionselect', { selectedOption: option });\n      this.hide();\n    },\n\n    _alignLeft: function () {\n      this.$container.css({\n        left: this._anchorOffset.left,\n        right: 'auto',\n      });\n    },\n\n    _alignRight: function () {\n      this.$container.css({\n        right:\n          this._windowWidth - (this._anchorOffset.left + this._anchorWidth),\n        left: 'auto',\n      });\n    },\n\n    _alignCenter: function () {\n      var left = Math.round(\n        this._anchorOffset.left + this._anchorWidth / 2 - this._menuWidth / 2\n      );\n\n      if (left < 0) {\n        left = 0;\n      }\n\n      this.$container.css('left', left);\n    },\n  },\n  {\n    defaults: {\n      anchor: null,\n      windowSpacing: 5,\n      onOptionSelect: $.noop,\n    },\n  }\n);\n\n/**\n * @deprecated\n */\nGarnish.Menu = Garnish.CustomSelect;\n\n/** global: Garnish */\n/**\n * Disclosure Widget\n */\nGarnish.DisclosureMenu = Garnish.Base.extend(\n  {\n    settings: null,\n\n    $trigger: null,\n    $container: null,\n    $alignmentElement: null,\n    $wrapper: null,\n\n    _windowWidth: null,\n    _windowHeight: null,\n    _windowScrollLeft: null,\n    _windowScrollTop: null,\n\n    _wrapperElementOffset: null,\n    _alignmentElementOffset: null,\n    _triggerWidth: null,\n    _triggerHeight: null,\n\n    _menuWidth: null,\n    _menuHeight: null,\n\n    /**\n     * Constructor\n     */\n    init: function (trigger, settings) {\n      this.setSettings(settings, Garnish.DisclosureMenu.defaults);\n\n      this.$trigger = $(trigger);\n      var triggerId = this.$trigger.attr('aria-controls');\n      this.$container = $(\"#\" + triggerId);\n\n      if (!this.$container) return; /* Exit if no disclosure container is found */\n\n      // Get and store expanded state from trigger\n      var expanded = this.$trigger.attr('aria-expanded');\n\n      // If no expanded state exists on trigger, add for a11y\n      if (!expanded) {\n        this.$trigger.attr('aria-expanded', 'false');\n      }\n\n      // Capture additional alignment element\n      var alignmentSelector = this.$container.data('align-to');\n      if (alignmentSelector) {\n        this.$alignmentElement = $(alignmentSelector);\n      } else {\n        this.$alignmentElement = this.$trigger;\n      }\n\n      var wrapper = this.$container.closest('[data-wrapper]');\n      if (wrapper) {\n        this.$wrapper = wrapper;\n      }\n\n      this.addDisclosureMenuEventListeners();\n    },\n\n    addDisclosureMenuEventListeners: function() {\n      this.addListener(this.$trigger, 'click', function() {\n        this.handleTriggerClick();\n      });\n\n      this.addListener(this.$container, 'keydown', function(event) {\n        this.handleKeypress(event);\n      });\n\n      this.addListener(Garnish.$doc, 'mousedown', this.handleMousedown)\n    },\n\n    focusElement: function(direction) {\n      var currentFocus = $(':focus');\n\n      var focusable = Garnish.findFocusable(this.$container);\n\n      var currentIndex = focusable.index(currentFocus);\n      var newIndex;\n\n      if (direction === 'prev') {\n        newIndex = currentIndex - 1;\n      } else {\n        newIndex = currentIndex + 1;\n      }\n\n      if (newIndex >= 0 && newIndex < focusable.length) {\n        var elementToFocus = focusable[newIndex];\n        elementToFocus.focus();\n      }\n    },\n\n    handleMousedown: function (event) {\n      var newTarget = event.target;\n      var triggerButton = $(newTarget).closest('[data-disclosure-trigger]');\n      var newTargetIsInsideDisclosure = this.$container.has(newTarget).length > 0;\n\n      // If click target matches trigger element or disclosure child, do nothing\n      if ($(triggerButton).is(this.$trigger) || newTargetIsInsideDisclosure) {\n        return;\n      }\n\n      this.hide();\n    },\n\n    handleKeypress: function(event) {\n      var keyCode = event.keyCode;\n      \n      switch (keyCode) {\n        case Garnish.RIGHT_KEY:\n        case Garnish.DOWN_KEY:\n          event.preventDefault();\n          this.focusElement('next');\n          break;\n        case Garnish.LEFT_KEY:\n        case Garnish.UP_KEY:\n          event.preventDefault();\n          this.focusElement('prev');\n          break;\n        default:\n          break;\n      }\n    },\n\n    isExpanded: function () {\n      var isExpanded = this.$trigger.attr('aria-expanded');\n\n      return isExpanded === 'true';\n    },\n\n    handleTriggerClick: function() {\n      if (!this.isExpanded()) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    },\n\n    show: function () {\n      if (this.isExpanded()) {\n        return;\n      }\n\n      this.setContainerPosition();\n      this.addListener(\n        Garnish.$scrollContainer,\n        'scroll',\n        'setContainerPosition'\n      );\n      \n      this.$container.velocity('stop');\n      this.$container.css({\n        opacity: 1,\n        display: 'block',\n      });\n\n      \n      // Set ARIA attribute for expanded\n      this.$trigger.attr('aria-expanded', 'true');\n\n      // Focus first focusable element\n      var firstFocusableEl = this.$container.find(':focusable')[0];\n      if (firstFocusableEl) {\n        firstFocusableEl.focus();\n      } else {\n        this.$container.attr('tabindex', '-1');\n        this.$container.focus();\n      }\n\n      this.trigger('show');\n      Garnish.shortcutManager.addLayer();\n      Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, function() {\n        this.hide();\n        this.$trigger.focus();\n      }.bind(this));\n    },\n\n    hide: function () {\n      if (!this.isExpanded()) {\n        return;\n      }\n\n      this.$container.velocity(\n        'fadeOut',\n        { duration: Garnish.FX_DURATION }\n      );\n\n      this.$trigger.attr('aria-expanded', 'false');\n\n      this.trigger('hide');\n      Garnish.shortcutManager.removeLayer();\n    },\n\n    setContainerPosition: function () {\n      this._windowWidth = Garnish.$win.width();\n      this._windowHeight = Garnish.$win.height();\n      this._windowScrollLeft = Garnish.$win.scrollLeft();\n      this._windowScrollTop = Garnish.$win.scrollTop();\n\n      this._alignmentElementOffset = this.$alignmentElement[0].getBoundingClientRect();\n\n      this._wrapperElementOffset = this.$wrapper[0].getBoundingClientRect();\n\n      this._triggerWidth = this.$trigger.outerWidth();\n\n      this.$container.css('minWidth', 0);\n      this.$container.css(\n        'minWidth',\n        this._triggerWidth -\n          (this.$container.outerWidth() - this.$container.width())\n      );\n\n      this._menuWidth = this.$container.outerWidth();\n      this._menuHeight = this.$container.outerHeight();\n\n      // Is there room for the menu below the trigger?\n      var topClearance = this._alignmentElementOffset.top,\n        bottomClearance = this._windowHeight - this._alignmentElementOffset.bottom;\n\n      // Find top/bottom offset relative to wrapper element\n      var topAdjustment = this._alignmentElementOffset.top - this._wrapperElementOffset.top;\n      var bottomAdjustment = this._alignmentElementOffset.bottom - this._wrapperElementOffset.bottom;\n\n      var bottomClearanceExists = \n        bottomClearance >= this._menuHeight ||\n        (topClearance < this._menuHeight && bottomClearance >= topClearance);\n      \n      if (bottomClearanceExists) {\n        this.$container.css({\n          top: 'calc(100% + ' + bottomAdjustment + 'px)',\n          bottom: 'unset',\n          maxHeight: bottomClearance - this.settings.windowSpacing,\n        });\n      } else {\n        this.$container.css({\n          bottom: 'calc(100% - ' + topAdjustment + 'px)',\n          top: 'unset',\n          maxHeight: topClearance - this.settings.windowSpacing,\n        });\n      }\n\n      // Figure out how we're aliging it\n      var align = this.$container.data('align');\n\n      if (align !== 'left' && align !== 'center' && align !== 'right') {\n        align = 'left';\n      }\n\n      if (align === 'center') {\n        this._alignCenter();\n      } else {\n        // Figure out which options are actually possible\n        var rightClearance =\n            this._windowWidth +\n            this._windowScrollLeft -\n            (this._alignmentElementOffset.left + this._menuWidth),\n          leftClearance = this._alignmentElementOffset.right - this._menuWidth;\n\n        if ((align === 'right' && leftClearance >= 0) || rightClearance < 0) {\n          this._alignRight();\n        } else {\n          this._alignLeft();\n        }\n      }\n\n      delete this._windowWidth;\n      delete this._windowHeight;\n      delete this._windowScrollLeft;\n      delete this._windowScrollTop;\n      delete this._wrapperElementOffset;\n      delete this._alignmentElementOffset;\n      delete this._triggerWidth;\n      delete this._triggerHeight;\n      delete this._menuWidth;\n      delete this._menuHeight;\n    },\n\n    _alignLeft: function () {\n      var leftAdjustment = this._alignmentElementOffset.left - this._wrapperElementOffset.left;\n\n      this.$container.css({\n        right: 'unset',\n        left: leftAdjustment + 'px',\n      });\n    },\n\n    _alignRight: function () {\n      var rightAdjustment = this._alignmentElementOffset.right - this._wrapperElementOffset.right;\n      \n      this.$container.css({\n        left: 'unset',\n        right: - rightAdjustment + 'px',\n      });\n    },\n\n    _alignCenter: function () {\n      var left = Math.round(this._triggerWidth / 2 - this._menuWidth / 2);\n      var leftAdjustment = this._alignmentElementOffset.left - this._wrapperElementOffset.left;\n\n      this.$container.css('left', left - leftAdjustment);\n    },\n  },\n  {\n    defaults: {\n      windowSpacing: 5,\n    },\n  }\n);\n\n/** global: Garnish */\n/**\n * Drag class\n *\n * Builds on the BaseDrag class by \"picking up\" the selceted element(s),\n * without worrying about what to do when an element is being dragged.\n */\nGarnish.Drag = Garnish.BaseDrag.extend(\n    {\n        targetItemWidth: null,\n        targetItemHeight: null,\n        targetItemPositionInDraggee: null,\n\n        $draggee: null,\n\n        otherItems: null,\n        totalOtherItems: null,\n\n        helpers: null,\n        helperTargets: null,\n        helperPositions: null,\n        helperLagIncrement: null,\n        updateHelperPosProxy: null,\n        updateHelperPosFrame: null,\n\n        lastMouseX: null,\n        lastMouseY: null,\n\n        _returningHelpersToDraggees: false,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.Drag.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Returns whether dragging is allowed right now.\n         */\n        allowDragging: function() {\n            // Don't allow dragging if we're in the middle of animating the helpers back to the draggees\n            return !this._returningHelpersToDraggees;\n        },\n\n        /**\n         * Start Dragging\n         */\n        startDragging: function() {\n            // Reset some things\n            this.helpers = [];\n            this.helperTargets = [];\n            this.helperPositions = [];\n            this.lastMouseX = this.lastMouseY = null;\n\n            // Capture the target item's width/height\n            this.targetItemWidth = this.$targetItem.outerWidth();\n            this.targetItemHeight = this.$targetItem.outerHeight();\n\n            // Save the draggee's display style (block/table-row) so we can re-apply it later\n            this.draggeeDisplay = this.$targetItem.css('display');\n\n            // Set the $draggee\n            this.setDraggee(this.findDraggee());\n\n            // Create an array of all the other items\n            this.otherItems = [];\n\n            for (var i = 0; i < this.$items.length; i++) {\n                var item = this.$items[i];\n\n                if ($.inArray(item, this.$draggee) === -1) {\n                    this.otherItems.push(item);\n                }\n            }\n\n            this.totalOtherItems = this.otherItems.length;\n\n            // Keep the helpers following the cursor, with a little lag to smooth it out\n            if (!this.updateHelperPosProxy) {\n                this.updateHelperPosProxy = this._updateHelperPos.bind(this);\n            }\n\n            this.helperLagIncrement = this.helpers.length === 1 ? 0 : this.settings.helperLagIncrementDividend / (this.helpers.length - 1);\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n\n            this.base();\n        },\n\n        /**\n         * Sets the draggee.\n         */\n        setDraggee: function($draggee) {\n            // Record the target item's position in the draggee\n            this.targetItemPositionInDraggee = $.inArray(this.$targetItem[0], $draggee.add(this.$targetItem[0]));\n\n            // Keep the target item at the front of the list\n            this.$draggee = $([this.$targetItem[0]].concat($draggee.not(this.$targetItem).toArray()));\n\n            // Create the helper(s)\n            if (this.settings.singleHelper) {\n                this._createHelper(0);\n            }\n            else {\n                for (var i = 0; i < this.$draggee.length; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee) {\n                this.$draggee.hide();\n            }\n            else if (this.settings.collapseDraggees) {\n                this.$targetItem.css('visibility', 'hidden');\n                this.$draggee.not(this.$targetItem).hide();\n            }\n            else {\n                this.$draggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Appends additional items to the draggee.\n         */\n        appendDraggee: function($newDraggee) {\n            if (!$newDraggee.length) {\n                return;\n            }\n\n            if (!this.settings.collapseDraggees) {\n                var oldLength = this.$draggee.length;\n            }\n\n            this.$draggee = $(this.$draggee.toArray().concat($newDraggee.toArray()));\n\n            // Create new helpers?\n            if (!this.settings.collapseDraggees) {\n                var newLength = this.$draggee.length;\n\n                for (var i = oldLength; i < newLength; i++) {\n                    this._createHelper(i);\n                }\n            }\n\n            if (this.settings.removeDraggee || this.settings.collapseDraggees) {\n                $newDraggee.hide();\n            }\n            else {\n                $newDraggee.css('visibility', 'hidden');\n            }\n        },\n\n        /**\n         * Drag\n         */\n        drag: function(didMouseMove) {\n            // Update the draggee's virtual midpoint\n            this.draggeeVirtualMidpointX = this.mouseX - this.mouseOffsetX + (this.targetItemWidth / 2);\n            this.draggeeVirtualMidpointY = this.mouseY - this.mouseOffsetY + (this.targetItemHeight / 2);\n\n            this.base(didMouseMove);\n        },\n\n        /**\n         * Stop Dragging\n         */\n        stopDragging: function() {\n            // Clear the helper animation\n            Garnish.cancelAnimationFrame(this.updateHelperPosFrame);\n\n            this.base();\n        },\n\n        /**\n         * Identifies the item(s) that are being dragged.\n         */\n        findDraggee: function() {\n            switch (typeof this.settings.filter) {\n                case 'function': {\n                    return this.settings.filter();\n                }\n\n                case 'string': {\n                    return this.$items.filter(this.settings.filter);\n                }\n\n                default: {\n                    return this.$targetItem;\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            return this.mouseX - this.mouseOffsetX;\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            return this.mouseY - this.mouseOffsetY;\n        },\n\n        /**\n         * Return Helpers to Draggees\n         */\n        returnHelpersToDraggees: function() {\n            this._returningHelpersToDraggees = true;\n\n            for (var i = 0; i < this.helpers.length; i++) {\n                var $draggee = this.$draggee.eq(i),\n                    $helper = this.helpers[i];\n\n                $draggee.css({\n                    display: this.draggeeDisplay,\n                    visibility: 'hidden'\n                });\n\n                var draggeeOffset = $draggee.offset();\n                var callback;\n\n                if (i === 0) {\n                    callback = this._showDraggee.bind(this);\n                }\n                else {\n                    callback = null;\n                }\n\n                $helper.velocity({left: draggeeOffset.left, top: draggeeOffset.top}, Garnish.FX_DURATION, callback);\n            }\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        onReturnHelpersToDraggees: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('returnHelpersToDraggees');\n                this.settings.onReturnHelpersToDraggees();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        /**\n         * Creates a helper.\n         */\n        _createHelper: function(i) {\n            var $draggee = this.$draggee.eq(i),\n                $draggeeHelper = $draggee.clone().addClass('draghelper');\n\n            if (this.settings.copyDraggeeInputValuesToHelper) {\n                Garnish.copyInputValues($draggee, $draggeeHelper);\n            }\n\n            // Remove any name= attributes so radio buttons don't lose their values\n            $draggeeHelper.find('[name]').attr('name', '');\n\n            $draggeeHelper\n                .outerWidth(Math.ceil($draggee.outerWidth()))\n                .outerHeight(Math.ceil($draggee.outerHeight()))\n                .css({margin: 0, 'pointer-events': 'none'});\n\n            if (this.settings.helper) {\n                if (typeof this.settings.helper === 'function') {\n                    $draggeeHelper = this.settings.helper($draggeeHelper);\n                }\n                else {\n                    $draggeeHelper = $(this.settings.helper).append($draggeeHelper);\n                }\n            }\n\n            $draggeeHelper.appendTo(Garnish.$bod);\n\n            var helperPos = this._getHelperTarget(i);\n\n            $draggeeHelper.css({\n                position: 'absolute',\n                top: helperPos.top,\n                left: helperPos.left,\n                zIndex: this.settings.helperBaseZindex + this.$draggee.length - i,\n                opacity: this.settings.helperOpacity\n            });\n\n            this.helperPositions[i] = {\n                top: helperPos.top,\n                left: helperPos.left\n            };\n\n            this.helpers.push($draggeeHelper);\n        },\n\n        /**\n         * Update Helper Position\n         */\n        _updateHelperPos: function() {\n            // Has the mouse moved?\n            if (this.mouseX !== this.lastMouseX || this.mouseY !== this.lastMouseY) {\n                // Get the new target helper positions\n                for (this._updateHelperPos._i = 0; this._updateHelperPos._i < this.helpers.length; this._updateHelperPos._i++) {\n                    this.helperTargets[this._updateHelperPos._i] = this._getHelperTarget(this._updateHelperPos._i);\n                }\n\n                this.lastMouseX = this.mouseX;\n                this.lastMouseY = this.mouseY;\n            }\n\n            // Gravitate helpers toward their target positions\n            for (this._updateHelperPos._j = 0; this._updateHelperPos._j < this.helpers.length; this._updateHelperPos._j++) {\n                this._updateHelperPos._lag = this.settings.helperLagBase + (this.helperLagIncrement * this._updateHelperPos._j);\n\n                this.helperPositions[this._updateHelperPos._j] = {\n                    left: this.helperPositions[this._updateHelperPos._j].left + ((this.helperTargets[this._updateHelperPos._j].left - this.helperPositions[this._updateHelperPos._j].left) / this._updateHelperPos._lag),\n                    top: this.helperPositions[this._updateHelperPos._j].top + ((this.helperTargets[this._updateHelperPos._j].top - this.helperPositions[this._updateHelperPos._j].top) / this._updateHelperPos._lag)\n                };\n\n                this.helpers[this._updateHelperPos._j].css(this.helperPositions[this._updateHelperPos._j]);\n            }\n\n            // Let's do this again on the next frame!\n            this.updateHelperPosFrame = Garnish.requestAnimationFrame(this.updateHelperPosProxy);\n        },\n\n        /**\n         * Get the helper position for a draggee helper\n         */\n        _getHelperTarget: function(i) {\n            return {\n                left: this.getHelperTargetX() + (this.settings.helperSpacingX * i),\n                top: this.getHelperTargetY() + (this.settings.helperSpacingY * i)\n            };\n        },\n\n        _showDraggee: function() {\n            // Remove the helpers\n            for (var i = 0; i < this.helpers.length; i++) {\n                this.helpers[i].remove();\n            }\n\n            this.helpers = null;\n\n            this.$draggee.show().css('visibility', 'inherit');\n\n            this.onReturnHelpersToDraggees();\n\n            this._returningHelpersToDraggees = false;\n        }\n    },\n    {\n        defaults: {\n            filter: null,\n            singleHelper: false,\n            collapseDraggees: false,\n            removeDraggee: false,\n            copyDraggeeInputValuesToHelper: false,\n            helperOpacity: 1,\n            helper: null,\n            helperBaseZindex: 1000,\n            helperLagBase: 1,\n            helperLagIncrementDividend: 1.5,\n            helperSpacingX: 5,\n            helperSpacingY: 5,\n            onReturnHelpersToDraggees: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-and-drop class\n *\n * Builds on the Drag class by allowing you to set up \"drop targets\"\n * which the dragged elemements can be dropped onto.\n */\nGarnish.DragDrop = Garnish.Drag.extend({\n\n        $dropTargets: null,\n        $activeDropTarget: null,\n\n        /**\n         * Constructor\n         */\n        init: function(settings) {\n            settings = $.extend({}, Garnish.DragDrop.defaults, settings);\n            this.base(settings);\n        },\n\n        updateDropTargets: function() {\n            if (this.settings.dropTargets) {\n                if (typeof this.settings.dropTargets === 'function') {\n                    this.$dropTargets = $(this.settings.dropTargets());\n                }\n                else {\n                    this.$dropTargets = $(this.settings.dropTargets);\n                }\n\n                // Discard if it's an empty array\n                if (!this.$dropTargets.length) {\n                    this.$dropTargets = null;\n                }\n            }\n        },\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.updateDropTargets();\n            this.$activeDropTarget = null;\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            if (this.$dropTargets) {\n                this.onDrag._activeDropTarget = null;\n\n                // is the cursor over any of the drop target?\n                for (this.onDrag._i = 0; this.onDrag._i < this.$dropTargets.length; this.onDrag._i++) {\n                    this.onDrag._elem = this.$dropTargets[this.onDrag._i];\n\n                    if (Garnish.hitTest(this.mouseX, this.mouseY, this.onDrag._elem)) {\n                        this.onDrag._activeDropTarget = this.onDrag._elem;\n                        break;\n                    }\n                }\n\n                // has the drop target changed?\n                if (\n                    (this.$activeDropTarget && this.onDrag._activeDropTarget !== this.$activeDropTarget[0]) ||\n                    (!this.$activeDropTarget && this.onDrag._activeDropTarget !== null)\n                ) {\n                    // was there a previous one?\n                    if (this.$activeDropTarget) {\n                        this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n                    }\n\n                    // remember the new one\n                    if (this.onDrag._activeDropTarget) {\n                        this.$activeDropTarget = $(this.onDrag._activeDropTarget).addClass(this.settings.activeDropTargetClass);\n                    }\n                    else {\n                        this.$activeDropTarget = null;\n                    }\n\n                    this.settings.onDropTargetChange(this.$activeDropTarget);\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            if (this.$dropTargets && this.$activeDropTarget) {\n                this.$activeDropTarget.removeClass(this.settings.activeDropTargetClass);\n            }\n\n            this.base();\n        },\n\n        /**\n         * Fade Out Helpers\n         */\n        fadeOutHelpers: function() {\n            for (var i = 0; i < this.helpers.length; i++) {\n                (function($draggeeHelper) {\n                    $draggeeHelper.velocity('fadeOut', {\n                        duration: Garnish.FX_DURATION,\n                        complete: function() {\n                            $draggeeHelper.remove();\n                        }\n                    });\n                })(this.helpers[i]);\n            }\n        }\n    },\n    {\n        defaults: {\n            dropTargets: null,\n            onDropTargetChange: $.noop,\n            activeDropTargetClass: 'active'\n        }\n    });\n\n/** global: Garnish */\n/**\n * Drag-to-move clas\n *\n * Builds on the BaseDrag class by simply moving the dragged element(s) along with the mouse.\n */\nGarnish.DragMove = Garnish.BaseDrag.extend(\n    {\n        onDrag: function(items, settings) {\n            this.$targetItem.css({\n                left: this.mouseX - this.mouseOffsetX,\n                top: this.mouseY - this.mouseOffsetY\n            });\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Drag-to-sort class\n *\n * Builds on the Drag class by allowing you to sort the elements amongst themselves.\n */\nGarnish.DragSort = Garnish.Drag.extend(\n    {\n        $heightedContainer: null,\n        $insertion: null,\n        insertionVisible: false,\n        oldDraggeeIndexes: null,\n        newDraggeeIndexes: null,\n        closestItem: null,\n\n        _midpointVersion: 0,\n        _$prevItem: null,\n\n        /**\n         * Constructor\n         *\n         * @param {object} items    Elements that should be draggable right away. (Can be skipped.)\n         * @param {object} settings Any settings that should override the defaults.\n         */\n        init: function(items, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (settings)\n                settings = items;\n                items = null;\n            }\n\n            settings = $.extend({}, Garnish.DragSort.defaults, settings);\n            this.base(items, settings);\n        },\n\n        /**\n         * Creates the insertion element.\n         */\n        createInsertion: function() {\n            if (this.settings.insertion) {\n                if (typeof this.settings.insertion === 'function') {\n                    return $(this.settings.insertion(this.$draggee));\n                }\n                else {\n                    return $(this.settings.insertion);\n                }\n            }\n        },\n\n        /**\n         * Returns the helper’s target X position\n         */\n        getHelperTargetX: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetX._draggeeOffsetX = this.$draggee.offset().left;\n                return this.getHelperTargetX._draggeeOffsetX + ((this.mouseX - this.mouseOffsetX - this.getHelperTargetX._draggeeOffsetX) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns the helper’s target Y position\n         */\n        getHelperTargetY: function() {\n            if (this.settings.magnetStrength !== 1) {\n                this.getHelperTargetY._draggeeOffsetY = this.$draggee.offset().top;\n                return this.getHelperTargetY._draggeeOffsetY + ((this.mouseY - this.mouseOffsetY - this.getHelperTargetY._draggeeOffsetY) / this.settings.magnetStrength);\n            }\n            else {\n                return this.base();\n            }\n        },\n\n        /**\n         * Returns whether the draggee can be inserted before a given item.\n         */\n        canInsertBefore: function($item) {\n            return true;\n        },\n\n        /**\n         * Returns whether the draggee can be inserted after a given item.\n         */\n        canInsertAfter: function($item) {\n            return true;\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Drag Start\n         */\n        onDragStart: function() {\n            this.oldDraggeeIndexes = this._getDraggeeIndexes();\n\n            // Are we supposed to be moving the target item to the front, and is it not already there?\n            if (\n                this.settings.moveTargetItemToFront &&\n                this.$draggee.length > 1 &&\n                this._getItemIndex(this.$draggee[0]) > this._getItemIndex(this.$draggee[1])\n            ) {\n                // Reposition the target item before the other draggee items in the DOM\n                this.$draggee.first().insertBefore(this.$draggee[1]);\n            }\n\n            // Create the insertion\n            this.$insertion = this.createInsertion();\n            this._placeInsertionWithDraggee();\n\n            this.closestItem = null;\n            this._clearMidpoints();\n\n            //  Get the closest container that has a height\n            if (this.settings.container) {\n                this.$heightedContainer = $(this.settings.container);\n\n                while (!this.$heightedContainer.height()) {\n                    this.$heightedContainer = this.$heightedContainer.parent();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag\n         */\n        onDrag: function() {\n            // If there's a container set, make sure that we're hovering over it\n            if (this.$heightedContainer && !Garnish.hitTest(this.mouseX, this.mouseY, this.$heightedContainer)) {\n                if (this.closestItem) {\n                    this.closestItem = null;\n                    this._removeInsertion();\n                }\n            }\n            else {\n                // Is there a new closest item?\n                if (\n                    this.closestItem !== (this.closestItem = this._getClosestItem()) &&\n                    this.closestItem !== null\n                ) {\n                    this._updateInsertion();\n                }\n            }\n\n            this.base();\n        },\n\n        /**\n         * On Drag Stop\n         */\n        onDragStop: function() {\n            this._removeInsertion();\n\n            // Should we keep the target item where it was?\n            if (!this.settings.moveTargetItemToFront && this.targetItemPositionInDraggee !== 0) {\n                this.$targetItem.insertAfter(this.$draggee.eq(this.targetItemPositionInDraggee));\n            }\n\n            // Return the helpers to the draggees\n            this.returnHelpersToDraggees();\n\n            this.base();\n\n            // Has the item actually moved?\n            this.$items = $().add(this.$items);\n            this.newDraggeeIndexes = this._getDraggeeIndexes();\n\n            if (this.newDraggeeIndexes.join(',') !== this.oldDraggeeIndexes.join(',')) {\n                this.onSortChange();\n            }\n        },\n\n        /**\n         * On Insertion Point Change event\n         */\n        onInsertionPointChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('insertionPointChange');\n                this.settings.onInsertionPointChange();\n            }.bind(this));\n        },\n\n        /**\n         * On Sort Change event\n         */\n        onSortChange: function() {\n            Garnish.requestAnimationFrame(function() {\n                this.trigger('sortChange');\n                this.settings.onSortChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _getItemIndex: function(item) {\n            return $.inArray(item, this.$items);\n        },\n\n        _getDraggeeIndexes: function() {\n            var indexes = [];\n\n            for (var i = 0; i < this.$draggee.length; i++) {\n                indexes.push(this._getItemIndex(this.$draggee[i]))\n            }\n\n            return indexes;\n        },\n\n        /**\n         * Returns the closest item to the cursor.\n         */\n        _getClosestItem: function() {\n            this._getClosestItem._closestItem = null;\n\n            // Start by checking the draggee/insertion, if either are visible\n            if (!this.settings.removeDraggee) {\n                this._testForClosestItem(this.$draggee[0]);\n            }\n            else if (this.insertionVisible) {\n                this._testForClosestItem(this.$insertion[0]);\n            }\n\n            // Check items before the draggee\n            if (this._getClosestItem._closestItem) {\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._closestItem)\n            }\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._startXDist = this._getClosestItem._lastXDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX) : null;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._startYDist = this._getClosestItem._lastYDist = this._getClosestItem._closestItem ? Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY) : null;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.first().prev();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertBefore(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.prev();\n            }\n\n            // Check items after the draggee\n            if (this.settings.axis !== Garnish.Y_AXIS) {\n                this._getClosestItem._lastXDist = this._getClosestItem._startXDist;\n            }\n            if (this.settings.axis !== Garnish.X_AXIS) {\n                this._getClosestItem._lastYDist = this._getClosestItem._startYDist;\n            }\n\n            this._getClosestItem._$otherItem = this.$draggee.last().next();\n\n            while (this._getClosestItem._$otherItem.length) {\n                // See if we're just getting further away\n                this._getClosestItem._midpoint = this._getItemMidpoint(this._getClosestItem._$otherItem[0]);\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._xDist = Math.abs(this._getClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._yDist = Math.abs(this._getClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n                }\n\n                if (\n                    (this.settings.axis === Garnish.Y_AXIS || (this._getClosestItem._lastXDist !== null && this._getClosestItem._xDist > this._getClosestItem._lastXDist)) &&\n                    (this.settings.axis === Garnish.X_AXIS || (this._getClosestItem._lastYDist !== null && this._getClosestItem._yDist > this._getClosestItem._lastYDist))\n                ) {\n                    break;\n                }\n\n                if (this.settings.axis !== Garnish.Y_AXIS) {\n                    this._getClosestItem._lastXDist = this._getClosestItem._xDist;\n                }\n                if (this.settings.axis !== Garnish.X_AXIS) {\n                    this._getClosestItem._lastYDist = this._getClosestItem._yDist;\n                }\n\n                // Give the extending class a chance to allow/disallow this item\n                if (this.canInsertAfter(this._getClosestItem._$otherItem)) {\n                    this._testForClosestItem(this._getClosestItem._$otherItem[0]);\n                }\n\n                // Prep the next item\n                this._getClosestItem._$otherItem = this._getClosestItem._$otherItem.next();\n            }\n\n            // Return the result\n\n            // Ignore if it's the draggee or insertion\n            if (\n                this._getClosestItem._closestItem !== this.$draggee[0] &&\n                (!this.insertionVisible || this._getClosestItem._closestItem !== this.$insertion[0])\n            ) {\n                return this._getClosestItem._closestItem;\n            }\n            else {\n                return null;\n            }\n        },\n\n        _clearMidpoints: function() {\n            this._midpointVersion++;\n            this._$prevItem = null;\n        },\n\n        _getItemMidpoint: function(item) {\n            if ($.data(item, 'midpointVersion') !== this._midpointVersion) {\n                // If this isn't the draggee, temporarily move the draggee to this item\n                this._getItemMidpoint._repositionDraggee = (\n                    !this.settings.axis &&\n                    (!this.settings.removeDraggee || this.insertionVisible) &&\n                    item !== this.$draggee[0] &&\n                    (!this.$insertion || item !== this.$insertion.get(0))\n                );\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Is this the first time we've had to temporarily reposition the draggee since the last midpoint clearing?\n                    if (!this._$prevItem) {\n                        this._$prevItem = (this.insertionVisible ? this.$insertion : this.$draggee).first().prev();\n                    }\n\n                    this._moveDraggeeToItem(item);\n\n                    // Now figure out which element we're actually getting the midpoint of\n                    if (!this.settings.removeDraggee) {\n                        this._getItemMidpoint._$item = this.$draggee;\n                    }\n                    else {\n                        this._getItemMidpoint._$item = this.$insertion;\n                    }\n                }\n                else {\n                    // We're actually getting the midpoint of this item\n                    this._getItemMidpoint._$item = $(item);\n                }\n\n                this._getItemMidpoint._offset = this._getItemMidpoint._$item.offset();\n\n                $.data(item, 'midpoint', {\n                    x: this._getItemMidpoint._offset.left + this._getItemMidpoint._$item.outerWidth() / 2,\n                    y: this._getItemMidpoint._offset.top + this._getItemMidpoint._$item.outerHeight() / 2\n                });\n\n                $.data(item, 'midpointVersion', this._midpointVersion);\n\n                delete this._getItemMidpoint._$item;\n                delete this._getItemMidpoint._offset;\n\n                if (this._getItemMidpoint._repositionDraggee) {\n                    // Move the draggee back\n                    if (this._$prevItem.length) {\n                        this.$draggee.insertAfter(this._$prevItem);\n                    }\n                    else {\n                        this.$draggee.prependTo(this.$draggee.parent());\n                    }\n\n                    this._placeInsertionWithDraggee();\n                }\n            }\n\n            return $.data(item, 'midpoint');\n        },\n\n        _testForClosestItem: function(item) {\n            this._testForClosestItem._midpoint = this._getItemMidpoint(item);\n            this._testForClosestItem._mouseDistX = Math.abs(this._testForClosestItem._midpoint.x - this.draggeeVirtualMidpointX);\n            this._testForClosestItem._mouseDistY = Math.abs(this._testForClosestItem._midpoint.y - this.draggeeVirtualMidpointY);\n\n            // Don't even consider items that are further away on the Y axis\n            if (\n                this._getClosestItem._closestItem === null ||\n                this._testForClosestItem._mouseDistY < this._getClosestItem._closestItemMouseDistY ||\n                (\n                    this._testForClosestItem._mouseDistY === this._getClosestItem._closestItemMouseDistY &&\n                    this._testForClosestItem._mouseDistX <= this._getClosestItem._closestItemMouseDistX\n                )\n            ) {\n                this._getClosestItem._closestItem = item;\n                this._getClosestItem._closestItemMouseDistX = this._testForClosestItem._mouseDistX;\n                this._getClosestItem._closestItemMouseDistY = this._testForClosestItem._mouseDistY;\n            }\n        },\n\n        /**\n         * Updates the position of the insertion point.\n         */\n        _updateInsertion: function() {\n            if (this.closestItem) {\n                this._moveDraggeeToItem(this.closestItem);\n            }\n\n            // Now that things have shifted around, invalidate the midpoints\n            this._clearMidpoints();\n\n            this.onInsertionPointChange();\n        },\n\n        _moveDraggeeToItem: function(item) {\n            // Going down?\n            if (this.$draggee.index() < $(item).index()) {\n                this.$draggee.insertAfter(item);\n            }\n            else {\n                this.$draggee.insertBefore(item);\n            }\n\n            this._placeInsertionWithDraggee();\n        },\n\n        _placeInsertionWithDraggee: function() {\n            if (this.$insertion) {\n                this.$insertion.insertBefore(this.$draggee.first());\n                this.insertionVisible = true;\n            }\n        },\n\n        /**\n         * Removes the insertion, if it's visible.\n         */\n        _removeInsertion: function() {\n            if (this.insertionVisible) {\n                this.$insertion.remove();\n                this.insertionVisible = false;\n            }\n        }\n    },\n    {\n        defaults: {\n            container: null,\n            insertion: null,\n            moveTargetItemToFront: false,\n            magnetStrength: 1,\n            onInsertionPointChange: $.noop,\n            onSortChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * ESC key manager class\n * @deprecated Use Garnish.ShortcutManager instead\n */\nGarnish.EscManager = Garnish.Base.extend(\n    {\n        handlers: null,\n\n        init: function() {\n            this.handlers = [];\n\n            this.addListener(Garnish.$bod, 'keyup', function(ev) {\n                if (ev.keyCode === Garnish.ESC_KEY) {\n                    this.escapeLatest(ev);\n                }\n            });\n        },\n\n        register: function(obj, func) {\n            this.handlers.push({\n                obj: obj,\n                func: func\n            });\n        },\n\n        unregister: function(obj) {\n            for (var i = this.handlers.length - 1; i >= 0; i--) {\n                if (this.handlers[i].obj === obj) {\n                    this.handlers.splice(i, 1);\n                }\n            }\n        },\n\n        escapeLatest: function(ev) {\n            if (this.handlers.length) {\n                var handler = this.handlers.pop();\n\n                var func;\n\n                if (typeof handler.func === 'function') {\n                    func = handler.func;\n                }\n                else {\n                    func = handler.obj[handler.func];\n                }\n\n                func.call(handler.obj, ev);\n\n                if (typeof handler.obj.trigger === 'function') {\n                    handler.obj.trigger('escape');\n                }\n            }\n        }\n    }\n);\n\nGarnish.escManager = new Garnish.EscManager();\n\n/** global: Garnish */\n/**\n * HUD\n */\nGarnish.HUD = Garnish.Base.extend(\n    {\n        $trigger: null,\n        $fixedTriggerParent: null,\n        $hud: null,\n        $tip: null,\n        $body: null,\n        $header: null,\n        $footer: null,\n        $mainContainer: null,\n        $main: null,\n        $shade: null,\n\n        showing: false,\n        orientation: null,\n\n        updatingSizeAndPosition: false,\n        windowWidth: null,\n        windowHeight: null,\n        scrollTop: null,\n        scrollLeft: null,\n        mainWidth: null,\n        mainHeight: null,\n\n        /**\n         * Constructor\n         */\n        init: function(trigger, bodyContents, settings) {\n\n            this.$trigger = $(trigger);\n\n            this.setSettings(settings, Garnish.HUD.defaults);\n            this.on('show', this.settings.onShow);\n            this.on('hide', this.settings.onHide);\n            this.on('submit', this.settings.onSubmit);\n\n            if (typeof Garnish.HUD.activeHUDs === 'undefined') {\n                Garnish.HUD.activeHUDs = {};\n            }\n\n            this.$shade = $('<div/>', {'class': this.settings.shadeClass});\n            this.$hud = $('<div/>', {'class': this.settings.hudClass}).data('hud', this);\n            this.$tip = $('<div/>', {'class': this.settings.tipClass}).appendTo(this.$hud);\n            this.$body = $('<form/>', {'class': this.settings.bodyClass}).appendTo(this.$hud);\n            this.$mainContainer = $('<div/>', {'class': this.settings.mainContainerClass}).appendTo(this.$body);\n            this.$main = $('<div/>', {'class': this.settings.mainClass}).appendTo(this.$mainContainer);\n\n            this.updateBody(bodyContents);\n\n            // See if the trigger is fixed\n            var $parent = this.$trigger;\n\n            do {\n                if ($parent.css('position') === 'fixed') {\n                    this.$fixedTriggerParent = $parent;\n                    break;\n                }\n\n                $parent = $parent.offsetParent();\n            }\n            while ($parent.length && $parent.prop('nodeName') !== 'HTML');\n\n            if (this.$fixedTriggerParent) {\n                this.$hud.css('position', 'fixed');\n            }\n            else {\n                this.$hud.css('position', 'absolute');\n            }\n\n            // Hide the HUD until it gets positioned\n\t\t\tthis.$hud.css('opacity', 0);\n            this.show();\n            this.$hud.css('opacity', 1);\n\n            this.addListener(this.$body, 'submit', '_handleSubmit');\n\n            if (this.settings.hideOnShadeClick) {\n                this.addListener(this.$shade, 'tap,click', 'hide');\n            }\n\n            if (this.settings.closeBtn) {\n                this.addListener(this.settings.closeBtn, 'activate', 'hide');\n            }\n\n            this.addListener(Garnish.$win, 'resize', 'updateSizeAndPosition');\n            this.addListener(this.$main, 'resize', 'updateSizeAndPosition');\n            if (!this.$fixedTriggerParent && Garnish.$scrollContainer[0] !== Garnish.$win[0]) {\n                this.addListener(Garnish.$scrollContainer, 'scroll', 'updateSizeAndPosition');\n            }\n        },\n\n        /**\n         * Update the body contents\n         */\n        updateBody: function(bodyContents) {\n            // Cleanup\n            this.$main.html('');\n\n            if (this.$header) {\n                this.$hud.removeClass('has-header');\n                this.$header.remove();\n                this.$header = null;\n            }\n\n            if (this.$footer) {\n                this.$hud.removeClass('has-footer');\n                this.$footer.remove();\n                this.$footer = null;\n            }\n\n            // Append the new body contents\n            this.$main.append(bodyContents);\n\n            // Look for a header and footer\n            var $header = this.$main.find('.' + this.settings.headerClass + ':first'),\n                $footer = this.$main.find('.' + this.settings.footerClass + ':first');\n\n            if ($header.length) {\n                this.$header = $header.insertBefore(this.$mainContainer);\n                this.$hud.addClass('has-header');\n            }\n\n            if ($footer.length) {\n                this.$footer = $footer.insertAfter(this.$mainContainer);\n                this.$hud.addClass('has-footer');\n            }\n        },\n\n        /**\n         * Show\n         */\n        show: function(ev) {\n            if (ev && ev.stopPropagation) {\n                ev.stopPropagation();\n            }\n\n            if (this.showing) {\n                return;\n            }\n\n            if (this.settings.closeOtherHUDs) {\n                for (var hudID in Garnish.HUD.activeHUDs) {\n                    if (!Garnish.HUD.activeHUDs.hasOwnProperty(hudID)) {\n                        continue;\n                    }\n                    Garnish.HUD.activeHUDs[hudID].hide();\n                }\n            }\n\n            // Move it to the end of <body> so it gets the highest sub-z-index\n            this.$shade.appendTo(Garnish.$bod);\n            this.$hud.appendTo(Garnish.$bod);\n\n            this.$hud.show();\n            this.$shade.show();\n            this.showing = true;\n            Garnish.HUD.activeHUDs[this._namespace] = this;\n\n            Garnish.shortcutManager.addLayer();\n\n            if (this.settings.hideOnEsc) {\n                Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n            }\n\n            this.onShow();\n            this.enable();\n\n            if (this.updateRecords()) {\n                // Prevent the browser from jumping\n                this.$hud.css('top', Garnish.$scrollContainer.scrollTop());\n\n                this.updateSizeAndPosition(true);\n            }\n        },\n\n        onShow: function() {\n            this.trigger('show');\n        },\n\n        updateRecords: function() {\n            var changed = false;\n            changed = (this.windowWidth !== (this.windowWidth = Garnish.$win.width())) || changed;\n            changed = (this.windowHeight !== (this.windowHeight = Garnish.$win.height())) || changed;\n            changed = (this.scrollTop !== (this.scrollTop = Garnish.$scrollContainer.scrollTop())) || changed;\n            changed = (this.scrollLeft !== (this.scrollLeft = Garnish.$scrollContainer.scrollLeft())) || changed;\n            changed = (this.mainWidth !== (this.mainWidth = this.$main.outerWidth())) || changed;\n            changed = (this.mainHeight !== (this.mainHeight = this.$main.outerHeight())) || changed;\n            return changed;\n        },\n\n        updateSizeAndPosition: function(force) {\n            if (force === true || (this.updateRecords() && !this.updatingSizeAndPosition)) {\n                this.updatingSizeAndPosition = true;\n                Garnish.requestAnimationFrame(this.updateSizeAndPositionInternal.bind(this));\n            }\n        },\n\n        updateSizeAndPositionInternal: function() {\n            var triggerWidth,\n                triggerHeight,\n                triggerOffset,\n                windowScrollLeft,\n                windowScrollTop,\n                scrollContainerTriggerOffset,\n                scrollContainerScrollLeft,\n                scrollContainerScrollTop,\n                hudBodyWidth,\n                hudBodyHeight;\n\n            // Get the window sizes and trigger offset\n\n            windowScrollLeft = Garnish.$win.scrollLeft();\n            windowScrollTop = Garnish.$win.scrollTop();\n\n            // Get the trigger's dimensions\n            triggerWidth = this.$trigger.outerWidth();\n            triggerHeight = this.$trigger.outerHeight();\n\n            // Get the offsets for each side of the trigger element\n            triggerOffset = this.$trigger.offset();\n\n            if (this.$fixedTriggerParent) {\n                triggerOffset.left -= windowScrollLeft;\n                triggerOffset.top -= windowScrollTop;\n\n                scrollContainerTriggerOffset = triggerOffset;\n\n                windowScrollLeft = 0;\n                windowScrollTop = 0;\n                scrollContainerScrollLeft = 0;\n                scrollContainerScrollTop = 0;\n            }\n            else {\n                scrollContainerTriggerOffset = Garnish.getOffset(this.$trigger);\n\n                scrollContainerScrollLeft = Garnish.$scrollContainer.scrollLeft();\n                scrollContainerScrollTop = Garnish.$scrollContainer.scrollTop();\n            }\n\n            triggerOffset.right = triggerOffset.left + triggerWidth;\n            triggerOffset.bottom = triggerOffset.top + triggerHeight;\n\n            scrollContainerTriggerOffset.right = scrollContainerTriggerOffset.left + triggerWidth;\n            scrollContainerTriggerOffset.bottom = scrollContainerTriggerOffset.top + triggerHeight;\n\n            // Get the HUD dimensions\n            this.$hud.css({\n                width: ''\n            });\n\n            this.$mainContainer.css({\n                height: '',\n                'overflow-x': '',\n                'overflow-y': ''\n            });\n\n            hudBodyWidth = this.$body.width();\n            hudBodyHeight = this.$body.height();\n\n            // Determine the best orientation for the HUD\n\n            // Find the actual available top/right/bottom/left clearances\n            var clearances = {\n                bottom: this.windowHeight + scrollContainerScrollTop - scrollContainerTriggerOffset.bottom,\n                top: scrollContainerTriggerOffset.top - scrollContainerScrollTop,\n                right: this.windowWidth + scrollContainerScrollLeft - scrollContainerTriggerOffset.right,\n                left: scrollContainerTriggerOffset.left - scrollContainerScrollLeft\n            };\n\n            // Find the first position that has enough room\n            this.orientation = null;\n\n            for (var i = 0; i < this.settings.orientations.length; i++) {\n                var orientation = this.settings.orientations[i],\n                    relevantSize = (orientation === 'top' || orientation === 'bottom' ? hudBodyHeight : hudBodyWidth);\n\n                if (clearances[orientation] - (this.settings.windowSpacing + this.settings.triggerSpacing) >= relevantSize) {\n                    // This is the first orientation that has enough room in order of preference, so we'll go with this\n                    this.orientation = orientation;\n                    break;\n                }\n\n                if (!this.orientation || clearances[orientation] > clearances[this.orientation]) {\n                    // Use this as a fallback as it's the orientation with the most clearance so far\n                    this.orientation = orientation;\n                }\n            }\n\n            // Just in case...\n            if (!this.orientation || $.inArray(this.orientation, ['bottom', 'top', 'right', 'left']) === -1) {\n                this.orientation = 'bottom'\n            }\n\n            // Update the tip class\n            if (this.tipClass) {\n                this.$tip.removeClass(this.tipClass);\n            }\n\n            this.tipClass = this.settings.tipClass + '-' + Garnish.HUD.tipClasses[this.orientation];\n            this.$tip.addClass(this.tipClass);\n\n            // Make sure the HUD body is within the allowed size\n\n            var maxHudBodyWidth,\n                maxHudBodyHeight;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                maxHudBodyWidth = this.windowWidth - this.settings.windowSpacing * 2;\n                maxHudBodyHeight = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n            }\n            else {\n                maxHudBodyWidth = clearances[this.orientation] - this.settings.windowSpacing - this.settings.triggerSpacing;\n                maxHudBodyHeight = this.windowHeight - this.settings.windowSpacing * 2;\n            }\n\n            if (maxHudBodyWidth < this.settings.minBodyWidth) {\n                maxHudBodyWidth = this.settings.minBodyWidth;\n            }\n\n            if (maxHudBodyHeight < this.settings.minBodyHeight) {\n                maxHudBodyHeight = this.settings.minBodyHeight;\n            }\n\n            if (hudBodyWidth > maxHudBodyWidth || hudBodyWidth < this.settings.minBodyWidth) {\n                if (hudBodyWidth > maxHudBodyWidth) {\n                    hudBodyWidth = maxHudBodyWidth;\n                }\n                else {\n                    hudBodyWidth = this.settings.minBodyWidth;\n                }\n\n                this.$hud.width(hudBodyWidth);\n\n                // Is there any overflow now?\n                if (this.mainWidth > maxHudBodyWidth) {\n                    this.$mainContainer.css('overflow-x', 'scroll');\n                }\n\n                // The height may have just changed\n                hudBodyHeight = this.$body.height();\n            }\n\n            if (hudBodyHeight > maxHudBodyHeight || hudBodyHeight < this.settings.minBodyHeight) {\n                if (hudBodyHeight > maxHudBodyHeight) {\n                    hudBodyHeight = maxHudBodyHeight;\n                }\n                else {\n                    hudBodyHeight = this.settings.minBodyHeight;\n                }\n\n                var mainHeight = hudBodyHeight;\n\n                if (this.$header) {\n                    mainHeight -= this.$header.outerHeight();\n                }\n\n                if (this.$footer) {\n                    mainHeight -= this.$footer.outerHeight();\n                }\n\n                this.$mainContainer.height(mainHeight);\n\n                // Is there any overflow now?\n                if (this.mainHeight > mainHeight) {\n                    this.$mainContainer.css('overflow-y', 'scroll');\n                }\n            }\n\n            // Set the HUD/tip positions\n            var triggerCenter, left, top;\n\n            if (this.orientation === 'top' || this.orientation === 'bottom') {\n                // Center the HUD horizontally\n                var maxLeft = (this.windowWidth + windowScrollLeft) - (hudBodyWidth + this.settings.windowSpacing);\n                var minLeft = (windowScrollLeft + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.left + Math.round(triggerWidth / 2);\n                left = triggerCenter - Math.round(hudBodyWidth / 2);\n\n                if (left > maxLeft) {\n                    left = maxLeft;\n                }\n                if (left < minLeft) {\n                    left = minLeft;\n                }\n\n                this.$hud.css('left', left);\n\n                var tipLeft = (triggerCenter - left) - (this.settings.tipWidth / 2);\n                this.$tip.css({left: tipLeft, top: ''});\n\n                if (this.orientation === 'top') {\n                    top = triggerOffset.top - (hudBodyHeight + this.settings.triggerSpacing);\n                    this.$hud.css('top', top);\n                }\n                else {\n                    top = triggerOffset.bottom + this.settings.triggerSpacing;\n                    this.$hud.css('top', top);\n                }\n            }\n            else {\n                // Center the HUD vertically\n                var maxTop = (this.windowHeight + windowScrollTop) - (hudBodyHeight + this.settings.windowSpacing);\n                var minTop = (windowScrollTop + this.settings.windowSpacing);\n                triggerCenter = triggerOffset.top + Math.round(triggerHeight / 2);\n                top = triggerCenter - Math.round(hudBodyHeight / 2);\n\n                if (top > maxTop) {\n                    top = maxTop;\n                }\n                if (top < minTop) {\n                    top = minTop;\n                }\n\n                this.$hud.css('top', top);\n\n                var tipTop = (triggerCenter - top) - (this.settings.tipWidth / 2);\n                this.$tip.css({top: tipTop, left: ''});\n\n\n                if (this.orientation === 'left') {\n                    left = triggerOffset.left - (hudBodyWidth + this.settings.triggerSpacing);\n                    this.$hud.css('left', left);\n                }\n                else {\n                    left = triggerOffset.right + this.settings.triggerSpacing;\n                    this.$hud.css('left', left);\n                }\n            }\n\n            this.updatingSizeAndPosition = false;\n            this.trigger('updateSizeAndPosition');\n        },\n\n        /**\n         * Hide\n         */\n        hide: function() {\n            if (!this.showing) {\n                return;\n            }\n\n            this.disable();\n\n            this.$hud.hide();\n            this.$shade.hide();\n\n            this.showing = false;\n            delete Garnish.HUD.activeHUDs[this._namespace];\n            Garnish.shortcutManager.removeLayer();\n            this.onHide();\n        },\n\n        onHide: function() {\n            this.trigger('hide');\n        },\n\n        toggle: function() {\n            if (this.showing) {\n                this.hide();\n            }\n            else {\n                this.show();\n            }\n        },\n\n        submit: function() {\n            this.onSubmit();\n        },\n\n        onSubmit: function() {\n            this.trigger('submit');\n        },\n\n        _handleSubmit: function(ev) {\n            ev.preventDefault();\n            this.submit();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$hud) {\n                this.$hud.remove();\n            }\n\n            if (this.$shade) {\n                this.$shade.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        tipClasses: {bottom: 'top', top: 'bottom', right: 'left', left: 'right'},\n\n        defaults: {\n            shadeClass: 'hud-shade',\n            hudClass: 'hud',\n            tipClass: 'tip',\n            bodyClass: 'body',\n            headerClass: 'hud-header',\n            footerClass: 'hud-footer',\n            mainContainerClass: 'main-container',\n            mainClass: 'main',\n            orientations: ['bottom', 'top', 'right', 'left'],\n            triggerSpacing: 10,\n            windowSpacing: 10,\n            tipWidth: 30,\n            minBodyWidth: 200,\n            minBodyHeight: 0,\n            onShow: $.noop,\n            onHide: $.noop,\n            onSubmit: $.noop,\n            closeBtn: null,\n            closeOtherHUDs: true,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Menu Button\n */\nGarnish.MenuBtn = Garnish.Base.extend(\n    {\n        $btn: null,\n        menu: null,\n        showingMenu: false,\n        disabled: true,\n\n        /**\n         * Constructor\n         */\n        init: function(btn, menu, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(menu)) {\n                // (btn, settings)\n                settings = menu;\n                menu = null;\n            }\n\n            this.$btn = $(btn);\n            var $menu;\n\n            // Is this already a menu button?\n            if (this.$btn.data('menubtn')) {\n                // Grab the old MenuBtn's menu container\n                if (!menu) {\n                    $menu = this.$btn.data('menubtn').menu.$container;\n                }\n\n                Garnish.log('Double-instantiating a menu button on an element');\n                this.$btn.data('menubtn').destroy();\n            }\n            else if (!menu) {\n                $menu = this.$btn.next('.menu').detach();\n            }\n\n            this.$btn.data('menubtn', this);\n\n            this.setSettings(settings, Garnish.MenuBtn.defaults);\n\n            this.menu = menu || new Garnish.CustomSelect($menu);\n            this.menu.$anchor = $(this.settings.menuAnchor || this.$btn);\n            this.menu.on('optionselect', function(ev) {\n                this.onOptionSelect(ev.selectedOption);\n            }.bind(this));\n\n            this.$btn.attr({\n                'tabindex': 0,\n                'aria-controls': this.menu.menuId,\n                'aria-haspopup': 'listbox',\n                'aria-expanded': 'false'\n            });\n\n            this.menu.on('hide', this.onMenuHide.bind(this));\n            this.addListener(this.$btn, 'mousedown', 'onMouseDown');\n            this.addListener(this.$btn, 'keydown', 'onKeyDown');\n            this.addListener(this.$btn, 'blur', 'onBlur');\n            this.enable();\n        },\n\n        onBlur: function() {\n            if (this.showingMenu) {\n                Garnish.requestAnimationFrame(function() {\n                    if (!$.contains(this.menu.$container.get(0), document.activeElement)) {\n                        this.hideMenu();\n                    }\n                }.bind(this));\n            }\n        },\n\n        onKeyDown: function(ev) {\n            var $option;\n\n            switch (ev.keyCode) {\n                case Garnish.RETURN_KEY: {\n                    ev.preventDefault();\n\n                    const $currentOption = this.menu.$options.filter('.hover');\n                    if ($currentOption.length > 0) {\n                        $currentOption.get(0).click();\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        const $currentOption = this.menu.$options.filter('.hover');\n                        if ($currentOption.length > 0) {\n                            $currentOption.get(0).click();\n                        }\n                    } else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n\n                        this.focusOption($option);\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index + 1) < this.menu.$options.length) {\n                                        $option = $(this.menu.$options[(index + 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[0]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.first();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    if (this.showingMenu) {\n                        $.each(this.menu.$options, function(index, value) {\n                            if (!$option) {\n                                if ($(value).hasClass('hover')) {\n                                    if ((index - 1) >= 0) {\n                                        $option = $(this.menu.$options[(index - 1)]);\n                                    }\n                                }\n                            }\n                        }.bind(this));\n\n                        if (!$option) {\n                            $option = $(this.menu.$options[(this.menu.$options.length - 1)]);\n                        }\n                    }\n                    else {\n                        this.showMenu();\n\n                        $option = this.menu.$options.filter('.sel:first');\n\n                        if ($option.length === 0) {\n                            $option = this.menu.$options.last();\n                        }\n                    }\n\n                    this.focusOption($option);\n\n                    break;\n                }\n            }\n        },\n\n        focusOption: function($option) {\n            this.menu.$options.removeClass('hover');\n\n            $option.addClass('hover');\n\n            this.menu.$menuList.attr('aria-activedescendant', $option.attr('id'));\n            this.$btn.attr('aria-activedescendant', $option.attr('id'));\n        },\n\n        onMouseDown: function(ev) {\n            if (ev.which !== Garnish.PRIMARY_CLICK || Garnish.isCtrlKeyPressed(ev) || ev.target.nodeName === 'INPUT') {\n                return;\n            }\n\n            ev.preventDefault();\n\n            if (this.showingMenu) {\n                this.hideMenu();\n            }\n            else {\n                this.showMenu();\n            }\n        },\n\n        showMenu: function() {\n            if (this.disabled) {\n                return;\n            }\n\n            this.menu.show();\n            this.$btn.addClass('active');\n            this.$btn.trigger('focus');\n            this.$btn.attr('aria-expanded', 'true');\n\n            this.showingMenu = true;\n\n            setTimeout(function() {\n                this.addListener(Garnish.$doc, 'mousedown', 'onMouseDown');\n            }.bind(this), 1);\n        },\n\n        hideMenu: function() {\n            this.menu.hide();\n        },\n\n        onMenuHide: function() {\n            this.$btn.removeClass('active');\n            this.$btn.attr('aria-expanded', 'false');\n            this.showingMenu = false;\n\n            this.removeListener(Garnish.$doc, 'mousedown');\n        },\n\n        onOptionSelect: function(option) {\n            this.settings.onOptionSelect(option);\n            this.trigger('optionSelect', {option: option});\n        },\n\n        enable: function() {\n            this.disabled = false;\n        },\n\n        disable: function() {\n            this.disabled = true;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$btn.removeData('menubtn');\n            this.base();\n        }\n    },\n    {\n        defaults: {\n            menuAnchor: null,\n            onOptionSelect: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Mixed input\n *\n * @todo RTL support, in the event that the input doesn't have dir=\"ltr\".\n */\nGarnish.MixedInput = Garnish.Base.extend(\n    {\n        $container: null,\n        elements: null,\n        focussedElement: null,\n        blurTimeout: null,\n\n        init: function(container, settings) {\n            this.$container = $(container);\n            this.setSettings(settings, Garnish.MixedInput.defaults);\n\n            this.elements = [];\n\n            // Allow the container to receive focus\n            this.$container.attr('tabindex', 0);\n            this.addListener(this.$container, 'focus', 'onFocus');\n        },\n\n        getElementIndex: function($elem) {\n            return $.inArray($elem, this.elements);\n        },\n\n        isText: function($elem) {\n            return ($elem.prop('nodeName') === 'INPUT');\n        },\n\n        onFocus: function() {\n            // Set focus to the first element\n            if (this.elements.length) {\n                var $elem = this.elements[0];\n                this.setFocus($elem);\n                this.setCarotPos($elem, 0);\n            }\n            else {\n                this.addTextElement();\n            }\n        },\n\n        addTextElement: function(index) {\n            var text = new TextElement(this);\n            this.addElement(text.$input, index);\n            return text;\n        },\n\n        addElement: function($elem, index) {\n            // Was a target index passed, and is it valid?\n            if (typeof index === 'undefined') {\n                if (this.focussedElement) {\n                    var focussedElement = this.focussedElement,\n                        focussedElementIndex = this.getElementIndex(focussedElement);\n\n                    // Is the focus on a text element?\n                    if (this.isText(focussedElement)) {\n                        var selectionStart = focussedElement.prop('selectionStart'),\n                            selectionEnd = focussedElement.prop('selectionEnd'),\n                            val = focussedElement.val(),\n                            preVal = val.substring(0, selectionStart),\n                            postVal = val.substr(selectionEnd);\n\n                        if (preVal && postVal) {\n                            // Split the input into two\n                            focussedElement.val(preVal).trigger('change');\n                            var newText = new TextElement(this);\n                            newText.$input.val(postVal).trigger('change');\n                            this.addElement(newText.$input, focussedElementIndex + 1);\n\n                            // Insert the new element in between them\n                            index = focussedElementIndex + 1;\n                        }\n                        else if (!preVal) {\n                            // Insert the new element before this one\n                            index = focussedElementIndex;\n                        }\n                        else {\n                            // Insert it after this one\n                            index = focussedElementIndex + 1;\n                        }\n                    }\n                    else {\n                        // Just insert the new one after this one\n                        index = focussedElementIndex + 1;\n                    }\n                }\n                else {\n                    // Insert the new element at the end\n                    index = this.elements.length;\n                }\n            }\n\n            // Add the element\n            if (typeof this.elements[index] !== 'undefined') {\n                $elem.insertBefore(this.elements[index]);\n                this.elements.splice(index, 0, $elem);\n            }\n            else {\n                // Just for safe measure, set the index to what it really will be\n                index = this.elements.length;\n\n                this.$container.append($elem);\n                this.elements.push($elem);\n            }\n\n            // Make sure that there are text elements surrounding all non-text elements\n            if (!this.isText($elem)) {\n                // Add a text element before?\n                if (index === 0 || !this.isText(this.elements[index - 1])) {\n                    this.addTextElement(index);\n                    index++;\n                }\n\n                // Add a text element after?\n                if (index === this.elements.length - 1 || !this.isText(this.elements[index + 1])) {\n                    this.addTextElement(index + 1);\n                }\n            }\n\n            // Add event listeners\n            this.addListener($elem, 'click', function() {\n                this.setFocus($elem);\n            });\n\n            // Set focus to the new element\n            setTimeout(function() {\n                this.setFocus($elem);\n            }.bind(this), 1);\n        },\n\n        removeElement: function($elem) {\n            var index = this.getElementIndex($elem);\n            if (index !== -1) {\n                this.elements.splice(index, 1);\n\n                if (!this.isText($elem)) {\n                    // Combine the two now-adjacent text elements\n                    var $prevElem = this.elements[index - 1],\n                        $nextElem = this.elements[index];\n\n                    if (this.isText($prevElem) && this.isText($nextElem)) {\n                        var prevElemVal = $prevElem.val(),\n                            newVal = prevElemVal + $nextElem.val();\n                        $prevElem.val(newVal).trigger('change');\n                        this.removeElement($nextElem);\n                        this.setFocus($prevElem);\n                        this.setCarotPos($prevElem, prevElemVal.length);\n                    }\n                }\n\n                $elem.remove();\n            }\n        },\n\n        setFocus: function($elem) {\n            this.$container.addClass('focus');\n\n            if (!this.focussedElement) {\n                // Prevent the container from receiving focus\n                // as long as one of its elements has focus\n                this.$container.attr('tabindex', '-1');\n            }\n            else {\n                // Blur the previously-focussed element\n                this.blurFocussedElement();\n            }\n\n            $elem.attr('tabindex', '0');\n            $elem.focus();\n            this.focussedElement = $elem;\n\n            this.addListener($elem, 'blur', function() {\n                this.blurTimeout = setTimeout(function() {\n                    if (this.focussedElement === $elem) {\n                        this.blurFocussedElement();\n                        this.focussedElement = null;\n                        this.$container.removeClass('focus');\n\n                        // Get ready for future focus\n                        this.$container.attr('tabindex', '0');\n                    }\n                }.bind(this), 1);\n            });\n        },\n\n        blurFocussedElement: function() {\n            this.removeListener(this.focussedElement, 'blur');\n            this.focussedElement.attr('tabindex', '-1');\n        },\n\n        focusPreviousElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index > 0) {\n                var $elem = this.elements[index - 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the end\n                if (this.isText($elem)) {\n                    var length = $elem.val().length;\n                    this.setCarotPos($elem, length);\n                }\n            }\n        },\n\n        focusNextElement: function($from) {\n            var index = this.getElementIndex($from);\n\n            if (index < this.elements.length - 1) {\n                var $elem = this.elements[index + 1];\n                this.setFocus($elem);\n\n                // If it's a text element, put the carot at the beginning\n                if (this.isText($elem)) {\n                    this.setCarotPos($elem, 0)\n                }\n            }\n        },\n\n        setCarotPos: function($elem, pos) {\n            $elem.prop('selectionStart', pos);\n            $elem.prop('selectionEnd', pos);\n        }\n\n    });\n\n\nvar TextElement = Garnish.Base.extend({\n\n        parentInput: null,\n        $input: null,\n        $stage: null,\n        val: null,\n        focussed: false,\n        interval: null,\n\n        init: function(parentInput) {\n            this.parentInput = parentInput;\n\n            this.$input = $('<input type=\"text\"/>').appendTo(this.parentInput.$container);\n            this.$input.css('margin-right', (2 - TextElement.padding) + 'px');\n\n            this.setWidth();\n\n            this.addListener(this.$input, 'focus', 'onFocus');\n            this.addListener(this.$input, 'blur', 'onBlur');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n            this.addListener(this.$input, 'change', 'checkInput');\n        },\n\n        getIndex: function() {\n            return this.parentInput.getElementIndex(this.$input);\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                position: 'absolute',\n                top: -9999,\n                left: -9999,\n                wordWrap: 'nowrap'\n            });\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getTextWidth: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (val) {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Spaces\n                val = val.replace(/ /g, '&nbsp;');\n            }\n\n            this.$stage.html(val);\n            this.stageWidth = this.$stage.width();\n            return this.stageWidth;\n        },\n\n        onFocus: function() {\n            this.focussed = true;\n            this.interval = setInterval(this.checkInput.bind(this), Garnish.NiceText.interval);\n            this.checkInput();\n        },\n\n        onBlur: function() {\n            this.focussed = false;\n            clearInterval(this.interval);\n            this.checkInput();\n        },\n\n        onKeyDown: function(ev) {\n            setTimeout(this.checkInput.bind(this), 1);\n\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    if (this.$input.prop('selectionStart') === this.val.length && this.$input.prop('selectionEnd') === this.val.length) {\n                        // Set focus to the next element\n                        this.parentInput.focusNextElement(this.$input);\n                    }\n                    break;\n                }\n\n                case Garnish.DELETE_KEY: {\n                    if (this.$input.prop('selectionStart') === 0 && this.$input.prop('selectionEnd') === 0) {\n                        // Set focus to the previous element\n                        this.parentInput.focusPreviousElement(this.$input);\n                        ev.preventDefault();\n                    }\n                }\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        setVal: function(val) {\n            this.$input.val(val);\n            this.checkInput();\n        },\n\n        checkInput: function() {\n            // Has the value changed?\n            var changed = (this.val !== this.getVal());\n            if (changed) {\n                this.setWidth();\n                this.onChange();\n            }\n\n            return changed;\n        },\n\n        setWidth: function() {\n            // has the width changed?\n            if (this.stageWidth !== this.getTextWidth(this.val)) {\n                // update the textarea width\n                var width = this.stageWidth + TextElement.padding;\n                this.$input.width(width);\n            }\n        },\n\n        onChange: $.noop\n    },\n    {\n        padding: 20\n    }\n);\n\n/** global: Garnish */\n/**\n * Modal\n */\nGarnish.Modal = Garnish.Base.extend(\n    {\n        $container: null,\n        $shade: null,\n\n        visible: false,\n\n        dragger: null,\n\n        desiredWidth: null,\n        desiredHeight: null,\n        resizeDragger: null,\n        resizeStartWidth: null,\n        resizeStartHeight: null,\n\n        init: function(container, settings) {\n            // Param mapping\n            if (typeof settings === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n            }\n\n            this.setSettings(settings, Garnish.Modal.defaults);\n\n            // Create the shade\n            this.$shade = $('<div class=\"' + this.settings.shadeClass + '\"/>');\n\n            // If the container is already set, drop the shade below it.\n            if (container) {\n                this.$shade.insertBefore(container);\n            }\n            else {\n                this.$shade.appendTo(Garnish.$bod);\n            }\n\n            if (container) {\n                this.addAriaAttributes(container);\n                this.setContainer(container);\n\n                if (this.settings.autoShow) {\n                    this.show();\n                }\n            }\n\n            Garnish.Modal.instances.push(this);\n        },\n\n        addAriaAttributes: function(container) {\n            $(container).attr({\n                'aria-modal': 'true',\n                'role': 'dialog',\n            });\n        },\n\n        setContainer: function(container) {\n            this.$container = $(container);\n\n            // Is this already a modal?\n            if (this.$container.data('modal')) {\n                Garnish.log('Double-instantiating a modal on an element');\n                this.$container.data('modal').destroy();\n            }\n\n            this.$container.data('modal', this);\n\n            if (this.settings.draggable) {\n                this.dragger = new Garnish.DragMove(this.$container, {\n                    handle: (this.settings.dragHandleSelector ? this.$container.find(this.settings.dragHandleSelector) : this.$container)\n                });\n            }\n\n            if (this.settings.resizable) {\n                var $resizeDragHandle = $('<div class=\"resizehandle\"/>').appendTo(this.$container);\n\n                this.resizeDragger = new Garnish.BaseDrag($resizeDragHandle, {\n                    onDragStart: this._handleResizeStart.bind(this),\n                    onDrag: this._handleResize.bind(this)\n                });\n            }\n\n            this.addListener(this.$container, 'click', function(ev) {\n                ev.stopPropagation();\n            });\n\n            // Show it if we're late to the party\n            if (this.visible) {\n                this.show();\n            }\n        },\n\n        hideOutsideContent: function() {\n            // Hide body content from screen reader users\n            var modal = this;\n\n            Garnish.$bod.children().each(function() {\n                if (modal.contentShouldBeHidden(this)) {\n                    modal.ariaHide(this);\n                }\n            });\n        },\n\n        resetOutsideContentVisibility: function() {\n            var ariaSelector = '.' + this.settings.jsAriaClass + ', .' + this.settings.jsAriaFalseClass + ', .' + this.settings.jsAriaTrueClass;\n\n            var ariaHiddenElements = $(ariaSelector);\n            var modal = this;\n\n            // Go through each and restore to initial value\n            $(ariaHiddenElements).each(function() {\n                if ($(this).hasClass(modal.settings.jsAriaClass)) {\n                    $(this).removeClass(modal.settings.jsAriaClass);\n                    $(this).removeAttr('aria-hidden');\n                } else if ($(this).hasClass(modal.settings.jsAriaFalseClass)) {\n                    $(this).removeClass(modal.settings.jsAriaFalseClass);\n                    $(this).attr('aria-hidden', false);\n                } else if ($(this).hasClass(modal.settings.jsAriaTrueClass)) {\n                    $(this).removeClass(modal.settings.jsAriaTrueClass);\n                    $(this).attr('aria-hidden', true);\n                }\n            });\n        },\n\n        ariaHide: function(element) {\n            var ariaHiddenAttribute = $(element).attr('aria-hidden');\n\n            // Capture initial aria-hidden values in an applied class\n            if (!ariaHiddenAttribute) {\n                $(element).addClass(this.settings.jsAriaClass);\n            } else if (ariaHiddenAttribute === 'false') {\n                $(element).addClass(this.settings.jsAriaFalseClass);\n            } else if (ariaHiddenAttribute === 'true') {\n                $(element.addClass(this.settings.jsAriaTrueClass));\n            }\n\n            $(element).attr('aria-hidden', 'true');\n        },\n\n        contentShouldBeHidden: function(element) {\n            var hide = true;\n            var tagName = $(element).prop('tagName');\n\n            if (tagName === 'SCRIPT' || tagName === 'STYLE' || element === Garnish.Modal.visibleModal.$container.get(0)) {\n                hide = false;\n            }\n\n            return hide;\n        },\n\n        show: function() {\n            // Close other modals as needed\n            if (this.settings.closeOtherModals && Garnish.Modal.visibleModal && Garnish.Modal.visibleModal !== this) {\n                Garnish.Modal.visibleModal.hide();\n            }\n\n            if (this.$container) {\n                // Move it to the end of <body> so it gets the highest sub-z-index\n                this.$shade.appendTo(Garnish.$bod);\n                this.$container.appendTo(Garnish.$bod);\n\n                this.$container.show();\n                this.updateSizeAndPosition();\n\n                this.$shade.velocity('fadeIn', {\n                    duration: 50,\n                    complete: function() {\n                        this.$container.velocity('fadeIn', {\n                            complete: function() {\n                                this.updateSizeAndPosition();\n                                this.moveFocusInto();\n                                this.onFadeIn();\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.addListener(this.$shade, 'click', 'hide');\n                }\n\n                // Add keydown listener for focus trap\n                this.addListener(this.$container, 'keydown', 'handleKeydown');\n\n                this.addListener(Garnish.$win, 'resize', '_handleWindowResize');\n            }\n\n            this.enable();\n\n            if (!this.visible) {\n                this.visible = true;\n                Garnish.Modal.visibleModal = this;\n\n                Garnish.shortcutManager.addLayer();\n\n                if (this.settings.hideOnEsc) {\n                    Garnish.shortcutManager.registerShortcut(Garnish.ESC_KEY, this.hide.bind(this));\n                }\n\n                this.trigger('show');\n                this.settings.onShow();\n            }\n\n            this.hideOutsideContent();\n        },\n\n        moveFocusInto: function() {\n            var focusable = Garnish.findFocusable(this.$container);\n\n            if (!focusable.length) return;\n\n            focusable.first().focus();\n        },\n\n        handleKeydown: function(event) {\n            if (event.keyCode !== Garnish.TAB_KEY) return;\n\n            var focusable = Garnish.findFocusable(this.$container);\n            var target = $(event.target);\n\n            if (event.shiftKey) { // Handle reverse TAB by looping to beginning of container\n                if (target.is(focusable.first())) {\n                    focusable.last().focus();\n                    event.preventDefault();\n                }\n            } else {\n                if (target.is(focusable.last())) {\n                    focusable.first().focus();\n                    event.preventDefault();\n                }\n            }\n        },\n\n        quickShow: function() {\n            this.show();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.show().css('opacity', 1);\n\n                this.$shade.velocity('stop');\n                this.$shade.show().css('opacity', 1);\n            }\n        },\n\n        hide: function(ev) {\n            if (!this.visible) {\n                return;\n            }\n\n            this.disable();\n\n            if (ev) {\n                ev.stopPropagation();\n            }\n\n            if (this.$container) {\n                this.$container.velocity('fadeOut', {duration: Garnish.FX_DURATION});\n                this.$shade.velocity('fadeOut', {\n                    duration: Garnish.FX_DURATION,\n                    complete: this.onFadeOut.bind(this)\n                });\n\n                if (this.settings.hideOnShadeClick) {\n                    this.removeListener(this.$shade, 'click');\n                }\n\n                // Remove keydown listener for focus trap\n                this.removeListener(this.$container, 'keydown', 'handleKeydown');\n\n                this.removeListener(Garnish.$win, 'resize');\n            }\n\n            if (this.settings.triggerElement) {\n                this.settings.triggerElement.focus();\n            }\n\n            this.visible = false;\n            Garnish.Modal.visibleModal = null;\n            Garnish.shortcutManager.removeLayer();\n            this.trigger('hide');\n            this.resetOutsideContentVisibility();\n            this.settings.onHide();\n        },\n\n        quickHide: function() {\n            this.hide();\n\n            if (this.$container) {\n                this.$container.velocity('stop');\n                this.$container.css('opacity', 0).hide();\n\n                this.$shade.velocity('stop');\n                this.$shade.css('opacity', 0).hide();\n            }\n        },\n\n        updateSizeAndPosition: function() {\n            if (!this.$container) {\n                return;\n            }\n\n            this.$container.css({\n                'width': (this.desiredWidth ? Math.max(this.desiredWidth, 200) : ''),\n                'height': (this.desiredHeight ? Math.max(this.desiredHeight, 200) : ''),\n                'min-width': '',\n                'min-height': ''\n            });\n\n            // Set the width first so that the height can adjust for the width\n            this.updateSizeAndPosition._windowWidth = Garnish.$win.width();\n            this.updateSizeAndPosition._width = Math.min(this.getWidth(), this.updateSizeAndPosition._windowWidth - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'width': this.updateSizeAndPosition._width,\n                'min-width': this.updateSizeAndPosition._width,\n                'left': Math.round((this.updateSizeAndPosition._windowWidth - this.updateSizeAndPosition._width) / 2)\n            });\n\n            // Now set the height\n            this.updateSizeAndPosition._windowHeight = Garnish.$win.height();\n            this.updateSizeAndPosition._height = Math.min(this.getHeight(), this.updateSizeAndPosition._windowHeight - this.settings.minGutter * 2);\n\n            this.$container.css({\n                'height': this.updateSizeAndPosition._height,\n                'min-height': this.updateSizeAndPosition._height,\n                'top': Math.round((this.updateSizeAndPosition._windowHeight - this.updateSizeAndPosition._height) / 2)\n            });\n\n            this.trigger('updateSizeAndPosition');\n        },\n\n        onFadeIn: function() {\n            this.trigger('fadeIn');\n            this.settings.onFadeIn();\n        },\n\n        onFadeOut: function() {\n            this.trigger('fadeOut');\n            this.settings.onFadeOut();\n        },\n\n        getHeight: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the height of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            this.getHeight._height = this.$container.outerHeight();\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getHeight._height;\n        },\n\n        getWidth: function() {\n            if (!this.$container) {\n                throw 'Attempted to get the width of a modal whose container has not been set.';\n            }\n\n            if (!this.visible) {\n                this.$container.show();\n            }\n\n            // Chrome might be 1px shy here for some reason\n            this.getWidth._width = this.$container.outerWidth() + 1;\n\n            if (!this.visible) {\n                this.$container.hide();\n            }\n\n            return this.getWidth._width;\n        },\n\n        _handleWindowResize: function(ev) {\n            // ignore propagated resize events\n            if (ev.target === window) {\n                this.updateSizeAndPosition();\n            }\n        },\n\n        _handleResizeStart: function() {\n            this.resizeStartWidth = this.getWidth();\n            this.resizeStartHeight = this.getHeight();\n        },\n\n        _handleResize: function() {\n            if (Garnish.ltr) {\n                this.desiredWidth = this.resizeStartWidth + (this.resizeDragger.mouseDistX * 2);\n            }\n            else {\n                this.desiredWidth = this.resizeStartWidth - (this.resizeDragger.mouseDistX * 2);\n            }\n\n            this.desiredHeight = this.resizeStartHeight + (this.resizeDragger.mouseDistY * 2);\n\n            this.updateSizeAndPosition();\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            if (this.$container) {\n                this.$container.removeData('modal').remove();\n            }\n\n            if (this.$shade) {\n                this.$shade.remove();\n            }\n\n            if (this.dragger) {\n                this.dragger.destroy();\n            }\n\n            if (this.resizeDragger) {\n                this.resizeDragger.destroy();\n            }\n\n            this.base();\n        }\n    },\n    {\n        relativeElemPadding: 8,\n        defaults: {\n            autoShow: true,\n            draggable: false,\n            dragHandleSelector: null,\n            resizable: false,\n            minGutter: 10,\n            onShow: $.noop,\n            onHide: $.noop,\n            onFadeIn: $.noop,\n            onFadeOut: $.noop,\n            closeOtherModals: false,\n            hideOnEsc: true,\n            hideOnShadeClick: true,\n            triggerElement: null,\n            shadeClass: 'modal-shade',\n            jsAriaClass: 'garnish-js-aria',\n            jsAriaTrueClass: 'garnish-js-aria-true',\n            jsAriaFalseClass: 'garnish-js-aria-false',\n        },\n        instances: [],\n        visibleModal: null\n    }\n);\n\n/** global: Garnish */\n/**\n * Nice Text\n */\nGarnish.NiceText = Garnish.Base.extend(\n    {\n        $input: null,\n        $hint: null,\n        $stage: null,\n        $charsLeft: null,\n        autoHeight: null,\n        maxLength: null,\n        showCharsLeft: false,\n        showingHint: false,\n        val: null,\n        inputBoxSizing: 'content-box',\n        width: null,\n        height: null,\n        minHeight: null,\n        initialized: false,\n\n        init: function(input, settings) {\n            this.$input = $(input);\n            this.settings = $.extend({}, Garnish.NiceText.defaults, settings);\n\n            if (this.isVisible()) {\n                this.initialize();\n            }\n            else {\n                this.addListener(Garnish.$win, 'resize', 'initializeIfVisible');\n            }\n        },\n\n        isVisible: function() {\n            return (this.$input.height() > 0);\n        },\n\n        initialize: function() {\n            if (this.initialized) {\n                return;\n            }\n\n            this.initialized = true;\n            this.removeListener(Garnish.$win, 'resize');\n\n            this.maxLength = this.$input.attr('maxlength');\n\n            if (this.maxLength) {\n                this.maxLength = parseInt(this.maxLength);\n            }\n\n            if (this.maxLength && (this.settings.showCharsLeft || Garnish.hasAttr(this.$input, 'data-show-chars-left'))) {\n                this.showCharsLeft = true;\n\n                // Remove the maxlength attribute\n                this.$input.removeAttr('maxlength');\n            }\n\n            // Is this already a transparent text input?\n            if (this.$input.data('nicetext')) {\n                Garnish.log('Double-instantiating a transparent text input on an element');\n                this.$input.data('nicetext').destroy();\n            }\n\n            this.$input.data('nicetext', this);\n\n            this.getVal();\n\n            this.autoHeight = (this.settings.autoHeight && this.$input.prop('nodeName') === 'TEXTAREA');\n\n            if (this.autoHeight) {\n                this.minHeight = this.getHeightForValue('');\n                this.updateHeight();\n\n                // Update height when the window resizes\n                this.width = this.$input.width();\n                this.addListener(Garnish.$win, 'resize', 'updateHeightIfWidthChanged');\n            }\n\n            if (this.settings.hint) {\n                this.$hintContainer = $('<div class=\"texthint-container\"/>').insertBefore(this.$input);\n                this.$hint = $('<div class=\"texthint\">' + this.settings.hint + '</div>').appendTo(this.$hintContainer);\n                this.$hint.css({\n                    top: (parseInt(this.$input.css('borderTopWidth')) + parseInt(this.$input.css('paddingTop'))),\n                    left: (parseInt(this.$input.css('borderLeftWidth')) + parseInt(this.$input.css('paddingLeft')) + 1)\n                });\n                Garnish.copyTextStyles(this.$input, this.$hint);\n\n                if (this.val) {\n                    this.$hint.hide();\n                }\n                else {\n                    this.showingHint = true;\n                }\n\n                // Focus the input when clicking on the hint\n                this.addListener(this.$hint, 'mousedown', function(ev) {\n                    ev.preventDefault();\n                    this.$input.focus();\n                });\n            }\n\n            if (this.showCharsLeft) {\n                this.$charsLeft = $('<div aria-live=\"polite\" class=\"' + this.settings.charsLeftClass + '\"/>').insertAfter(this.$input);\n                this.updateCharsLeft();\n            }\n\n            this.addListener(this.$input, 'textchange', 'onTextChange');\n            this.addListener(this.$input, 'keydown', 'onKeyDown');\n        },\n\n        initializeIfVisible: function() {\n            if (this.isVisible()) {\n                this.initialize();\n            }\n        },\n\n        getVal: function() {\n            this.val = this.$input.val();\n            return this.val;\n        },\n\n        showHint: function() {\n            this.$hint.velocity('fadeIn', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = true;\n        },\n\n        hideHint: function() {\n            this.$hint.velocity('fadeOut', {\n                complete: Garnish.NiceText.hintFadeDuration\n            });\n\n            this.showingHint = false;\n        },\n\n        onTextChange: function() {\n            this.getVal();\n\n            if (this.$hint) {\n                if (this.showingHint && this.val) {\n                    this.hideHint();\n                }\n                else if (!this.showingHint && !this.val) {\n                    this.showHint();\n                }\n            }\n\n            if (this.autoHeight) {\n                this.updateHeight();\n            }\n\n            if (this.showCharsLeft) {\n                this.updateCharsLeft();\n            }\n        },\n\n        onKeyDown: function(ev) {\n            // If Ctrl/Command + Return is pressed, submit the closest form\n            if (ev.keyCode === Garnish.RETURN_KEY && Garnish.isCtrlKeyPressed(ev)) {\n                ev.preventDefault();\n                this.$input.closest('form').submit();\n            }\n        },\n\n        buildStage: function() {\n            this.$stage = $('<stage/>').appendTo(Garnish.$bod);\n\n            // replicate the textarea's text styles\n            this.$stage.css({\n                display: 'block',\n                position: 'absolute',\n                top: -9999,\n                left: -9999\n            });\n\n            this.inputBoxSizing = this.$input.css('box-sizing');\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css({\n                    'border-top': this.$input.css('border-top'),\n                    'border-right': this.$input.css('border-right'),\n                    'border-bottom': this.$input.css('border-bottom'),\n                    'border-left': this.$input.css('border-left'),\n                    'padding-top': this.$input.css('padding-top'),\n                    'padding-right': this.$input.css('padding-right'),\n                    'padding-bottom': this.$input.css('padding-bottom'),\n                    'padding-left': this.$input.css('padding-left'),\n                    '-webkit-box-sizing': this.inputBoxSizing,\n                    '-moz-box-sizing': this.inputBoxSizing,\n                    'box-sizing': this.inputBoxSizing\n                });\n            }\n\n            Garnish.copyTextStyles(this.$input, this.$stage);\n        },\n\n        getHeightForValue: function(val) {\n            if (!this.$stage) {\n                this.buildStage();\n            }\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.$stage.css('width', this.$input.outerWidth());\n            }\n            else {\n                this.$stage.css('width', this.$input.width());\n            }\n\n            if (!val) {\n                val = '&nbsp;';\n                for (var i = 1; i < this.$input.prop('rows'); i++) {\n                    val += '<br/>&nbsp;';\n                }\n            }\n            else {\n                // Ampersand entities\n                val = val.replace(/&/g, '&amp;');\n\n                // < and >\n                val = val.replace(/</g, '&lt;');\n                val = val.replace(/>/g, '&gt;');\n\n                // Multiple spaces\n                val = val.replace(/ {2,}/g, function(spaces) {\n                    // TODO: replace with String.repeat() when more broadly available?\n                    var replace = '';\n                    for (var i = 0; i < spaces.length - 1; i++) {\n                        replace += '&nbsp;';\n                    }\n                    return replace + ' ';\n                });\n\n                // Line breaks\n                val = val.replace(/[\\n\\r]$/g, '<br/>&nbsp;');\n                val = val.replace(/[\\n\\r]/g, '<br/>');\n            }\n\n            this.$stage.html(val);\n\n            if (this.inputBoxSizing === 'border-box') {\n                this.getHeightForValue._height = this.$stage.outerHeight();\n            }\n            else {\n                this.getHeightForValue._height = this.$stage.height();\n            }\n\n            if (this.minHeight && this.getHeightForValue._height < this.minHeight) {\n                this.getHeightForValue._height = this.minHeight;\n            }\n\n            return this.getHeightForValue._height;\n        },\n\n        updateHeight: function() {\n            // has the height changed?\n            if (this.height !== (this.height = this.getHeightForValue(this.val))) {\n                this.$input.css('min-height', this.height);\n\n                if (this.initialized) {\n                    this.onHeightChange();\n                }\n            }\n        },\n\n        updateHeightIfWidthChanged: function() {\n            if (this.isVisible() && this.width !== (this.width = this.$input.width()) && this.width) {\n                this.updateHeight();\n            }\n        },\n\n        onHeightChange: function() {\n            this.settings.onHeightChange();\n        },\n\n        updateCharsLeft: function() {\n            this.updateCharsLeft._charsLeft = this.maxLength - this.val.length;\n            this.$charsLeft.html(Garnish.NiceText.charsLeftHtml(this.updateCharsLeft._charsLeft));\n\n            if (this.updateCharsLeft._charsLeft >= 0) {\n                this.$charsLeft.removeClass(this.settings.negativeCharsLeftClass);\n            }\n            else {\n                this.$charsLeft.addClass(this.settings.negativeCharsLeftClass);\n            }\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$input.removeData('nicetext');\n\n            if (this.$hint) {\n                this.$hint.remove();\n            }\n\n            if (this.$stage) {\n                this.$stage.remove();\n            }\n\n            this.base();\n        }\n    },\n    {\n        interval: 100,\n        hintFadeDuration: 50,\n        charsLeftHtml: function(charsLeft) {\n            return charsLeft;\n        },\n        defaults: {\n            autoHeight: true,\n            showCharsLeft: false,\n            charsLeftClass: 'chars-left',\n            negativeCharsLeftClass: 'negative-chars-left',\n            onHeightChange: $.noop\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select\n */\nGarnish.Select = Garnish.Base.extend(\n    {\n        $container: null,\n        $items: null,\n        $selectedItems: null,\n        $focusedItem: null,\n\n        mousedownTarget: null,\n        mouseUpTimeout: null,\n        callbackFrame: null,\n\n        $focusable: null,\n        $first: null,\n        first: null,\n        $last: null,\n        last: null,\n\n        /**\n         * Constructor\n         */\n        init: function(container, items, settings) {\n            this.$container = $(container);\n\n            // Param mapping\n            if (typeof items === 'undefined' && $.isPlainObject(container)) {\n                // (settings)\n                settings = container;\n                container = null;\n                items = null;\n            }\n            else if (typeof settings === 'undefined' && $.isPlainObject(items)) {\n                // (container, settings)\n                settings = items;\n                items = null;\n            }\n\n            // Is this already a select?\n            if (this.$container.data('select')) {\n                Garnish.log('Double-instantiating a select on an element');\n                this.$container.data('select').destroy();\n            }\n\n            this.$container.data('select', this);\n\n            this.setSettings(settings, Garnish.Select.defaults);\n\n            this.$items = $();\n            this.$selectedItems = $();\n\n            this.addItems(items);\n\n            // --------------------------------------------------------------------\n\n            if (this.settings.allowEmpty && !this.settings.checkboxMode) {\n                this.addListener(this.$container, 'click', function() {\n                    if (this.ignoreClick) {\n                        this.ignoreClick = false;\n                    }\n                    else {\n                        // Deselect all items on container click\n                        this.deselectAll(true);\n                    }\n                });\n            }\n        },\n\n        /**\n         * Get Item Index\n         */\n        getItemIndex: function($item) {\n            return this.$items.index($item[0]);\n        },\n\n        /**\n         * Is Selected?\n         */\n        isSelected: function(item) {\n            if (Garnish.isJquery(item)) {\n                if (!item[0]) {\n                    return false;\n                }\n\n                item = item[0];\n            }\n\n            return ($.inArray(item, this.$selectedItems) !== -1);\n        },\n\n        /**\n         * Select Item\n         */\n        selectItem: function($item, focus, preventScroll) {\n            if (!this.settings.multi) {\n                this.deselectAll();\n            }\n\n            this.$first = this.$last = $item;\n            this.first = this.last = this.getItemIndex($item);\n\n            if (focus) {\n                this.setFocusableItem($item);\n                this.focusItem($item, preventScroll);\n            }\n\n            this._selectItems($item);\n        },\n\n        selectAll: function() {\n            if (!this.settings.multi || !this.$items.length) {\n                return;\n            }\n\n            this.first = 0;\n            this.last = this.$items.length - 1;\n            this.$first = this.$items.eq(this.first);\n            this.$last = this.$items.eq(this.last);\n\n            this._selectItems(this.$items);\n        },\n\n        /**\n         * Select Range\n         */\n        selectRange: function($item, preventScroll) {\n            if (!this.settings.multi) {\n                return this.selectItem($item, true, true);\n            }\n\n            this.deselectAll();\n\n            this.$last = $item;\n            this.last = this.getItemIndex($item);\n\n            this.setFocusableItem($item);\n            this.focusItem($item, preventScroll);\n\n            // prepare params for $.slice()\n            var sliceFrom, sliceTo;\n\n            if (this.first < this.last) {\n                sliceFrom = this.first;\n                sliceTo = this.last + 1;\n            }\n            else {\n                sliceFrom = this.last;\n                sliceTo = this.first + 1;\n            }\n\n            this._selectItems(this.$items.slice(sliceFrom, sliceTo));\n        },\n\n        /**\n         * Deselect Item\n         */\n        deselectItem: function($item) {\n            var index = this.getItemIndex($item);\n            if (this.first === index) {\n                this.$first = this.first = null;\n            }\n            if (this.last === index) {\n                this.$last = this.last = null;\n            }\n\n            this._deselectItems($item);\n        },\n\n        /**\n         * Deselect All\n         */\n        deselectAll: function(clearFirst) {\n            if (clearFirst) {\n                this.$first = this.first = this.$last = this.last = null;\n            }\n\n            this._deselectItems(this.$items);\n        },\n\n        /**\n         * Deselect Others\n         */\n        deselectOthers: function($item) {\n            this.deselectAll();\n            this.selectItem($item, true, true);\n        },\n\n        /**\n         * Toggle Item\n         */\n        toggleItem: function($item, preventScroll) {\n            if (!this.isSelected($item)) {\n                this.selectItem($item, true, preventScroll);\n            }\n            else {\n                if (this._canDeselect($item)) {\n                    this.deselectItem($item, true);\n                }\n            }\n        },\n\n        clearMouseUpTimeout: function() {\n            clearTimeout(this.mouseUpTimeout);\n        },\n\n        getFirstItem: function() {\n            if (this.$items.length) {\n                return this.$items.first();\n            }\n        },\n\n        getLastItem: function() {\n            if (this.$items.length) {\n                return this.$items.last();\n            }\n        },\n\n        isPreviousItem: function(index) {\n            return (index > 0);\n        },\n\n        isNextItem: function(index) {\n            return (index < this.$items.length - 1);\n        },\n\n        getPreviousItem: function(index) {\n            if (this.isPreviousItem(index)) {\n                return this.$items.eq(index - 1);\n            }\n        },\n\n        getNextItem: function(index) {\n            if (this.isNextItem(index)) {\n                return this.$items.eq(index + 1);\n            }\n        },\n\n        getItemToTheLeft: function(index) {\n            var func = (Garnish.ltr ? 'Previous' : 'Next');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '<');\n                }\n            }\n        },\n\n        getItemToTheRight: function(index) {\n            var func = (Garnish.ltr ? 'Next' : 'Previous');\n\n            if (this['is' + func + 'Item'](index)) {\n                if (this.settings.horizontal) {\n                    return this['get' + func + 'Item'](index);\n                }\n                else if (!this.settings.vertical) {\n                    return this.getClosestItem(index, Garnish.X_AXIS, '>');\n                }\n            }\n        },\n\n        getItemAbove: function(index) {\n            if (this.isPreviousItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getPreviousItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '<');\n                }\n            }\n        },\n\n        getItemBelow: function(index) {\n            if (this.isNextItem(index)) {\n                if (this.settings.vertical) {\n                    return this.getNextItem(index);\n                }\n                else if (!this.settings.horizontal) {\n                    return this.getClosestItem(index, Garnish.Y_AXIS, '>');\n                }\n            }\n        },\n\n        getClosestItem: function(index, axis, dir) {\n            var axisProps = Garnish.Select.closestItemAxisProps[axis],\n                dirProps = Garnish.Select.closestItemDirectionProps[dir];\n\n            var $thisItem = this.$items.eq(index),\n                thisOffset = $thisItem.offset(),\n                thisMidpoint = thisOffset[axisProps.midpointOffset] + Math.round($thisItem[axisProps.midpointSizeFunc]() / 2),\n                otherRowPos = null,\n                smallestMidpointDiff = null,\n                $closestItem = null;\n\n            // Go the other way if this is the X axis and a RTL page\n            var step;\n\n            if (Garnish.rtl && axis === Garnish.X_AXIS) {\n                step = dirProps.step * -1;\n            }\n            else {\n                step = dirProps.step;\n            }\n\n            for (var i = index + step; (typeof this.$items[i] !== 'undefined'); i += step) {\n                var $otherItem = this.$items.eq(i),\n                    otherOffset = $otherItem.offset();\n\n                // Are we on the next row yet?\n                if (dirProps.isNextRow(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    // Is this the first time we've seen this row?\n                    if (otherRowPos === null) {\n                        otherRowPos = otherOffset[axisProps.rowOffset];\n                    }\n                    // Have we gone too far?\n                    else if (otherOffset[axisProps.rowOffset] !== otherRowPos) {\n                        break;\n                    }\n\n                    var otherMidpoint = otherOffset[axisProps.midpointOffset] + Math.round($otherItem[axisProps.midpointSizeFunc]() / 2),\n                        midpointDiff = Math.abs(thisMidpoint - otherMidpoint);\n\n                    // Are we getting warmer?\n                    if (smallestMidpointDiff === null || midpointDiff < smallestMidpointDiff) {\n                        smallestMidpointDiff = midpointDiff;\n                        $closestItem = $otherItem;\n                    }\n                    // Getting colder?\n                    else {\n                        break;\n                    }\n                }\n                // Getting colder?\n                else if (dirProps.isWrongDirection(otherOffset[axisProps.rowOffset], thisOffset[axisProps.rowOffset])) {\n                    break;\n                }\n            }\n\n            return $closestItem;\n        },\n\n        getFurthestItemToTheLeft: function(index) {\n            return this.getFurthestItem(index, 'ToTheLeft');\n        },\n\n        getFurthestItemToTheRight: function(index) {\n            return this.getFurthestItem(index, 'ToTheRight');\n        },\n\n        getFurthestItemAbove: function(index) {\n            return this.getFurthestItem(index, 'Above');\n        },\n\n        getFurthestItemBelow: function(index) {\n            return this.getFurthestItem(index, 'Below');\n        },\n\n        getFurthestItem: function(index, dir) {\n            var $item, $testItem;\n\n            while ($testItem = this['getItem' + dir](index)) {\n                $item = $testItem;\n                index = this.getItemIndex($item);\n            }\n\n            return $item;\n        },\n\n        /**\n         * totalSelected getter\n         */\n        get totalSelected() {\n            return this.getTotalSelected();\n        },\n\n        /**\n         * Get Total Selected\n         */\n        getTotalSelected: function() {\n            return this.$selectedItems.length;\n        },\n\n        /**\n         * Add Items\n         */\n        addItems: function(items) {\n            var $items = $(items);\n\n            for (var i = 0; i < $items.length; i++) {\n                var item = $items[i];\n\n                // Make sure this element doesn't belong to another selector\n                if ($.data(item, 'select')) {\n                    Garnish.log('Element was added to more than one selector');\n                    $.data(item, 'select').removeItems(item);\n                }\n\n                // Add the item\n                $.data(item, 'select', this);\n\n                // Get the handle\n                var $handle;\n\n                if (this.settings.handle) {\n                    if (typeof this.settings.handle === 'object') {\n                        $handle = $(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'string') {\n                        $handle = $(item).find(this.settings.handle);\n                    }\n                    else if (typeof this.settings.handle === 'function') {\n                        $handle = $(this.settings.handle(item));\n                    }\n                }\n                else {\n                    $handle = $(item);\n                }\n\n                $.data(item, 'select-handle', $handle);\n                $handle.data('select-item', item);\n\n                this.addListener($handle, 'mousedown', 'onMouseDown');\n                this.addListener($handle, 'mouseup', 'onMouseUp');\n                this.addListener($handle, 'click', function() {\n                    this.ignoreClick = true;\n                });\n\n                this.addListener(item, 'keydown', 'onKeyDown');\n            }\n\n            this.$items = this.$items.add($items);\n            this.updateIndexes();\n        },\n\n        /**\n         * Remove Items\n         */\n        removeItems: function(items) {\n            items = $.makeArray(items);\n\n            var itemsChanged = false,\n                selectionChanged = false;\n\n            for (var i = 0; i < items.length; i++) {\n                var item = items[i];\n\n                // Make sure we actually know about this item\n                var index = $.inArray(item, this.$items);\n                if (index !== -1) {\n                    this._deinitItem(item);\n                    this.$items.splice(index, 1);\n                    itemsChanged = true;\n\n                    var selectedIndex = $.inArray(item, this.$selectedItems);\n                    if (selectedIndex !== -1) {\n                        this.$selectedItems.splice(selectedIndex, 1);\n                        selectionChanged = true;\n                    }\n                }\n            }\n\n            if (itemsChanged) {\n                this.updateIndexes();\n\n                if (selectionChanged) {\n                    $(items).removeClass(this.settings.selectedClass);\n                    this.onSelectionChange();\n                }\n            }\n        },\n\n        /**\n         * Remove All Items\n         */\n        removeAllItems: function() {\n            for (var i = 0; i < this.$items.length; i++) {\n                this._deinitItem(this.$items[i]);\n            }\n\n            this.$items = $();\n            this.$selectedItems = $();\n            this.updateIndexes();\n        },\n\n        /**\n         * Update First/Last indexes\n         */\n        updateIndexes: function() {\n            if (this.first !== null) {\n                this.first = this.getItemIndex(this.$first);\n                this.setFocusableItem(this.$first);\n            }\n            else if (this.$items.length) {\n                this.setFocusableItem($(this.$items[0]));\n            }\n\n            if (this.$focusedItem) {\n                this.setFocusableItem(this.$focusedItem);\n                this.focusItem(this.$focusedItem, true);\n            }\n\n            if (this.last !== null) {\n                this.last = this.getItemIndex(this.$last);\n            }\n        },\n\n        /**\n         * Reset Item Order\n         */\n        resetItemOrder: function() {\n            this.$items = $().add(this.$items);\n            this.$selectedItems = $().add(this.$selectedItems);\n            this.updateIndexes();\n        },\n\n        /**\n         * Sets the focusable item.\n         *\n         * We only want to have one focusable item per selection list, so that the user\n         * doesn't have to tab through a million items.\n         *\n         * @param {object} $item\n         */\n        setFocusableItem: function($item) {\n            if (this.$focusable) {\n                this.$focusable.removeAttr('tabindex');\n            }\n\n            this.$focusable = $item.attr('tabindex', '0');\n        },\n\n        /**\n         * Sets the focus on an item.\n         */\n        focusItem: function($item, preventScroll) {\n            $item[0].focus({preventScroll: !!preventScroll});\n            this.$focusedItem = $item;\n            this.trigger('focusItem', {item: $item});\n        },\n\n        /**\n         * Get Selected Items\n         */\n        getSelectedItems: function() {\n            return this.$selectedItems;\n        },\n\n        /**\n         * Destroy\n         */\n        destroy: function() {\n            this.$container.removeData('select');\n            this.removeAllItems();\n            this.base();\n        },\n\n        // Events\n        // ---------------------------------------------------------------------\n\n        /**\n         * On Mouse Down\n         */\n        onMouseDown: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enforce the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            this.mousedownTarget = ev.currentTarget;\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            if (this.first !== null && ev.shiftKey) {\n                // Shift key is consistent for both selection modes\n                this.selectRange($item, true);\n            }\n            else if (this._actAsCheckbox(ev)) {\n                this.toggleItem($item, true);\n            }\n        },\n\n        /**\n         * On Mouse Up\n         */\n        onMouseUp: function(ev) {\n            // ignore right clicks\n            if (ev.which !== Garnish.PRIMARY_CLICK) {\n                return;\n            }\n\n            // Enfore the filter\n            if (this.settings.filter && !$(ev.target).is(this.settings.filter)) {\n                return;\n            }\n\n            var $item = $($.data(ev.currentTarget, 'select-item'));\n\n            // was this a click?\n            if (\n                !this._actAsCheckbox(ev) && !ev.shiftKey &&\n                ev.currentTarget === this.mousedownTarget\n            ) {\n                // If this is already selected, wait a moment to see if this is a double click before making any rash decisions\n                if (this.isSelected($item)) {\n                    this.clearMouseUpTimeout();\n\n                    this.mouseUpTimeout = setTimeout(function() {\n                        this.deselectOthers($item);\n                    }.bind(this), 300);\n                }\n                else {\n                    this.deselectAll();\n                    this.selectItem($item, true, true);\n                }\n            }\n        },\n\n        /**\n         * On Key Down\n         */\n        onKeyDown: function(ev) {\n            // Ignore if the focus isn't on one of our items\n            if (ev.target !== ev.currentTarget) {\n                return;\n            }\n\n            var ctrlKey = Garnish.isCtrlKeyPressed(ev);\n            var shiftKey = ev.shiftKey;\n\n            var anchor, $item;\n\n            if (!this.settings.checkboxMode || !this.$focusable.length) {\n                anchor = ev.shiftKey ? this.last : this.first;\n            }\n            else {\n                anchor = $.inArray(this.$focusable[0], this.$items);\n\n                if (anchor === -1) {\n                    anchor = 0;\n                }\n            }\n\n            // Ok, what are we doing here?\n            switch (ev.keyCode) {\n                case Garnish.LEFT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getLastItem();\n                        }\n                        else {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheLeft(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheLeft(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.RIGHT_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (Garnish.ltr) {\n                            $item = this.getFirstItem();\n                        }\n                        else {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemToTheRight(anchor);\n                        }\n                        else {\n                            $item = this.getItemToTheRight(anchor);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.UP_KEY: {\n                    ev.preventDefault();\n\n                    // Select the last item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.prev();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getLastItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemAbove(anchor);\n                        }\n                        else {\n                            $item = this.getItemAbove(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.DOWN_KEY: {\n                    ev.preventDefault();\n\n                    // Select the first item if none are selected\n                    if (this.first === null) {\n                        if (this.$focusable) {\n                            $item = this.$focusable.next();\n                        }\n\n                        if (!this.$focusable || !$item.length) {\n                            $item = this.getFirstItem();\n                        }\n                    }\n                    else {\n                        if (ctrlKey) {\n                            $item = this.getFurthestItemBelow(anchor);\n                        }\n                        else {\n                            $item = this.getItemBelow(anchor);\n                        }\n\n                        if (!$item) {\n                            $item = this.getLastItem();\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.SPACE_KEY: {\n                    if (!ctrlKey && !shiftKey) {\n                        ev.preventDefault();\n\n                        if (this.isSelected(this.$focusable)) {\n                            if (this._canDeselect(this.$focusable)) {\n                                this.deselectItem(this.$focusable);\n                            }\n                        }\n                        else {\n                            this.selectItem(this.$focusable, true, false);\n                        }\n                    }\n\n                    break;\n                }\n\n                case Garnish.A_KEY: {\n                    if (ctrlKey) {\n                        ev.preventDefault();\n                        this.selectAll();\n                    }\n\n                    break;\n                }\n            }\n\n            // Is there an item queued up for focus/selection?\n            if ($item && $item.length) {\n                if (!this.settings.checkboxMode) {\n                    // select it\n                    if (this.first !== null && ev.shiftKey) {\n                        this.selectRange($item, false);\n                    }\n                    else {\n                        this.deselectAll();\n                        this.selectItem($item, true, false);\n                    }\n                }\n                else {\n                    // just set the new item to be focusable\n                    this.setFocusableItem($item);\n                    $item.focus();\n                    this.$focusedItem = $item;\n                    this.trigger('focusItem', {item: $item});\n                }\n            }\n        },\n\n        /**\n         * Set Callback Timeout\n         */\n        onSelectionChange: function() {\n            if (this.callbackFrame) {\n                Garnish.cancelAnimationFrame(this.callbackFrame);\n                this.callbackFrame = null;\n            }\n\n            this.callbackFrame = Garnish.requestAnimationFrame(function() {\n                this.callbackFrame = null;\n                this.trigger('selectionChange');\n                this.settings.onSelectionChange();\n            }.bind(this));\n        },\n\n        // Private methods\n        // ---------------------------------------------------------------------\n\n        _actAsCheckbox: function(ev) {\n            if (Garnish.isCtrlKeyPressed(ev)) {\n                return !this.settings.checkboxMode;\n            }\n            else {\n                return this.settings.checkboxMode;\n            }\n        },\n\n        _canDeselect: function($items) {\n            return (this.settings.allowEmpty || this.totalSelected > $items.length);\n        },\n\n        _selectItems: function($items) {\n            $items.addClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.add($items);\n            this.onSelectionChange();\n        },\n\n        _deselectItems: function($items) {\n            $items.removeClass(this.settings.selectedClass);\n            this.$selectedItems = this.$selectedItems.not($items);\n            this.onSelectionChange();\n        },\n\n        /**\n         * Deinitialize an item.\n         */\n        _deinitItem: function(item) {\n            var $handle = $.data(item, 'select-handle');\n\n            if ($handle) {\n                $handle.removeData('select-item');\n                this.removeAllListeners($handle);\n            }\n\n            $.removeData(item, 'select');\n            $.removeData(item, 'select-handle');\n\n            if (this.$focusedItem && this.$focusedItem[0] === item) {\n                this.$focusedItem = null;\n            }\n        }\n    },\n    {\n        defaults: {\n            selectedClass: 'sel',\n            multi: false,\n            allowEmpty: true,\n            vertical: false,\n            horizontal: false,\n            handle: null,\n            filter: null,\n            checkboxMode: false,\n            onSelectionChange: $.noop\n        },\n\n        closestItemAxisProps: {\n            x: {\n                midpointOffset: 'top',\n                midpointSizeFunc: 'outerHeight',\n                rowOffset: 'left'\n            },\n            y: {\n                midpointOffset: 'left',\n                midpointSizeFunc: 'outerWidth',\n                rowOffset: 'top'\n            }\n        },\n\n        closestItemDirectionProps: {\n            '<': {\n                step: -1,\n                isNextRow: function(a, b) {\n                    return (a < b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a > b);\n                }\n            },\n            '>': {\n                step: 1,\n                isNextRow: function(a, b) {\n                    return (a > b);\n                },\n                isWrongDirection: function(a, b) {\n                    return (a < b);\n                }\n            }\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Select Menu\n */\nGarnish.SelectMenu = Garnish.CustomSelect.extend(\n    {\n        /**\n         * Constructor\n         */\n        init: function(btn, options, settings, callback) {\n            // argument mapping\n            if (typeof settings === 'function') {\n                // (btn, options, callback)\n                callback = settings;\n                settings = {};\n            }\n\n            settings = $.extend({}, Garnish.SelectMenu.defaults, settings);\n\n            this.base(btn, options, settings, callback);\n\n            this.selected = -1;\n        },\n\n        /**\n         * Build\n         */\n        build: function() {\n            this.base();\n\n            if (this.selected !== -1) {\n                this._addSelectedOptionClass(this.selected);\n            }\n        },\n\n        /**\n         * Select\n         */\n        select: function(option) {\n            // ignore if it's already selected\n            if (option === this.selected) {\n                return;\n            }\n\n            if (this.dom.ul) {\n                if (this.selected !== -1) {\n                    this.dom.options[this.selected].className = '';\n                }\n\n                this._addSelectedOptionClass(option);\n            }\n\n            this.selected = option;\n\n            // set the button text to the selected option\n            this.setBtnText($(this.options[option].label).text());\n\n            this.base(option);\n        },\n\n        /**\n         * Add Selected Option Class\n         */\n        _addSelectedOptionClass: function(option) {\n            this.dom.options[option].className = 'sel';\n        },\n\n        /**\n         * Set Button Text\n         */\n        setBtnText: function(text) {\n            this.dom.$btnLabel.text(text);\n        }\n\n    },\n    {\n        defaults: {\n            ulClass: 'menu select'\n        }\n    }\n);\n\n/** global: Garnish */\n/**\n * Keyboard shortcut manager class\n *\n * This can be used to map keyboard events to the current UI \"layer\" (whether that's the base document,\n * a modal, an HUD, or a menu).\n */\nGarnish.ShortcutManager = Garnish.Base.extend(\n    {\n        shortcuts: null,\n        layer: 0,\n\n        init: function() {\n            this.shortcuts = [[]];\n            this.addListener(Garnish.$bod, 'keydown', 'triggerShortcut');\n        },\n\n        addLayer: function() {\n            this.layer++;\n            this.shortcuts.push([]);\n            return this;\n        },\n\n        removeLayer: function() {\n            if (this.layer === 0) {\n                throw 'Can’t remove the base layer.';\n            }\n            this.layer--;\n            this.shortcuts.pop();\n            return this;\n        },\n\n        registerShortcut: function(shortcut, callback, layer) {\n            shortcut = this._normalizeShortcut(shortcut);\n            if (typeof layer === 'undefined') {\n                layer = this.layer;\n            }\n            this.shortcuts[layer].push({\n                key: JSON.stringify(shortcut),\n                shortcut: shortcut,\n                callback: callback,\n            });\n            return this;\n        },\n\n        unregisterShortcut: function(shortcut, layer) {\n            shortcut = this._normalizeShortcut(shortcut);\n            var key = JSON.stringify(shortcut);\n            if (typeof layer === 'undefined') {\n                layer = this.layer;\n            }\n            for (var i = 0; i < this.shortcuts[layer].length; i++) {\n                if (this.shortcuts[layer][i].key === key) {\n                    this.shortcuts[layer].splice(i, 1);\n                    break;\n                }\n            }\n            return this;\n        },\n\n        _normalizeShortcut: function(shortcut) {\n            if (typeof shortcut === 'number') {\n                shortcut = {keyCode: shortcut};\n            }\n\n            if (typeof shortcut.keyCode !== 'number') {\n                throw 'Invalid shortcut';\n            }\n\n            return {\n                keyCode: shortcut.keyCode,\n                ctrl: !!shortcut.ctrl,\n                shift: !!shortcut.shift,\n                alt: !!shortcut.alt,\n            };\n        },\n\n        triggerShortcut: function(ev) {\n            var shortcut;\n            for (var i = 0; i < this.shortcuts[this.layer].length; i++) {\n                shortcut = this.shortcuts[this.layer][i].shortcut;\n                if (\n                    shortcut.keyCode === ev.keyCode &&\n                    shortcut.ctrl === Garnish.isCtrlKeyPressed(ev) &&\n                    shortcut.shift === ev.shiftKey &&\n                    shortcut.alt === ev.altKey\n                ) {\n                    ev.preventDefault();\n                    this.shortcuts[this.layer][i].callback(ev);\n                    break;\n                }\n            }\n        },\n    }\n);\n\nGarnish.shortcutManager = new Garnish.ShortcutManager();\n\n})(jQuery);\n"]}