{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./queue-manager.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","getDefault","getModuleExports","object","property","prototype","hasOwnProperty","p","s","Vue","el","delimiters","data","loading","indexTimeout","jobs","totalJobs","totalJobsFormatted","activeJobId","activeJob","limit","mounted","document","getElementById","removeAttribute","Craft","cp","on","jobInfo","slice","formatNumber","refreshActiveJob","window","onpopstate","event","state","jobId","setActiveJob","clearActiveJob","path","match","history","replaceState","this","url","methods","updateJobProgress","trackJobProgress","pushState","Promise","resolve","reject","clearTimeout","axios","getActionUrl","then","response","id","displayError","error","oldJob","success","status","$","extend","progress","progressLabel","retryAll","postActionRequest","displayNotice","releaseAll","confirm","retryJob","job","message","description","retryActiveJob","releaseJob","releaseActiveJob","released","getUrl","isRetryable","jobStatusClass","jobStatusLabel","delay","jobStatusIconClass","jobAttributeName","ttrValue","num","action","params","textStatus"],"mappings":"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","file":"queue-manager.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * @link https://craftcms.com/\n * @copyright Copyright (c) Pixel & Tonic, Inc.\n * @license https://craftcms.github.io/license/\n */\n\n/**\n * Vue component for the Queue manager\n *\n * @author Pixel & Tonic, Inc. <support@pixelandtonic.com>\n * @author Global Network Group | Giel Tettelaar <giel@yellowflash.net>\n * @since 3.2.0\n */\nnew Vue({\n    el: \"#main\",\n    delimiters: ['[[', ']]'],\n    data() {\n        return {\n            loading: false,\n            indexTimeout: null,\n            jobs: [],\n            totalJobs: null,\n            totalJobsFormatted: null,\n            activeJobId: null,\n            activeJob: null,\n            limit: 50\n        }\n    },\n\n    /**\n     * Mounted function\n     */\n    mounted() {\n        document.getElementById('queue-manager-utility').removeAttribute('class')\n\n        Craft.cp.on('setJobInfo', () => {\n            this.jobs = Craft.cp.jobInfo.slice(0)\n            this.totalJobs = Craft.cp.totalJobs\n            this.totalJobsFormatted = Craft.formatNumber(this.totalJobs)\n            if (!this.loading) {\n                this.refreshActiveJob()\n            }\n        })\n\n        window.onpopstate = (event) => {\n            if (event.state && event.state.jobId) {\n                this.setActiveJob(event.state.jobId, false)\n            } else {\n                this.clearActiveJob(false)\n            }\n        }\n\n        // Was a specific job requested?\n        let m = Craft.path.match(/utilities\\/queue-manager\\/([^\\/]+)/)\n        if (m) {\n            let jobId = m[1]\n            history.replaceState({jobId}, '', this.url(jobId))\n            this.setActiveJob(jobId, false)\n        }\n    },\n\n    methods: {\n        /**\n         * Force-updates the job progress.\n         */\n        updateJobProgress() {\n            Craft.cp.trackJobProgress(false, true)\n        },\n\n        /**\n         * Sets the active job that should be shown.\n         * @param {string} jobId\n         * @param {boolean} pushState\n         * @return {Promise}\n         */\n        setActiveJob(jobId, pushState) {\n            return new Promise((resolve, reject) => {\n                window.clearTimeout(this.indexTimeout)\n                this.loading = true\n                this.activeJobId = jobId\n\n                if (pushState) {\n                    history.pushState({jobId}, '', this.url(jobId))\n                }\n\n                axios.get(Craft.getActionUrl('queue/get-job-details?id=' + jobId + '', {})).then(response => {\n                    if (response.data.id != this.activeJobId) {\n                        resolve(false)\n                        return\n                    }\n                    this.activeJob = response.data\n                    this.loading = false\n                    resolve(true)\n                }, response => {\n                    Craft.cp.displayError(response.response.data.error)\n                    reject(response)\n                })\n            })\n        },\n\n        /**\n         * Refreshes the active job\n         * @return {Promise}\n         */\n        refreshActiveJob() {\n            return new Promise((resolve, reject) => {\n                if (!this.activeJobId) {\n                    resolve(false)\n                    return\n                }\n                let oldJob = this.activeJob\n                this.setActiveJob(this.activeJobId, false).then((success) => {\n                    // If it's done now, the response is probably missing critical info about the job\n                    if (success && oldJob && this.activeJob.status == 3) {\n                        $.extend(oldJob, {\n                            progress: 100,\n                            status: 3,\n                        })\n                        delete oldJob.error\n                        delete oldJob.progressLabel\n                        this.activeJob = oldJob\n                    }\n                    resolve(success)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Retries all jobs.\n         * @return {Promise}\n         */\n        retryAll() {\n            return new Promise((resolve, reject) => {\n                window.clearTimeout(this.indexTimeout)\n                this.postActionRequest('queue/retry-all').then(response => {\n                    Craft.cp.displayNotice(Craft.t('app', 'Retrying all failed jobs.'))\n                    this.updateJobProgress()\n                    resolve()\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Releases all jobs.\n         * @return {Promise}\n         */\n        releaseAll() {\n            return new Promise((resolve, reject) => {\n                if (!confirm(Craft.t('app', 'Are you sure you want to release all jobs in the queue?'))) {\n                    resolve(false)\n                    return\n                }\n\n                this.postActionRequest('queue/release-all').then(response => {\n                    Craft.cp.displayNotice(Craft.t('app', 'All jobs released.'))\n                    this.clearActiveJob(true)\n                    this.updateJobProgress()\n                    resolve(true)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Retries a specific job.\n         * @param {Object} job\n         * @return {Promise}\n         */\n        retryJob(job) {\n            return new Promise((resolve, reject) => {\n                // Only confirm if the job is currently reserved\n                if (job.status == 2) {\n                    let message = Craft.t('app', 'Are you sure you want to restart the job “{description}”? Any progress could be lost.', {\n                        description: job.description\n                    })\n                    if (!confirm(message)) {\n                        resolve(false)\n                        return\n                    }\n                }\n\n                window.clearTimeout(this.indexTimeout)\n\n                this.postActionRequest('queue/retry', {id: job.id}).then(response => {\n                    if (job.status == 2) {\n                        Craft.cp.displayNotice(Craft.t('app', 'Job restarted.'))\n                    } else {\n                        Craft.cp.displayNotice(Craft.t('app', 'Job retried.'))\n                    }\n\n                    this.updateJobProgress()\n                    resolve(true)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Retries the active job.\n         * @return {Promise}\n         */\n        retryActiveJob() {\n            return new Promise((resolve, reject) => {\n                this.retryJob(this.activeJob).then(resolve).catch(reject)\n            })\n        },\n\n        /**\n         * Releases a job.\n         * @param {Object} job\n         * @returns {Promise}\n         */\n        releaseJob(job) {\n            return new Promise((resolve, reject) => {\n                let message = Craft.t('app', 'Are you sure you want to release the job “{description}”?', {\n                    description: job.description\n                })\n                if (!confirm(message)) {\n                    resolve(false)\n                    return\n                }\n                this.postActionRequest('queue/release', {id: job.id}).then(response => {\n                    Craft.cp.displayNotice(Craft.t('app', 'Job released.'))\n                    this.updateJobProgress()\n                    resolve(true)\n                })\n            })\n        },\n\n        /**\n         * Releases the active job.\n         * @returns {Promise}\n         */\n        releaseActiveJob() {\n            return new Promise((resolve, reject) => {\n                this.releaseJob(this.activeJob).then((released) => {\n                    if (released) {\n                        this.clearActiveJob(true)\n                    }\n                    resolve(released)\n                }).catch(reject)\n            })\n        },\n\n        /**\n         * Resets an active job so that the index screen is displayed.\n         * @param {boolean} pushState\n         */\n        clearActiveJob(pushState) {\n            if (!this.activeJob) {\n                return\n            }\n\n            this.activeJob = null\n            this.activeJobId = null\n\n            if (pushState) {\n                history.pushState({}, '', this.url())\n            }\n        },\n\n        /**\n         * Returns a Queue Manager URL.\n         * @param {string|null} jobId\n         * @returns {string}\n         */\n        url(jobId) {\n            return Craft.getUrl('utilities/queue-manager' + (jobId ? '/' + jobId : ''))\n        },\n\n        /**\n         * Returns whether a job can be retried.\n         * @param {Object} job\n         * @returns {boolean}\n         */\n        isRetryable(job) {\n            return job.status == 2 || job.status == 4\n        },\n\n        /**\n         * Returns the class name a job's status cell should have.\n         * @param {number} status\n         * @returns {string}\n         */\n        jobStatusClass(status) {\n            if (status == 4) {\n                return 'error'\n            }\n            return ''\n        },\n\n        /**\n         * Returns a job status code.\n         * @param {number} status\n         * @param {number} delay\n         * @returns {string}\n         */\n        jobStatusLabel(status, delay) {\n            if (delay) {\n                return Craft.t('app', 'Delayed')\n            }\n\n            switch (status) {\n                case 1:\n                    return Craft.t('app', 'Pending')\n                    break\n                case 2:\n                    return Craft.t('app', 'Reserved')\n                    break\n                case 3:\n                    return Craft.t('app', 'Finished')\n                    break\n                case 4:\n                    return Craft.t('app', 'Failed')\n                    break\n                default:\n                    return ''\n            }\n        },\n\n        /**\n         * Returns a job status icon class.\n         * @param {number} status\n         * @returns {string}\n         */\n        jobStatusIconClass(status) {\n            let c = 'status'\n            switch (status) {\n                case 1:\n                    c += ' orange'\n                    break\n                case 2:\n                    c += ' green'\n                    break\n                case 4:\n                    c += ' red'\n                    break\n            }\n            return c\n        },\n\n        /**\n         * Returns a job attribute name.\n         * @param {string} name\n         * @returns {string}\n         */\n        jobAttributeName(name) {\n            switch (name) {\n                case 'id':\n                    return Craft.t('app', 'ID')\n                case 'status':\n                    return Craft.t('app', 'Status')\n                case 'progress':\n                    return Craft.t('app', 'Progress')\n                case 'description':\n                    return Craft.t('app', 'Description')\n                case 'ttr':\n                    return Craft.t('app', 'Time to reserve')\n                case 'error':\n                    return Craft.t('app', 'Error')\n                default:\n                    return name\n            }\n        },\n\n        /**\n         * Formats a TTR value.\n         * @param {string} value\n         * @return {string}\n         */\n        ttrValue(value) {\n            return Craft.t('app', '{num, number} {num, plural, =1{second} other{seconds}}', {\n                num: value\n            })\n        },\n\n        /**\n         * Promise wrapper for `Craft.postActionRequest()`.\n         * @param {string} action\n         * @param {Object} params\n         * @returns {Promise}\n         */\n        postActionRequest(action, params) {\n            return new Promise((resolve, reject) => {\n                Craft.postActionRequest(action, params, (response, textStatus) => {\n                    if (textStatus !== 'success') {\n                        reject()\n                        return\n                    }\n                    resolve(response)\n                })\n            })\n        }\n    }\n})\n"],"sourceRoot":""}