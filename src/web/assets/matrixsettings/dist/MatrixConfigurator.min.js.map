{"version":3,"sources":["matrixsettings/src/MatrixConfigurator.js"],"names":["$","Craft","MatrixConfigurator","Garnish","Base","extend","fieldTypeInfo","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","$container","$fieldsColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$fieldItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","selectedBlockType","blockTypeSort","_fieldTypeSettingsHtml","_cancelToken","_ignoreFailedRequest","totalNewBlockTypes","init","placeholderKey","$blockTypesColumnContainer","$blockTypeItemsContainer","this","children","$fieldItemsOuterContainer","blockTypes","$blockTypeItems","length","id","$item","newMatch","DragSort","i","addListener","match","maxColHeight","getFieldTypeInfo","type","handle","axis","getBlockTypeSettingsModal","blockTypeSettingsModal","show","setContainerHeight","BlockType","height","applySettings","addFieldToSelectedBlockType","addBlockType","onSubmit","name","getFieldTypeSettingsHtml","Promise","reject","t","select","axios","CancelToken","cancelToken","token","response","BlockTypeSettingsModal","resolve","setContainer","appendTo","createTextField","requestAnimationFrame","$handleField","source","instructions","data","$body","$handleInputContainer","namespace","$deleteBtn","$cancelBtn","catch","cp","displayError","$submitBtn","onFormSubmit","Modal","preventDefault","base","$form","$bod","handleGenerator","$nameInputContainer","ui","updateTarget","find","$nameErrorList","$handleInput","hide","label","shake","class","$handleErrorList","onDeleteClick","confirm","$buttons","onDelete","text","$nameInput","HandleGenerator","ev","visible","isMobileBrowser","listening","trim","val","$errorList","attr","errors","stopListening","startListening","addClass","removeClass","$nameHiddenInput","$fieldSettingsContainer","setTimeout","trigger","displayErrors","configurator","$nameContainer","$handleHiddenInput","$handleLabel","$settingsBtn","$input","$fieldItem","$nameLabel","totalNewFields","fields","fieldSort","onSortChange","fieldSettings","field","deselect","insertBefore","showSettings","$fieldItems","parseInt","$items","selectedFieldType","initializedFieldTypeSettings","$translationSettingsContainer","$typeSettingsContainer","$widthInput","blockType","fieldTypeSettingsTemplates","bind","selfDestruct","$requiredCheckbox","$typeSelect","addField","isNew","widthSlider","addItems","SlidePicker","step","valueLabel","pct","remove","onChange","Field","selectedField","updateNameLabel","escapeHtml","prop","setFieldType","getDefaultFieldSettings","html","$settings","footHtml","initUiElements","getFieldTypeSettings","max","width","headHtml","getParsedFieldTypeHtml","maxlength","createTextareaField","updateTranslationMethodSettings","createCheckboxField","detach","checked","value","fresh","appendHeadHtml","createSelectField","fieldTypeOptions","then","settingsHtml","$translationKeyFormatContainer","RegExp","confirmDelete","required","$fieldset","push","options","isMultiSite","toggle","targetPrefix","jQuery"],"mappings":"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","file":"MatrixConfigurator.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend({\n        fieldTypeInfo: null,\n\n        inputNamePrefix: null,\n        fieldTypeSettingsNamespace: null,\n        inputIdPrefix: null,\n        placeholderKey: null,\n\n        $container: null,\n\n        $blockTypesColumnContainer: null,\n        $fieldsColumnContainer: null,\n        $fieldSettingsColumnContainer: null,\n\n        $blockTypeItemsOuterContainer: null,\n        $blockTypeItemsContainer: null,\n        $fieldItemsContainer: null,\n        $fieldSettingItemsContainer: null,\n\n        $newBlockTypeBtn: null,\n        $newFieldBtn: null,\n\n        blockTypes: null,\n        selectedBlockType: null,\n        blockTypeSort: null,\n        totalNewBlockTypes: 0,\n\n        _fieldTypeSettingsHtml: null,\n        _cancelToken: null,\n        _ignoreFailedRequest: false,\n\n        init: function(fieldTypeInfo, inputNamePrefix, fieldTypeSettingsNamespace, placeholderKey) {\n            this.fieldTypeInfo = fieldTypeInfo;\n            this.inputNamePrefix = inputNamePrefix;\n            this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n            this.placeholderKey = placeholderKey;\n\n            this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n            this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n            this.$fieldsColumnContainer = this.$container.children('.mc-fields').children();\n            this.$fieldSettingsColumnContainer = this.$container.children('.mc-field-settings').children();\n\n            this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.mc-col-items');\n            this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.mc-blocktypes');\n            this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.mc-col-items');\n            this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.mc-col-items');\n\n            this.setContainerHeight();\n\n            this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n            this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n            this._fieldTypeSettingsHtml = {};\n\n            // Find the existing block types\n            this.blockTypes = {};\n\n            var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n            for (var i = 0; i < $blockTypeItems.length; i++) {\n                var $item = $($blockTypeItems[i]),\n                    id = $item.data('id');\n\n                this.blockTypes[id] = new BlockType(this, $item);\n\n                // Is this a new block type?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                    this.totalNewBlockTypes = parseInt(newMatch[1]);\n                }\n            }\n\n            this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n            this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n\n            this.addListener(this.$blockTypesColumnContainer, 'resize', 'setContainerHeight');\n            this.addListener(this.$fieldsColumnContainer, 'resize', 'setContainerHeight');\n            this.addListener(this.$fieldSettingsColumnContainer, 'resize', 'setContainerHeight');\n        },\n\n        setContainerHeight: function() {\n            setTimeout(() => {\n                var maxColHeight = Math.max(this.$blockTypesColumnContainer.height(), this.$fieldsColumnContainer.height(), this.$fieldSettingsColumnContainer.height(), 400);\n                this.$container.height(maxColHeight);\n            }, 1);\n        },\n\n        getFieldTypeInfo: function(type) {\n            for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                if (this.fieldTypeInfo[i].type === type) {\n                    return this.fieldTypeInfo[i];\n                }\n            }\n        },\n\n        addBlockType: function() {\n            this.getBlockTypeSettingsModal();\n\n            this.blockTypeSettingsModal.show();\n\n            this.blockTypeSettingsModal.onSubmit = (name, handle) => {\n                this.totalNewBlockTypes++;\n                var id = 'new' + this.totalNewBlockTypes;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                    '<div class=\"mci-name\">' +\n                    '<h4></h4>' +\n                    '<div class=\"smalltext light code\"></div>' +\n                    '</div>' +\n                    '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][name]\">' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][handle]\">' +\n                    '</div>'\n                ).appendTo(this.$blockTypeItemsContainer);\n\n                this.blockTypes[id] = new BlockType(this, $item);\n                this.blockTypes[id].applySettings(name, handle);\n                this.blockTypes[id].select();\n                this.blockTypes[id].addField();\n\n                this.blockTypeSort.addItems($item);\n            };\n        },\n\n        addFieldToSelectedBlockType: function() {\n            if (this.selectedBlockType) {\n                this.selectedBlockType.addField();\n            }\n        },\n\n        getBlockTypeSettingsModal: function() {\n            if (!this.blockTypeSettingsModal) {\n                this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n            }\n\n            return this.blockTypeSettingsModal;\n        },\n\n        getFieldTypeSettingsHtml: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n                    resolve(this._fieldTypeSettingsHtml[type]);\n                    return;\n                }\n\n                // Cancel the current request\n                if (this._cancelToken) {\n                    this._ignoreFailedRequest = true;\n                    this._cancelToken.cancel();\n                    Garnish.requestAnimationFrame(() => {\n                        this._ignoreFailedRequest = false;\n                    });\n                }\n\n                // Create a cancel token\n                this._cancelToken = axios.CancelToken.source();\n\n                Craft.sendActionRequest('POST', 'fields/render-settings', {\n                    cancelToken: this._cancelToken.token,\n                    data: {\n                        type: type,\n                        namespace: this.fieldTypeSettingsNamespace,\n                    }\n                }).then(response => {\n                    this._fieldTypeSettingsHtml[type] = response.data;\n                    resolve(response.data);\n                }).catch(() => {\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                    reject();\n                });\n            });\n        },\n    });\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend({\n        init: function() {\n            this.base();\n\n            this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n            this.setContainer(this.$form);\n\n            this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n            let $nameField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                instructions: Craft.t('app', 'What this block type will be called in the control panel.'),\n            }).appendTo(this.$body);\n            let $nameInputContainer = $nameField.find('.input');\n            this.$nameInput = $nameInputContainer.find('.text');\n            this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo($nameInputContainer).hide();\n            let $handleField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                instructions: Craft.t('app', 'How you’ll refer to this block type in the templates.'),\n                class: 'code',\n            }).appendTo(this.$body);\n            let $handleInputContainer = $handleField.find('.input');\n            this.$handleInput = $handleInputContainer.find('.text');\n            this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo($handleInputContainer).hide();\n            this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n            this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n            }).appendTo(this.$buttons);\n\n            this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n            this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n        },\n\n        onFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent multi form submits with the return key\n            if (!this.visible) {\n                return;\n            }\n\n            if (this.handleGenerator.listening) {\n                // Give the handle a chance to catch up with the input\n                this.handleGenerator.updateTarget();\n            }\n\n            // Basic validation\n            var name = Craft.trim(this.$nameInput.val()),\n                handle = Craft.trim(this.$handleInput.val());\n\n            if (!name || !handle) {\n                Garnish.shake(this.$form);\n            } else {\n                this.hide();\n                this.onSubmit(name, handle);\n            }\n        },\n\n        onDeleteClick: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                this.hide();\n                this.onDelete();\n            }\n        },\n\n        show: function(name, handle, errors) {\n            this.$nameInput.val(typeof name === 'string' ? name : '');\n            this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n            if (!handle) {\n                this.handleGenerator.startListening();\n            } else {\n                this.handleGenerator.stopListening();\n            }\n\n            if (typeof name === 'undefined') {\n                this.$deleteBtn.addClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Create'));\n            } else {\n                this.$deleteBtn.removeClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Apply'));\n            }\n\n            this.displayErrors('name', (errors ? errors.name : null));\n            this.displayErrors('handle', (errors ? errors.handle : null));\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout(() => {\n                    this.$nameInput.trigger('focus');\n                }, 100);\n            }\n\n            this.base();\n        },\n\n        displayErrors: function(attr, errors) {\n            var $input = this['$' + attr + 'Input'],\n                $errorList = this['$' + attr + 'ErrorList'];\n\n            $errorList.children().remove();\n\n            if (errors) {\n                $input.addClass('error');\n                $errorList.show();\n\n                for (var i = 0; i < errors.length; i++) {\n                    $('<li/>').text(errors[i]).appendTo($errorList);\n                }\n            } else {\n                $input.removeClass('error');\n                $errorList.hide();\n            }\n        }\n    });\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend({\n        configurator: null,\n        id: null,\n        errors: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n        $nameHiddenInput: null,\n        $handleHiddenInput: null,\n        $settingsBtn: null,\n        $fieldItemsContainer: null,\n        $fieldSettingsContainer: null,\n\n        fields: null,\n        selectedField: null,\n        fieldSort: null,\n        totalNewFields: 0,\n        fieldSettings: null,\n\n        init: function(configurator, $item) {\n            this.configurator = configurator;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n            this.errors = this.$item.data('errors');\n\n            this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n            this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n            this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n            this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n            this.$settingsBtn = this.$item.find('.settings');\n\n            // Find the field items container if it exists, otherwise create it\n            this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldItemsContainer.length) {\n                this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n            }\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldSettingsContainer.length) {\n                this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n            }\n\n            // Find the existing fields\n            this.fields = {};\n\n            var $fieldItems = this.$fieldItemsContainer.children();\n\n            for (var i = 0; i < $fieldItems.length; i++) {\n                var $fieldItem = $($fieldItems[i]),\n                    id = $fieldItem.data('id');\n\n                this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                // Is this a new field?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewFields) {\n                    this.totalNewFields = parseInt(newMatch[1]);\n                }\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n            this.fieldSort = new Garnish.DragSort($fieldItems, {\n                handle: '.move',\n                axis: 'y',\n                onSortChange: () => {\n                    // Adjust the field setting containers to match the new sort order\n                    for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                        var $item = $(this.fieldSort.$items[i]),\n                            id = $item.data('id'),\n                            field = this.fields[id];\n\n                        field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                    }\n                },\n            });\n        },\n\n        select: function() {\n            if (this.configurator.selectedBlockType === this) {\n                return;\n            }\n\n            if (this.configurator.selectedBlockType) {\n                this.configurator.selectedBlockType.deselect();\n            }\n\n            this.configurator.$fieldsColumnContainer.removeClass('hidden').trigger('resize');\n            this.$fieldItemsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.configurator.selectedBlockType = this;\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldsColumnContainer.addClass('hidden').trigger('resize');\n            this.$fieldItemsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.configurator.selectedBlockType = null;\n\n            if (this.selectedField) {\n                this.selectedField.deselect();\n            }\n        },\n\n        showSettings: function() {\n            var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n            blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n            blockTypeSettingsModal.onSubmit = this.applySettings.bind(this);\n            blockTypeSettingsModal.onDelete = this.selfDestruct.bind(this);\n        },\n\n        applySettings: function(name, handle) {\n            if (this.errors) {\n                this.errors = null;\n                this.$settingsBtn.removeClass('error');\n            }\n\n            this.$nameLabel.text(name);\n            this.$handleLabel.text(handle);\n            this.$nameHiddenInput.val(name);\n            this.$handleHiddenInput.val(handle);\n        },\n\n        addField: function() {\n            this.totalNewFields++;\n            var id = 'new' + this.totalNewFields;\n\n            var $item = $(\n                '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                '<div class=\"mci-name\">' +\n                '<h4><em class=\"light\">' + Craft.t('app', '(blank)') + '</em></h4>' +\n                '<div class=\"smalltext light code\"></div>' +\n                '</div>' +\n                '<div class=\"actions\">' +\n                '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                '</div>' +\n                '</div>'\n            ).appendTo(this.$fieldItemsContainer);\n\n            this.fields[id] = new Field(this.configurator, this, $item);\n            this.fields[id].select();\n\n            this.fieldSort.addItems($item);\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldItemsContainer.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.configurator.blockTypes[this.id] = null;\n            delete this.configurator.blockTypes[this.id];\n        }\n    });\n\n    var Field = Garnish.Base.extend({\n        configurator: null,\n        blockType: null,\n        id: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        selectedFieldType: null,\n        initializedFieldTypeSettings: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n\n        $fieldSettingsContainer: null,\n        $nameInput: null,\n        $handleInput: null,\n        $requiredCheckbox: null,\n        $typeSelect: null,\n        $translationSettingsContainer: null,\n        $typeSettingsContainer: null,\n        $widthInput: null,\n        $deleteBtn: null,\n\n        init: function(configurator, blockType, $item) {\n            this.configurator = configurator;\n            this.blockType = blockType;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n\n            this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n            this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n            this.initializedFieldTypeSettings = {};\n            this.fieldTypeSettingsTemplates = {};\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            var isNew = (!this.$fieldSettingsContainer.length);\n\n            if (isNew) {\n                this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n            }\n\n            this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n            this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n            this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n            this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n            this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n            this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.mc-fieldtype-settings:first');\n            this.$widthInput = $('#' + this.inputIdPrefix + '-width');\n            this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n            if (isNew) {\n                this.setFieldType('craft\\\\fields\\\\PlainText');\n            } else {\n                this.selectedFieldType = this.$typeSelect.val();\n                this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n            }\n\n            if (!this.$handleInput.val()) {\n                new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n            this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n            this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n            this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n            this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n\n            let widthSlider = new Craft.SlidePicker(this.$widthInput.val() || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.$widthInput.val(width);\n                }\n            });\n            widthSlider.$container.insertAfter($nameContainer);\n        },\n\n        select: function() {\n            if (this.blockType.selectedField === this) {\n                return;\n            }\n\n            if (this.blockType.selectedField) {\n                this.blockType.selectedField.deselect();\n            }\n\n            this.configurator.$fieldSettingsColumnContainer.removeClass('hidden').trigger('resize');\n            this.blockType.$fieldSettingsContainer.removeClass('hidden');\n            this.$fieldSettingsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.blockType.selectedField = this;\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout(() => {\n                    this.$nameInput.trigger('focus');\n                }, 100);\n            }\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldSettingsColumnContainer.addClass('hidden').trigger('resize');\n            this.blockType.$fieldSettingsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.blockType.selectedField = null;\n        },\n\n        updateNameLabel: function() {\n            var val = this.$nameInput.val();\n            this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>'));\n        },\n\n        updateHandleLabel: function() {\n            this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()));\n        },\n\n        updateRequiredIcon: function() {\n            if (this.$requiredCheckbox.prop('checked')) {\n                this.$nameLabel.addClass('mci-required');\n            } else {\n                this.$nameLabel.removeClass('mci-required');\n            }\n        },\n\n        onTypeSelectChange: function() {\n            this.setFieldType(this.$typeSelect.val());\n        },\n\n        setFieldType: function(type) {\n            // Update the Translation Method settings\n            Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n            if (this.selectedFieldType) {\n                this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n            }\n\n            this.selectedFieldType = type;\n            this.$typeSelect.val(type);\n\n            // Show a spinner\n            this.$typeSettingsContainer.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n            this.getFieldTypeSettings(type).then(({fresh, $settings, headHtml, footHtml}) => {\n                this.$typeSettingsContainer.html('').append($settings);\n                if (fresh) {\n                    Craft.initUiElements($settings);\n                    Craft.appendHeadHtml(headHtml);\n                    Craft.appendFootHtml(footHtml);\n                }\n\n                // In case Firefox was sleeping on the job\n                this.$typeSettingsContainer.trigger('resize');\n            }).catch(() => {\n                this.$typeSettingsContainer.html('');\n            });\n        },\n\n        getFieldTypeSettings: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n                    resolve({\n                        fresh: false,\n                        $settings: this.initializedFieldTypeSettings[type],\n                    });\n                    return;\n                }\n\n                this.configurator.getFieldTypeSettingsHtml(type).then(({settingsHtml, headHtml, footHtml}) => {\n                    settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n                    headHtml = this.getParsedFieldTypeHtml(headHtml);\n                    footHtml = this.getParsedFieldTypeHtml(footHtml);\n                    let $settings = $('<div/>').html(settingsHtml);\n                    this.initializedFieldTypeSettings[type] = $settings;\n                    resolve({\n                        fresh: true,\n                        $settings: $settings,\n                        headHtml: headHtml,\n                        footHtml: footHtml,\n                    });\n                }).catch($.noop);\n            });\n        },\n\n        getParsedFieldTypeHtml: function(html) {\n            if (typeof html === 'string') {\n                html = html.replace(new RegExp(`__BLOCK_TYPE_${this.configurator.placeholderKey}__`, 'g'), this.blockType.id);\n                html = html.replace(new RegExp(`__FIELD_${this.configurator.placeholderKey}__`, 'g'), this.id);\n            } else {\n                html = '';\n            }\n\n            return html;\n        },\n\n        getDefaultFieldSettings: function() {\n            var $container = $('<div/>', {\n                'data-id': this.id\n            });\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                id: this.inputIdPrefix + '-name',\n                name: this.inputNamePrefix + '[name]'\n            }).appendTo($container);\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                id: this.inputIdPrefix + '-handle',\n                'class': 'code',\n                name: this.inputNamePrefix + '[handle]',\n                maxlength: 64,\n                required: true\n            }).appendTo($container);\n\n            Craft.ui.createTextareaField({\n                label: Craft.t('app', 'Instructions'),\n                id: this.inputIdPrefix + '-instructions',\n                'class': 'nicetext',\n                name: this.inputNamePrefix + '[instructions]'\n            }).appendTo($container);\n\n            let $fieldset = $('<fieldset/>').appendTo($container);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'This field is required'),\n                id: this.inputIdPrefix + '-required',\n                name: this.inputNamePrefix + '[required]'\n            }).appendTo($fieldset);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'Use this field’s values as search keywords'),\n                id: this.inputIdPrefix + '-searchable',\n                name: this.inputNamePrefix + '[searchable]',\n                checked: false,\n            }).appendTo($fieldset);\n\n            var fieldTypeOptions = [];\n\n            for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                fieldTypeOptions.push({\n                    value: this.configurator.fieldTypeInfo[i].type,\n                    label: this.configurator.fieldTypeInfo[i].name\n                });\n            }\n\n            Craft.ui.createSelectField({\n                label: Craft.t('app', 'Field Type'),\n                id: this.inputIdPrefix + '-type',\n                name: this.inputNamePrefix + '[type]',\n                options: fieldTypeOptions,\n                value: 'craft\\\\fields\\\\PlainText'\n            }).appendTo($container);\n\n            if (Craft.isMultiSite) {\n                var $translationSettingsContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-settings'\n                }).appendTo($container);\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Translation Method'),\n                    id: this.inputIdPrefix + '-translation-method',\n                    name: this.inputNamePrefix + '[translationMethod]',\n                    options: [],\n                    value: 'none',\n                    toggle: true,\n                    targetPrefix: this.inputIdPrefix + '-translation-method-'\n                }).appendTo($translationSettingsContainer);\n\n                var $translationKeyFormatContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-method-custom',\n                    'class': 'hidden'\n                }).appendTo($translationSettingsContainer);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Translation Key Format'),\n                    id: this.inputIdPrefix + '-translation-key-format',\n                    name: this.inputNamePrefix + '[translationKeyFormat]'\n                }).appendTo($translationKeyFormatContainer);\n            }\n\n            $('<hr/>').appendTo($container);\n\n            $('<div/>', {\n                'class': 'mc-fieldtype-settings'\n            }).appendTo($container);\n\n            $('<input/>', {\n                type: 'hidden',\n                id: this.inputIdPrefix + '-width',\n                name: this.inputNamePrefix + '[width]',\n                value: '100',\n            }).appendTo($container);\n\n            $('<hr/>').appendTo($container);\n\n            $('<a/>', {\n                'class': 'error delete',\n                text: Craft.t('app', 'Delete')\n            }).appendTo($container);\n\n            return $container;\n        },\n\n        confirmDelete: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                this.selfDestruct();\n            }\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.blockType.fields[this.id] = null;\n            delete this.blockType.fields[this.id];\n        }\n    });\n})(jQuery);\n"]}