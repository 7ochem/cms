{"version":3,"sources":["matrixsettings/src/MatrixConfigurator.js"],"names":["$","Craft","MatrixConfigurator","Garnish","Base","extend","fieldTypeInfo","inputNamePrefix","fieldTypeSettingsNamespace","inputIdPrefix","$container","$fieldsColumnContainer","$fieldSettingsColumnContainer","$blockTypeItemsOuterContainer","$fieldItemsContainer","$fieldSettingItemsContainer","$newBlockTypeBtn","$newFieldBtn","selectedBlockType","blockTypeSort","_fieldTypeSettingsHtml","_cancelToken","_ignoreFailedRequest","totalNewBlockTypes","init","placeholderKey","$blockTypesColumnContainer","$blockTypeItemsContainer","this","$fieldItemsOuterContainer","children","$blockTypeItems","length","i","$item","blockTypes","BlockType","handle","id","data","addListener","newMatch","match","parseInt","getBlockTypeSettingsModal","DragSort","blockTypeSettingsModal","axis","getFieldTypeInfo","type","addField","addBlockType","show","onSubmit","name","getFieldTypeSettingsHtml","Promise","t","cancel","requestAnimationFrame","select","addItems","namespace","resolve","BlockTypeSettingsModal","reject","setContainer","$nameInputContainer","$nameField","CancelToken","source","$nameErrorList","$handleField","createTextField","token","$handleInputContainer","$handleInput","find","response","$handleErrorList","$deleteBtn","cp","displayError","Modal","base","preventDefault","appendTo","$bod","$form","$body","handleGenerator","ui","label","listening","$nameInput","hide","shake","trim","instructions","class","$buttons","$cancelBtn","onDeleteClick","confirm","onDelete","$submitBtn","val","HandleGenerator","startListening","stopListening","onFormSubmit","ev","displayErrors","errors","updateTarget","$errorList","attr","$input","removeClass","addClass","text","$nameHiddenInput","$handleHiddenInput","isMobileBrowser","$fieldSettingsContainer","trigger","fieldSettings","$nameLabel","configurator","$nameContainer","$handleLabel","$settingsBtn","fields","selectedField","fieldSort","totalNewFields","onSortChange","field","deselect","insertBefore","$fieldItems","$fieldItem","Field","applySettings","$items","initializedFieldTypeSettings","$requiredCheckbox","$typeSelect","$translationSettingsContainer","$typeSettingsContainer","$widthInput","showSettings","fieldTypeSettingsTemplates","bind","selfDestruct","remove","valueLabel","pct","widthSlider","selectedFieldType","setTimeout","blockType","updateNameLabel","escapeHtml","updateRequiredIcon","isNew","onTypeSelectChange","setFieldType","getDefaultFieldSettings","updateTranslationMethodSettings","html","$settings","append","initUiElements","appendHeadHtml","headHtml","appendFootHtml","footHtml","SlidePicker","max","step","getFieldTypeSettings","width","insertAfter","settingsHtml","getParsedFieldTypeHtml","fresh","prop","maxlength","createCheckboxField","detach","then","fieldTypeOptions","catch","isMultiSite","targetPrefix","$translationKeyFormatContainer","createSelectField","replace","RegExp","confirmDelete","required","createTextareaField","$fieldset","checked","push","value","options","toggle","jQuery"],"mappings":"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","file":"MatrixConfigurator.min.js","sourcesContent":["(function($) {\n    /** global: Craft */\n    /** global: Garnish */\n    /**\n     * Matrix configurator class\n     */\n    Craft.MatrixConfigurator = Garnish.Base.extend({\n        fieldTypeInfo: null,\n\n        inputNamePrefix: null,\n        fieldTypeSettingsNamespace: null,\n        inputIdPrefix: null,\n        placeholderKey: null,\n\n        $container: null,\n\n        $blockTypesColumnContainer: null,\n        $fieldsColumnContainer: null,\n        $fieldSettingsColumnContainer: null,\n\n        $blockTypeItemsOuterContainer: null,\n        $blockTypeItemsContainer: null,\n        $fieldItemsContainer: null,\n        $fieldSettingItemsContainer: null,\n\n        $newBlockTypeBtn: null,\n        $newFieldBtn: null,\n\n        blockTypes: null,\n        selectedBlockType: null,\n        blockTypeSort: null,\n        totalNewBlockTypes: 0,\n\n        _fieldTypeSettingsHtml: null,\n        _cancelToken: null,\n        _ignoreFailedRequest: false,\n\n        init: function(fieldTypeInfo, inputNamePrefix, fieldTypeSettingsNamespace, placeholderKey) {\n            this.fieldTypeInfo = fieldTypeInfo;\n            this.inputNamePrefix = inputNamePrefix;\n            this.fieldTypeSettingsNamespace = fieldTypeSettingsNamespace;\n            this.inputIdPrefix = Craft.formatInputId(this.inputNamePrefix);\n            this.placeholderKey = placeholderKey;\n\n            this.$container = $('#' + this.inputIdPrefix + '-matrix-configurator:first .input:first');\n\n            this.$blockTypesColumnContainer = this.$container.children('.block-types').children();\n            this.$fieldsColumnContainer = this.$container.children('.mc-fields').children();\n            this.$fieldSettingsColumnContainer = this.$container.children('.mc-field-settings').children();\n\n            this.$blockTypeItemsOuterContainer = this.$blockTypesColumnContainer.children('.mc-col-items');\n            this.$blockTypeItemsContainer = this.$blockTypeItemsOuterContainer.children('.mc-blocktypes');\n            this.$fieldItemsOuterContainer = this.$fieldsColumnContainer.children('.mc-col-items');\n            this.$fieldSettingItemsContainer = this.$fieldSettingsColumnContainer.children('.mc-col-items');\n\n            this.$newBlockTypeBtn = this.$blockTypeItemsOuterContainer.children('.btn');\n            this.$newFieldBtn = this.$fieldItemsOuterContainer.children('.btn');\n\n            this._fieldTypeSettingsHtml = {};\n\n            // Find the existing block types\n            this.blockTypes = {};\n\n            var $blockTypeItems = this.$blockTypeItemsContainer.children();\n\n            for (var i = 0; i < $blockTypeItems.length; i++) {\n                var $item = $($blockTypeItems[i]),\n                    id = $item.data('id');\n\n                this.blockTypes[id] = new BlockType(this, $item);\n\n                // Is this a new block type?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewBlockTypes) {\n                    this.totalNewBlockTypes = parseInt(newMatch[1]);\n                }\n            }\n\n            this.blockTypeSort = new Garnish.DragSort($blockTypeItems, {\n                handle: '.move',\n                axis: 'y'\n            });\n\n            this.addListener(this.$newBlockTypeBtn, 'click', 'addBlockType');\n            this.addListener(this.$newFieldBtn, 'click', 'addFieldToSelectedBlockType');\n        },\n\n        getFieldTypeInfo: function(type) {\n            for (var i = 0; i < this.fieldTypeInfo.length; i++) {\n                if (this.fieldTypeInfo[i].type === type) {\n                    return this.fieldTypeInfo[i];\n                }\n            }\n        },\n\n        addBlockType: function() {\n            this.getBlockTypeSettingsModal();\n\n            this.blockTypeSettingsModal.show();\n\n            this.blockTypeSettingsModal.onSubmit = (name, handle) => {\n                this.totalNewBlockTypes++;\n                var id = 'new' + this.totalNewBlockTypes;\n\n                var $item = $(\n                    '<div class=\"matrixconfigitem mci-blocktype\" data-id=\"' + id + '\">' +\n                    '<div class=\"mci-name\">' +\n                    '<h4></h4>' +\n                    '<div class=\"smalltext light code\"></div>' +\n                    '</div>' +\n                    '<a class=\"settings icon\" title=\"' + Craft.t('app', 'Settings') + '\"></a>' +\n                    '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][name]\">' +\n                    '<input class=\"hidden\" name=\"' + this.inputNamePrefix + '[blockTypes][' + id + '][handle]\">' +\n                    '</div>'\n                ).appendTo(this.$blockTypeItemsContainer);\n\n                this.blockTypes[id] = new BlockType(this, $item);\n                this.blockTypes[id].applySettings(name, handle);\n                this.blockTypes[id].select();\n                this.blockTypes[id].addField();\n\n                this.blockTypeSort.addItems($item);\n            };\n        },\n\n        addFieldToSelectedBlockType: function() {\n            if (this.selectedBlockType) {\n                this.selectedBlockType.addField();\n            }\n        },\n\n        getBlockTypeSettingsModal: function() {\n            if (!this.blockTypeSettingsModal) {\n                this.blockTypeSettingsModal = new BlockTypeSettingsModal();\n            }\n\n            return this.blockTypeSettingsModal;\n        },\n\n        getFieldTypeSettingsHtml: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this._fieldTypeSettingsHtml[type] !== 'undefined') {\n                    resolve(this._fieldTypeSettingsHtml[type]);\n                    return;\n                }\n\n                // Cancel the current request\n                if (this._cancelToken) {\n                    this._ignoreFailedRequest = true;\n                    this._cancelToken.cancel();\n                    Garnish.requestAnimationFrame(() => {\n                        this._ignoreFailedRequest = false;\n                    });\n                }\n\n                // Create a cancel token\n                this._cancelToken = axios.CancelToken.source();\n\n                Craft.sendActionRequest('POST', 'fields/render-settings', {\n                    cancelToken: this._cancelToken.token,\n                    data: {\n                        type: type,\n                        namespace: this.fieldTypeSettingsNamespace,\n                    }\n                }).then(response => {\n                    this._fieldTypeSettingsHtml[type] = response.data;\n                    resolve(response.data);\n                }).catch(() => {\n                    if (!this._ignoreFailedRequest) {\n                        Craft.cp.displayError(Craft.t('app', 'A server error occurred.'));\n                    }\n                    reject();\n                });\n            });\n        },\n    });\n\n    /**\n     * Block type settings modal class\n     */\n    var BlockTypeSettingsModal = Garnish.Modal.extend({\n        init: function() {\n            this.base();\n\n            this.$form = $('<form class=\"modal fitted\"/>').appendTo(Garnish.$bod);\n            this.setContainer(this.$form);\n\n            this.$body = $('<div class=\"body\"/>').appendTo(this.$form);\n            let $nameField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                instructions: Craft.t('app', 'What this block type will be called in the control panel.'),\n            }).appendTo(this.$body);\n            let $nameInputContainer = $nameField.find('.input');\n            this.$nameInput = $nameInputContainer.find('.text');\n            this.$nameErrorList = $('<ul class=\"errors\"/>').appendTo($nameInputContainer).hide();\n            let $handleField = Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                instructions: Craft.t('app', 'How you’ll refer to this block type in the templates.'),\n                class: 'code',\n            }).appendTo(this.$body);\n            let $handleInputContainer = $handleField.find('.input');\n            this.$handleInput = $handleInputContainer.find('.text');\n            this.$handleErrorList = $('<ul class=\"errors\"/>').appendTo($handleInputContainer).hide();\n            this.$deleteBtn = $('<a class=\"error left hidden\" style=\"line-height: 30px;\">' + Craft.t('app', 'Delete') + '</a>').appendTo(this.$body);\n            this.$buttons = $('<div class=\"buttons right\" style=\"margin-top: 0;\"/>').appendTo(this.$body);\n            this.$cancelBtn = $('<button/>', {\n                type: 'button',\n                class: 'btn',\n                text: Craft.t('app', 'Cancel'),\n            }).appendTo(this.$buttons);\n            this.$submitBtn = $('<button/>', {\n                type: 'submit',\n                class: 'btn submit',\n            }).appendTo(this.$buttons);\n\n            this.handleGenerator = new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n\n            this.addListener(this.$cancelBtn, 'click', 'hide');\n            this.addListener(this.$form, 'submit', 'onFormSubmit');\n            this.addListener(this.$deleteBtn, 'click', 'onDeleteClick');\n        },\n\n        onFormSubmit: function(ev) {\n            ev.preventDefault();\n\n            // Prevent multi form submits with the return key\n            if (!this.visible) {\n                return;\n            }\n\n            if (this.handleGenerator.listening) {\n                // Give the handle a chance to catch up with the input\n                this.handleGenerator.updateTarget();\n            }\n\n            // Basic validation\n            var name = Craft.trim(this.$nameInput.val()),\n                handle = Craft.trim(this.$handleInput.val());\n\n            if (!name || !handle) {\n                Garnish.shake(this.$form);\n            } else {\n                this.hide();\n                this.onSubmit(name, handle);\n            }\n        },\n\n        onDeleteClick: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this block type?'))) {\n                this.hide();\n                this.onDelete();\n            }\n        },\n\n        show: function(name, handle, errors) {\n            this.$nameInput.val(typeof name === 'string' ? name : '');\n            this.$handleInput.val(typeof handle === 'string' ? handle : '');\n\n            if (!handle) {\n                this.handleGenerator.startListening();\n            } else {\n                this.handleGenerator.stopListening();\n            }\n\n            if (typeof name === 'undefined') {\n                this.$deleteBtn.addClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Create'));\n            } else {\n                this.$deleteBtn.removeClass('hidden');\n                this.$submitBtn.text(Craft.t('app', 'Apply'));\n            }\n\n            this.displayErrors('name', (errors ? errors.name : null));\n            this.displayErrors('handle', (errors ? errors.handle : null));\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout(() => {\n                    this.$nameInput.trigger('focus');\n                }, 100);\n            }\n\n            this.base();\n        },\n\n        displayErrors: function(attr, errors) {\n            var $input = this['$' + attr + 'Input'],\n                $errorList = this['$' + attr + 'ErrorList'];\n\n            $errorList.children().remove();\n\n            if (errors) {\n                $input.addClass('error');\n                $errorList.show();\n\n                for (var i = 0; i < errors.length; i++) {\n                    $('<li/>').text(errors[i]).appendTo($errorList);\n                }\n            } else {\n                $input.removeClass('error');\n                $errorList.hide();\n            }\n        }\n    });\n\n    /**\n     * Block type class\n     */\n    var BlockType = Garnish.Base.extend({\n        configurator: null,\n        id: null,\n        errors: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n        $nameHiddenInput: null,\n        $handleHiddenInput: null,\n        $settingsBtn: null,\n        $fieldItemsContainer: null,\n        $fieldSettingsContainer: null,\n\n        fields: null,\n        selectedField: null,\n        fieldSort: null,\n        totalNewFields: 0,\n        fieldSettings: null,\n\n        init: function(configurator, $item) {\n            this.configurator = configurator;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n            this.errors = this.$item.data('errors');\n\n            this.inputNamePrefix = this.configurator.inputNamePrefix + '[blockTypes][' + this.id + ']';\n            this.inputIdPrefix = this.configurator.inputIdPrefix + '-blockTypes-' + this.id;\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n            this.$nameHiddenInput = this.$item.find('input[name$=\"[name]\"]:first');\n            this.$handleHiddenInput = this.$item.find('input[name$=\"[handle]\"]:first');\n            this.$settingsBtn = this.$item.find('.settings');\n\n            // Find the field items container if it exists, otherwise create it\n            this.$fieldItemsContainer = this.configurator.$fieldItemsOuterContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldItemsContainer.length) {\n                this.$fieldItemsContainer = $('<div data-id=\"' + this.id + '\"/>').insertBefore(this.configurator.$newFieldBtn);\n            }\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.configurator.$fieldSettingItemsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            if (!this.$fieldSettingsContainer.length) {\n                this.$fieldSettingsContainer = $('<div data-id=\"' + this.id + '\"/>').appendTo(this.configurator.$fieldSettingItemsContainer);\n            }\n\n            // Find the existing fields\n            this.fields = {};\n\n            var $fieldItems = this.$fieldItemsContainer.children();\n\n            for (var i = 0; i < $fieldItems.length; i++) {\n                var $fieldItem = $($fieldItems[i]),\n                    id = $fieldItem.data('id');\n\n                this.fields[id] = new Field(this.configurator, this, $fieldItem);\n\n                // Is this a new field?\n                var newMatch = (typeof id === 'string' && id.match(/new(\\d+)/));\n\n                if (newMatch && newMatch[1] > this.totalNewFields) {\n                    this.totalNewFields = parseInt(newMatch[1]);\n                }\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$settingsBtn, 'click', 'showSettings');\n\n            this.fieldSort = new Garnish.DragSort($fieldItems, {\n                handle: '.move',\n                axis: 'y',\n                onSortChange: () => {\n                    // Adjust the field setting containers to match the new sort order\n                    for (var i = 0; i < this.fieldSort.$items.length; i++) {\n                        var $item = $(this.fieldSort.$items[i]),\n                            id = $item.data('id'),\n                            field = this.fields[id];\n\n                        field.$fieldSettingsContainer.appendTo(this.$fieldSettingsContainer);\n                    }\n                },\n            });\n        },\n\n        select: function() {\n            if (this.configurator.selectedBlockType === this) {\n                return;\n            }\n\n            if (this.configurator.selectedBlockType) {\n                this.configurator.selectedBlockType.deselect();\n            }\n\n            this.configurator.$fieldsColumnContainer.removeClass('hidden').trigger('resize');\n            this.$fieldItemsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.configurator.selectedBlockType = this;\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldsColumnContainer.addClass('hidden').trigger('resize');\n            this.$fieldItemsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.configurator.selectedBlockType = null;\n\n            if (this.selectedField) {\n                this.selectedField.deselect();\n            }\n        },\n\n        showSettings: function() {\n            var blockTypeSettingsModal = this.configurator.getBlockTypeSettingsModal();\n            blockTypeSettingsModal.show(this.$nameHiddenInput.val(), this.$handleHiddenInput.val(), this.errors);\n            blockTypeSettingsModal.onSubmit = this.applySettings.bind(this);\n            blockTypeSettingsModal.onDelete = this.selfDestruct.bind(this);\n        },\n\n        applySettings: function(name, handle) {\n            if (this.errors) {\n                this.errors = null;\n                this.$settingsBtn.removeClass('error');\n            }\n\n            this.$nameLabel.text(name);\n            this.$handleLabel.text(handle);\n            this.$nameHiddenInput.val(name);\n            this.$handleHiddenInput.val(handle);\n        },\n\n        addField: function() {\n            this.totalNewFields++;\n            var id = 'new' + this.totalNewFields;\n\n            var $item = $(\n                '<div class=\"matrixconfigitem mci-field\" data-id=\"' + id + '\">' +\n                '<div class=\"mci-name\">' +\n                '<h4><em class=\"light\">' + Craft.t('app', '(blank)') + '</em></h4>' +\n                '<div class=\"smalltext light code\"></div>' +\n                '</div>' +\n                '<div class=\"actions\">' +\n                '<a class=\"move icon\" title=\"' + Craft.t('app', 'Reorder') + '\"></a>' +\n                '</div>' +\n                '</div>'\n            ).appendTo(this.$fieldItemsContainer);\n\n            this.fields[id] = new Field(this.configurator, this, $item);\n            this.fields[id].select();\n\n            this.fieldSort.addItems($item);\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldItemsContainer.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.configurator.blockTypes[this.id] = null;\n            delete this.configurator.blockTypes[this.id];\n        }\n    });\n\n    var Field = Garnish.Base.extend({\n        configurator: null,\n        blockType: null,\n        id: null,\n\n        inputNamePrefix: null,\n        inputIdPrefix: null,\n\n        selectedFieldType: null,\n        initializedFieldTypeSettings: null,\n\n        $item: null,\n        $nameLabel: null,\n        $handleLabel: null,\n\n        $fieldSettingsContainer: null,\n        $nameInput: null,\n        $handleInput: null,\n        $requiredCheckbox: null,\n        $typeSelect: null,\n        $translationSettingsContainer: null,\n        $typeSettingsContainer: null,\n        $widthInput: null,\n        $deleteBtn: null,\n\n        init: function(configurator, blockType, $item) {\n            this.configurator = configurator;\n            this.blockType = blockType;\n            this.$item = $item;\n            this.id = this.$item.data('id');\n\n            this.inputNamePrefix = this.blockType.inputNamePrefix + '[fields][' + this.id + ']';\n            this.inputIdPrefix = this.blockType.inputIdPrefix + '-fields-' + this.id;\n\n            this.initializedFieldTypeSettings = {};\n            this.fieldTypeSettingsTemplates = {};\n\n            let $nameContainer = this.$item.children('.mci-name');\n            this.$nameLabel = $nameContainer.children('h4');\n            this.$handleLabel = $nameContainer.children('.smalltext');\n\n            // Find the field settings container if it exists, otherwise create it\n            this.$fieldSettingsContainer = this.blockType.$fieldSettingsContainer.children('[data-id=\"' + this.id + '\"]:first');\n\n            var isNew = (!this.$fieldSettingsContainer.length);\n\n            if (isNew) {\n                this.$fieldSettingsContainer = this.getDefaultFieldSettings().appendTo(this.blockType.$fieldSettingsContainer);\n            }\n\n            this.$nameInput = $('#' + this.inputIdPrefix + '-name');\n            this.$handleInput = $('#' + this.inputIdPrefix + '-handle');\n            this.$requiredCheckbox = $('#' + this.inputIdPrefix + '-required');\n            this.$typeSelect = $('#' + this.inputIdPrefix + '-type');\n            this.$translationSettingsContainer = $('#' + this.inputIdPrefix + '-translation-settings');\n            this.$typeSettingsContainer = this.$fieldSettingsContainer.children('.mc-fieldtype-settings:first');\n            this.$widthInput = $('#' + this.inputIdPrefix + '-width');\n            this.$deleteBtn = this.$fieldSettingsContainer.children('a.delete:first');\n\n            if (isNew) {\n                this.setFieldType('craft\\\\fields\\\\PlainText');\n            } else {\n                this.selectedFieldType = this.$typeSelect.val();\n                this.initializedFieldTypeSettings[this.selectedFieldType] = this.$typeSettingsContainer.children();\n            }\n\n            if (!this.$handleInput.val()) {\n                new Craft.HandleGenerator(this.$nameInput, this.$handleInput);\n            }\n\n            this.addListener(this.$item, 'click', 'select');\n            this.addListener(this.$nameInput, 'input', 'updateNameLabel');\n            this.addListener(this.$handleInput, 'input', 'updateHandleLabel');\n            this.addListener(this.$requiredCheckbox, 'change', 'updateRequiredIcon');\n            this.addListener(this.$typeSelect, 'change', 'onTypeSelectChange');\n            this.addListener(this.$deleteBtn, 'click', 'confirmDelete');\n\n            let widthSlider = new Craft.SlidePicker(this.$widthInput.val() || 100, {\n                min: 25,\n                max: 100,\n                step: 25,\n                valueLabel: width => {\n                    return Craft.t('app', '{pct} width', {pct: `${width}%`});\n                },\n                onChange: width => {\n                    this.$widthInput.val(width);\n                }\n            });\n            widthSlider.$container.insertAfter($nameContainer);\n        },\n\n        select: function() {\n            if (this.blockType.selectedField === this) {\n                return;\n            }\n\n            if (this.blockType.selectedField) {\n                this.blockType.selectedField.deselect();\n            }\n\n            this.configurator.$fieldSettingsColumnContainer.removeClass('hidden').trigger('resize');\n            this.blockType.$fieldSettingsContainer.removeClass('hidden');\n            this.$fieldSettingsContainer.removeClass('hidden');\n            this.$item.addClass('sel');\n            this.blockType.selectedField = this;\n\n            if (!Garnish.isMobileBrowser()) {\n                setTimeout(() => {\n                    this.$nameInput.trigger('focus');\n                }, 100);\n            }\n        },\n\n        deselect: function() {\n            this.$item.removeClass('sel');\n            this.configurator.$fieldSettingsColumnContainer.addClass('hidden').trigger('resize');\n            this.blockType.$fieldSettingsContainer.addClass('hidden');\n            this.$fieldSettingsContainer.addClass('hidden');\n            this.blockType.selectedField = null;\n        },\n\n        updateNameLabel: function() {\n            var val = this.$nameInput.val();\n            this.$nameLabel.html((val ? Craft.escapeHtml(val) : '<em class=\"light\">' + Craft.t('app', '(blank)') + '</em>'));\n        },\n\n        updateHandleLabel: function() {\n            this.$handleLabel.html(Craft.escapeHtml(this.$handleInput.val()));\n        },\n\n        updateRequiredIcon: function() {\n            if (this.$requiredCheckbox.prop('checked')) {\n                this.$nameLabel.addClass('mci-required');\n            } else {\n                this.$nameLabel.removeClass('mci-required');\n            }\n        },\n\n        onTypeSelectChange: function() {\n            this.setFieldType(this.$typeSelect.val());\n        },\n\n        setFieldType: function(type) {\n            // Update the Translation Method settings\n            Craft.updateTranslationMethodSettings(type, this.$translationSettingsContainer);\n\n            if (this.selectedFieldType) {\n                this.initializedFieldTypeSettings[this.selectedFieldType].detach();\n            }\n\n            this.selectedFieldType = type;\n            this.$typeSelect.val(type);\n\n            // Show a spinner\n            this.$typeSettingsContainer.html('<div class=\"zilch\"><div class=\"spinner\"></div></div>');\n\n            this.getFieldTypeSettings(type).then(({fresh, $settings, headHtml, footHtml}) => {\n                this.$typeSettingsContainer.html('').append($settings);\n                if (fresh) {\n                    Craft.initUiElements($settings);\n                    Craft.appendHeadHtml(headHtml);\n                    Craft.appendFootHtml(footHtml);\n                }\n\n                // In case Firefox was sleeping on the job\n                this.$typeSettingsContainer.trigger('resize');\n            }).catch(() => {\n                this.$typeSettingsContainer.html('');\n            });\n        },\n\n        getFieldTypeSettings: function(type) {\n            return new Promise((resolve, reject) => {\n                if (typeof this.initializedFieldTypeSettings[type] !== 'undefined') {\n                    resolve({\n                        fresh: false,\n                        $settings: this.initializedFieldTypeSettings[type],\n                    });\n                    return;\n                }\n\n                this.configurator.getFieldTypeSettingsHtml(type).then(({settingsHtml, headHtml, footHtml}) => {\n                    settingsHtml = this.getParsedFieldTypeHtml(settingsHtml);\n                    headHtml = this.getParsedFieldTypeHtml(headHtml);\n                    footHtml = this.getParsedFieldTypeHtml(footHtml);\n                    let $settings = $('<div/>').html(settingsHtml);\n                    this.initializedFieldTypeSettings[type] = $settings;\n                    resolve({\n                        fresh: true,\n                        $settings: $settings,\n                        headHtml: headHtml,\n                        footHtml: footHtml,\n                    });\n                }).catch($.noop);\n            });\n        },\n\n        getParsedFieldTypeHtml: function(html) {\n            if (typeof html === 'string') {\n                html = html.replace(new RegExp(`__BLOCK_TYPE_${this.configurator.placeholderKey}__`, 'g'), this.blockType.id);\n                html = html.replace(new RegExp(`__FIELD_${this.configurator.placeholderKey}__`, 'g'), this.id);\n            } else {\n                html = '';\n            }\n\n            return html;\n        },\n\n        getDefaultFieldSettings: function() {\n            var $container = $('<div/>', {\n                'data-id': this.id\n            });\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Name'),\n                id: this.inputIdPrefix + '-name',\n                name: this.inputNamePrefix + '[name]'\n            }).appendTo($container);\n\n            Craft.ui.createTextField({\n                label: Craft.t('app', 'Handle'),\n                id: this.inputIdPrefix + '-handle',\n                'class': 'code',\n                name: this.inputNamePrefix + '[handle]',\n                maxlength: 64,\n                required: true\n            }).appendTo($container);\n\n            Craft.ui.createTextareaField({\n                label: Craft.t('app', 'Instructions'),\n                id: this.inputIdPrefix + '-instructions',\n                'class': 'nicetext',\n                name: this.inputNamePrefix + '[instructions]'\n            }).appendTo($container);\n\n            let $fieldset = $('<fieldset/>').appendTo($container);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'This field is required'),\n                id: this.inputIdPrefix + '-required',\n                name: this.inputNamePrefix + '[required]'\n            }).appendTo($fieldset);\n\n            Craft.ui.createCheckboxField({\n                label: Craft.t('app', 'Use this field’s values as search keywords'),\n                id: this.inputIdPrefix + '-searchable',\n                name: this.inputNamePrefix + '[searchable]',\n                checked: false,\n            }).appendTo($fieldset);\n\n            var fieldTypeOptions = [];\n\n            for (var i = 0; i < this.configurator.fieldTypeInfo.length; i++) {\n                fieldTypeOptions.push({\n                    value: this.configurator.fieldTypeInfo[i].type,\n                    label: this.configurator.fieldTypeInfo[i].name\n                });\n            }\n\n            Craft.ui.createSelectField({\n                label: Craft.t('app', 'Field Type'),\n                id: this.inputIdPrefix + '-type',\n                name: this.inputNamePrefix + '[type]',\n                options: fieldTypeOptions,\n                value: 'craft\\\\fields\\\\PlainText'\n            }).appendTo($container);\n\n            if (Craft.isMultiSite) {\n                var $translationSettingsContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-settings'\n                }).appendTo($container);\n\n                Craft.ui.createSelectField({\n                    label: Craft.t('app', 'Translation Method'),\n                    id: this.inputIdPrefix + '-translation-method',\n                    name: this.inputNamePrefix + '[translationMethod]',\n                    options: [],\n                    value: 'none',\n                    toggle: true,\n                    targetPrefix: this.inputIdPrefix + '-translation-method-'\n                }).appendTo($translationSettingsContainer);\n\n                var $translationKeyFormatContainer = $('<div/>', {\n                    id: this.inputIdPrefix + '-translation-method-custom',\n                    'class': 'hidden'\n                }).appendTo($translationSettingsContainer);\n\n                Craft.ui.createTextField({\n                    label: Craft.t('app', 'Translation Key Format'),\n                    id: this.inputIdPrefix + '-translation-key-format',\n                    name: this.inputNamePrefix + '[translationKeyFormat]'\n                }).appendTo($translationKeyFormatContainer);\n            }\n\n            $('<hr/>').appendTo($container);\n\n            $('<div/>', {\n                'class': 'mc-fieldtype-settings'\n            }).appendTo($container);\n\n            $('<input/>', {\n                type: 'hidden',\n                id: this.inputIdPrefix + '-width',\n                name: this.inputNamePrefix + '[width]',\n                value: '100',\n            }).appendTo($container);\n\n            $('<hr/>').appendTo($container);\n\n            $('<a/>', {\n                'class': 'error delete',\n                text: Craft.t('app', 'Delete')\n            }).appendTo($container);\n\n            return $container;\n        },\n\n        confirmDelete: function() {\n            if (confirm(Craft.t('app', 'Are you sure you want to delete this field?'))) {\n                this.selfDestruct();\n            }\n        },\n\n        selfDestruct: function() {\n            this.deselect();\n            this.$item.remove();\n            this.$fieldSettingsContainer.remove();\n\n            this.blockType.fields[this.id] = null;\n            delete this.blockType.fields[this.id];\n        }\n    });\n})(jQuery);\n"]}