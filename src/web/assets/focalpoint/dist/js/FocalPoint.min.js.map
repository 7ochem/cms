{"version":3,"sources":["focalpoint/src/js/FocalPoint.js"],"names":["FocalPoint","constructor","$target","$button","movable","visible","this","dragging","saving","shouldSave","lastX","lastY","debounceTimeout","Math","floor","random","focalId","hide","appendTo","$focal","find","data","initialPosition","split","focalPos","assetUid","isCentered","toggleFocal","addFocalMoveListeners","on","handleDragStart","bind","$","window","handleDragEnd","renderFocal","handleMove","destruct","off","ev","pageX","pageY","preventDefault","deltaX","deltaY","position","desiredLeft","currentPosition","left","outerWidth","desiredTop","top","outerHeight","width","containerHeight","height","actualLeft","min","max","containerWidth","actualTop","debouncedSave","clearTimeout","debounceTimer","storeFocalPosition","positionFocal","focal","join","parents","css","opacity","Craft","postActionRequest","renderButton","text","t","show"],"mappings":"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","file":"FocalPoint.min.js","sourcesContent":["\"use strict\";\nclass FocalPoint {\n    constructor($target, $button, movable) {\n        this.visible = false;\n        this.dragging = false;\n        this.saving = false;\n        this.shouldSave = false;\n        this.lastX = 0;\n        this.lastY = 0;\n        this.debounceTimeout = 1500;\n        this.focalId = 'focal-point-' + Math.floor(Math.random() * 99999);\n        this.$target = $target;\n        this.$focal = $('<div class=\"preview-focal-point\" id=\"' + this.focalId + '\"><div class=\"inner\"></div></div>').hide().appendTo(this.$target);\n        const initialPosition = this.$target.find('img').data('focal');\n        this.focalPos = initialPosition.split(';');\n        this.assetUid = this.$target.find('img').data('uid');\n        if (this.isCentered()) {\n            this.visible = false;\n        }\n        else {\n            this.visible = true;\n        }\n        this.movable = movable;\n        this.$button = $button;\n        if (this.movable) {\n            this.$button.on('click', () => {\n                this.toggleFocal();\n            });\n            this.addFocalMoveListeners();\n        }\n        else {\n            this.$focal.css({ cursor: 'auto' });\n        }\n        this.renderFocal();\n    }\n    addFocalMoveListeners() {\n        this.$focal.on('mousedown touchstart', this.handleDragStart.bind(this));\n        $(window).on('mouseup touchend', this.handleDragEnd.bind(this));\n        $(window).on('mousemove touchmove', this.handleMove.bind(this));\n    }\n    destruct() {\n        this.$focal.off('mousedown touchstart', this.handleDragStart.bind(this));\n        $(window).off('mouseup touchend', this.handleDragEnd.bind(this));\n        $(window).off('mousemove touchmove', this.handleMove.bind(this));\n    }\n    handleDragStart(ev) {\n        this.dragging = this.movable;\n        this.lastX = ev.pageX;\n        this.lastY = ev.pageY;\n    }\n    isCentered() {\n        return this.focalPos[0] == 0.5 && this.focalPos[1] == 0.5;\n    }\n    handleDragEnd() {\n        this.dragging = false;\n    }\n    handleMove(ev) {\n        ev.preventDefault();\n        if (!this.dragging || this.saving) {\n            return;\n        }\n        const deltaX = ev.pageX - this.lastX;\n        const deltaY = ev.pageY - this.lastY;\n        if (deltaY !== 0 || deltaX !== 0) {\n            this.shouldSave = true;\n        }\n        // Update last position\n        this.lastX = ev.pageX;\n        this.lastY = ev.pageY;\n        // Figure out where we want to drag the focal\n        const currentPosition = this.$focal.position();\n        // Make sure to account for the positioning offset\n        const desiredLeft = currentPosition.left + deltaX + this.$focal.outerWidth() / 2;\n        const desiredTop = currentPosition.top + deltaY + this.$focal.outerHeight() / 2;\n        // Make it fit the actual container\n        const containerWidth = this.$target.width();\n        const containerHeight = this.$target.height();\n        const actualLeft = Math.min(Math.max(0, desiredLeft), containerWidth);\n        const actualTop = Math.min(Math.max(0, desiredTop), containerHeight);\n        // convert to percentage, as that's going to be reliable after resizing, too\n        this.focalPos = [\n            1 / (containerWidth / actualLeft),\n            1 / (containerHeight / actualTop)\n        ];\n        this.debouncedSave();\n        this.positionFocal();\n    }\n    debouncedSave() {\n        if (this.saving) {\n            return;\n        }\n        clearTimeout(this.debounceTimer);\n        this.debounceTimer = setTimeout(() => this.storeFocalPosition(), this.debounceTimeout);\n    }\n    storeFocalPosition() {\n        this.saving = true;\n        this.renderButton();\n        let data = {\n            assetUid: this.assetUid,\n            focal: (this.visible ? this.focalPos : [0.5, 0.5]).join(';')\n        };\n        this.$button.parents('.buttons').css({ opacity: 1 });\n        Craft.postActionRequest('assets/update-focal-position', data, (() => {\n            this.saving = false;\n            this.shouldSave = false;\n            this.$button.parents('.buttons').css({ opacity: '' });\n            this.renderButton();\n        }));\n    }\n    toggleFocal() {\n        if (this.saving) {\n            return;\n        }\n        this.visible = !this.visible;\n        if (!this.isCentered()) {\n            this.shouldSave = true;\n        }\n        this.renderButton();\n        this.debouncedSave();\n        this.renderFocal();\n    }\n    renderButton() {\n        if (this.saving) {\n            this.$button.text(Craft.t('app', 'Saving...'));\n        }\n        else {\n            if (this.visible) {\n                this.$button.text(Craft.t('app', 'Disable focal point'));\n            }\n            else {\n                this.$button.text(Craft.t('app', 'Enable focal point'));\n            }\n        }\n    }\n    renderFocal() {\n        if (this.visible) {\n            this.$focal.show();\n            this.positionFocal();\n        }\n        else {\n            this.$focal.hide();\n        }\n        this.renderButton();\n    }\n    /**\n     * Position focal point correctly\n     * @protected\n     */\n    positionFocal() {\n        this.$focal.css({\n            left: (this.$target.width() * this.focalPos[0]) - this.$focal.outerWidth() / 2,\n            top: (this.$target.height() * this.focalPos[1]) - this.$focal.outerHeight() / 2\n        });\n    }\n}\n"]}