{"version":3,"sources":["focalpoint/src/js/FocalPoint.js"],"names":["FocalPoint","constructor","$target","$button","movable","visible","this","dragging","saving","shouldSave","lastX","lastY","debounceTimeout","Math","floor","random","focalId","hide","appendTo","$focal","find","data","initialPosition","split","focalPos","assetUid","isCentered","toggleFocal","addFocalMoveListeners","on","handleDragStart","bind","$","window","handleDragEnd","renderFocal","handleMove","destruct","off","debounceTimer","storeFocalPosition","ev","pageX","pageY","deltaX","deltaY","currentPosition","position","desiredLeft","left","outerWidth","desiredTop","top","outerHeight","width","height","actualLeft","min","max","containerWidth","actualTop","containerHeight","positionFocal","debouncedSave","clearTimeout","setTimeout","focal","join","parents","css","opacity","Craft","renderButton","t","text","show"],"mappings":"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","file":"FocalPoint.min.js","sourcesContent":["\"use strict\";\nclass FocalPoint {\n    constructor($target, $button, movable) {\n        this.visible = false;\n        this.dragging = false;\n        this.saving = false;\n        this.shouldSave = false;\n        this.lastX = 0;\n        this.lastY = 0;\n        this.debounceTimeout = 1500;\n        this.focalId = 'focal-point-' + Math.floor(Math.random() * 99999);\n        this.$target = $target;\n        this.$focal = $('<div class=\"preview-focal-point\" id=\"' + this.focalId + '\"><div class=\"inner\"></div></div>').hide().appendTo(this.$target);\n        const initialPosition = this.$target.find('img').data('focal');\n        this.focalPos = initialPosition.split(';');\n        this.assetUid = this.$target.find('img').data('uid');\n        if (this.isCentered()) {\n            this.visible = false;\n        }\n        else {\n            this.visible = true;\n        }\n        this.movable = movable;\n        this.$button = $button;\n        if (this.movable) {\n            this.$button.on('click', () => {\n                this.toggleFocal();\n            });\n            this.addFocalMoveListeners();\n        }\n        else {\n            this.$focal.css({ cursor: 'auto' });\n        }\n        this.renderFocal();\n    }\n    addFocalMoveListeners() {\n        this.$focal.on('mousedown touchstart', this.handleDragStart.bind(this));\n        $(window).on('mouseup touchend', this.handleDragEnd.bind(this));\n        $(window).on('mousemove touchmove', this.handleMove.bind(this));\n    }\n    destruct() {\n        if (this.debounceTimer) {\n            this.storeFocalPosition();\n        }\n        this.$focal.off('mousedown touchstart', this.handleDragStart.bind(this));\n        $(window).off('mouseup touchend', this.handleDragEnd.bind(this));\n        $(window).off('mousemove touchmove', this.handleMove.bind(this));\n    }\n    handleDragStart(ev) {\n        this.dragging = this.movable;\n        this.lastX = ev.pageX;\n        this.lastY = ev.pageY;\n    }\n    isCentered() {\n        return this.focalPos[0] == 0.5 && this.focalPos[1] == 0.5;\n    }\n    handleDragEnd() {\n        this.dragging = false;\n    }\n    handleMove(ev) {\n        ev.preventDefault();\n        if (!this.dragging || this.saving) {\n            return;\n        }\n        const deltaX = ev.pageX - this.lastX;\n        const deltaY = ev.pageY - this.lastY;\n        if (deltaY !== 0 || deltaX !== 0) {\n            this.shouldSave = true;\n        }\n        // Update last position\n        this.lastX = ev.pageX;\n        this.lastY = ev.pageY;\n        // Figure out where we want to drag the focal\n        const currentPosition = this.$focal.position();\n        // Make sure to account for the positioning offset\n        const desiredLeft = currentPosition.left + deltaX + this.$focal.outerWidth() / 2;\n        const desiredTop = currentPosition.top + deltaY + this.$focal.outerHeight() / 2;\n        // Make it fit the actual container\n        const containerWidth = this.$target.width();\n        const containerHeight = this.$target.height();\n        const actualLeft = Math.min(Math.max(0, desiredLeft), containerWidth);\n        const actualTop = Math.min(Math.max(0, desiredTop), containerHeight);\n        // convert to percentage, as that's going to be reliable after resizing, too\n        this.focalPos = [\n            1 / (containerWidth / actualLeft),\n            1 / (containerHeight / actualTop)\n        ];\n        this.debouncedSave();\n        this.positionFocal();\n    }\n    debouncedSave() {\n        if (this.saving) {\n            return;\n        }\n        clearTimeout(this.debounceTimer);\n        this.debounceTimer = setTimeout(() => this.storeFocalPosition(), this.debounceTimeout);\n    }\n    storeFocalPosition() {\n        this.saving = true;\n        this.renderButton();\n        let data = {\n            assetUid: this.assetUid,\n            focal: (this.visible ? this.focalPos : [0.5, 0.5]).join(';')\n        };\n        this.$button.parents('.buttons').css({ opacity: 1 });\n        Craft.postActionRequest('assets/update-focal-position', data, (() => {\n            this.saving = false;\n            this.shouldSave = false;\n            this.$button.parents('.buttons').css({ opacity: '' });\n            this.renderButton();\n        }));\n    }\n    toggleFocal() {\n        if (this.saving) {\n            return;\n        }\n        this.visible = !this.visible;\n        if (!this.isCentered()) {\n            this.shouldSave = true;\n        }\n        this.renderButton();\n        this.debouncedSave();\n        this.renderFocal();\n    }\n    renderButton() {\n        if (this.saving) {\n            this.$button.text(Craft.t('app', 'Saving...'));\n        }\n        else {\n            if (this.visible) {\n                this.$button.text(Craft.t('app', 'Disable focal point'));\n            }\n            else {\n                this.$button.text(Craft.t('app', 'Enable focal point'));\n            }\n        }\n    }\n    renderFocal() {\n        if (this.visible) {\n            this.$focal.show();\n            this.positionFocal();\n        }\n        else {\n            this.$focal.hide();\n        }\n        this.renderButton();\n    }\n    /**\n     * Position focal point correctly\n     * @protected\n     */\n    positionFocal() {\n        this.$focal.css({\n            left: (this.$target.width() * this.focalPos[0]) - this.$focal.outerWidth() / 2,\n            top: (this.$target.height() * this.focalPos[1]) - this.$focal.outerHeight() / 2\n        });\n    }\n}\n"]}